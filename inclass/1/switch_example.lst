
switch_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800100  00800100  000009a6  2**0
                  ALLOC
  3 .stab         0000195c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001109  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000340d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_15>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 33       	cpi	r26, 0x37	; 55
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 b1 03 	call	0x762	; 0x762 <main>
  ac:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <spi_init>:
//******************************************************************************
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does no further device specific inits
//******************************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, no interrupts 
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  ba:	80 e5       	ldi	r24, 0x50	; 80
  bc:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	8e b9       	out	0x0e, r24	; 14
  c2:	08 95       	ret

000000c4 <__vector_15>:
}//spi_init

//interrupt service routine runs at each TCNT0 interrupt
ISR(TIMER0_COMP_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
#ifdef DEBOUNCE 
  static uint16_t state = 0;        //"state" holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 7)) | 0xE000;
  d6:	80 b3       	in	r24, 0x10	; 16
  d8:	20 91 02 01 	lds	r18, 0x0102
  dc:	30 91 03 01 	lds	r19, 0x0103
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	30 6e       	ori	r19, 0xE0	; 224
  e6:	08 2e       	mov	r0, r24
  e8:	00 0c       	add	r0, r0
  ea:	99 0b       	sbc	r25, r25
  ec:	88 27       	eor	r24, r24
  ee:	99 0f       	add	r25, r25
  f0:	88 1f       	adc	r24, r24
  f2:	99 27       	eor	r25, r25
  f4:	82 2b       	or	r24, r18
  f6:	93 2b       	or	r25, r19
  f8:	90 93 03 01 	sts	0x0103, r25
  fc:	80 93 02 01 	sts	0x0102, r24
  if (state == 0xF000) {switch_count++;}  //increment if pushed for 12 cycles 
 100:	81 15       	cp	r24, r1
 102:	90 4f       	sbci	r25, 0xF0	; 240
 104:	49 f4       	brne	.+18     	; 0x118 <__vector_15+0x54>
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	90 91 01 01 	lds	r25, 0x0101
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 01 01 	sts	0x0101, r25
 114:	80 93 00 01 	sts	0x0100, r24
      } 
      break;
    default: break;
  } //switch                  
#endif
} //ISR
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	81 11       	cpse	r24, r1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <send_lcd+0x8>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 134:	77 9b       	sbis	0x0e, 7	; 14
 136:	fe cf       	rjmp	.-4      	; 0x134 <send_lcd+0xa>
  SPDR = byte;                        //send payload
 138:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 13a:	77 9b       	sbis	0x0e, 7	; 14
 13c:	fe cf       	rjmp	.-4      	; 0x13a <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 13e:	80 91 62 00 	lds	r24, 0x0062
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 93 62 00 	sts	0x0062, r24
 148:	80 91 62 00 	lds	r24, 0x0062
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	80 93 62 00 	sts	0x0062, r24
 152:	08 95       	ret

00000154 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15|
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 154:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
 156:	c0 91 05 01 	lds	r28, 0x0105
 15a:	8c 0f       	add	r24, r28
 15c:	91 1d       	adc	r25, r1
 15e:	fc 01       	movw	r30, r24
 160:	60 81       	ld	r22, Z
 162:	61 11       	cpse	r22, r1
 164:	11 c0       	rjmp	.+34     	; 0x188 <refresh_lcd+0x34>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 04 01 	sts	0x0104, r24

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
 16c:	60 e2       	ldi	r22, 0x20	; 32
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	8c 0f       	add	r24, r28
 178:	80 93 05 01 	sts	0x0105, r24

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
 17c:	80 31       	cpi	r24, 0x10	; 16
 17e:	d1 f0       	breq	.+52     	; 0x1b4 <refresh_lcd+0x60>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	51 f0       	breq	.+20     	; 0x198 <refresh_lcd+0x44>
      _delay_us(40);
      line1_col1();
      null_flag=0;
      i=0;
  }
}//refresh_lcd
 184:	cf 91       	pop	r28
 186:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
 188:	80 91 04 01 	lds	r24, 0x0104
 18c:	81 11       	cpse	r24, r1
 18e:	ee cf       	rjmp	.-36     	; 0x16c <refresh_lcd+0x18>
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 196:	ee cf       	rjmp	.-36     	; 0x174 <refresh_lcd+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	85 ed       	ldi	r24, 0xD5	; 213
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <refresh_lcd+0x46>
 19e:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
 1a8:	10 92 04 01 	sts	0x0104, r1
      i=0;
 1ac:	10 92 05 01 	sts	0x0105, r1
  }
}//refresh_lcd
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret
 1b4:	f5 ed       	ldi	r31, 0xD5	; 213
 1b6:	fa 95       	dec	r31
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <refresh_lcd+0x62>
 1ba:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 1bc:	60 ec       	ldi	r22, 0xC0	; 192
 1be:	80 e0       	ldi	r24, 0x00	; 0
      _delay_us(40);
      line1_col1();
      null_flag=0;
      i=0;
  }
}//refresh_lcd
 1c0:	cf 91       	pop	r28
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 1c2:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

000001c6 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F
//map to 0x00 - 0x07) to display a custom character just refer to it's
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	1f 92       	push	r1
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 1da:	66 0f       	add	r22, r22
 1dc:	66 0f       	add	r22, r22
 1de:	66 0f       	add	r22, r22
 1e0:	60 5c       	subi	r22, 0xC0	; 192
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	99 83       	std	Y+1, r25	; 0x01
 1e6:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 1ea:	85 ed       	ldi	r24, 0xD5	; 213
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <set_custom_character+0x26>
 1f0:	00 00       	nop
 1f2:	e1 2e       	mov	r14, r17
 1f4:	99 81       	ldd	r25, Y+1	; 0x01
 1f6:	f9 2e       	mov	r15, r25
 1f8:	87 01       	movw	r16, r14
 1fa:	08 5f       	subi	r16, 0xF8	; 248
 1fc:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 1fe:	f7 01       	movw	r30, r14
 200:	61 91       	ld	r22, Z+
 202:	7f 01       	movw	r14, r30
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 20a:	f5 ed       	ldi	r31, 0xD5	; 213
 20c:	fa 95       	dec	r31
 20e:	f1 f7       	brne	.-4      	; 0x20c <set_custom_character+0x46>
 210:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 212:	e0 16       	cp	r14, r16
 214:	f1 06       	cpc	r15, r17
 216:	99 f7       	brne	.-26     	; 0x1fe <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 228:	90 e4       	ldi	r25, 0x40	; 64
 22a:	89 9f       	mul	r24, r25
 22c:	60 0d       	add	r22, r0
 22e:	11 24       	eor	r1, r1
 230:	60 5c       	subi	r22, 0xC0	; 192
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

00000238 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 238:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 23a:	88 23       	and	r24, r24
 23c:	b9 f1       	breq	.+110    	; 0x2ac <uint2lcd+0x74>
 23e:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 240:	84 36       	cpi	r24, 0x64	; 100
 242:	98 f4       	brcc	.+38     	; 0x26a <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 244:	8a 30       	cpi	r24, 0x0A	; 10
 246:	d8 f4       	brcc	.+54     	; 0x27e <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 248:	8d ec       	ldi	r24, 0xCD	; 205
 24a:	c8 9f       	mul	r28, r24
 24c:	81 2d       	mov	r24, r1
 24e:	11 24       	eor	r1, r1
 250:	86 95       	lsr	r24
 252:	86 95       	lsr	r24
 254:	86 95       	lsr	r24
 256:	6c 2f       	mov	r22, r28
 258:	2a e0       	ldi	r18, 0x0A	; 10
 25a:	82 9f       	mul	r24, r18
 25c:	60 19       	sub	r22, r0
 25e:	11 24       	eor	r1, r1
 260:	60 5d       	subi	r22, 0xD0	; 208
 262:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 264:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 266:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 26a:	69 e2       	ldi	r22, 0x29	; 41
 26c:	86 9f       	mul	r24, r22
 26e:	61 2d       	mov	r22, r1
 270:	11 24       	eor	r1, r1
 272:	62 95       	swap	r22
 274:	6f 70       	andi	r22, 0x0F	; 15
 276:	60 5d       	subi	r22, 0xD0	; 208
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 27e:	89 e2       	ldi	r24, 0x29	; 41
 280:	c8 9f       	mul	r28, r24
 282:	81 2d       	mov	r24, r1
 284:	11 24       	eor	r1, r1
 286:	82 95       	swap	r24
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	9c 2f       	mov	r25, r28
 28c:	24 e6       	ldi	r18, 0x64	; 100
 28e:	82 9f       	mul	r24, r18
 290:	90 19       	sub	r25, r0
 292:	11 24       	eor	r1, r1
 294:	6d ec       	ldi	r22, 0xCD	; 205
 296:	96 9f       	mul	r25, r22
 298:	61 2d       	mov	r22, r1
 29a:	11 24       	eor	r1, r1
 29c:	66 95       	lsr	r22
 29e:	66 95       	lsr	r22
 2a0:	66 95       	lsr	r22
 2a2:	60 5d       	subi	r22, 0xD0	; 208
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 2aa:	ce cf       	rjmp	.-100    	; 0x248 <uint2lcd+0x10>
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 2ac:	60 e3       	ldi	r22, 0x30	; 48
 2ae:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 2b0:	cf 91       	pop	r28
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 2b2:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

000002b6 <int2lcd>:
//                          int2lcd
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
 2b6:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 2b8:	87 fd       	sbrc	r24, 7
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 2bc:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    else          {uint2lcd(number);                                            }
 2be:	0c 94 1c 01 	jmp	0x238	; 0x238 <uint2lcd>
 2c2:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 2c4:	6d e2       	ldi	r22, 0x2D	; 45
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 2cc:	85 ed       	ldi	r24, 0xD5	; 213
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <int2lcd+0x18>
 2d2:	00 00       	nop
 2d4:	8c 2f       	mov	r24, r28
 2d6:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 2d8:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 2da:	0c 94 1c 01 	jmp	0x238	; 0x238 <uint2lcd>

000002de <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 2de:	6e e0       	ldi	r22, 0x0E	; 14
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

000002e6 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 2e6:	6c e0       	ldi	r22, 0x0C	; 12
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

000002ee <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 2ee:	6e e1       	ldi	r22, 0x1E	; 30
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

000002f6 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 2f6:	68 e1       	ldi	r22, 0x18	; 24
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

000002fe <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2fe:	e2 e6       	ldi	r30, 0x62	; 98
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	88 60       	ori	r24, 0x08	; 8
 306:	80 83       	st	Z, r24
 308:	80 81       	ld	r24, Z
 30a:	87 7f       	andi	r24, 0xF7	; 247
 30c:	80 83       	st	Z, r24
 30e:	08 95       	ret

00000310 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 318:	8f e1       	ldi	r24, 0x1F	; 31
 31a:	9c e1       	ldi	r25, 0x1C	; 28
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <clear_display+0xc>
 320:	00 c0       	rjmp	.+0      	; 0x322 <clear_display+0x12>
 322:	00 00       	nop
 324:	08 95       	ret

00000326 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 32e:	8f e6       	ldi	r24, 0x6F	; 111
 330:	97 e1       	ldi	r25, 0x17	; 23
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <cursor_home+0xc>
 336:	00 c0       	rjmp	.+0      	; 0x338 <cursor_home+0x12>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 33c:	60 ec       	ldi	r22, 0xC0	; 192
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

00000344 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 344:	60 e8       	ldi	r22, 0x80	; 128
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

0000034c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
 34c:	cf 93       	push	r28
 34e:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' ');
 350:	60 e2       	ldi	r22, 0x20	; 32
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 358:	85 ed       	ldi	r24, 0xD5	; 213
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <fill_spaces+0xe>
 35e:	00 00       	nop
 360:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 362:	b1 f7       	brne	.-20     	; 0x350 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <char2lcd>:
//                            char2lcd
//
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);}
 368:	68 2f       	mov	r22, r24
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0c 94 95 00 	jmp	0x12a	; 0x12a <send_lcd>

00000370 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	f8 01       	movw	r30, r16
 380:	e4 0f       	add	r30, r20
 382:	f5 1f       	adc	r31, r21
 384:	60 81       	ld	r22, Z
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 38c:	85 ed       	ldi	r24, 0xD5	; 213
 38e:	8a 95       	dec	r24
 390:	f1 f7       	brne	.-4      	; 0x38e <string2lcd+0x1e>
 392:	00 00       	nop
 394:	cf 5f       	subi	r28, 0xFF	; 255
 396:	4c 2f       	mov	r20, r28
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	f8 01       	movw	r30, r16
 39c:	01 90       	ld	r0, Z+
 39e:	00 20       	and	r0, r0
 3a0:	e9 f7       	brne	.-6      	; 0x39c <string2lcd+0x2c>
 3a2:	9f 01       	movw	r18, r30
 3a4:	20 1b       	sub	r18, r16
 3a6:	31 0b       	sbc	r19, r17
 3a8:	22 50       	subi	r18, 0x02	; 2
 3aa:	31 09       	sbc	r19, r1
 3ac:	24 17       	cp	r18, r20
 3ae:	35 07       	cpc	r19, r21
 3b0:	30 f7       	brcc	.-52     	; 0x37e <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }
}
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	99 ef       	ldi	r25, 0xF9	; 249
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_init+0x4>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_init+0xa>
 3c4:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 3c6:	88 e0       	ldi	r24, 0x08	; 8
 3c8:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times
 3cc:	60 e3       	ldi	r22, 0x30	; 48
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 3d4:	8f e5       	ldi	r24, 0x5F	; 95
 3d6:	9d e6       	ldi	r25, 0x6D	; 109
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_init+0x1e>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <lcd_init+0x24>
 3de:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 3e0:	60 e3       	ldi	r22, 0x30	; 48
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 3e8:	8f e5       	ldi	r24, 0x5F	; 95
 3ea:	9d e6       	ldi	r25, 0x6D	; 109
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_init+0x32>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_init+0x38>
 3f2:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 3f4:	60 e3       	ldi	r22, 0x30	; 48
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 3fc:	8f e5       	ldi	r24, 0x5F	; 95
 3fe:	9d e6       	ldi	r25, 0x6D	; 109
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <lcd_init+0x46>
 404:	00 c0       	rjmp	.+0      	; 0x406 <lcd_init+0x4c>
 406:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 408:	68 e3       	ldi	r22, 0x38	; 56
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 410:	8f e1       	ldi	r24, 0x1F	; 31
 412:	9e e4       	ldi	r25, 0x4E	; 78
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <lcd_init+0x5a>
 418:	00 c0       	rjmp	.+0      	; 0x41a <lcd_init+0x60>
 41a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 41c:	68 e0       	ldi	r22, 0x08	; 8
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 424:	8f e1       	ldi	r24, 0x1F	; 31
 426:	9e e4       	ldi	r25, 0x4E	; 78
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x6e>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x74>
 42e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 438:	8f e1       	ldi	r24, 0x1F	; 31
 43a:	9e e4       	ldi	r25, 0x4E	; 78
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <lcd_init+0x82>
 440:	00 c0       	rjmp	.+0      	; 0x442 <lcd_init+0x88>
 442:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 444:	66 e0       	ldi	r22, 0x06	; 6
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 44c:	8f e1       	ldi	r24, 0x1F	; 31
 44e:	9e e4       	ldi	r25, 0x4E	; 78
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <lcd_init+0x96>
 454:	00 c0       	rjmp	.+0      	; 0x456 <lcd_init+0x9c>
 456:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 458:	6c e0       	ldi	r22, 0x0C	; 12
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 460:	8f e1       	ldi	r24, 0x1F	; 31
 462:	9e e4       	ldi	r25, 0x4E	; 78
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <lcd_init+0xaa>
 468:	00 c0       	rjmp	.+0      	; 0x46a <lcd_init+0xb0>
 46a:	00 00       	nop
 46c:	08 95       	ret

0000046e <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 46e:	8f 92       	push	r8
 470:	9f 92       	push	r9
 472:	af 92       	push	r10
 474:	bf 92       	push	r11
 476:	cf 92       	push	r12
 478:	df 92       	push	r13
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	69 97       	sbiw	r28, 0x19	; 25
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	f4 2e       	mov	r15, r20
 498:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
 49a:	00 23       	and	r16, r16
 49c:	59 f0       	breq	.+22     	; 0x4b4 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 49e:	4b 01       	movw	r8, r22
 4a0:	5c 01       	movw	r10, r24
 4a2:	88 24       	eor	r8, r8
 4a4:	b7 fc       	sbrc	r11, 7
 4a6:	83 94       	inc	r8
 4a8:	99 24       	eor	r9, r9
 4aa:	aa 24       	eor	r10, r10
 4ac:	bb 24       	eor	r11, r11
 4ae:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 4b0:	97 fd       	sbrc	r25, 7
 4b2:	8f c0       	rjmp	.+286    	; 0x5d2 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point
      if (decpos){
 4b4:	11 23       	and	r17, r17
 4b6:	09 f4       	brne	.+2      	; 0x4ba <lcd_int32+0x4c>
 4b8:	84 c0       	rjmp	.+264    	; 0x5c2 <lcd_int32+0x154>
 4ba:	9e 01       	movw	r18, r28
 4bc:	2f 5f       	subi	r18, 0xFF	; 255
 4be:	3f 4f       	sbci	r19, 0xFF	; 255
 4c0:	69 01       	movw	r12, r18
 4c2:	59 01       	movw	r10, r18
 4c4:	88 24       	eor	r8, r8
 4c6:	8a 94       	dec	r8
 4c8:	81 0e       	add	r8, r17
 4ca:	91 2c       	mov	r9, r1
 4cc:	3f ef       	ldi	r19, 0xFF	; 255
 4ce:	83 1a       	sub	r8, r19
 4d0:	93 0a       	sbc	r9, r19
 4d2:	8c 0c       	add	r8, r12
 4d4:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 4d6:	2a e0       	ldi	r18, 0x0A	; 10
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divmodsi4>
 4e2:	e6 2f       	mov	r30, r22
 4e4:	2a 8b       	std	Y+18, r18	; 0x12
 4e6:	3b 8b       	std	Y+19, r19	; 0x13
 4e8:	4c 8b       	std	Y+20, r20	; 0x14
 4ea:	5d 8b       	std	Y+21, r21	; 0x15
 4ec:	6a 89       	ldd	r22, Y+18	; 0x12
 4ee:	7b 89       	ldd	r23, Y+19	; 0x13
 4f0:	8c 89       	ldd	r24, Y+20	; 0x14
 4f2:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 4f4:	20 e3       	ldi	r18, 0x30	; 48
 4f6:	2e 0f       	add	r18, r30
 4f8:	f5 01       	movw	r30, r10
 4fa:	21 93       	st	Z+, r18
 4fc:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
 4fe:	e8 15       	cp	r30, r8
 500:	f9 05       	cpc	r31, r9
 502:	49 f7       	brne	.-46     	; 0x4d6 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 504:	bb 24       	eor	r11, r11
 506:	b3 94       	inc	r11
 508:	b1 0e       	add	r11, r17
 50a:	f6 01       	movw	r30, r12
 50c:	e1 0f       	add	r30, r17
 50e:	f1 1d       	adc	r31, r1
 510:	2e e2       	ldi	r18, 0x2E	; 46
 512:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
 514:	2a e0       	ldi	r18, 0x0A	; 10
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divmodsi4>
 520:	e6 2f       	mov	r30, r22
 522:	2a 8b       	std	Y+18, r18	; 0x12
 524:	3b 8b       	std	Y+19, r19	; 0x13
 526:	4c 8b       	std	Y+20, r20	; 0x14
 528:	5d 8b       	std	Y+21, r21	; 0x15
 52a:	6e 8b       	std	Y+22, r22	; 0x16
 52c:	7f 8b       	std	Y+23, r23	; 0x17
 52e:	88 8f       	std	Y+24, r24	; 0x18
 530:	99 8f       	std	Y+25, r25	; 0x19
 532:	6a 89       	ldd	r22, Y+18	; 0x12
 534:	7b 89       	ldd	r23, Y+19	; 0x13
 536:	8c 89       	ldd	r24, Y+20	; 0x14
 538:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 53a:	11 e0       	ldi	r17, 0x01	; 1
 53c:	1b 0d       	add	r17, r11
 53e:	d6 01       	movw	r26, r12
 540:	ab 0d       	add	r26, r11
 542:	b1 1d       	adc	r27, r1
 544:	e0 5d       	subi	r30, 0xD0	; 208
 546:	ec 93       	st	X, r30
 548:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 54a:	61 15       	cp	r22, r1
 54c:	71 05       	cpc	r23, r1
 54e:	81 05       	cpc	r24, r1
 550:	91 05       	cpc	r25, r1
 552:	01 f7       	brne	.-64     	; 0x514 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 554:	ff 20       	and	r15, r15
 556:	61 f0       	breq	.+24     	; 0x570 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 558:	e1 10       	cpse	r14, r1
 55a:	39 c0       	rjmp	.+114    	; 0x5ce <lcd_int32+0x160>
 55c:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 55e:	1f 15       	cp	r17, r15
 560:	38 f4       	brcc	.+14     	; 0x570 <lcd_int32+0x102>
 562:	f6 01       	movw	r30, r12
 564:	e1 0f       	add	r30, r17
 566:	f1 1d       	adc	r31, r1
 568:	80 83       	st	Z, r24
 56a:	1f 5f       	subi	r17, 0xFF	; 255
 56c:	1f 11       	cpse	r17, r15
 56e:	f9 cf       	rjmp	.-14     	; 0x562 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 570:	00 23       	and	r16, r16
 572:	31 f0       	breq	.+12     	; 0x580 <lcd_int32+0x112>
 574:	f6 01       	movw	r30, r12
 576:	e1 0f       	add	r30, r17
 578:	f1 1d       	adc	r31, r1
 57a:	8d e2       	ldi	r24, 0x2D	; 45
 57c:	80 83       	st	Z, r24
 57e:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 580:	11 50       	subi	r17, 0x01	; 1
 582:	f6 01       	movw	r30, r12
 584:	e1 0f       	add	r30, r17
 586:	f1 1d       	adc	r31, r1
 588:	60 81       	ld	r22, Z
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 590:	35 ed       	ldi	r19, 0xD5	; 213
 592:	3a 95       	dec	r19
 594:	f1 f7       	brne	.-4      	; 0x592 <lcd_int32+0x124>
 596:	00 00       	nop
 598:	11 11       	cpse	r17, r1
 59a:	f2 cf       	rjmp	.-28     	; 0x580 <lcd_int32+0x112>

}
 59c:	69 96       	adiw	r28, 0x19	; 25
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	9f 90       	pop	r9
 5be:	8f 90       	pop	r8
 5c0:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 5c2:	b1 2c       	mov	r11, r1
 5c4:	9e 01       	movw	r18, r28
 5c6:	2f 5f       	subi	r18, 0xFF	; 255
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	69 01       	movw	r12, r18
 5cc:	a3 cf       	rjmp	.-186    	; 0x514 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 5ce:	80 e3       	ldi	r24, 0x30	; 48
 5d0:	c6 cf       	rjmp	.-116    	; 0x55e <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	69 cf       	rjmp	.-302    	; 0x4b4 <lcd_int32+0x46>

000005e2 <lcd_int16>:
 5e2:	5f 92       	push	r5
 5e4:	6f 92       	push	r6
 5e6:	7f 92       	push	r7
 5e8:	8f 92       	push	r8
 5ea:	9f 92       	push	r9
 5ec:	af 92       	push	r10
 5ee:	bf 92       	push	r11
 5f0:	cf 92       	push	r12
 5f2:	df 92       	push	r13
 5f4:	ef 92       	push	r14
 5f6:	ff 92       	push	r15
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	61 97       	sbiw	r28, 0x11	; 17
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	a6 2e       	mov	r10, r22
 612:	54 2e       	mov	r5, r20
 614:	62 2e       	mov	r6, r18
 616:	79 2e       	mov	r7, r25
 618:	77 1c       	adc	r7, r7
 61a:	77 24       	eor	r7, r7
 61c:	77 1c       	adc	r7, r7
 61e:	b7 2c       	mov	r11, r7
 620:	c7 2c       	mov	r12, r7
 622:	d1 2c       	mov	r13, r1
 624:	ee 27       	eor	r30, r30
 626:	ff 27       	eor	r31, r31
 628:	ec 19       	sub	r30, r12
 62a:	fd 09       	sbc	r31, r13
 62c:	8e 27       	eor	r24, r30
 62e:	9f 27       	eor	r25, r31
 630:	fc 01       	movw	r30, r24
 632:	ec 0d       	add	r30, r12
 634:	fd 1d       	adc	r31, r13
 636:	44 23       	and	r20, r20
 638:	09 f4       	brne	.+2      	; 0x63c <lcd_int16+0x5a>
 63a:	8e c0       	rjmp	.+284    	; 0x758 <lcd_int16+0x176>
 63c:	ce 01       	movw	r24, r28
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	7c 01       	movw	r14, r24
 642:	8c 01       	movw	r16, r24
 644:	88 24       	eor	r8, r8
 646:	8a 94       	dec	r8
 648:	84 0e       	add	r8, r20
 64a:	91 2c       	mov	r9, r1
 64c:	9f ef       	ldi	r25, 0xFF	; 255
 64e:	89 1a       	sub	r8, r25
 650:	99 0a       	sbc	r9, r25
 652:	8e 0c       	add	r8, r14
 654:	9f 1c       	adc	r9, r15
 656:	6a e0       	ldi	r22, 0x0A	; 10
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	cf 01       	movw	r24, r30
 65c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 660:	26 2f       	mov	r18, r22
 662:	e2 2f       	mov	r30, r18
 664:	f7 2f       	mov	r31, r23
 666:	80 5d       	subi	r24, 0xD0	; 208
 668:	d8 01       	movw	r26, r16
 66a:	8d 93       	st	X+, r24
 66c:	8d 01       	movw	r16, r26
 66e:	a8 15       	cp	r26, r8
 670:	b9 05       	cpc	r27, r9
 672:	89 f7       	brne	.-30     	; 0x656 <lcd_int16+0x74>
 674:	01 e0       	ldi	r16, 0x01	; 1
 676:	05 0d       	add	r16, r5
 678:	d7 01       	movw	r26, r14
 67a:	a5 0d       	add	r26, r5
 67c:	b1 1d       	adc	r27, r1
 67e:	8e e2       	ldi	r24, 0x2E	; 46
 680:	8c 93       	st	X, r24
 682:	6a e0       	ldi	r22, 0x0A	; 10
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	cf 01       	movw	r24, r30
 688:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 68c:	26 2f       	mov	r18, r22
 68e:	e2 2f       	mov	r30, r18
 690:	f7 2f       	mov	r31, r23
 692:	11 e0       	ldi	r17, 0x01	; 1
 694:	10 0f       	add	r17, r16
 696:	d7 01       	movw	r26, r14
 698:	a0 0f       	add	r26, r16
 69a:	b1 1d       	adc	r27, r1
 69c:	80 5d       	subi	r24, 0xD0	; 208
 69e:	8c 93       	st	X, r24
 6a0:	01 2f       	mov	r16, r17
 6a2:	30 97       	sbiw	r30, 0x00	; 0
 6a4:	71 f7       	brne	.-36     	; 0x682 <lcd_int16+0xa0>
 6a6:	61 10       	cpse	r6, r1
 6a8:	15 c0       	rjmp	.+42     	; 0x6d4 <lcd_int16+0xf2>
 6aa:	77 20       	and	r7, r7
 6ac:	39 f0       	breq	.+14     	; 0x6bc <lcd_int16+0xda>
 6ae:	11 e0       	ldi	r17, 0x01	; 1
 6b0:	10 0f       	add	r17, r16
 6b2:	f7 01       	movw	r30, r14
 6b4:	e0 0f       	add	r30, r16
 6b6:	f1 1d       	adc	r31, r1
 6b8:	8d e2       	ldi	r24, 0x2D	; 45
 6ba:	80 83       	st	Z, r24
 6bc:	aa 20       	and	r10, r10
 6be:	41 f1       	breq	.+80     	; 0x710 <lcd_int16+0x12e>
 6c0:	81 2f       	mov	r24, r17
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	2a 2d       	mov	r18, r10
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	82 17       	cp	r24, r18
 6ca:	93 07       	cpc	r25, r19
 6cc:	0c f5       	brge	.+66     	; 0x710 <lcd_int16+0x12e>
 6ce:	b1 2c       	mov	r11, r1
 6d0:	40 e2       	ldi	r20, 0x20	; 32
 6d2:	0c c0       	rjmp	.+24     	; 0x6ec <lcd_int16+0x10a>
 6d4:	aa 20       	and	r10, r10
 6d6:	a1 f0       	breq	.+40     	; 0x700 <lcd_int16+0x11e>
 6d8:	81 2f       	mov	r24, r17
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	2a 2d       	mov	r18, r10
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	2c 19       	sub	r18, r12
 6e2:	3d 09       	sbc	r19, r13
 6e4:	82 17       	cp	r24, r18
 6e6:	93 07       	cpc	r25, r19
 6e8:	5c f4       	brge	.+22     	; 0x700 <lcd_int16+0x11e>
 6ea:	40 e3       	ldi	r20, 0x30	; 48
 6ec:	1f 5f       	subi	r17, 0xFF	; 255
 6ee:	f7 01       	movw	r30, r14
 6f0:	e8 0f       	add	r30, r24
 6f2:	f9 1f       	adc	r31, r25
 6f4:	40 83       	st	Z, r20
 6f6:	81 2f       	mov	r24, r17
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	82 17       	cp	r24, r18
 6fc:	93 07       	cpc	r25, r19
 6fe:	b4 f3       	brlt	.-20     	; 0x6ec <lcd_int16+0x10a>
 700:	bb 20       	and	r11, r11
 702:	31 f0       	breq	.+12     	; 0x710 <lcd_int16+0x12e>
 704:	f7 01       	movw	r30, r14
 706:	e1 0f       	add	r30, r17
 708:	f1 1d       	adc	r31, r1
 70a:	8d e2       	ldi	r24, 0x2D	; 45
 70c:	80 83       	st	Z, r24
 70e:	1f 5f       	subi	r17, 0xFF	; 255
 710:	11 50       	subi	r17, 0x01	; 1
 712:	f7 01       	movw	r30, r14
 714:	e1 0f       	add	r30, r17
 716:	f1 1d       	adc	r31, r1
 718:	60 81       	ld	r22, Z
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	0e 94 95 00 	call	0x12a	; 0x12a <send_lcd>
 720:	95 ed       	ldi	r25, 0xD5	; 213
 722:	9a 95       	dec	r25
 724:	f1 f7       	brne	.-4      	; 0x722 <lcd_int16+0x140>
 726:	00 00       	nop
 728:	11 11       	cpse	r17, r1
 72a:	f2 cf       	rjmp	.-28     	; 0x710 <lcd_int16+0x12e>
 72c:	61 96       	adiw	r28, 0x11	; 17
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	df 90       	pop	r13
 746:	cf 90       	pop	r12
 748:	bf 90       	pop	r11
 74a:	af 90       	pop	r10
 74c:	9f 90       	pop	r9
 74e:	8f 90       	pop	r8
 750:	7f 90       	pop	r7
 752:	6f 90       	pop	r6
 754:	5f 90       	pop	r5
 756:	08 95       	ret
 758:	00 e0       	ldi	r16, 0x00	; 0
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	7c 01       	movw	r14, r24
 760:	90 cf       	rjmp	.-224    	; 0x682 <lcd_int16+0xa0>

00000762 <main>:
//******************************************************************************
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does no further device specific inits
//******************************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 762:	87 b3       	in	r24, 0x17	; 23
 764:	87 60       	ori	r24, 0x07	; 7
 766:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, no interrupts 
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
 768:	80 e5       	ldi	r24, 0x50	; 80
 76a:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	8e b9       	out	0x0e, r24	; 14
#endif
} //ISR

int main(void){
  spi_init();      //initalize SPI 
  lcd_init();      //initalize LCD 
 770:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_init>
  clear_display(); //manually clear LCD display 
 774:	0e 94 88 01 	call	0x310	; 0x310 <clear_display>
  cursor_off();    //keep LCD cursor off
 778:	0e 94 73 01 	call	0x2e6	; 0x2e6 <cursor_off>
 
  //Setup timer/counter TCNT0 to run in CTC mode
  TIMSK |= (1<<OCIE0);  //enable interrupts
 77c:	87 b7       	in	r24, 0x37	; 55
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<WGM01);  //CTC mode, no prescale yet
 782:	83 b7       	in	r24, 0x33	; 51
 784:	88 60       	ori	r24, 0x08	; 8
 786:	83 bf       	out	0x33, r24	; 51
//TCCR0 |= (1<<CS02)|(1<<CS01)|(1<<CS00); //prescale TCNT0 clock by 1024

//try some of these values with and without debouncing
//interrupt period = 62.5ns * (OCR0+1) * prescale
//  OCR0=0xFF; TCCR0 |= (1<<CS02)|(1<<CS01)|(1<<CS00); //switch sample period=32.7ms
 OCR0=0x3F; TCCR0 |= (1<<CS02)|(1<<CS00);           //switch sample period=1ms 
 788:	8f e3       	ldi	r24, 0x3F	; 63
 78a:	81 bf       	out	0x31, r24	; 49
 78c:	83 b7       	in	r24, 0x33	; 51
 78e:	85 60       	ori	r24, 0x05	; 5
 790:	83 bf       	out	0x33, r24	; 51
//    OCR0=0x01; TCCR0 |= (1<<CS00);                     //switch sample period=125ns

  sei(); //enable global interrupts
 792:	78 94       	sei
  while(1){   //main while loop to make LCD visible
    for(i=0;i<5;i++){_delay_ms(2);} //0.01 second wait
 794:	10 92 06 01 	sts	0x0106, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 798:	8f e3       	ldi	r24, 0x3F	; 63
 79a:	9f e1       	ldi	r25, 0x1F	; 31
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <main+0x3a>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0x40>
 7a2:	00 00       	nop
 7a4:	80 91 06 01 	lds	r24, 0x0106
 7a8:	8f 5f       	subi	r24, 0xFF	; 255
 7aa:	80 93 06 01 	sts	0x0106, r24
 7ae:	85 30       	cpi	r24, 0x05	; 5
 7b0:	98 f3       	brcs	.-26     	; 0x798 <main+0x36>
    itoa(switch_count, lcd_str, 10);
 7b2:	80 91 00 01 	lds	r24, 0x0100
 7b6:	90 91 01 01 	lds	r25, 0x0101
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7ba:	4a e0       	ldi	r20, 0x0A	; 10
 7bc:	67 e0       	ldi	r22, 0x07	; 7
 7be:	71 e0       	ldi	r23, 0x01	; 1
 7c0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__itoa_ncheck>
    string2lcd(lcd_str);
 7c4:	87 e0       	ldi	r24, 0x07	; 7
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 b8 01 	call	0x370	; 0x370 <string2lcd>
    cursor_home();
 7cc:	0e 94 93 01 	call	0x326	; 0x326 <cursor_home>
  } //while
 7d0:	e1 cf       	rjmp	.-62     	; 0x794 <main+0x32>

000007d2 <__divmodhi4>:
 7d2:	97 fb       	bst	r25, 7
 7d4:	07 2e       	mov	r0, r23
 7d6:	16 f4       	brtc	.+4      	; 0x7dc <__divmodhi4+0xa>
 7d8:	00 94       	com	r0
 7da:	07 d0       	rcall	.+14     	; 0x7ea <__divmodhi4_neg1>
 7dc:	77 fd       	sbrc	r23, 7
 7de:	09 d0       	rcall	.+18     	; 0x7f2 <__divmodhi4_neg2>
 7e0:	0e 94 1c 04 	call	0x838	; 0x838 <__udivmodhi4>
 7e4:	07 fc       	sbrc	r0, 7
 7e6:	05 d0       	rcall	.+10     	; 0x7f2 <__divmodhi4_neg2>
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__divmodhi4_exit>

000007ea <__divmodhi4_neg1>:
 7ea:	90 95       	com	r25
 7ec:	81 95       	neg	r24
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	08 95       	ret

000007f2 <__divmodhi4_neg2>:
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255

000007f8 <__divmodhi4_exit>:
 7f8:	08 95       	ret

000007fa <__divmodsi4>:
 7fa:	05 2e       	mov	r0, r21
 7fc:	97 fb       	bst	r25, 7
 7fe:	1e f4       	brtc	.+6      	; 0x806 <__divmodsi4+0xc>
 800:	00 94       	com	r0
 802:	0e 94 14 04 	call	0x828	; 0x828 <__negsi2>
 806:	57 fd       	sbrc	r21, 7
 808:	07 d0       	rcall	.+14     	; 0x818 <__divmodsi4_neg2>
 80a:	0e 94 30 04 	call	0x860	; 0x860 <__udivmodsi4>
 80e:	07 fc       	sbrc	r0, 7
 810:	03 d0       	rcall	.+6      	; 0x818 <__divmodsi4_neg2>
 812:	4e f4       	brtc	.+18     	; 0x826 <__divmodsi4_exit>
 814:	0c 94 14 04 	jmp	0x828	; 0x828 <__negsi2>

00000818 <__divmodsi4_neg2>:
 818:	50 95       	com	r21
 81a:	40 95       	com	r20
 81c:	30 95       	com	r19
 81e:	21 95       	neg	r18
 820:	3f 4f       	sbci	r19, 0xFF	; 255
 822:	4f 4f       	sbci	r20, 0xFF	; 255
 824:	5f 4f       	sbci	r21, 0xFF	; 255

00000826 <__divmodsi4_exit>:
 826:	08 95       	ret

00000828 <__negsi2>:
 828:	90 95       	com	r25
 82a:	80 95       	com	r24
 82c:	70 95       	com	r23
 82e:	61 95       	neg	r22
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	08 95       	ret

00000838 <__udivmodhi4>:
 838:	aa 1b       	sub	r26, r26
 83a:	bb 1b       	sub	r27, r27
 83c:	51 e1       	ldi	r21, 0x11	; 17
 83e:	07 c0       	rjmp	.+14     	; 0x84e <__udivmodhi4_ep>

00000840 <__udivmodhi4_loop>:
 840:	aa 1f       	adc	r26, r26
 842:	bb 1f       	adc	r27, r27
 844:	a6 17       	cp	r26, r22
 846:	b7 07       	cpc	r27, r23
 848:	10 f0       	brcs	.+4      	; 0x84e <__udivmodhi4_ep>
 84a:	a6 1b       	sub	r26, r22
 84c:	b7 0b       	sbc	r27, r23

0000084e <__udivmodhi4_ep>:
 84e:	88 1f       	adc	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	5a 95       	dec	r21
 854:	a9 f7       	brne	.-22     	; 0x840 <__udivmodhi4_loop>
 856:	80 95       	com	r24
 858:	90 95       	com	r25
 85a:	bc 01       	movw	r22, r24
 85c:	cd 01       	movw	r24, r26
 85e:	08 95       	ret

00000860 <__udivmodsi4>:
 860:	a1 e2       	ldi	r26, 0x21	; 33
 862:	1a 2e       	mov	r1, r26
 864:	aa 1b       	sub	r26, r26
 866:	bb 1b       	sub	r27, r27
 868:	fd 01       	movw	r30, r26
 86a:	0d c0       	rjmp	.+26     	; 0x886 <__udivmodsi4_ep>

0000086c <__udivmodsi4_loop>:
 86c:	aa 1f       	adc	r26, r26
 86e:	bb 1f       	adc	r27, r27
 870:	ee 1f       	adc	r30, r30
 872:	ff 1f       	adc	r31, r31
 874:	a2 17       	cp	r26, r18
 876:	b3 07       	cpc	r27, r19
 878:	e4 07       	cpc	r30, r20
 87a:	f5 07       	cpc	r31, r21
 87c:	20 f0       	brcs	.+8      	; 0x886 <__udivmodsi4_ep>
 87e:	a2 1b       	sub	r26, r18
 880:	b3 0b       	sbc	r27, r19
 882:	e4 0b       	sbc	r30, r20
 884:	f5 0b       	sbc	r31, r21

00000886 <__udivmodsi4_ep>:
 886:	66 1f       	adc	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	1a 94       	dec	r1
 890:	69 f7       	brne	.-38     	; 0x86c <__udivmodsi4_loop>
 892:	60 95       	com	r22
 894:	70 95       	com	r23
 896:	80 95       	com	r24
 898:	90 95       	com	r25
 89a:	9b 01       	movw	r18, r22
 89c:	ac 01       	movw	r20, r24
 89e:	bd 01       	movw	r22, r26
 8a0:	cf 01       	movw	r24, r30
 8a2:	08 95       	ret

000008a4 <__itoa_ncheck>:
 8a4:	bb 27       	eor	r27, r27
 8a6:	4a 30       	cpi	r20, 0x0A	; 10
 8a8:	31 f4       	brne	.+12     	; 0x8b6 <__itoa_ncheck+0x12>
 8aa:	99 23       	and	r25, r25
 8ac:	22 f4       	brpl	.+8      	; 0x8b6 <__itoa_ncheck+0x12>
 8ae:	bd e2       	ldi	r27, 0x2D	; 45
 8b0:	90 95       	com	r25
 8b2:	81 95       	neg	r24
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__utoa_common>

000008ba <__utoa_ncheck>:
 8ba:	bb 27       	eor	r27, r27

000008bc <__utoa_common>:
 8bc:	fb 01       	movw	r30, r22
 8be:	55 27       	eor	r21, r21
 8c0:	aa 27       	eor	r26, r26
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	aa 1f       	adc	r26, r26
 8c8:	a4 17       	cp	r26, r20
 8ca:	10 f0       	brcs	.+4      	; 0x8d0 <__utoa_common+0x14>
 8cc:	a4 1b       	sub	r26, r20
 8ce:	83 95       	inc	r24
 8d0:	50 51       	subi	r21, 0x10	; 16
 8d2:	b9 f7       	brne	.-18     	; 0x8c2 <__utoa_common+0x6>
 8d4:	a0 5d       	subi	r26, 0xD0	; 208
 8d6:	aa 33       	cpi	r26, 0x3A	; 58
 8d8:	08 f0       	brcs	.+2      	; 0x8dc <__utoa_common+0x20>
 8da:	a9 5d       	subi	r26, 0xD9	; 217
 8dc:	a1 93       	st	Z+, r26
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	79 f7       	brne	.-34     	; 0x8c0 <__utoa_common+0x4>
 8e2:	b1 11       	cpse	r27, r1
 8e4:	b1 93       	st	Z+, r27
 8e6:	11 92       	st	Z+, r1
 8e8:	cb 01       	movw	r24, r22
 8ea:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <strrev>

000008ee <strrev>:
 8ee:	dc 01       	movw	r26, r24
 8f0:	fc 01       	movw	r30, r24
 8f2:	67 2f       	mov	r22, r23
 8f4:	71 91       	ld	r23, Z+
 8f6:	77 23       	and	r23, r23
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <strrev+0x4>
 8fa:	32 97       	sbiw	r30, 0x02	; 2
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <strrev+0x18>
 8fe:	7c 91       	ld	r23, X
 900:	6d 93       	st	X+, r22
 902:	70 83       	st	Z, r23
 904:	62 91       	ld	r22, -Z
 906:	ae 17       	cp	r26, r30
 908:	bf 07       	cpc	r27, r31
 90a:	c8 f3       	brcs	.-14     	; 0x8fe <strrev+0x10>
 90c:	08 95       	ret

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
