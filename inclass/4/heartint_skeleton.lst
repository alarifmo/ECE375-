
heartint_skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000588  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c0d  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_29>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  b6:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_29>:
//the array and make the control easier.  Values from 0x0100 thru 0xEF00 work 
//well for setting the brightness level.

uint16_t brightness[10] = { 0x0100, 0xA100,0xB100,0xC1,0xD100,0xE100,0x0F00,0x0A00,0x0B00,0x0C00                                                } ;

ISR(TIMER3_OVF_vect                      ) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1



}

}
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <main>:

int main() {

  DDRB    =0x10;                             //set port B bit five to output
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	87 bb       	out	0x17, r24	; 23

//setup timer counter 1 as the pwm source

  TCCR1A |=     (0<<WGM10) |(1<<WGM11)|(1<<COM1C0)|(1<<COM1C1);                        //fast pwm, set on match, clear@bottom, 
  d6:	8f b5       	in	r24, 0x2f	; 47
  d8:	8e 60       	ori	r24, 0x0E	; 14
  da:	8f bd       	out	0x2f, r24	; 47
                                        //(inverting mode) ICR1 holds TOP

  TCCR1B |=    (0<<CS10)|(0<<CS11)|(0<<CS12);                         //use ICR1 as source for TOP, use clk/1
  dc:	8e b5       	in	r24, 0x2e	; 46
  de:	8e bd       	out	0x2e, r24	; 46

  TCCR1C  =    (0<<FOC1A)|(0<<FOC1A)|(0<<FOC1A);                         //no forced compare 
  e0:	10 92 7a 00 	sts	0x007A, r1

  ICR1    =       0xF000;                      //clear at 0xF000                               
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 ef       	ldi	r25, 0xF0	; 240
  e8:	97 bd       	out	0x27, r25	; 39
  ea:	86 bd       	out	0x26, r24	; 38

  
//setup timer counter 3 as the interrupt source, 30 interrupts/sec
// (16,000,000)/(8 * 2^16) = 30 cycles/sec

  TCCR3A =     (0<WGM30)|(0<<WGM31)|(0<<COM3C0)|(0<<COM3C1);                         //normal mode
  ec:	10 92 8b 00 	sts	0x008B, r1

  TCCR3B =      (0<<CS30)|(1<<CS31)|(0<<CS32);                        //use clk/8  (15hz)  
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 8a 00 	sts	0x008A, r24

  TCCR3C =      (0<<FOC3A)|(0<<FOC3A)|(0<<FOC3A);            //no forced compare 
  f6:	10 92 8c 00 	sts	0x008C, r1

  ETIMSK =    0xFF;                          //enable timer 3 interrupt on TOV
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	80 93 7d 00 	sts	0x007D, r24

  sei();                                //set GIE to enable interrupts
 100:	78 94       	sei
  while(1) { } //do forever
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0x30>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
