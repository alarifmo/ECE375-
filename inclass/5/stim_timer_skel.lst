
stim_timer_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000ace  00000b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  0080017a  0080017a  00000bdc  2**0
                  ALLOC
  3 .stab         00001bc0  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e0  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003890  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 37       	cpi	r26, 0x7A	; 122
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e7       	ldi	r26, 0x7A	; 122
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 3a       	cpi	r26, 0xAB	; 171
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 90 03 	call	0x720	; 0x720 <main>
  c6:	0c 94 65 05 	jmp	0xaca	; 0xaca <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//******************************************************************************
//                            spi_init                               
//Initalizes the SPI port to allow LCD access.
//******************************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, no interrupts 
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8e b9       	out	0x0e, r24	; 14
  dc:	08 95       	ret

000000de <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	81 11       	cpse	r24, r1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <send_lcd+0x8>
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <send_lcd+0xa>
  SPDR = byte;                        //send payload
  ec:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
  f2:	80 91 62 00 	lds	r24, 0x0062
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 93 62 00 	sts	0x0062, r24
  fc:	80 91 62 00 	lds	r24, 0x0062
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	80 93 62 00 	sts	0x0062, r24
 106:	08 95       	ret

00000108 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 108:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 10a:	c0 91 7a 01 	lds	r28, 0x017A
 10e:	8c 0f       	add	r24, r28
 110:	91 1d       	adc	r25, r1
 112:	fc 01       	movw	r30, r24
 114:	60 81       	ld	r22, Z
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 i++;   //increment to next character
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	8c 0f       	add	r24, r28
 120:	80 93 7a 01 	sts	0x017A, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 124:	80 31       	cpi	r24, 0x10	; 16
 126:	a1 f0       	breq	.+40     	; 0x150 <refresh_lcd+0x48>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 128:	80 32       	cpi	r24, 0x20	; 32
 12a:	11 f0       	breq	.+4      	; 0x130 <refresh_lcd+0x28>
}//refresh_lcd
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	e5 ed       	ldi	r30, 0xD5	; 213
 132:	ea 95       	dec	r30
 134:	f1 f7       	brne	.-4      	; 0x132 <refresh_lcd+0x2a>
 136:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 138:	60 e8       	ldi	r22, 0x80	; 128
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 140:	f5 ed       	ldi	r31, 0xD5	; 213
 142:	fa 95       	dec	r31
 144:	f1 f7       	brne	.-4      	; 0x142 <refresh_lcd+0x3a>
 146:	00 00       	nop
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 148:	10 92 7a 01 	sts	0x017A, r1
}//refresh_lcd
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret
 150:	f5 ed       	ldi	r31, 0xD5	; 213
 152:	fa 95       	dec	r31
 154:	f1 f7       	brne	.-4      	; 0x152 <refresh_lcd+0x4a>
 156:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 158:	60 ec       	ldi	r22, 0xC0	; 192
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 160:	85 ed       	ldi	r24, 0xD5	; 213
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <refresh_lcd+0x5a>
 166:	00 00       	nop
 168:	80 91 7a 01 	lds	r24, 0x017A
 16c:	dd cf       	rjmp	.-70     	; 0x128 <refresh_lcd+0x20>

0000016e <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	1f 92       	push	r1
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 182:	66 0f       	add	r22, r22
 184:	66 0f       	add	r22, r22
 186:	66 0f       	add	r22, r22
 188:	60 5c       	subi	r22, 0xC0	; 192
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	99 83       	std	Y+1, r25	; 0x01
 18e:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 192:	85 ed       	ldi	r24, 0xD5	; 213
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <set_custom_character+0x26>
 198:	00 00       	nop
 19a:	e1 2e       	mov	r14, r17
 19c:	99 81       	ldd	r25, Y+1	; 0x01
 19e:	f9 2e       	mov	r15, r25
 1a0:	87 01       	movw	r16, r14
 1a2:	08 5f       	subi	r16, 0xF8	; 248
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 1a6:	f7 01       	movw	r30, r14
 1a8:	61 91       	ld	r22, Z+
 1aa:	7f 01       	movw	r14, r30
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 1b2:	f5 ed       	ldi	r31, 0xD5	; 213
 1b4:	fa 95       	dec	r31
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <set_custom_character+0x46>
 1b8:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 1ba:	e0 16       	cp	r14, r16
 1bc:	f1 06       	cpc	r15, r17
 1be:	99 f7       	brne	.-26     	; 0x1a6 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 1d0:	90 e4       	ldi	r25, 0x40	; 64
 1d2:	89 9f       	mul	r24, r25
 1d4:	60 0d       	add	r22, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	60 5c       	subi	r22, 0xC0	; 192
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

000001e0 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 1e0:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 1e2:	88 23       	and	r24, r24
 1e4:	b9 f1       	breq	.+110    	; 0x254 <uint2lcd+0x74>
 1e6:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 1e8:	84 36       	cpi	r24, 0x64	; 100
 1ea:	98 f4       	brcc	.+38     	; 0x212 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 1ec:	8a 30       	cpi	r24, 0x0A	; 10
 1ee:	d8 f4       	brcc	.+54     	; 0x226 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 1f0:	8d ec       	ldi	r24, 0xCD	; 205
 1f2:	c8 9f       	mul	r28, r24
 1f4:	81 2d       	mov	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	6c 2f       	mov	r22, r28
 200:	2a e0       	ldi	r18, 0x0A	; 10
 202:	82 9f       	mul	r24, r18
 204:	60 19       	sub	r22, r0
 206:	11 24       	eor	r1, r1
 208:	60 5d       	subi	r22, 0xD0	; 208
 20a:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 20c:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 20e:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 212:	69 e2       	ldi	r22, 0x29	; 41
 214:	86 9f       	mul	r24, r22
 216:	61 2d       	mov	r22, r1
 218:	11 24       	eor	r1, r1
 21a:	62 95       	swap	r22
 21c:	6f 70       	andi	r22, 0x0F	; 15
 21e:	60 5d       	subi	r22, 0xD0	; 208
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 226:	89 e2       	ldi	r24, 0x29	; 41
 228:	c8 9f       	mul	r28, r24
 22a:	81 2d       	mov	r24, r1
 22c:	11 24       	eor	r1, r1
 22e:	82 95       	swap	r24
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	9c 2f       	mov	r25, r28
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	82 9f       	mul	r24, r18
 238:	90 19       	sub	r25, r0
 23a:	11 24       	eor	r1, r1
 23c:	6d ec       	ldi	r22, 0xCD	; 205
 23e:	96 9f       	mul	r25, r22
 240:	61 2d       	mov	r22, r1
 242:	11 24       	eor	r1, r1
 244:	66 95       	lsr	r22
 246:	66 95       	lsr	r22
 248:	66 95       	lsr	r22
 24a:	60 5d       	subi	r22, 0xD0	; 208
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 252:	ce cf       	rjmp	.-100    	; 0x1f0 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 254:	60 e3       	ldi	r22, 0x30	; 48
 256:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 258:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 25a:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

0000025e <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 25e:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 260:	87 fd       	sbrc	r24, 7
 262:	03 c0       	rjmp	.+6      	; 0x26a <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 264:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 266:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <uint2lcd>
 26a:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 26c:	6d e2       	ldi	r22, 0x2D	; 45
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 274:	85 ed       	ldi	r24, 0xD5	; 213
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <int2lcd+0x18>
 27a:	00 00       	nop
 27c:	8c 2f       	mov	r24, r28
 27e:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 280:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 282:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <uint2lcd>

00000286 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 286:	6e e0       	ldi	r22, 0x0E	; 14
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

0000028e <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 28e:	6c e0       	ldi	r22, 0x0C	; 12
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

00000296 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 296:	6e e1       	ldi	r22, 0x1E	; 30
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

0000029e <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 29e:	68 e1       	ldi	r22, 0x18	; 24
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

000002a6 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2a6:	e2 e6       	ldi	r30, 0x62	; 98
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	80 83       	st	Z, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	87 7f       	andi	r24, 0xF7	; 247
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret

000002b8 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	9c e1       	ldi	r25, 0x1C	; 28
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <clear_display+0xc>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <clear_display+0x12>
 2ca:	00 00       	nop
 2cc:	08 95       	ret

000002ce <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 2d6:	8f e6       	ldi	r24, 0x6F	; 111
 2d8:	97 e1       	ldi	r25, 0x17	; 23
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <cursor_home+0xc>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <cursor_home+0x12>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 2e4:	60 ec       	ldi	r22, 0xC0	; 192
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 2ec:	85 ed       	ldi	r24, 0xD5	; 213
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <line2_col1+0xa>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 2f6:	60 e8       	ldi	r22, 0x80	; 128
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 2fe:	85 ed       	ldi	r24, 0xD5	; 213
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <line1_col1+0xa>
 304:	00 00       	nop
 306:	08 95       	ret

00000308 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 308:	cf 93       	push	r28
 30a:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 30c:	60 e2       	ldi	r22, 0x20	; 32
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 314:	85 ed       	ldi	r24, 0xD5	; 213
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <fill_spaces+0xe>
 31a:	00 00       	nop
 31c:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 31e:	b1 f7       	brne	.-20     	; 0x30c <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 324:	68 2f       	mov	r22, r24
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0c 94 6f 00 	jmp	0xde	; 0xde <send_lcd>

0000032c <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	f8 01       	movw	r30, r16
 33c:	e4 0f       	add	r30, r20
 33e:	f5 1f       	adc	r31, r21
 340:	60 81       	ld	r22, Z
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 348:	85 ed       	ldi	r24, 0xD5	; 213
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <string2lcd+0x1e>
 34e:	00 00       	nop
 350:	cf 5f       	subi	r28, 0xFF	; 255
 352:	4c 2f       	mov	r20, r28
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	f8 01       	movw	r30, r16
 358:	01 90       	ld	r0, Z+
 35a:	00 20       	and	r0, r0
 35c:	e9 f7       	brne	.-6      	; 0x358 <string2lcd+0x2c>
 35e:	9f 01       	movw	r18, r30
 360:	20 1b       	sub	r18, r16
 362:	31 0b       	sbc	r19, r17
 364:	22 50       	subi	r18, 0x02	; 2
 366:	31 09       	sbc	r19, r1
 368:	24 17       	cp	r18, r20
 36a:	35 07       	cpc	r19, r21
 36c:	30 f7       	brcc	.-52     	; 0x33a <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	99 ef       	ldi	r25, 0xF9	; 249
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_init+0x4>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <lcd_init+0xa>
 380:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 382:	88 e0       	ldi	r24, 0x08	; 8
 384:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 388:	60 e3       	ldi	r22, 0x30	; 48
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 390:	8f e5       	ldi	r24, 0x5F	; 95
 392:	9d e6       	ldi	r25, 0x6D	; 109
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <lcd_init+0x1e>
 398:	00 c0       	rjmp	.+0      	; 0x39a <lcd_init+0x24>
 39a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 39c:	60 e3       	ldi	r22, 0x30	; 48
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 3a4:	8f e5       	ldi	r24, 0x5F	; 95
 3a6:	9d e6       	ldi	r25, 0x6D	; 109
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x32>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_init+0x38>
 3ae:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 3b0:	60 e3       	ldi	r22, 0x30	; 48
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 3b8:	8f e5       	ldi	r24, 0x5F	; 95
 3ba:	9d e6       	ldi	r25, 0x6D	; 109
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_init+0x46>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_init+0x4c>
 3c2:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 3c4:	68 e3       	ldi	r22, 0x38	; 56
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 3cc:	8f e1       	ldi	r24, 0x1F	; 31
 3ce:	9e e4       	ldi	r25, 0x4E	; 78
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_init+0x5a>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <lcd_init+0x60>
 3d6:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 3d8:	68 e0       	ldi	r22, 0x08	; 8
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 3e0:	8f e1       	ldi	r24, 0x1F	; 31
 3e2:	9e e4       	ldi	r25, 0x4E	; 78
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x6e>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <lcd_init+0x74>
 3ea:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 3f4:	8f e1       	ldi	r24, 0x1F	; 31
 3f6:	9e e4       	ldi	r25, 0x4E	; 78
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_init+0x82>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <lcd_init+0x88>
 3fe:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 400:	66 e0       	ldi	r22, 0x06	; 6
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 408:	8f e1       	ldi	r24, 0x1F	; 31
 40a:	9e e4       	ldi	r25, 0x4E	; 78
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_init+0x96>
 410:	00 c0       	rjmp	.+0      	; 0x412 <lcd_init+0x9c>
 412:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 414:	6c e0       	ldi	r22, 0x0C	; 12
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 41c:	8f e1       	ldi	r24, 0x1F	; 31
 41e:	9e e4       	ldi	r25, 0x4E	; 78
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <lcd_init+0xaa>
 424:	00 c0       	rjmp	.+0      	; 0x426 <lcd_init+0xb0>
 426:	00 00       	nop
 428:	08 95       	ret

0000042a <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 42a:	8f 92       	push	r8
 42c:	9f 92       	push	r9
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	cf 92       	push	r12
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	69 97       	sbiw	r28, 0x19	; 25
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	f4 2e       	mov	r15, r20
 454:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 456:	00 23       	and	r16, r16
 458:	59 f0       	breq	.+22     	; 0x470 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 45a:	4b 01       	movw	r8, r22
 45c:	5c 01       	movw	r10, r24
 45e:	88 24       	eor	r8, r8
 460:	b7 fc       	sbrc	r11, 7
 462:	83 94       	inc	r8
 464:	99 24       	eor	r9, r9
 466:	aa 24       	eor	r10, r10
 468:	bb 24       	eor	r11, r11
 46a:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 46c:	97 fd       	sbrc	r25, 7
 46e:	8f c0       	rjmp	.+286    	; 0x58e <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 470:	11 23       	and	r17, r17
 472:	09 f4       	brne	.+2      	; 0x476 <lcd_int32+0x4c>
 474:	84 c0       	rjmp	.+264    	; 0x57e <lcd_int32+0x154>
 476:	9e 01       	movw	r18, r28
 478:	2f 5f       	subi	r18, 0xFF	; 255
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
 47c:	69 01       	movw	r12, r18
 47e:	59 01       	movw	r10, r18
 480:	88 24       	eor	r8, r8
 482:	8a 94       	dec	r8
 484:	81 0e       	add	r8, r17
 486:	91 2c       	mov	r9, r1
 488:	3f ef       	ldi	r19, 0xFF	; 255
 48a:	83 1a       	sub	r8, r19
 48c:	93 0a       	sbc	r9, r19
 48e:	8c 0c       	add	r8, r12
 490:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 492:	2a e0       	ldi	r18, 0x0A	; 10
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	0e 94 b6 04 	call	0x96c	; 0x96c <__divmodsi4>
 49e:	e6 2f       	mov	r30, r22
 4a0:	2a 8b       	std	Y+18, r18	; 0x12
 4a2:	3b 8b       	std	Y+19, r19	; 0x13
 4a4:	4c 8b       	std	Y+20, r20	; 0x14
 4a6:	5d 8b       	std	Y+21, r21	; 0x15
 4a8:	6a 89       	ldd	r22, Y+18	; 0x12
 4aa:	7b 89       	ldd	r23, Y+19	; 0x13
 4ac:	8c 89       	ldd	r24, Y+20	; 0x14
 4ae:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 4b0:	20 e3       	ldi	r18, 0x30	; 48
 4b2:	2e 0f       	add	r18, r30
 4b4:	f5 01       	movw	r30, r10
 4b6:	21 93       	st	Z+, r18
 4b8:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 4ba:	e8 15       	cp	r30, r8
 4bc:	f9 05       	cpc	r31, r9
 4be:	49 f7       	brne	.-46     	; 0x492 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 4c0:	bb 24       	eor	r11, r11
 4c2:	b3 94       	inc	r11
 4c4:	b1 0e       	add	r11, r17
 4c6:	f6 01       	movw	r30, r12
 4c8:	e1 0f       	add	r30, r17
 4ca:	f1 1d       	adc	r31, r1
 4cc:	2e e2       	ldi	r18, 0x2E	; 46
 4ce:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 4d0:	2a e0       	ldi	r18, 0x0A	; 10
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	40 e0       	ldi	r20, 0x00	; 0
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	0e 94 b6 04 	call	0x96c	; 0x96c <__divmodsi4>
 4dc:	e6 2f       	mov	r30, r22
 4de:	2a 8b       	std	Y+18, r18	; 0x12
 4e0:	3b 8b       	std	Y+19, r19	; 0x13
 4e2:	4c 8b       	std	Y+20, r20	; 0x14
 4e4:	5d 8b       	std	Y+21, r21	; 0x15
 4e6:	6e 8b       	std	Y+22, r22	; 0x16
 4e8:	7f 8b       	std	Y+23, r23	; 0x17
 4ea:	88 8f       	std	Y+24, r24	; 0x18
 4ec:	99 8f       	std	Y+25, r25	; 0x19
 4ee:	6a 89       	ldd	r22, Y+18	; 0x12
 4f0:	7b 89       	ldd	r23, Y+19	; 0x13
 4f2:	8c 89       	ldd	r24, Y+20	; 0x14
 4f4:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 4f6:	11 e0       	ldi	r17, 0x01	; 1
 4f8:	1b 0d       	add	r17, r11
 4fa:	d6 01       	movw	r26, r12
 4fc:	ab 0d       	add	r26, r11
 4fe:	b1 1d       	adc	r27, r1
 500:	e0 5d       	subi	r30, 0xD0	; 208
 502:	ec 93       	st	X, r30
 504:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 506:	61 15       	cp	r22, r1
 508:	71 05       	cpc	r23, r1
 50a:	81 05       	cpc	r24, r1
 50c:	91 05       	cpc	r25, r1
 50e:	01 f7       	brne	.-64     	; 0x4d0 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 510:	ff 20       	and	r15, r15
 512:	61 f0       	breq	.+24     	; 0x52c <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 514:	e1 10       	cpse	r14, r1
 516:	39 c0       	rjmp	.+114    	; 0x58a <lcd_int32+0x160>
 518:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 51a:	1f 15       	cp	r17, r15
 51c:	38 f4       	brcc	.+14     	; 0x52c <lcd_int32+0x102>
 51e:	f6 01       	movw	r30, r12
 520:	e1 0f       	add	r30, r17
 522:	f1 1d       	adc	r31, r1
 524:	80 83       	st	Z, r24
 526:	1f 5f       	subi	r17, 0xFF	; 255
 528:	1f 11       	cpse	r17, r15
 52a:	f9 cf       	rjmp	.-14     	; 0x51e <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 52c:	00 23       	and	r16, r16
 52e:	31 f0       	breq	.+12     	; 0x53c <lcd_int32+0x112>
 530:	f6 01       	movw	r30, r12
 532:	e1 0f       	add	r30, r17
 534:	f1 1d       	adc	r31, r1
 536:	8d e2       	ldi	r24, 0x2D	; 45
 538:	80 83       	st	Z, r24
 53a:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 53c:	11 50       	subi	r17, 0x01	; 1
 53e:	f6 01       	movw	r30, r12
 540:	e1 0f       	add	r30, r17
 542:	f1 1d       	adc	r31, r1
 544:	60 81       	ld	r22, Z
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54c:	35 ed       	ldi	r19, 0xD5	; 213
 54e:	3a 95       	dec	r19
 550:	f1 f7       	brne	.-4      	; 0x54e <lcd_int32+0x124>
 552:	00 00       	nop
 554:	11 11       	cpse	r17, r1
 556:	f2 cf       	rjmp	.-28     	; 0x53c <lcd_int32+0x112>

}
 558:	69 96       	adiw	r28, 0x19	; 25
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	af 90       	pop	r10
 578:	9f 90       	pop	r9
 57a:	8f 90       	pop	r8
 57c:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 57e:	b1 2c       	mov	r11, r1
 580:	9e 01       	movw	r18, r28
 582:	2f 5f       	subi	r18, 0xFF	; 255
 584:	3f 4f       	sbci	r19, 0xFF	; 255
 586:	69 01       	movw	r12, r18
 588:	a3 cf       	rjmp	.-186    	; 0x4d0 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 58a:	80 e3       	ldi	r24, 0x30	; 48
 58c:	c6 cf       	rjmp	.-116    	; 0x51a <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 58e:	90 95       	com	r25
 590:	80 95       	com	r24
 592:	70 95       	com	r23
 594:	61 95       	neg	r22
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	69 cf       	rjmp	.-302    	; 0x470 <lcd_int32+0x46>

0000059e <lcd_int16>:
 59e:	5f 92       	push	r5
 5a0:	6f 92       	push	r6
 5a2:	7f 92       	push	r7
 5a4:	8f 92       	push	r8
 5a6:	9f 92       	push	r9
 5a8:	af 92       	push	r10
 5aa:	bf 92       	push	r11
 5ac:	cf 92       	push	r12
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	61 97       	sbiw	r28, 0x11	; 17
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	66 2e       	mov	r6, r22
 5ce:	14 2f       	mov	r17, r20
 5d0:	59 2e       	mov	r5, r25
 5d2:	55 1c       	adc	r5, r5
 5d4:	55 24       	eor	r5, r5
 5d6:	55 1c       	adc	r5, r5
 5d8:	75 2c       	mov	r7, r5
 5da:	a5 2c       	mov	r10, r5
 5dc:	b1 2c       	mov	r11, r1
 5de:	22 27       	eor	r18, r18
 5e0:	33 27       	eor	r19, r19
 5e2:	2a 19       	sub	r18, r10
 5e4:	3b 09       	sbc	r19, r11
 5e6:	82 27       	eor	r24, r18
 5e8:	93 27       	eor	r25, r19
 5ea:	9c 01       	movw	r18, r24
 5ec:	2a 0d       	add	r18, r10
 5ee:	3b 1d       	adc	r19, r11
 5f0:	44 23       	and	r20, r20
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <lcd_int16+0x58>
 5f4:	90 c0       	rjmp	.+288    	; 0x716 <lcd_int16+0x178>
 5f6:	ce 01       	movw	r24, r28
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	7c 01       	movw	r14, r24
 5fc:	6c 01       	movw	r12, r24
 5fe:	88 24       	eor	r8, r8
 600:	8a 94       	dec	r8
 602:	84 0e       	add	r8, r20
 604:	91 2c       	mov	r9, r1
 606:	9f ef       	ldi	r25, 0xFF	; 255
 608:	89 1a       	sub	r8, r25
 60a:	99 0a       	sbc	r9, r25
 60c:	8e 0c       	add	r8, r14
 60e:	9f 1c       	adc	r9, r15
 610:	6a e0       	ldi	r22, 0x0A	; 10
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	c9 01       	movw	r24, r18
 616:	0e 94 80 04 	call	0x900	; 0x900 <__divmodhi4>
 61a:	46 2f       	mov	r20, r22
 61c:	24 2f       	mov	r18, r20
 61e:	37 2f       	mov	r19, r23
 620:	80 5d       	subi	r24, 0xD0	; 208
 622:	f6 01       	movw	r30, r12
 624:	81 93       	st	Z+, r24
 626:	6f 01       	movw	r12, r30
 628:	e8 15       	cp	r30, r8
 62a:	f9 05       	cpc	r31, r9
 62c:	89 f7       	brne	.-30     	; 0x610 <lcd_int16+0x72>
 62e:	dd 24       	eor	r13, r13
 630:	d3 94       	inc	r13
 632:	d1 0e       	add	r13, r17
 634:	f7 01       	movw	r30, r14
 636:	e1 0f       	add	r30, r17
 638:	f1 1d       	adc	r31, r1
 63a:	8e e2       	ldi	r24, 0x2E	; 46
 63c:	80 83       	st	Z, r24
 63e:	6a e0       	ldi	r22, 0x0A	; 10
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	c9 01       	movw	r24, r18
 644:	0e 94 80 04 	call	0x900	; 0x900 <__divmodhi4>
 648:	46 2f       	mov	r20, r22
 64a:	24 2f       	mov	r18, r20
 64c:	37 2f       	mov	r19, r23
 64e:	11 e0       	ldi	r17, 0x01	; 1
 650:	1d 0d       	add	r17, r13
 652:	f7 01       	movw	r30, r14
 654:	ed 0d       	add	r30, r13
 656:	f1 1d       	adc	r31, r1
 658:	80 5d       	subi	r24, 0xD0	; 208
 65a:	80 83       	st	Z, r24
 65c:	d1 2e       	mov	r13, r17
 65e:	21 15       	cp	r18, r1
 660:	31 05       	cpc	r19, r1
 662:	69 f7       	brne	.-38     	; 0x63e <lcd_int16+0xa0>
 664:	01 11       	cpse	r16, r1
 666:	15 c0       	rjmp	.+42     	; 0x692 <lcd_int16+0xf4>
 668:	55 20       	and	r5, r5
 66a:	39 f0       	breq	.+14     	; 0x67a <lcd_int16+0xdc>
 66c:	11 e0       	ldi	r17, 0x01	; 1
 66e:	1d 0d       	add	r17, r13
 670:	f7 01       	movw	r30, r14
 672:	ed 0d       	add	r30, r13
 674:	f1 1d       	adc	r31, r1
 676:	8d e2       	ldi	r24, 0x2D	; 45
 678:	80 83       	st	Z, r24
 67a:	66 20       	and	r6, r6
 67c:	41 f1       	breq	.+80     	; 0x6ce <lcd_int16+0x130>
 67e:	81 2f       	mov	r24, r17
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	26 2d       	mov	r18, r6
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	82 17       	cp	r24, r18
 688:	93 07       	cpc	r25, r19
 68a:	0c f5       	brge	.+66     	; 0x6ce <lcd_int16+0x130>
 68c:	71 2c       	mov	r7, r1
 68e:	40 e2       	ldi	r20, 0x20	; 32
 690:	0c c0       	rjmp	.+24     	; 0x6aa <lcd_int16+0x10c>
 692:	66 20       	and	r6, r6
 694:	a1 f0       	breq	.+40     	; 0x6be <lcd_int16+0x120>
 696:	81 2f       	mov	r24, r17
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	26 2d       	mov	r18, r6
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	2a 19       	sub	r18, r10
 6a0:	3b 09       	sbc	r19, r11
 6a2:	82 17       	cp	r24, r18
 6a4:	93 07       	cpc	r25, r19
 6a6:	5c f4       	brge	.+22     	; 0x6be <lcd_int16+0x120>
 6a8:	40 e3       	ldi	r20, 0x30	; 48
 6aa:	1f 5f       	subi	r17, 0xFF	; 255
 6ac:	f7 01       	movw	r30, r14
 6ae:	e8 0f       	add	r30, r24
 6b0:	f9 1f       	adc	r31, r25
 6b2:	40 83       	st	Z, r20
 6b4:	81 2f       	mov	r24, r17
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	82 17       	cp	r24, r18
 6ba:	93 07       	cpc	r25, r19
 6bc:	b4 f3       	brlt	.-20     	; 0x6aa <lcd_int16+0x10c>
 6be:	77 20       	and	r7, r7
 6c0:	31 f0       	breq	.+12     	; 0x6ce <lcd_int16+0x130>
 6c2:	f7 01       	movw	r30, r14
 6c4:	e1 0f       	add	r30, r17
 6c6:	f1 1d       	adc	r31, r1
 6c8:	8d e2       	ldi	r24, 0x2D	; 45
 6ca:	80 83       	st	Z, r24
 6cc:	1f 5f       	subi	r17, 0xFF	; 255
 6ce:	11 50       	subi	r17, 0x01	; 1
 6d0:	f7 01       	movw	r30, r14
 6d2:	e1 0f       	add	r30, r17
 6d4:	f1 1d       	adc	r31, r1
 6d6:	60 81       	ld	r22, Z
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0e 94 6f 00 	call	0xde	; 0xde <send_lcd>
 6de:	95 ed       	ldi	r25, 0xD5	; 213
 6e0:	9a 95       	dec	r25
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <lcd_int16+0x142>
 6e4:	00 00       	nop
 6e6:	11 11       	cpse	r17, r1
 6e8:	f2 cf       	rjmp	.-28     	; 0x6ce <lcd_int16+0x130>
 6ea:	61 96       	adiw	r28, 0x11	; 17
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	df 90       	pop	r13
 704:	cf 90       	pop	r12
 706:	bf 90       	pop	r11
 708:	af 90       	pop	r10
 70a:	9f 90       	pop	r9
 70c:	8f 90       	pop	r8
 70e:	7f 90       	pop	r7
 710:	6f 90       	pop	r6
 712:	5f 90       	pop	r5
 714:	08 95       	ret
 716:	d1 2c       	mov	r13, r1
 718:	ce 01       	movw	r24, r28
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	7c 01       	movw	r14, r24
 71e:	8f cf       	rjmp	.-226    	; 0x63e <lcd_int16+0xa0>

00000720 <main>:
//******************************************************************************
//                            spi_init                               
//Initalizes the SPI port to allow LCD access.
//******************************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 720:	87 b3       	in	r24, 0x17	; 23
 722:	87 60       	ori	r24, 0x07	; 7
 724:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, no interrupts 
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
 726:	80 e5       	ldi	r24, 0x50	; 80
 728:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	8e b9       	out	0x0e, r24	; 14
int main(void) {
  uint16_t numticks = 0;
  enum states state = SR_WELCOME;// set default state
	
  spi_init();     //set up SPI
  lcd_init();     //set up LCD
 72e:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_init>

  DDRB |= 0x80;   //port B bit 7 LED is the user signal 
 732:	bf 9a       	sbi	0x17, 7	; 23
  PORTB &= 0x7f;  //clear the LED
 734:	c7 98       	cbi	0x18, 7	; 24
  DDRD = 0x00;    //all the pushbutton switches are inputs
 736:	11 ba       	out	0x11, r1	; 17
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
}//spi_init

int main(void) {
  uint16_t numticks = 0;
  enum states state = SR_WELCOME;// set default state
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
}//spi_init

int main(void) {
  uint16_t numticks = 0;
 73c:	c0 e0       	ldi	r28, 0x00	; 0
 73e:	d0 e0       	ldi	r29, 0x00	; 0
        // Set up TC0
        TCCR0 |= (0<<WGM00)|(0<<WGM01)|(0<<COM0)|(0<<COM1);            // set TC0 timer into normal mode and disable clock
       TIMSK=0x00;     // disable TC0 interrupts	
       TIFR |=     (1<<TOV0);      // manually clear the TC0 overflow flag
        // start the timer with a 1024 prescaler, 16MHz/1024 = 15.625 KHz
       TCCR0=0x07;     
 740:	17 e0       	ldi	r17, 0x07	; 7

        //Now we need to randomly wait between 2-10 seconds.  Since it takes 1.64 ms 
        //for the 8 bit timer to overflow, we need to loop between 122 - 610 times.
        //The following code is supposedly more random than other methods 
        uint16_t numIterations = rand() / (RAND_MAX / 488 + 1); // pick number between (0 - 487)
 742:	44 e4       	ldi	r20, 0x44	; 68
 744:	e4 2e       	mov	r14, r20
 746:	f1 2c       	mov	r15, r1
      // Now we compute the results without using floating point arithmetic. The timer runs at 15.625KHz so there 
      // are 15.625 ticks in a millisecond. We can use this information to determine the user's reaction time.
      PORTB &= 0x7F; //disable LED
      //To compute milliseconds, we multiply by 8/125. Since we are multiplying a 16 bit number,
      //be sure to perform the math using a 32 bit number.
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
 748:	5d e7       	ldi	r21, 0x7D	; 125
 74a:	85 2e       	mov	r8, r21
 74c:	91 2c       	mov	r9, r1
 74e:	a1 2c       	mov	r10, r1
 750:	b1 2c       	mov	r11, r1
  DDRB |= 0x80;   //port B bit 7 LED is the user signal 
  PORTB &= 0x7f;  //clear the LED
  DDRD = 0x00;    //all the pushbutton switches are inputs

  while(1) {
    switch (state) {
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	91 05       	cpc	r25, r1
 756:	09 f4       	brne	.+2      	; 0x75a <main+0x3a>
 758:	54 c0       	rjmp	.+168    	; 0x802 <main+0xe2>
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	91 05       	cpc	r25, r1
 75e:	08 f4       	brcc	.+2      	; 0x762 <main+0x42>
 760:	95 c0       	rjmp	.+298    	; 0x88c <main+0x16c>
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	91 05       	cpc	r25, r1
 766:	09 f4       	brne	.+2      	; 0x76a <main+0x4a>
 768:	74 c0       	rjmp	.+232    	; 0x852 <main+0x132>
 76a:	83 30       	cpi	r24, 0x03	; 3
 76c:	91 05       	cpc	r25, r1
 76e:	89 f7       	brne	.-30     	; 0x752 <main+0x32>
    }
			
    case SR_RESULTS: {
      // Now we compute the results without using floating point arithmetic. The timer runs at 15.625KHz so there 
      // are 15.625 ticks in a millisecond. We can use this information to determine the user's reaction time.
      PORTB &= 0x7F; //disable LED
 770:	c7 98       	cbi	0x18, 7	; 24
      //To compute milliseconds, we multiply by 8/125. Since we are multiplying a 16 bit number,
      //be sure to perform the math using a 32 bit number.
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
 772:	ce 01       	movw	r24, r28
 774:	a0 e0       	ldi	r26, 0x00	; 0
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	aa 1f       	adc	r26, r26
 77e:	bb 1f       	adc	r27, r27
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	aa 1f       	adc	r26, r26
 786:	bb 1f       	adc	r27, r27
 788:	bc 01       	movw	r22, r24
 78a:	cd 01       	movw	r24, r26
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	a5 01       	movw	r20, r10
 796:	94 01       	movw	r18, r8
 798:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodsi4>
 79c:	29 01       	movw	r4, r18
 79e:	3a 01       	movw	r6, r20
	
      clear_display();
 7a0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <clear_display>
      if (((TIFR & (1 << TOV1)) == 0) && (numMilliseconds == 0)) {
 7a4:	06 b6       	in	r0, 0x36	; 54
 7a6:	02 fc       	sbrc	r0, 2
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <main+0x96>
 7aa:	41 14       	cp	r4, r1
 7ac:	51 04       	cpc	r5, r1
 7ae:	61 04       	cpc	r6, r1
 7b0:	71 04       	cpc	r7, r1
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x96>
 7b4:	91 c0       	rjmp	.+290    	; 0x8d8 <main+0x1b8>
      // overflow wasn't triggered but numMilliseconds = 0, the user held down the button
        string2lcd("No cheating!!");
        line2_col1(); 
        string2lcd("Retry?");
        _delay_ms(1000);
      } else if ((TIFR & (1 << TOV1)) == 0) {
 7b6:	06 b6       	in	r0, 0x36	; 54
 7b8:	02 fc       	sbrc	r0, 2
 7ba:	83 c0       	rjmp	.+262    	; 0x8c2 <main+0x1a2>
        // overflow wasn't triggered
        // display the time
        string2lcd("Your time:");
 7bc:	89 e4       	ldi	r24, 0x49	; 73
 7be:	91 e0       	ldi	r25, 0x01	; 1
 7c0:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
        line2_col1(); 
 7c4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <line2_col1>
        lcd_int16(numMilliseconds, 3, 0, 0, 0);
 7c8:	00 e0       	ldi	r16, 0x00	; 0
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	63 e0       	ldi	r22, 0x03	; 3
 7d0:	c2 01       	movw	r24, r4
 7d2:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_int16>
        string2lcd(" ms");
 7d6:	84 e5       	ldi	r24, 0x54	; 84
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7de:	2f ef       	ldi	r18, 0xFF	; 255
 7e0:	85 ea       	ldi	r24, 0xA5	; 165
 7e2:	9e e0       	ldi	r25, 0x0E	; 14
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	80 40       	sbci	r24, 0x00	; 0
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0xc4>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0xce>
 7ee:	00 00       	nop
        line2_col1(); 
        string2lcd("Press btn to rst");
    }
	
    _delay_ms(300); // add delay to avoid switch bouncing issues
    while (PIND == 0xFF) {}; // wait until a button is pressed
 7f0:	80 b3       	in	r24, 0x10	; 16
 7f2:	8f 3f       	cpi	r24, 0xFF	; 255
 7f4:	e9 f3       	breq	.-6      	; 0x7f0 <main+0xd0>
    state = SR_RANDOM_DELAY; // move back to the random delay state
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
  DDRB |= 0x80;   //port B bit 7 LED is the user signal 
  PORTB &= 0x7f;  //clear the LED
  DDRD = 0x00;    //all the pushbutton switches are inputs

  while(1) {
    switch (state) {
 7fa:	81 30       	cpi	r24, 0x01	; 1
 7fc:	91 05       	cpc	r25, r1
 7fe:	09 f0       	breq	.+2      	; 0x802 <main+0xe2>
 800:	ac cf       	rjmp	.-168    	; 0x75a <main+0x3a>
	state = SR_RANDOM_DELAY; // progress to RANDOM_DELAY state
	break;
     }

      case SR_RANDOM_DELAY: {
        lcd_init();
 802:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_init>
        string2lcd("Press any button");
 806:	82 e1       	ldi	r24, 0x12	; 18
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
        line2_col1(); 
 80e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <line2_col1>
        string2lcd("after LED lights");
 812:	83 e2       	ldi	r24, 0x23	; 35
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
        // Set up TC0
        TCCR0 |= (0<<WGM00)|(0<<WGM01)|(0<<COM0)|(0<<COM1);            // set TC0 timer into normal mode and disable clock
 81a:	83 b7       	in	r24, 0x33	; 51
 81c:	83 bf       	out	0x33, r24	; 51
       TIMSK=0x00;     // disable TC0 interrupts	
 81e:	17 be       	out	0x37, r1	; 55
       TIFR |=     (1<<TOV0);      // manually clear the TC0 overflow flag
 820:	86 b7       	in	r24, 0x36	; 54
 822:	81 60       	ori	r24, 0x01	; 1
 824:	86 bf       	out	0x36, r24	; 54
        // start the timer with a 1024 prescaler, 16MHz/1024 = 15.625 KHz
       TCCR0=0x07;     
 826:	13 bf       	out	0x33, r17	; 51

        //Now we need to randomly wait between 2-10 seconds.  Since it takes 1.64 ms 
        //for the 8 bit timer to overflow, we need to loop between 122 - 610 times.
        //The following code is supposedly more random than other methods 
        uint16_t numIterations = rand() / (RAND_MAX / 488 + 1); // pick number between (0 - 487)
 828:	0e 94 34 05 	call	0xa68	; 0xa68 <rand>
 82c:	b7 01       	movw	r22, r14
 82e:	0e 94 80 04 	call	0x900	; 0x900 <__divmodhi4>
        numIterations += 122; // numIterations should now be between (122 - 610)
 832:	ab 01       	movw	r20, r22
 834:	46 58       	subi	r20, 0x86	; 134
 836:	5f 4f       	sbci	r21, 0xFF	; 255
    
        do {
    	    while (!(TIFR & (1<<TOV0) ) ) {}; // wait until the TC0 overflow flag is set
 838:	06 b6       	in	r0, 0x36	; 54
 83a:	00 fe       	sbrs	r0, 0
 83c:	fd cf       	rjmp	.-6      	; 0x838 <main+0x118>
    	    TIFR |= (1<<TOV0);                       // manually clear the TC0 overflow flag
 83e:	86 b7       	in	r24, 0x36	; 54
 840:	81 60       	ori	r24, 0x01	; 1
 842:	86 bf       	out	0x36, r24	; 54
    	    // note that the counter will automatically keep counting upward again
    	    numIterations--; // decrement number of iterations
 844:	41 50       	subi	r20, 0x01	; 1
 846:	51 09       	sbc	r21, r1
           } while (numIterations > 0);
 848:	b9 f7       	brne	.-18     	; 0x838 <main+0x118>
       TCCR0 =  0x00;                           // disable the TC0 timer
 84a:	13 be       	out	0x33, r1	; 51
        state = SR_TIMING_USER; // progress to TIMING_USER state
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	90 e0       	ldi	r25, 0x00	; 0
        break;
 850:	80 cf       	rjmp	.-256    	; 0x752 <main+0x32>
    }
    case SR_TIMING_USER: {
      // Use 16 bit TC1 to measure the user's reaction time
     TCCR1B |=(0<<WGM12)|(0 <<WGM13)| (0<<ICNC1) |( 0<< CS10)|( 0<< CS11)|( 0<< CS12);// disable noise canceler, set WGM1{3,2} to 0, and disable clock
 852:	8e b5       	in	r24, 0x2e	; 46
 854:	8e bd       	out	0x2e, r24	; 46
     TCCR1A =  0x00;                   // disable all of the output compare pins and set WGM1{1,0} to 0
 856:	1f bc       	out	0x2f, r1	; 47
     TIMSK |=       0<<TICIE1;               // disable TC1 interrupts in TIMSK
 858:	87 b7       	in	r24, 0x37	; 55
 85a:	87 bf       	out	0x37, r24	; 55
     ETIMSK =       0x00;              // disable TC1 interrupts	in ETIMSK
 85c:	10 92 7d 00 	sts	0x007D, r1
     TIFR |=               1<<TOV0;          // manually clear the TC1 overflow flag
 860:	86 b7       	in	r24, 0x36	; 54
 862:	81 60       	ori	r24, 0x01	; 1
 864:	86 bf       	out	0x36, r24	; 54
     TCNT1 =              0x00;        // initialize the TC1 counter to 0
 866:	1d bc       	out	0x2d, r1	; 45
 868:	1c bc       	out	0x2c, r1	; 44

      //Count the number of ticks until a button is pressed. Start the timer with a 1024 prescaler.
      //16MHz / 1024 = 15.625 KHz
     TCCR1B |=  0b00000101;                                          // start TC1 counter
 86a:	8e b5       	in	r24, 0x2e	; 46
 86c:	85 60       	ori	r24, 0x05	; 5
 86e:	8e bd       	out	0x2e, r24	; 46
      PORTB |= 0x80; // light MSB LED so the user knows to push the button
 870:	c7 9a       	sbi	0x18, 7	; 24

      while ( ((TIFR & (1 << TOV1)) == 0) && (PIND == 0xFF) ) {}; // wait until button pressed or TC1 OVF set
 872:	03 c0       	rjmp	.+6      	; 0x87a <main+0x15a>
 874:	80 b3       	in	r24, 0x10	; 16
 876:	8f 3f       	cpi	r24, 0xFF	; 255
 878:	19 f4       	brne	.+6      	; 0x880 <main+0x160>
 87a:	06 b6       	in	r0, 0x36	; 54
 87c:	02 fe       	sbrs	r0, 2
 87e:	fa cf       	rjmp	.-12     	; 0x874 <main+0x154>
      numticks = TCNT1;
 880:	cc b5       	in	r28, 0x2c	; 44
 882:	dd b5       	in	r29, 0x2d	; 45
     TCCR1B = 0x00;                     // stop the TC1 counter
 884:	1e bc       	out	0x2e, r1	; 46
      // note that the count is now stored in TCNT1
      state = SR_RESULTS; // progress to RESULTS state
 886:	83 e0       	ldi	r24, 0x03	; 3
 888:	90 e0       	ldi	r25, 0x00	; 0
      break;
 88a:	63 cf       	rjmp	.-314    	; 0x752 <main+0x32>
  DDRD = 0x00;    //all the pushbutton switches are inputs

  while(1) {
    switch (state) {
      case SR_WELCOME: {
        clear_display();
 88c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <clear_display>
        string2lcd("REFLEX TESTER");
 890:	84 e0       	ldi	r24, 0x04	; 4
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
        line2_col1(); 
 898:	0e 94 72 01 	call	0x2e4	; 0x2e4 <line2_col1>
        string2lcd("Press any button");
 89c:	82 e1       	ldi	r24, 0x12	; 18
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
 8a4:	2f ef       	ldi	r18, 0xFF	; 255
 8a6:	81 ee       	ldi	r24, 0xE1	; 225
 8a8:	94 e0       	ldi	r25, 0x04	; 4
 8aa:	21 50       	subi	r18, 0x01	; 1
 8ac:	80 40       	sbci	r24, 0x00	; 0
 8ae:	90 40       	sbci	r25, 0x00	; 0
 8b0:	e1 f7       	brne	.-8      	; 0x8aa <main+0x18a>
 8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <main+0x194>
 8b4:	00 00       	nop
       	_delay_ms(100); // force minimum 100ms display time
       	while (PIND == 0xFF) {};
 8b6:	80 b3       	in	r24, 0x10	; 16
 8b8:	8f 3f       	cpi	r24, 0xFF	; 255
 8ba:	e9 f3       	breq	.-6      	; 0x8b6 <main+0x196>
        string2lcd("Press btn to rst");
    }
	
    _delay_ms(300); // add delay to avoid switch bouncing issues
    while (PIND == 0xFF) {}; // wait until a button is pressed
    state = SR_RANDOM_DELAY; // move back to the random delay state
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	9c cf       	rjmp	.-200    	; 0x7fa <main+0xda>
        lcd_int16(numMilliseconds, 3, 0, 0, 0);
        string2lcd(" ms");
      } else {
        // overflow was triggered
        // user took too long
        string2lcd(" Timer expired.");
 8c2:	88 e5       	ldi	r24, 0x58	; 88
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
        line2_col1(); 
 8ca:	0e 94 72 01 	call	0x2e4	; 0x2e4 <line2_col1>
        string2lcd("Press btn to rst");
 8ce:	88 e6       	ldi	r24, 0x68	; 104
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
 8d6:	83 cf       	rjmp	.-250    	; 0x7de <main+0xbe>
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
	
      clear_display();
      if (((TIFR & (1 << TOV1)) == 0) && (numMilliseconds == 0)) {
      // overflow wasn't triggered but numMilliseconds = 0, the user held down the button
        string2lcd("No cheating!!");
 8d8:	84 e3       	ldi	r24, 0x34	; 52
 8da:	91 e0       	ldi	r25, 0x01	; 1
 8dc:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
        line2_col1(); 
 8e0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <line2_col1>
        string2lcd("Retry?");
 8e4:	82 e4       	ldi	r24, 0x42	; 66
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	0e 94 96 01 	call	0x32c	; 0x32c <string2lcd>
 8ec:	2f ef       	ldi	r18, 0xFF	; 255
 8ee:	83 ed       	ldi	r24, 0xD3	; 211
 8f0:	90 e3       	ldi	r25, 0x30	; 48
 8f2:	21 50       	subi	r18, 0x01	; 1
 8f4:	80 40       	sbci	r24, 0x00	; 0
 8f6:	90 40       	sbci	r25, 0x00	; 0
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <main+0x1d2>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <main+0x1dc>
 8fc:	00 00       	nop
 8fe:	6f cf       	rjmp	.-290    	; 0x7de <main+0xbe>

00000900 <__divmodhi4>:
 900:	97 fb       	bst	r25, 7
 902:	07 2e       	mov	r0, r23
 904:	16 f4       	brtc	.+4      	; 0x90a <__divmodhi4+0xa>
 906:	00 94       	com	r0
 908:	07 d0       	rcall	.+14     	; 0x918 <__divmodhi4_neg1>
 90a:	77 fd       	sbrc	r23, 7
 90c:	09 d0       	rcall	.+18     	; 0x920 <__divmodhi4_neg2>
 90e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodhi4>
 912:	07 fc       	sbrc	r0, 7
 914:	05 d0       	rcall	.+10     	; 0x920 <__divmodhi4_neg2>
 916:	3e f4       	brtc	.+14     	; 0x926 <__divmodhi4_exit>

00000918 <__divmodhi4_neg1>:
 918:	90 95       	com	r25
 91a:	81 95       	neg	r24
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__divmodhi4_neg2>:
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255

00000926 <__divmodhi4_exit>:
 926:	08 95       	ret

00000928 <__udivmodsi4>:
 928:	a1 e2       	ldi	r26, 0x21	; 33
 92a:	1a 2e       	mov	r1, r26
 92c:	aa 1b       	sub	r26, r26
 92e:	bb 1b       	sub	r27, r27
 930:	fd 01       	movw	r30, r26
 932:	0d c0       	rjmp	.+26     	; 0x94e <__udivmodsi4_ep>

00000934 <__udivmodsi4_loop>:
 934:	aa 1f       	adc	r26, r26
 936:	bb 1f       	adc	r27, r27
 938:	ee 1f       	adc	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	a2 17       	cp	r26, r18
 93e:	b3 07       	cpc	r27, r19
 940:	e4 07       	cpc	r30, r20
 942:	f5 07       	cpc	r31, r21
 944:	20 f0       	brcs	.+8      	; 0x94e <__udivmodsi4_ep>
 946:	a2 1b       	sub	r26, r18
 948:	b3 0b       	sbc	r27, r19
 94a:	e4 0b       	sbc	r30, r20
 94c:	f5 0b       	sbc	r31, r21

0000094e <__udivmodsi4_ep>:
 94e:	66 1f       	adc	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	1a 94       	dec	r1
 958:	69 f7       	brne	.-38     	; 0x934 <__udivmodsi4_loop>
 95a:	60 95       	com	r22
 95c:	70 95       	com	r23
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	9b 01       	movw	r18, r22
 964:	ac 01       	movw	r20, r24
 966:	bd 01       	movw	r22, r26
 968:	cf 01       	movw	r24, r30
 96a:	08 95       	ret

0000096c <__divmodsi4>:
 96c:	05 2e       	mov	r0, r21
 96e:	97 fb       	bst	r25, 7
 970:	1e f4       	brtc	.+6      	; 0x978 <__divmodsi4+0xc>
 972:	00 94       	com	r0
 974:	0e 94 cd 04 	call	0x99a	; 0x99a <__negsi2>
 978:	57 fd       	sbrc	r21, 7
 97a:	07 d0       	rcall	.+14     	; 0x98a <__divmodsi4_neg2>
 97c:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodsi4>
 980:	07 fc       	sbrc	r0, 7
 982:	03 d0       	rcall	.+6      	; 0x98a <__divmodsi4_neg2>
 984:	4e f4       	brtc	.+18     	; 0x998 <__divmodsi4_exit>
 986:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__negsi2>

0000098a <__divmodsi4_neg2>:
 98a:	50 95       	com	r21
 98c:	40 95       	com	r20
 98e:	30 95       	com	r19
 990:	21 95       	neg	r18
 992:	3f 4f       	sbci	r19, 0xFF	; 255
 994:	4f 4f       	sbci	r20, 0xFF	; 255
 996:	5f 4f       	sbci	r21, 0xFF	; 255

00000998 <__divmodsi4_exit>:
 998:	08 95       	ret

0000099a <__negsi2>:
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__udivmodhi4>:
 9aa:	aa 1b       	sub	r26, r26
 9ac:	bb 1b       	sub	r27, r27
 9ae:	51 e1       	ldi	r21, 0x11	; 17
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <__udivmodhi4_ep>

000009b2 <__udivmodhi4_loop>:
 9b2:	aa 1f       	adc	r26, r26
 9b4:	bb 1f       	adc	r27, r27
 9b6:	a6 17       	cp	r26, r22
 9b8:	b7 07       	cpc	r27, r23
 9ba:	10 f0       	brcs	.+4      	; 0x9c0 <__udivmodhi4_ep>
 9bc:	a6 1b       	sub	r26, r22
 9be:	b7 0b       	sbc	r27, r23

000009c0 <__udivmodhi4_ep>:
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	5a 95       	dec	r21
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__udivmodhi4_loop>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	bc 01       	movw	r22, r24
 9ce:	cd 01       	movw	r24, r26
 9d0:	08 95       	ret

000009d2 <do_rand>:
 9d2:	8f 92       	push	r8
 9d4:	9f 92       	push	r9
 9d6:	af 92       	push	r10
 9d8:	bf 92       	push	r11
 9da:	cf 92       	push	r12
 9dc:	df 92       	push	r13
 9de:	ef 92       	push	r14
 9e0:	ff 92       	push	r15
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	ec 01       	movw	r28, r24
 9e8:	68 81       	ld	r22, Y
 9ea:	79 81       	ldd	r23, Y+1	; 0x01
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	9b 81       	ldd	r25, Y+3	; 0x03
 9f0:	61 15       	cp	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	81 05       	cpc	r24, r1
 9f6:	91 05       	cpc	r25, r1
 9f8:	21 f4       	brne	.+8      	; 0xa02 <do_rand+0x30>
 9fa:	64 e2       	ldi	r22, 0x24	; 36
 9fc:	79 ed       	ldi	r23, 0xD9	; 217
 9fe:	8b e5       	ldi	r24, 0x5B	; 91
 a00:	97 e0       	ldi	r25, 0x07	; 7
 a02:	2d e1       	ldi	r18, 0x1D	; 29
 a04:	33 ef       	ldi	r19, 0xF3	; 243
 a06:	41 e0       	ldi	r20, 0x01	; 1
 a08:	50 e0       	ldi	r21, 0x00	; 0
 a0a:	0e 94 b6 04 	call	0x96c	; 0x96c <__divmodsi4>
 a0e:	49 01       	movw	r8, r18
 a10:	5a 01       	movw	r10, r20
 a12:	9b 01       	movw	r18, r22
 a14:	ac 01       	movw	r20, r24
 a16:	a7 ea       	ldi	r26, 0xA7	; 167
 a18:	b1 e4       	ldi	r27, 0x41	; 65
 a1a:	0e 94 43 05 	call	0xa86	; 0xa86 <__muluhisi3>
 a1e:	6b 01       	movw	r12, r22
 a20:	7c 01       	movw	r14, r24
 a22:	ac ee       	ldi	r26, 0xEC	; 236
 a24:	b4 ef       	ldi	r27, 0xF4	; 244
 a26:	a5 01       	movw	r20, r10
 a28:	94 01       	movw	r18, r8
 a2a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__mulohisi3>
 a2e:	dc 01       	movw	r26, r24
 a30:	cb 01       	movw	r24, r22
 a32:	8c 0d       	add	r24, r12
 a34:	9d 1d       	adc	r25, r13
 a36:	ae 1d       	adc	r26, r14
 a38:	bf 1d       	adc	r27, r15
 a3a:	b7 ff       	sbrs	r27, 7
 a3c:	03 c0       	rjmp	.+6      	; 0xa44 <do_rand+0x72>
 a3e:	01 97       	sbiw	r24, 0x01	; 1
 a40:	a1 09       	sbc	r26, r1
 a42:	b0 48       	sbci	r27, 0x80	; 128
 a44:	88 83       	st	Y, r24
 a46:	99 83       	std	Y+1, r25	; 0x01
 a48:	aa 83       	std	Y+2, r26	; 0x02
 a4a:	bb 83       	std	Y+3, r27	; 0x03
 a4c:	9f 77       	andi	r25, 0x7F	; 127
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	ff 90       	pop	r15
 a54:	ef 90       	pop	r14
 a56:	df 90       	pop	r13
 a58:	cf 90       	pop	r12
 a5a:	bf 90       	pop	r11
 a5c:	af 90       	pop	r10
 a5e:	9f 90       	pop	r9
 a60:	8f 90       	pop	r8
 a62:	08 95       	ret

00000a64 <rand_r>:
 a64:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <do_rand>

00000a68 <rand>:
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	91 e0       	ldi	r25, 0x01	; 1
 a6c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <do_rand>

00000a70 <srand>:
 a70:	a0 e0       	ldi	r26, 0x00	; 0
 a72:	b0 e0       	ldi	r27, 0x00	; 0
 a74:	80 93 00 01 	sts	0x0100, r24
 a78:	90 93 01 01 	sts	0x0101, r25
 a7c:	a0 93 02 01 	sts	0x0102, r26
 a80:	b0 93 03 01 	sts	0x0103, r27
 a84:	08 95       	ret

00000a86 <__muluhisi3>:
 a86:	0e 94 56 05 	call	0xaac	; 0xaac <__umulhisi3>
 a8a:	a5 9f       	mul	r26, r21
 a8c:	90 0d       	add	r25, r0
 a8e:	b4 9f       	mul	r27, r20
 a90:	90 0d       	add	r25, r0
 a92:	a4 9f       	mul	r26, r20
 a94:	80 0d       	add	r24, r0
 a96:	91 1d       	adc	r25, r1
 a98:	11 24       	eor	r1, r1
 a9a:	08 95       	ret

00000a9c <__mulshisi3>:
 a9c:	b7 ff       	sbrs	r27, 7
 a9e:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__muluhisi3>

00000aa2 <__mulohisi3>:
 aa2:	0e 94 43 05 	call	0xa86	; 0xa86 <__muluhisi3>
 aa6:	82 1b       	sub	r24, r18
 aa8:	93 0b       	sbc	r25, r19
 aaa:	08 95       	ret

00000aac <__umulhisi3>:
 aac:	a2 9f       	mul	r26, r18
 aae:	b0 01       	movw	r22, r0
 ab0:	b3 9f       	mul	r27, r19
 ab2:	c0 01       	movw	r24, r0
 ab4:	a3 9f       	mul	r26, r19
 ab6:	70 0d       	add	r23, r0
 ab8:	81 1d       	adc	r24, r1
 aba:	11 24       	eor	r1, r1
 abc:	91 1d       	adc	r25, r1
 abe:	b2 9f       	mul	r27, r18
 ac0:	70 0d       	add	r23, r0
 ac2:	81 1d       	adc	r24, r1
 ac4:	11 24       	eor	r1, r1
 ac6:	91 1d       	adc	r25, r1
 ac8:	08 95       	ret

00000aca <_exit>:
 aca:	f8 94       	cli

00000acc <__stop_program>:
 acc:	ff cf       	rjmp	.-2      	; 0xacc <__stop_program>
