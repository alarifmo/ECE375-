
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00002886  0000291a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bf  008001d6  008001d6  000029f0  2**0
                  ALLOC
  3 .stab         00005754  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cfe  00000000  00000000  00008144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009e42  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009e54  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_21>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	32 0e       	add	r3, r18
      8e:	09 0e       	add	r0, r25
      90:	09 0e       	add	r0, r25
      92:	09 0e       	add	r0, r25
      94:	09 0e       	add	r0, r25
      96:	09 0e       	add	r0, r25
      98:	09 0e       	add	r0, r25
      9a:	09 0e       	add	r0, r25
      9c:	32 0e       	add	r3, r18
      9e:	09 0e       	add	r0, r25
      a0:	09 0e       	add	r0, r25
      a2:	09 0e       	add	r0, r25
      a4:	09 0e       	add	r0, r25
      a6:	09 0e       	add	r0, r25
      a8:	09 0e       	add	r0, r25
      aa:	09 0e       	add	r0, r25
      ac:	3c 0e       	add	r3, r28
      ae:	09 0e       	add	r0, r25
      b0:	09 0e       	add	r0, r25
      b2:	09 0e       	add	r0, r25
      b4:	09 0e       	add	r0, r25
      b6:	09 0e       	add	r0, r25
      b8:	09 0e       	add	r0, r25
      ba:	09 0e       	add	r0, r25
      bc:	09 0e       	add	r0, r25
      be:	09 0e       	add	r0, r25
      c0:	09 0e       	add	r0, r25
      c2:	09 0e       	add	r0, r25
      c4:	09 0e       	add	r0, r25
      c6:	09 0e       	add	r0, r25
      c8:	09 0e       	add	r0, r25
      ca:	09 0e       	add	r0, r25
      cc:	3c 0e       	add	r3, r28
      ce:	09 0e       	add	r0, r25
      d0:	09 0e       	add	r0, r25
      d2:	09 0e       	add	r0, r25
      d4:	09 0e       	add	r0, r25
      d6:	09 0e       	add	r0, r25
      d8:	09 0e       	add	r0, r25
      da:	09 0e       	add	r0, r25
      dc:	09 0e       	add	r0, r25
      de:	09 0e       	add	r0, r25
      e0:	09 0e       	add	r0, r25
      e2:	09 0e       	add	r0, r25
      e4:	09 0e       	add	r0, r25
      e6:	09 0e       	add	r0, r25
      e8:	09 0e       	add	r0, r25
      ea:	09 0e       	add	r0, r25
      ec:	53 0e       	add	r5, r19
      ee:	09 0e       	add	r0, r25
      f0:	09 0e       	add	r0, r25
      f2:	09 0e       	add	r0, r25
      f4:	09 0e       	add	r0, r25
      f6:	09 0e       	add	r0, r25
      f8:	09 0e       	add	r0, r25
      fa:	09 0e       	add	r0, r25
      fc:	57 0e       	add	r5, r23
      fe:	09 0e       	add	r0, r25
     100:	09 0e       	add	r0, r25
     102:	09 0e       	add	r0, r25
     104:	09 0e       	add	r0, r25
     106:	09 0e       	add	r0, r25
     108:	09 0e       	add	r0, r25
     10a:	09 0e       	add	r0, r25
     10c:	09 0e       	add	r0, r25
     10e:	09 0e       	add	r0, r25
     110:	09 0e       	add	r0, r25
     112:	09 0e       	add	r0, r25
     114:	09 0e       	add	r0, r25
     116:	09 0e       	add	r0, r25
     118:	09 0e       	add	r0, r25
     11a:	09 0e       	add	r0, r25
     11c:	65 0e       	add	r6, r21
     11e:	09 0e       	add	r0, r25
     120:	09 0e       	add	r0, r25
     122:	09 0e       	add	r0, r25
     124:	09 0e       	add	r0, r25
     126:	09 0e       	add	r0, r25
     128:	09 0e       	add	r0, r25
     12a:	09 0e       	add	r0, r25
     12c:	23 0e       	add	r2, r19

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e6 e8       	ldi	r30, 0x86	; 134
     142:	f8 e2       	ldi	r31, 0x28	; 40
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a6 3d       	cpi	r26, 0xD6	; 214
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	a6 ed       	ldi	r26, 0xD6	; 214
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a5 39       	cpi	r26, 0x95	; 149
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <main>
     168:	0c 94 41 14 	jmp	0x2882	; 0x2882 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <SET_DIGIT_DOT>:
uint8_t randoTest = 0;
uint8_t inc2Bool = 0x00;
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
     170:	c5 9a       	sbi	0x18, 5	; 24
     172:	88 b3       	in	r24, 0x18	; 24
     174:	8f 7a       	andi	r24, 0xAF	; 175
     176:	88 bb       	out	0x18, r24	; 24
     178:	08 95       	ret

0000017a <SET_DIGIT_ONE>:
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
     17a:	c6 9a       	sbi	0x18, 6	; 24
     17c:	88 b3       	in	r24, 0x18	; 24
     17e:	8f 7c       	andi	r24, 0xCF	; 207
     180:	88 bb       	out	0x18, r24	; 24
     182:	08 95       	ret

00000184 <SET_DIGIT_TWO>:
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
     184:	88 b3       	in	r24, 0x18	; 24
     186:	80 63       	ori	r24, 0x30	; 48
     188:	88 bb       	out	0x18, r24	; 24
     18a:	c6 98       	cbi	0x18, 6	; 24
     18c:	08 95       	ret

0000018e <SET_DIGIT_THREE>:
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     18e:	c4 9a       	sbi	0x18, 4	; 24
     190:	88 b3       	in	r24, 0x18	; 24
     192:	8f 79       	andi	r24, 0x9F	; 159
     194:	88 bb       	out	0x18, r24	; 24
     196:	08 95       	ret

00000198 <SET_DIGIT_FOUR>:
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}
     198:	88 b3       	in	r24, 0x18	; 24
     19a:	8f 78       	andi	r24, 0x8F	; 143
     19c:	88 bb       	out	0x18, r24	; 24
     19e:	08 95       	ret

000001a0 <ENABLE_BUFFER>:

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}
     1a0:	88 b3       	in	r24, 0x18	; 24
     1a2:	80 67       	ori	r24, 0x70	; 112
     1a4:	88 bb       	out	0x18, r24	; 24
     1a6:	08 95       	ret

000001a8 <ENABLE_LED_CONTROL>:

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     1ac:	c4 9a       	sbi	0x18, 4	; 24
     1ae:	88 b3       	in	r24, 0x18	; 24
     1b0:	8f 79       	andi	r24, 0x9F	; 159
     1b2:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     1b4:	c6 9a       	sbi	0x18, 6	; 24
     1b6:	08 95       	ret

000001b8 <ENABLE_BUTTON_READ>:
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	8b bb       	out	0x1b, r24	; 27
     1bc:	1a ba       	out	0x1a, r1	; 26
     1be:	08 95       	ret

000001c0 <ENC_CLK_ENABLE>:

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
     1c0:	1e 98       	cbi	0x03, 6	; 3
     1c2:	08 95       	ret

000001c4 <ENC_CLK_DISABLE>:
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
     1c4:	1e 9a       	sbi	0x03, 6	; 3
     1c6:	08 95       	ret

000001c8 <ENC_PARALLEL_ENABLE>:

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
     1c8:	1f 98       	cbi	0x03, 7	; 3
     1ca:	08 95       	ret

000001cc <ENC_PARALLEL_DISABLE>:
void inline ENC_PARALLEL_DISABLE(void) {PORTE |=   0x80 ;}
     1cc:	1f 9a       	sbi	0x03, 7	; 3
     1ce:	08 95       	ret

000001d0 <SET_VOLUME>:

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     1d0:	68 2f       	mov	r22, r24
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 01 13 	call	0x2602	; 0x2602 <__floatsisf>
     1dc:	2a e9       	ldi	r18, 0x9A	; 154
     1de:	39 e9       	ldi	r19, 0x99	; 153
     1e0:	49 e8       	ldi	r20, 0x89	; 137
     1e2:	50 e4       	ldi	r21, 0x40	; 64
     1e4:	0e 94 8d 13 	call	0x271a	; 0x271a <__mulsf3>
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	a9 01       	movw	r20, r18
     1ee:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__addsf3>
     1f2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fixunssfsi>
     1f6:	70 93 87 00 	sts	0x0087, r23
     1fa:	60 93 86 00 	sts	0x0086, r22
     1fe:	08 95       	ret

00000200 <SET_HZ>:
void inline SET_HZ(uint16_t targetHz) {OCR1A = targetHz * 50;}
     200:	22 e3       	ldi	r18, 0x32	; 50
     202:	ac 01       	movw	r20, r24
     204:	24 9f       	mul	r18, r20
     206:	c0 01       	movw	r24, r0
     208:	25 9f       	mul	r18, r21
     20a:	90 0d       	add	r25, r0
     20c:	11 24       	eor	r1, r1
     20e:	9b bd       	out	0x2b, r25	; 43
     210:	8a bd       	out	0x2a, r24	; 42
     212:	08 95       	ret

00000214 <setLEDBrightness>:
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     214:	83 bd       	out	0x23, r24	; 35
     216:	08 95       	ret

00000218 <START_ADC_READ>:
void inline START_ADC_READ(void){ADCSRA |= (1<<ADSC);}  //Starts the read from the ADC (takes ~108uS)
     218:	36 9a       	sbi	0x06, 6	; 6
     21a:	08 95       	ret

0000021c <FINISH_ADC_READ>:
void inline FINISH_ADC_READ(void){while(bit_is_clear(ADCSRA, ADIF)); ADCSRA |= (1<<ADIF); lastADCread = ADC;}
     21c:	34 9b       	sbis	0x06, 4	; 6
     21e:	fe cf       	rjmp	.-4      	; 0x21c <FINISH_ADC_READ>
     220:	34 9a       	sbi	0x06, 4	; 6
     222:	84 b1       	in	r24, 0x04	; 4
     224:	95 b1       	in	r25, 0x05	; 5
     226:	90 93 3e 01 	sts	0x013E, r25
     22a:	80 93 3d 01 	sts	0x013D, r24
     22e:	08 95       	ret

00000230 <processLCD>:
//This was a function used by me to async update the LCD, however I ended up
//using a modified version of the code that Traylor provided on his GitHub
void inline processLCD(){

    //Output to LCD
    ++lcdCounter;
     230:	e0 91 d8 01 	lds	r30, 0x01D8
     234:	ef 5f       	subi	r30, 0xFF	; 255
     236:	e0 93 d8 01 	sts	0x01D8, r30
    if(lcdCounter == 16){
     23a:	e0 31       	cpi	r30, 0x10	; 16
     23c:	99 f0       	breq	.+38     	; 0x264 <processLCD+0x34>
      line2_col1();
      char2lcd('7');
      char2lcd('7');
      //cursor_home();
    }
    else if(lcdCounter == 33){
     23e:	e1 32       	cpi	r30, 0x21	; 33
     240:	31 f0       	breq	.+12     	; 0x24e <processLCD+0x1e>
     242:	f0 e0       	ldi	r31, 0x00	; 0
      cursor_home();//line1_col1();
      lcdCounter = 0;
    }
    

    char2lcd(lcdOutput[lcdCounter]);
     244:	e1 52       	subi	r30, 0x21	; 33
     246:	fd 4f       	sbci	r31, 0xFD	; 253
     248:	80 81       	ld	r24, Z
     24a:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <char2lcd>
      char2lcd('7');
      char2lcd('7');
      //cursor_home();
    }
    else if(lcdCounter == 33){
      cursor_home();//line1_col1();
     24e:	0e 94 93 0b 	call	0x1726	; 0x1726 <cursor_home>
      lcdCounter = 0;
     252:	10 92 d8 01 	sts	0x01D8, r1
     256:	e0 e0       	ldi	r30, 0x00	; 0
     258:	f0 e0       	ldi	r31, 0x00	; 0
    }
    

    char2lcd(lcdOutput[lcdCounter]);
     25a:	e1 52       	subi	r30, 0x21	; 33
     25c:	fd 4f       	sbci	r31, 0xFD	; 253
     25e:	80 81       	ld	r24, Z
     260:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <char2lcd>

    //Output to LCD
    ++lcdCounter;
    if(lcdCounter == 16){
      //lcdCounter = 0;
      line2_col1();
     264:	0e 94 9e 0b 	call	0x173c	; 0x173c <line2_col1>
      char2lcd('7');
     268:	87 e3       	ldi	r24, 0x37	; 55
     26a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <char2lcd>
      char2lcd('7');
     26e:	87 e3       	ldi	r24, 0x37	; 55
     270:	0e 94 b4 0b 	call	0x1768	; 0x1768 <char2lcd>
     274:	e0 91 d8 01 	lds	r30, 0x01D8
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	e4 cf       	rjmp	.-56     	; 0x244 <processLCD+0x14>

0000027c <configureIO>:

    char2lcd(lcdOutput[lcdCounter]);
}

//Configures the device IO (port directions and intializes some outputs)
void configureIO( void ){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     284:	c4 9a       	sbi	0x18, 4	; 24
     286:	88 b3       	in	r24, 0x18	; 24
     288:	8f 79       	andi	r24, 0x9F	; 159
     28a:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     28c:	c6 9a       	sbi	0x18, 6	; 24
void configureIO( void ){

  ENABLE_LED_CONTROL(); 

  //DDRA = 0xFF; //Initialize DDRA as if we want to control the LEDs
  DDRB  = 0xF0; //Upper nibble of the B register is for controlling the decoder / PWM Transistor
     28e:	80 ef       	ldi	r24, 0xF0	; 240
     290:	87 bb       	out	0x17, r24	; 23

  DDRB |= 0x07;  //Setup the SPI pins as outputs
     292:	87 b3       	in	r24, 0x17	; 23
     294:	87 60       	ori	r24, 0x07	; 7
     296:	87 bb       	out	0x17, r24	; 23

  //Setup ADC input
  DDRF  &= ~0x01;  //Setup pin 0 as an input (just in case)
     298:	c1 e6       	ldi	r28, 0x61	; 97
     29a:	d0 e0       	ldi	r29, 0x00	; 0
     29c:	88 81       	ld	r24, Y
     29e:	8e 7f       	andi	r24, 0xFE	; 254
     2a0:	88 83       	st	Y, r24
  PORTF &= ~0x01;  //Pullups must be off     (just in case)
     2a2:	a2 e6       	ldi	r26, 0x62	; 98
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	8c 91       	ld	r24, X
     2a8:	8e 7f       	andi	r24, 0xFE	; 254
     2aa:	8c 93       	st	X, r24

  //Audio output pin
  DDRD |= AUDIO_OUT;    //Pin 4 as an output
     2ac:	8c 9a       	sbi	0x11, 4	; 17

  //Volume control pin
  DDRE |= 0x08;
     2ae:	13 9a       	sbi	0x02, 3	; 2

  uint8_t i;

  //Init output to 0
  for(i = 0; i < 5; ++i){
    output[i] = 0;
     2b0:	e2 e1       	ldi	r30, 0x12	; 18
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	10 82       	st	Z, r1
     2b6:	11 82       	std	Z+1, r1	; 0x01
     2b8:	12 82       	std	Z+2, r1	; 0x02
     2ba:	13 82       	std	Z+3, r1	; 0x03
     2bc:	14 82       	std	Z+4, r1	; 0x04
     2be:	15 82       	std	Z+5, r1	; 0x05
     2c0:	16 82       	std	Z+6, r1	; 0x06
     2c2:	17 82       	std	Z+7, r1	; 0x07
     2c4:	10 86       	std	Z+8, r1	; 0x08
     2c6:	11 86       	std	Z+9, r1	; 0x09
     2c8:	12 86       	std	Z+10, r1	; 0x0a
     2ca:	13 86       	std	Z+11, r1	; 0x0b
     2cc:	14 86       	std	Z+12, r1	; 0x0c
     2ce:	15 86       	std	Z+13, r1	; 0x0d
     2d0:	16 86       	std	Z+14, r1	; 0x0e
     2d2:	17 86       	std	Z+15, r1	; 0x0f
     2d4:	10 8a       	std	Z+16, r1	; 0x10
     2d6:	11 8a       	std	Z+17, r1	; 0x11
     2d8:	12 8a       	std	Z+18, r1	; 0x12
     2da:	13 8a       	std	Z+19, r1	; 0x13
  }

  DDRE |= 0xC0;  //Enable Clk inhibit pin and async pin as outputs
     2dc:	82 b1       	in	r24, 0x02	; 2
     2de:	80 6c       	ori	r24, 0xC0	; 192
     2e0:	82 b9       	out	0x02, r24	; 2
//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
     2e2:	1e 9a       	sbi	0x03, 6	; 3

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
     2e4:	1f 98       	cbi	0x03, 7	; 3
  DDRE |= 0xC0;  //Enable Clk inhibit pin and async pin as outputs
  ENC_CLK_DISABLE();
  ENC_PARALLEL_ENABLE();


  DDRF |=   DEBUG_PIN; //Enable PORTF PINX as a debug output
     2e6:	88 81       	ld	r24, Y
     2e8:	82 60       	ori	r24, 0x02	; 2
     2ea:	88 83       	st	Y, r24
  DEBUG_LOW();  //Set the pin low to start
     2ec:	8c 91       	ld	r24, X
     2ee:	8d 7f       	andi	r24, 0xFD	; 253
     2f0:	8c 93       	st	X, r24
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <configureTimers>:

//Configures all timer/counters on the device
void configureTimers( void ){
  ////Polling loop
  //Enable TCC0 to be clocked from an external osc,
  ASSR |= (1<<AS0);
     2f8:	80 b7       	in	r24, 0x30	; 48
     2fa:	88 60       	ori	r24, 0x08	; 8
     2fc:	80 bf       	out	0x30, r24	; 48
  //Enable coutner in normal mode with no prescaler
  TCCR0 = (0<<CS02) | (0<<CS01) | (1<<CS00);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	83 bf       	out	0x33, r24	; 51

  //Wait for all ascynch warning bits to clear
  while(bit_is_set(ASSR, TCN0UB));
     302:	00 b6       	in	r0, 0x30	; 48
     304:	02 fc       	sbrc	r0, 2
     306:	fd cf       	rjmp	.-6      	; 0x302 <configureTimers+0xa>
  while(bit_is_set(ASSR, OCR0UB));
     308:	00 b6       	in	r0, 0x30	; 48
     30a:	01 fc       	sbrc	r0, 1
     30c:	fd cf       	rjmp	.-6      	; 0x308 <configureTimers+0x10>
  while(bit_is_set(ASSR, TCR0UB));
     30e:	00 b6       	in	r0, 0x30	; 48
     310:	00 fc       	sbrc	r0, 0
     312:	fd cf       	rjmp	.-6      	; 0x30e <configureTimers+0x16>

  //Enable overflow interrupts for T/C 0
  TIMSK |= (1<<TOIE0);
     314:	87 b7       	in	r24, 0x37	; 55
     316:	81 60       	ori	r24, 0x01	; 1
     318:	87 bf       	out	0x37, r24	; 55

  ////Sound Generation (TCNT1)  (currently desire between 200 and 600 and 1500 Hz
  //CTC mode
  TCCR1A |= 0x00;
     31a:	8f b5       	in	r24, 0x2f	; 47
     31c:	8f bd       	out	0x2f, r24	; 47
  //CTC mode, no prescaler
  TCCR1B |= (1<<WGM12) | (1<<CS10);
     31e:	8e b5       	in	r24, 0x2e	; 46
     320:	89 60       	ori	r24, 0x09	; 9
     322:	8e bd       	out	0x2e, r24	; 46
  //No forced compare
  TCCR1C |= 0x00;
     324:	80 91 7a 00 	lds	r24, 0x007A
     328:	80 93 7a 00 	sts	0x007A, r24
  //Initial compare value
  OCR1A   = 20000; //About 400Hz?
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	9e e4       	ldi	r25, 0x4E	; 78
     330:	9b bd       	out	0x2b, r25	; 43
     332:	8a bd       	out	0x2a, r24	; 42
  //Enable interrupt
  TIMSK  |= (1<<OCIE1A);
     334:	87 b7       	in	r24, 0x37	; 55
     336:	80 61       	ori	r24, 0x10	; 16
     338:	87 bf       	out	0x37, r24	; 55

  ////LED Dimming Control (TCNT2)
  //Enable fast PWM, non-inverting output mode
  //64 prescaler (goal is 967Hz)
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS21) | (1<<CS20);
     33a:	8b e6       	ldi	r24, 0x6B	; 107
     33c:	85 bd       	out	0x25, r24	; 37
  //Default PWM value of half brightness
  OCR2 = 0xFF / 7;
     33e:	84 e2       	ldi	r24, 0x24	; 36
     340:	83 bd       	out	0x23, r24	; 35

  ////Volume control (TCNT3)
  //9bit Fast PWM Mode, non-inverting output on OC3A
  //8 prescaler, frequency is 3.906KHz
  TCCR3A |= (1<<COM3A1) | (1<<WGM31);
     342:	80 91 8b 00 	lds	r24, 0x008B
     346:	82 68       	ori	r24, 0x82	; 130
     348:	80 93 8b 00 	sts	0x008B, r24
  TCCR3B |= (1<<WGM32) | (1<<CS31);
     34c:	80 91 8a 00 	lds	r24, 0x008A
     350:	8a 60       	ori	r24, 0x0A	; 10
     352:	80 93 8a 00 	sts	0x008A, r24
  //No forced compare
  TCCR3C |= 0x00;
     356:	80 91 8c 00 	lds	r24, 0x008C
     35a:	80 93 8c 00 	sts	0x008C, r24

  //Initialize with a 50% duty cycle
  OCR3A = 512/2;
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	90 93 87 00 	sts	0x0087, r25
     366:	80 93 86 00 	sts	0x0086, r24

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     36a:	86 e5       	ldi	r24, 0x56	; 86
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 87 00 	sts	0x0087, r25
     372:	80 93 86 00 	sts	0x0086, r24
     376:	08 95       	ret

00000378 <__vector_16>:
//Timer 0 overflow vector
//Polls the buttons / interfaces with SPI
//Counts seconds
//Updates values
//This ISR is invoked every 255 clock cycles of the 32.768kHz oscillator (~128Hz)
ISR(TIMER0_OVF_vect){
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	0b b6       	in	r0, 0x3b	; 59
     384:	0f 92       	push	r0
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
     39e:	80 91 ec 01 	lds	r24, 0x01EC
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 ec 01 	sts	0x01EC, r24
     3a8:	80 38       	cpi	r24, 0x80	; 128
     3aa:	09 f4       	brne	.+2      	; 0x3ae <__vector_16+0x36>
     3ac:	58 c0       	rjmp	.+176    	; 0x45e <__vector_16+0xe6>
 //Exectued 128Hz
  if (secondsCounter % 1 == 0){
//DEBUG_HIGH();
    //Check the buttons for input
//    checkButtons();
    NOP();
     3ae:	00 00       	nop
    NOP();
     3b0:	00 00       	nop
//Processed the ADC count and adjusts the output brighness for the screen
//Calculations courtesy of: http://academics.triton.edu/faculty/mlarosa/slope.htm
void inline processOutputBrightness( void ){


  if(lastADCread < 480)
     3b2:	80 91 3d 01 	lds	r24, 0x013D
     3b6:	90 91 3e 01 	lds	r25, 0x013E
     3ba:	80 3e       	cpi	r24, 0xE0	; 224
     3bc:	91 40       	sbci	r25, 0x01	; 1
     3be:	b8 f5       	brcc	.+110    	; 0x42e <__vector_16+0xb6>
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     3c0:	8c ed       	ldi	r24, 0xDC	; 220
     3c2:	83 bd       	out	0x23, r24	; 35
void inline START_ADC_READ(void){ADCSRA |= (1<<ADSC);}  //Starts the read from the ADC (takes ~108uS)
     3c4:	36 9a       	sbi	0x06, 6	; 6

    //processEncoders();
  }

  //Executed 4Hz
  if(secondsCounter % 32 == 0){  //Fast cycle
     3c6:	80 91 ec 01 	lds	r24, 0x01EC
     3ca:	98 2f       	mov	r25, r24
     3cc:	9f 71       	andi	r25, 0x1F	; 31
     3ce:	99 f4       	brne	.+38     	; 0x3f6 <__vector_16+0x7e>

    //START_ADC_READ(); 

    quickToggle ^= 1;
     3d0:	20 91 eb 01 	lds	r18, 0x01EB
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	92 27       	eor	r25, r18
     3d8:	90 93 eb 01 	sts	0x01EB, r25
    
    ++musicCounter;
     3dc:	20 91 e9 01 	lds	r18, 0x01E9
     3e0:	30 91 ea 01 	lds	r19, 0x01EA
     3e4:	2f 5f       	subi	r18, 0xFF	; 255
     3e6:	3f 4f       	sbci	r19, 0xFF	; 255

    if(musicCounter >= NUM_MUSIC_NOTES)
     3e8:	2f 30       	cpi	r18, 0x0F	; 15
     3ea:	31 05       	cpc	r19, r1
     3ec:	d8 f0       	brcs	.+54     	; 0x424 <__vector_16+0xac>
      musicCounter = 0;
     3ee:	10 92 ea 01 	sts	0x01EA, r1
     3f2:	10 92 e9 01 	sts	0x01E9, r1
  }

  if(secondsCounter == 128)
     3f6:	80 38       	cpi	r24, 0x80	; 128
     3f8:	11 f4       	brne	.+4      	; 0x3fe <__vector_16+0x86>
    secondsCounter = 0;
     3fa:	10 92 ec 01 	sts	0x01EC, r1
}
     3fe:	ff 91       	pop	r31
     400:	ef 91       	pop	r30
     402:	bf 91       	pop	r27
     404:	af 91       	pop	r26
     406:	9f 91       	pop	r25
     408:	8f 91       	pop	r24
     40a:	7f 91       	pop	r23
     40c:	6f 91       	pop	r22
     40e:	5f 91       	pop	r21
     410:	4f 91       	pop	r20
     412:	3f 91       	pop	r19
     414:	2f 91       	pop	r18
     416:	0f 90       	pop	r0
     418:	0b be       	out	0x3b, r0	; 59
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

    //START_ADC_READ(); 

    quickToggle ^= 1;
    
    ++musicCounter;
     424:	30 93 ea 01 	sts	0x01EA, r19
     428:	20 93 e9 01 	sts	0x01E9, r18
     42c:	e4 cf       	rjmp	.-56     	; 0x3f6 <__vector_16+0x7e>


  if(lastADCread < 480)
    setLEDBrightness(MIN_BRT);
  else
    setLEDBrightness((lastADCread * -.4) + 410);
     42e:	60 91 3d 01 	lds	r22, 0x013D
     432:	70 91 3e 01 	lds	r23, 0x013E
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__floatunsisf>
     43e:	2d ec       	ldi	r18, 0xCD	; 205
     440:	3c ec       	ldi	r19, 0xCC	; 204
     442:	4c ec       	ldi	r20, 0xCC	; 204
     444:	5e eb       	ldi	r21, 0xBE	; 190
     446:	0e 94 8d 13 	call	0x271a	; 0x271a <__mulsf3>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	4d ec       	ldi	r20, 0xCD	; 205
     450:	53 e4       	ldi	r21, 0x43	; 67
     452:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__addsf3>
     456:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fixunssfsi>
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     45a:	63 bd       	out	0x23, r22	; 35
     45c:	b3 cf       	rjmp	.-154    	; 0x3c4 <__vector_16+0x4c>
//Updates values
//This ISR is invoked every 255 clock cycles of the 32.768kHz oscillator (~128Hz)
ISR(TIMER0_OVF_vect){
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
     45e:	80 91 e7 01 	lds	r24, 0x01E7
     462:	8f 5f       	subi	r24, 0xFF	; 255
    if(seconds == 60){
     464:	8c 33       	cpi	r24, 0x3C	; 60
     466:	79 f0       	breq	.+30     	; 0x486 <__vector_16+0x10e>
//Updates values
//This ISR is invoked every 255 clock cycles of the 32.768kHz oscillator (~128Hz)
ISR(TIMER0_OVF_vect){
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
     468:	80 93 e7 01 	sts	0x01E7, r24
	if(hours >= 24)
	  hours = 0;
      }
    }

    if(snoozeCount > 0){//If a snooze has been activated
     46c:	80 91 e1 01 	lds	r24, 0x01E1
     470:	90 91 e2 01 	lds	r25, 0x01E2
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	09 f4       	brne	.+2      	; 0x47a <__vector_16+0x102>
     478:	9a cf       	rjmp	.-204    	; 0x3ae <__vector_16+0x36>
      ++snoozeCount;
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 e2 01 	sts	0x01E2, r25
     480:	80 93 e1 01 	sts	0x01E1, r24
     484:	94 cf       	rjmp	.-216    	; 0x3ae <__vector_16+0x36>
ISR(TIMER0_OVF_vect){
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
    if(seconds == 60){
      seconds = 0;
     486:	10 92 e7 01 	sts	0x01E7, r1
      minutes += 1;
     48a:	80 91 e6 01 	lds	r24, 0x01E6
     48e:	8f 5f       	subi	r24, 0xFF	; 255
      if(minutes == 60){
     490:	8c 33       	cpi	r24, 0x3C	; 60
     492:	19 f0       	breq	.+6      	; 0x49a <__vector_16+0x122>
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
    if(seconds == 60){
      seconds = 0;
      minutes += 1;
     494:	80 93 e6 01 	sts	0x01E6, r24
     498:	e9 cf       	rjmp	.-46     	; 0x46c <__vector_16+0xf4>
      if(minutes == 60){
        minutes = 0;
     49a:	10 92 e6 01 	sts	0x01E6, r1
        hours += 1;
     49e:	80 91 e5 01 	lds	r24, 0x01E5
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
	if(hours >= 24)
     4a4:	88 31       	cpi	r24, 0x18	; 24
     4a6:	18 f4       	brcc	.+6      	; 0x4ae <__vector_16+0x136>
    if(seconds == 60){
      seconds = 0;
      minutes += 1;
      if(minutes == 60){
        minutes = 0;
        hours += 1;
     4a8:	80 93 e5 01 	sts	0x01E5, r24
     4ac:	df cf       	rjmp	.-66     	; 0x46c <__vector_16+0xf4>
	if(hours >= 24)
	  hours = 0;
     4ae:	10 92 e5 01 	sts	0x01E5, r1
     4b2:	dc cf       	rjmp	.-72     	; 0x46c <__vector_16+0xf4>

000004b4 <__vector_12>:
    secondsCounter = 0;
}


//Audio generation interrupt
ISR(TIMER1_COMPA_vect){
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25
   //Toggle audio output bit
   PORTD ^= AUDIO_OUT; 
     4c2:	92 b3       	in	r25, 0x12	; 18
     4c4:	80 e1       	ldi	r24, 0x10	; 16
     4c6:	89 27       	eor	r24, r25
     4c8:	82 bb       	out	0x12, r24	; 18
}
     4ca:	9f 91       	pop	r25
     4cc:	8f 91       	pop	r24
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <configureSPI>:

//Setup SPI on the interface
void configureSPI( void ){
  //Configure SPI
  //Master mode, clk low on idle, leading edge sample
  SPCR = (1 << SPE) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA);   
     4d8:	80 e5       	ldi	r24, 0x50	; 80
     4da:	8d b9       	out	0x0d, r24	; 13
     4dc:	08 95       	ret

000004de <configureADC>:
}

//Configures the ADC
void configureADC( void ){
  //Configure the MUX for single-ended input on PORTF pin 0, right adjusted, 10 bits
  ADMUX  = (1<<REFS0);
     4de:	80 e4       	ldi	r24, 0x40	; 64
     4e0:	87 b9       	out	0x07, r24	; 7

  //Enable the ADC, don't start yet, single shot mode
  //division factor is 128 (125khz)
  //enable interrupts on conversion
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADIE);
     4e2:	8f e8       	ldi	r24, 0x8F	; 143
     4e4:	86 b9       	out	0x06, r24	; 6
     4e6:	08 95       	ret

000004e8 <__vector_21>:
}


//Stores the result of the ADC conversion
ISR(ADC_vect){
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
  lastADCread = ADC; 
     4f6:	84 b1       	in	r24, 0x04	; 4
     4f8:	95 b1       	in	r25, 0x05	; 5
     4fa:	90 93 3e 01 	sts	0x013E, r25
     4fe:	80 93 3d 01 	sts	0x013D, r24
}
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <setSegment>:

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     510:	85 30       	cpi	r24, 0x05	; 5
     512:	91 05       	cpc	r25, r1
     514:	91 f1       	breq	.+100    	; 0x57a <setSegment+0x6a>
     516:	60 f4       	brcc	.+24     	; 0x530 <setSegment+0x20>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	91 05       	cpc	r25, r1
     51c:	29 f1       	breq	.+74     	; 0x568 <setSegment+0x58>
     51e:	a8 f0       	brcs	.+42     	; 0x54a <setSegment+0x3a>
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	91 05       	cpc	r25, r1
     524:	69 f1       	breq	.+90     	; 0x580 <setSegment+0x70>
     526:	04 97       	sbiw	r24, 0x04	; 4
     528:	b9 f5       	brne	.+110    	; 0x598 <setSegment+0x88>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     52a:	89 e9       	ldi	r24, 0x99	; 153
     52c:	8b bb       	out	0x1b, r24	; 27
       break;
     52e:	08 95       	ret
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     530:	88 30       	cpi	r24, 0x08	; 8
     532:	91 05       	cpc	r25, r1
     534:	41 f1       	breq	.+80     	; 0x586 <setSegment+0x76>
     536:	80 f0       	brcs	.+32     	; 0x558 <setSegment+0x48>
     538:	89 30       	cpi	r24, 0x09	; 9
     53a:	91 05       	cpc	r25, r1
     53c:	d9 f0       	breq	.+54     	; 0x574 <setSegment+0x64>
     53e:	8f 3f       	cpi	r24, 0xFF	; 255
     540:	91 05       	cpc	r25, r1
     542:	41 f5       	brne	.+80     	; 0x594 <setSegment+0x84>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	8b bb       	out	0x1b, r24	; 27
     548:	08 95       	ret
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     54a:	00 97       	sbiw	r24, 0x00	; 0
     54c:	81 f0       	breq	.+32     	; 0x56e <setSegment+0x5e>
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	01 f5       	brne	.+64     	; 0x592 <setSegment+0x82>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     552:	89 ef       	ldi	r24, 0xF9	; 249
     554:	8b bb       	out	0x1b, r24	; 27
       break;
     556:	08 95       	ret
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     558:	86 30       	cpi	r24, 0x06	; 6
     55a:	91 05       	cpc	r25, r1
     55c:	b9 f0       	breq	.+46     	; 0x58c <setSegment+0x7c>
     55e:	07 97       	sbiw	r24, 0x07	; 7
     560:	d1 f4       	brne	.+52     	; 0x596 <setSegment+0x86>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     562:	88 ef       	ldi	r24, 0xF8	; 248
     564:	8b bb       	out	0x1b, r24	; 27
       break;
     566:	08 95       	ret
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     568:	84 ea       	ldi	r24, 0xA4	; 164
     56a:	8b bb       	out	0x1b, r24	; 27
       break;
     56c:	08 95       	ret
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     56e:	80 ec       	ldi	r24, 0xC0	; 192
     570:	8b bb       	out	0x1b, r24	; 27
       break;
     572:	08 95       	ret
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     574:	88 e9       	ldi	r24, 0x98	; 152
     576:	8b bb       	out	0x1b, r24	; 27
       break;
     578:	08 95       	ret
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     57a:	82 e9       	ldi	r24, 0x92	; 146
     57c:	8b bb       	out	0x1b, r24	; 27
       break;
     57e:	08 95       	ret
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     580:	80 eb       	ldi	r24, 0xB0	; 176
     582:	8b bb       	out	0x1b, r24	; 27
       break;
     584:	08 95       	ret
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     586:	80 e8       	ldi	r24, 0x80	; 128
     588:	8b bb       	out	0x1b, r24	; 27
       break;
     58a:	08 95       	ret
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     58c:	82 e8       	ldi	r24, 0x82	; 130
     58e:	8b bb       	out	0x1b, r24	; 27
       break;
     590:	08 95       	ret
     592:	08 95       	ret
     594:	08 95       	ret
     596:	08 95       	ret
     598:	08 95       	ret

0000059a <clearSegment>:
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	8b bb       	out	0x1b, r24	; 27
     59e:	08 95       	ret

000005a0 <setDigit>:
     5a0:	9f ef       	ldi	r25, 0xFF	; 255
     5a2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a4:	2a e1       	ldi	r18, 0x1A	; 26
     5a6:	2a 95       	dec	r18
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <setDigit+0x6>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <setDigit+0xc>
//It also sets the appropriate segment outputs.
//NOTE: There is an inherient 100uS delay with any call of this function
void setDigit( uint8_t targetDigit ){
  clearSegment();
  _delay_us(5);
  NOP();
     5ac:	00 00       	nop
  NOP();
     5ae:	00 00       	nop
  switch(targetDigit){
     5b0:	82 30       	cpi	r24, 0x02	; 2
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <setDigit+0x16>
     5b4:	8e c0       	rjmp	.+284    	; 0x6d2 <setDigit+0x132>
     5b6:	08 f0       	brcs	.+2      	; 0x5ba <setDigit+0x1a>
     5b8:	43 c0       	rjmp	.+134    	; 0x640 <setDigit+0xa0>
     5ba:	88 23       	and	r24, r24
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <setDigit+0x20>
     5be:	5c c0       	rjmp	.+184    	; 0x678 <setDigit+0xd8>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <setDigit+0x26>
     5c4:	57 c0       	rjmp	.+174    	; 0x674 <setDigit+0xd4>
uint8_t inc2Bool = 0x00;
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
     5c6:	c6 9a       	sbi	0x18, 6	; 24
     5c8:	88 b3       	in	r24, 0x18	; 24
     5ca:	8f 7c       	andi	r24, 0xCF	; 207
     5cc:	88 bb       	out	0x18, r24	; 24
        PORTA |= SEG_C;
      break;
    case 1:
      SET_DIGIT_ONE();
      //_delay_us(P_SET_DEL);
      NOP();
     5ce:	00 00       	nop
      NOP();
     5d0:	00 00       	nop
      if((settings & SET_HR) && quickToggle)
     5d2:	20 91 d6 01 	lds	r18, 0x01D6
     5d6:	30 91 d7 01 	lds	r19, 0x01D7
     5da:	21 ff       	sbrs	r18, 1
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <setDigit+0x46>
     5de:	80 91 eb 01 	lds	r24, 0x01EB
     5e2:	81 11       	cpse	r24, r1
     5e4:	27 c1       	rjmp	.+590    	; 0x834 <setDigit+0x294>
        clearSegment();
      //else
      //  setSegment(output[1]);
      //Check if we want to remove a leading zero
      else if(((hours > 0) && (hours < 10)) || ((hours > 12) && (hours < 22)) && !(settings & TIME24)){ //Then we want to remove 0
     5e6:	80 91 e5 01 	lds	r24, 0x01E5
     5ea:	9f ef       	ldi	r25, 0xFF	; 255
     5ec:	98 0f       	add	r25, r24
     5ee:	99 30       	cpi	r25, 0x09	; 9
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <setDigit+0x54>
     5f2:	e3 c0       	rjmp	.+454    	; 0x7ba <setDigit+0x21a>
     5f4:	8d 50       	subi	r24, 0x0D	; 13
     5f6:	89 30       	cpi	r24, 0x09	; 9
     5f8:	30 f4       	brcc	.+12     	; 0x606 <setDigit+0x66>
     5fa:	80 91 d6 01 	lds	r24, 0x01D6
     5fe:	90 91 d7 01 	lds	r25, 0x01D7
     602:	82 ff       	sbrs	r24, 2
     604:	da c0       	rjmp	.+436    	; 0x7ba <setDigit+0x21a>
        clearSegment();
      }
      else
        setSegment(output[1]);
     606:	80 91 16 02 	lds	r24, 0x0216
     60a:	90 91 17 02 	lds	r25, 0x0217
     60e:	a0 91 18 02 	lds	r26, 0x0218
     612:	b0 91 19 02 	lds	r27, 0x0219
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     616:	85 30       	cpi	r24, 0x05	; 5
     618:	91 05       	cpc	r25, r1
     61a:	09 f4       	brne	.+2      	; 0x61e <setDigit+0x7e>
     61c:	a4 c1       	rjmp	.+840    	; 0x966 <setDigit+0x3c6>
     61e:	08 f0       	brcs	.+2      	; 0x622 <setDigit+0x82>
     620:	4a c1       	rjmp	.+660    	; 0x8b6 <setDigit+0x316>
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	91 05       	cpc	r25, r1
     626:	09 f4       	brne	.+2      	; 0x62a <setDigit+0x8a>
     628:	a1 c1       	rjmp	.+834    	; 0x96c <setDigit+0x3cc>
     62a:	08 f0       	brcs	.+2      	; 0x62e <setDigit+0x8e>
     62c:	93 c1       	rjmp	.+806    	; 0x954 <setDigit+0x3b4>
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	09 f4       	brne	.+2      	; 0x634 <setDigit+0x94>
     632:	a5 c1       	rjmp	.+842    	; 0x97e <setDigit+0x3de>
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	09 f0       	breq	.+2      	; 0x63a <setDigit+0x9a>
     638:	c2 c0       	rjmp	.+388    	; 0x7be <setDigit+0x21e>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     63a:	89 ef       	ldi	r24, 0xF9	; 249
     63c:	8b bb       	out	0x1b, r24	; 27
     63e:	bf c0       	rjmp	.+382    	; 0x7be <setDigit+0x21e>
void setDigit( uint8_t targetDigit ){
  clearSegment();
  _delay_us(5);
  NOP();
  NOP();
  switch(targetDigit){
     640:	83 30       	cpi	r24, 0x03	; 3
     642:	79 f1       	breq	.+94     	; 0x6a2 <setDigit+0x102>
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	b9 f4       	brne	.+46     	; 0x676 <setDigit+0xd6>
//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}
     648:	88 b3       	in	r24, 0x18	; 24
     64a:	8f 78       	andi	r24, 0x8F	; 143
     64c:	88 bb       	out	0x18, r24	; 24
        PORTA = PORTA & ~(SEG_DP);
      break;
    case 4:
      SET_DIGIT_FOUR();
      //_delay_us(P_SET_DEL);
      NOP();
     64e:	00 00       	nop
      NOP();
     650:	00 00       	nop
      if((settings & SET_MIN) && quickToggle)
     652:	20 91 d6 01 	lds	r18, 0x01D6
     656:	30 91 d7 01 	lds	r19, 0x01D7
     65a:	20 ff       	sbrs	r18, 0
     65c:	52 c0       	rjmp	.+164    	; 0x702 <setDigit+0x162>
     65e:	80 91 eb 01 	lds	r24, 0x01EB
     662:	88 23       	and	r24, r24
     664:	09 f4       	brne	.+2      	; 0x668 <setDigit+0xc8>
     666:	4d c0       	rjmp	.+154    	; 0x702 <setDigit+0x162>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     668:	9b bb       	out	0x1b, r25	; 27
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
     66a:	80 91 e0 01 	lds	r24, 0x01E0
     66e:	81 11       	cpse	r24, r1
        PORTA = PORTA & ~(SEG_DP);
     670:	df 98       	cbi	0x1b, 7	; 27
     672:	08 95       	ret
     674:	08 95       	ret
     676:	08 95       	ret
uint8_t randoTest = 0;
uint8_t inc2Bool = 0x00;
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
     678:	c5 9a       	sbi	0x18, 5	; 24
     67a:	88 b3       	in	r24, 0x18	; 24
     67c:	8f 7a       	andi	r24, 0xAF	; 175
     67e:	88 bb       	out	0x18, r24	; 24
  switch(targetDigit){

    case 0: //colon control
      SET_DIGIT_DOT();  //Digit control
      //_delay_us(P_SET_DEL);
      NOP();
     680:	00 00       	nop
      NOP();
     682:	00 00       	nop
      
      if(colon)
     684:	80 91 da 01 	lds	r24, 0x01DA
     688:	88 23       	and	r24, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <setDigit+0xee>
     68c:	a1 c0       	rjmp	.+322    	; 0x7d0 <setDigit+0x230>
	PORTA = PORTA & ~(SEG_A | SEG_B);
     68e:	8b b3       	in	r24, 0x1b	; 27
     690:	8c 7f       	andi	r24, 0xFC	; 252
     692:	8b bb       	out	0x1b, r24	; 27
      else
        PORTA |= SEG_A | SEG_B; 
      
      if(upperDot)
     694:	80 91 db 01 	lds	r24, 0x01DB
     698:	88 23       	and	r24, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <setDigit+0xfe>
     69c:	97 c0       	rjmp	.+302    	; 0x7cc <setDigit+0x22c>
        PORTA = PORTA & ~(SEG_C);
     69e:	da 98       	cbi	0x1b, 2	; 27
     6a0:	08 95       	ret

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     6a2:	c4 9a       	sbi	0x18, 4	; 24
     6a4:	88 b3       	in	r24, 0x18	; 24
     6a6:	8f 79       	andi	r24, 0x9F	; 159
     6a8:	88 bb       	out	0x18, r24	; 24
        PORTA = PORTA & ~(SEG_DP);
      break;
    case 3:
      SET_DIGIT_THREE();
      //_delay_us(P_SET_DEL);
      NOP();
     6aa:	00 00       	nop
      NOP();
     6ac:	00 00       	nop
      if((settings & SET_MIN) && quickToggle)
     6ae:	20 91 d6 01 	lds	r18, 0x01D6
     6b2:	30 91 d7 01 	lds	r19, 0x01D7
     6b6:	20 ff       	sbrs	r18, 0
     6b8:	5d c0       	rjmp	.+186    	; 0x774 <setDigit+0x1d4>
     6ba:	80 91 eb 01 	lds	r24, 0x01EB
     6be:	88 23       	and	r24, r24
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <setDigit+0x124>
     6c2:	58 c0       	rjmp	.+176    	; 0x774 <setDigit+0x1d4>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     6c4:	9b bb       	out	0x1b, r25	; 27
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[3]);
      if(dot[3])
     6c6:	80 91 df 01 	lds	r24, 0x01DF
     6ca:	88 23       	and	r24, r24
     6cc:	91 f2       	breq	.-92     	; 0x672 <setDigit+0xd2>
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
        PORTA = PORTA & ~(SEG_DP);
     6ce:	df 98       	cbi	0x1b, 7	; 27
     6d0:	d0 cf       	rjmp	.-96     	; 0x672 <setDigit+0xd2>
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
     6d2:	88 b3       	in	r24, 0x18	; 24
     6d4:	80 63       	ori	r24, 0x30	; 48
     6d6:	88 bb       	out	0x18, r24	; 24
     6d8:	c6 98       	cbi	0x18, 6	; 24
        PORTA = PORTA & ~(SEG_DP);
      break;
    case 2:
      SET_DIGIT_TWO();
      //_delay_us(P_SET_DEL);
      NOP();
     6da:	00 00       	nop
      NOP();
     6dc:	00 00       	nop
      if((settings & SET_HR) && quickToggle)
     6de:	20 91 d6 01 	lds	r18, 0x01D6
     6e2:	30 91 d7 01 	lds	r19, 0x01D7
     6e6:	21 ff       	sbrs	r18, 1
     6e8:	29 c0       	rjmp	.+82     	; 0x73c <setDigit+0x19c>
     6ea:	80 91 eb 01 	lds	r24, 0x01EB
     6ee:	88 23       	and	r24, r24
     6f0:	29 f1       	breq	.+74     	; 0x73c <setDigit+0x19c>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     6f2:	9b bb       	out	0x1b, r25	; 27
      NOP();
      if((settings & SET_HR) && quickToggle)
        clearSegment();
      else
        setSegment(output[2]);
      if(dot[2])
     6f4:	80 91 de 01 	lds	r24, 0x01DE
     6f8:	88 23       	and	r24, r24
     6fa:	09 f4       	brne	.+2      	; 0x6fe <setDigit+0x15e>
     6fc:	ba cf       	rjmp	.-140    	; 0x672 <setDigit+0xd2>
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
        PORTA = PORTA & ~(SEG_DP);
     6fe:	df 98       	cbi	0x1b, 7	; 27
     700:	b8 cf       	rjmp	.-144    	; 0x672 <setDigit+0xd2>
      NOP();
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
     702:	80 91 22 02 	lds	r24, 0x0222
     706:	90 91 23 02 	lds	r25, 0x0223
     70a:	a0 91 24 02 	lds	r26, 0x0224
     70e:	b0 91 25 02 	lds	r27, 0x0225
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     712:	85 30       	cpi	r24, 0x05	; 5
     714:	91 05       	cpc	r25, r1
     716:	09 f4       	brne	.+2      	; 0x71a <setDigit+0x17a>
     718:	e4 c0       	rjmp	.+456    	; 0x8e2 <setDigit+0x342>
     71a:	08 f0       	brcs	.+2      	; 0x71e <setDigit+0x17e>
     71c:	7c c0       	rjmp	.+248    	; 0x816 <setDigit+0x276>
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	91 05       	cpc	r25, r1
     722:	09 f4       	brne	.+2      	; 0x726 <setDigit+0x186>
     724:	d8 c0       	rjmp	.+432    	; 0x8d6 <setDigit+0x336>
     726:	08 f0       	brcs	.+2      	; 0x72a <setDigit+0x18a>
     728:	87 c0       	rjmp	.+270    	; 0x838 <setDigit+0x298>
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	09 f4       	brne	.+2      	; 0x730 <setDigit+0x190>
     72e:	d6 c0       	rjmp	.+428    	; 0x8dc <setDigit+0x33c>
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	09 f0       	breq	.+2      	; 0x736 <setDigit+0x196>
     734:	9a cf       	rjmp	.-204    	; 0x66a <setDigit+0xca>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     736:	89 ef       	ldi	r24, 0xF9	; 249
     738:	8b bb       	out	0x1b, r24	; 27
     73a:	97 cf       	rjmp	.-210    	; 0x66a <setDigit+0xca>
      NOP();
      NOP();
      if((settings & SET_HR) && quickToggle)
        clearSegment();
      else
        setSegment(output[2]);
     73c:	80 91 1a 02 	lds	r24, 0x021A
     740:	90 91 1b 02 	lds	r25, 0x021B
     744:	a0 91 1c 02 	lds	r26, 0x021C
     748:	b0 91 1d 02 	lds	r27, 0x021D
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     74c:	85 30       	cpi	r24, 0x05	; 5
     74e:	91 05       	cpc	r25, r1
     750:	09 f4       	brne	.+2      	; 0x754 <setDigit+0x1b4>
     752:	e8 c0       	rjmp	.+464    	; 0x924 <setDigit+0x384>
     754:	08 f0       	brcs	.+2      	; 0x758 <setDigit+0x1b8>
     756:	50 c0       	rjmp	.+160    	; 0x7f8 <setDigit+0x258>
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	91 05       	cpc	r25, r1
     75c:	09 f4       	brne	.+2      	; 0x760 <setDigit+0x1c0>
     75e:	c4 c0       	rjmp	.+392    	; 0x8e8 <setDigit+0x348>
     760:	08 f0       	brcs	.+2      	; 0x764 <setDigit+0x1c4>
     762:	74 c0       	rjmp	.+232    	; 0x84c <setDigit+0x2ac>
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <setDigit+0x1ca>
     768:	c5 c0       	rjmp	.+394    	; 0x8f4 <setDigit+0x354>
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	19 f6       	brne	.-122    	; 0x6f4 <setDigit+0x154>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     76e:	89 ef       	ldi	r24, 0xF9	; 249
     770:	8b bb       	out	0x1b, r24	; 27
     772:	c0 cf       	rjmp	.-128    	; 0x6f4 <setDigit+0x154>
      NOP();
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[3]);
     774:	80 91 1e 02 	lds	r24, 0x021E
     778:	90 91 1f 02 	lds	r25, 0x021F
     77c:	a0 91 20 02 	lds	r26, 0x0220
     780:	b0 91 21 02 	lds	r27, 0x0221
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	91 05       	cpc	r25, r1
     788:	09 f4       	brne	.+2      	; 0x78c <setDigit+0x1ec>
     78a:	c0 c0       	rjmp	.+384    	; 0x90c <setDigit+0x36c>
     78c:	28 f5       	brcc	.+74     	; 0x7d8 <setDigit+0x238>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	91 05       	cpc	r25, r1
     792:	09 f4       	brne	.+2      	; 0x796 <setDigit+0x1f6>
     794:	c1 c0       	rjmp	.+386    	; 0x918 <setDigit+0x378>
     796:	08 f0       	brcs	.+2      	; 0x79a <setDigit+0x1fa>
     798:	6e c0       	rjmp	.+220    	; 0x876 <setDigit+0x2d6>
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	09 f4       	brne	.+2      	; 0x7a0 <setDigit+0x200>
     79e:	b9 c0       	rjmp	.+370    	; 0x912 <setDigit+0x372>
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <setDigit+0x206>
     7a4:	90 cf       	rjmp	.-224    	; 0x6c6 <setDigit+0x126>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     7a6:	89 ef       	ldi	r24, 0xF9	; 249
     7a8:	8b bb       	out	0x1b, r24	; 27
     7aa:	8d cf       	rjmp	.-230    	; 0x6c6 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7ac:	89 30       	cpi	r24, 0x09	; 9
     7ae:	91 05       	cpc	r25, r1
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <setDigit+0x214>
     7b2:	df c0       	rjmp	.+446    	; 0x972 <setDigit+0x3d2>
     7b4:	8f 3f       	cpi	r24, 0xFF	; 255
     7b6:	91 05       	cpc	r25, r1
     7b8:	11 f4       	brne	.+4      	; 0x7be <setDigit+0x21e>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	8b bb       	out	0x1b, r24	; 27
      else if(((hours > 0) && (hours < 10)) || ((hours > 12) && (hours < 22)) && !(settings & TIME24)){ //Then we want to remove 0
        clearSegment();
      }
      else
        setSegment(output[1]);
      if(dot[1])
     7be:	80 91 dd 01 	lds	r24, 0x01DD
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <setDigit+0x228>
     7c6:	55 cf       	rjmp	.-342    	; 0x672 <setDigit+0xd2>
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
        PORTA = PORTA & ~(SEG_DP);
     7c8:	df 98       	cbi	0x1b, 7	; 27
     7ca:	53 cf       	rjmp	.-346    	; 0x672 <setDigit+0xd2>
        PORTA |= SEG_A | SEG_B; 
      
      if(upperDot)
        PORTA = PORTA & ~(SEG_C);
      else
        PORTA |= SEG_C;
     7cc:	da 9a       	sbi	0x1b, 2	; 27
     7ce:	08 95       	ret
      NOP();
      
      if(colon)
	PORTA = PORTA & ~(SEG_A | SEG_B);
      else
        PORTA |= SEG_A | SEG_B; 
     7d0:	8b b3       	in	r24, 0x1b	; 27
     7d2:	83 60       	ori	r24, 0x03	; 3
     7d4:	8b bb       	out	0x1b, r24	; 27
     7d6:	5e cf       	rjmp	.-324    	; 0x694 <setDigit+0xf4>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7d8:	88 30       	cpi	r24, 0x08	; 8
     7da:	91 05       	cpc	r25, r1
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <setDigit+0x240>
     7de:	a8 c0       	rjmp	.+336    	; 0x930 <setDigit+0x390>
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <setDigit+0x244>
     7e2:	5e c0       	rjmp	.+188    	; 0x8a0 <setDigit+0x300>
     7e4:	86 30       	cpi	r24, 0x06	; 6
     7e6:	91 05       	cpc	r25, r1
     7e8:	09 f4       	brne	.+2      	; 0x7ec <setDigit+0x24c>
     7ea:	9f c0       	rjmp	.+318    	; 0x92a <setDigit+0x38a>
     7ec:	07 97       	sbiw	r24, 0x07	; 7
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <setDigit+0x252>
     7f0:	6a cf       	rjmp	.-300    	; 0x6c6 <setDigit+0x126>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     7f2:	88 ef       	ldi	r24, 0xF8	; 248
     7f4:	8b bb       	out	0x1b, r24	; 27
     7f6:	67 cf       	rjmp	.-306    	; 0x6c6 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7f8:	88 30       	cpi	r24, 0x08	; 8
     7fa:	91 05       	cpc	r25, r1
     7fc:	09 f4       	brne	.+2      	; 0x800 <setDigit+0x260>
     7fe:	80 c0       	rjmp	.+256    	; 0x900 <setDigit+0x360>
     800:	78 f5       	brcc	.+94     	; 0x860 <setDigit+0x2c0>
     802:	86 30       	cpi	r24, 0x06	; 6
     804:	91 05       	cpc	r25, r1
     806:	09 f4       	brne	.+2      	; 0x80a <setDigit+0x26a>
     808:	78 c0       	rjmp	.+240    	; 0x8fa <setDigit+0x35a>
     80a:	07 97       	sbiw	r24, 0x07	; 7
     80c:	09 f0       	breq	.+2      	; 0x810 <setDigit+0x270>
     80e:	72 cf       	rjmp	.-284    	; 0x6f4 <setDigit+0x154>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     810:	88 ef       	ldi	r24, 0xF8	; 248
     812:	8b bb       	out	0x1b, r24	; 27
     814:	6f cf       	rjmp	.-290    	; 0x6f4 <setDigit+0x154>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     816:	88 30       	cpi	r24, 0x08	; 8
     818:	91 05       	cpc	r25, r1
     81a:	09 f4       	brne	.+2      	; 0x81e <setDigit+0x27e>
     81c:	92 c0       	rjmp	.+292    	; 0x942 <setDigit+0x3a2>
     81e:	a8 f5       	brcc	.+106    	; 0x88a <setDigit+0x2ea>
     820:	86 30       	cpi	r24, 0x06	; 6
     822:	91 05       	cpc	r25, r1
     824:	09 f4       	brne	.+2      	; 0x828 <setDigit+0x288>
     826:	8a c0       	rjmp	.+276    	; 0x93c <setDigit+0x39c>
     828:	07 97       	sbiw	r24, 0x07	; 7
     82a:	09 f0       	breq	.+2      	; 0x82e <setDigit+0x28e>
     82c:	1e cf       	rjmp	.-452    	; 0x66a <setDigit+0xca>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     82e:	88 ef       	ldi	r24, 0xF8	; 248
     830:	8b bb       	out	0x1b, r24	; 27
     832:	1b cf       	rjmp	.-458    	; 0x66a <setDigit+0xca>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     834:	9b bb       	out	0x1b, r25	; 27
     836:	c3 cf       	rjmp	.-122    	; 0x7be <setDigit+0x21e>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     838:	83 30       	cpi	r24, 0x03	; 3
     83a:	91 05       	cpc	r25, r1
     83c:	09 f4       	brne	.+2      	; 0x840 <setDigit+0x2a0>
     83e:	57 c0       	rjmp	.+174    	; 0x8ee <setDigit+0x34e>
     840:	04 97       	sbiw	r24, 0x04	; 4
     842:	09 f0       	breq	.+2      	; 0x846 <setDigit+0x2a6>
     844:	12 cf       	rjmp	.-476    	; 0x66a <setDigit+0xca>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     846:	89 e9       	ldi	r24, 0x99	; 153
     848:	8b bb       	out	0x1b, r24	; 27
     84a:	0f cf       	rjmp	.-482    	; 0x66a <setDigit+0xca>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     84c:	83 30       	cpi	r24, 0x03	; 3
     84e:	91 05       	cpc	r25, r1
     850:	09 f4       	brne	.+2      	; 0x854 <setDigit+0x2b4>
     852:	59 c0       	rjmp	.+178    	; 0x906 <setDigit+0x366>
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	09 f0       	breq	.+2      	; 0x85a <setDigit+0x2ba>
     858:	4d cf       	rjmp	.-358    	; 0x6f4 <setDigit+0x154>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     85a:	89 e9       	ldi	r24, 0x99	; 153
     85c:	8b bb       	out	0x1b, r24	; 27
     85e:	4a cf       	rjmp	.-364    	; 0x6f4 <setDigit+0x154>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     860:	89 30       	cpi	r24, 0x09	; 9
     862:	91 05       	cpc	r25, r1
     864:	09 f4       	brne	.+2      	; 0x868 <setDigit+0x2c8>
     866:	5b c0       	rjmp	.+182    	; 0x91e <setDigit+0x37e>
     868:	8f 3f       	cpi	r24, 0xFF	; 255
     86a:	91 05       	cpc	r25, r1
     86c:	09 f0       	breq	.+2      	; 0x870 <setDigit+0x2d0>
     86e:	42 cf       	rjmp	.-380    	; 0x6f4 <setDigit+0x154>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	8b bb       	out	0x1b, r24	; 27
     874:	3f cf       	rjmp	.-386    	; 0x6f4 <setDigit+0x154>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	91 05       	cpc	r25, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <setDigit+0x2de>
     87c:	65 c0       	rjmp	.+202    	; 0x948 <setDigit+0x3a8>
     87e:	04 97       	sbiw	r24, 0x04	; 4
     880:	09 f0       	breq	.+2      	; 0x884 <setDigit+0x2e4>
     882:	21 cf       	rjmp	.-446    	; 0x6c6 <setDigit+0x126>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     884:	89 e9       	ldi	r24, 0x99	; 153
     886:	8b bb       	out	0x1b, r24	; 27
     888:	1e cf       	rjmp	.-452    	; 0x6c6 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     88a:	89 30       	cpi	r24, 0x09	; 9
     88c:	91 05       	cpc	r25, r1
     88e:	09 f4       	brne	.+2      	; 0x892 <setDigit+0x2f2>
     890:	52 c0       	rjmp	.+164    	; 0x936 <setDigit+0x396>
     892:	8f 3f       	cpi	r24, 0xFF	; 255
     894:	91 05       	cpc	r25, r1
     896:	09 f0       	breq	.+2      	; 0x89a <setDigit+0x2fa>
     898:	e8 ce       	rjmp	.-560    	; 0x66a <setDigit+0xca>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	8b bb       	out	0x1b, r24	; 27
     89e:	e5 ce       	rjmp	.-566    	; 0x66a <setDigit+0xca>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     8a0:	89 30       	cpi	r24, 0x09	; 9
     8a2:	91 05       	cpc	r25, r1
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <setDigit+0x308>
     8a6:	53 c0       	rjmp	.+166    	; 0x94e <setDigit+0x3ae>
     8a8:	8f 3f       	cpi	r24, 0xFF	; 255
     8aa:	91 05       	cpc	r25, r1
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <setDigit+0x310>
     8ae:	0b cf       	rjmp	.-490    	; 0x6c6 <setDigit+0x126>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	8b bb       	out	0x1b, r24	; 27
     8b4:	08 cf       	rjmp	.-496    	; 0x6c6 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     8b6:	88 30       	cpi	r24, 0x08	; 8
     8b8:	91 05       	cpc	r25, r1
     8ba:	09 f4       	brne	.+2      	; 0x8be <setDigit+0x31e>
     8bc:	63 c0       	rjmp	.+198    	; 0x984 <setDigit+0x3e4>
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <setDigit+0x322>
     8c0:	75 cf       	rjmp	.-278    	; 0x7ac <setDigit+0x20c>
     8c2:	86 30       	cpi	r24, 0x06	; 6
     8c4:	91 05       	cpc	r25, r1
     8c6:	09 f4       	brne	.+2      	; 0x8ca <setDigit+0x32a>
     8c8:	57 c0       	rjmp	.+174    	; 0x978 <setDigit+0x3d8>
     8ca:	07 97       	sbiw	r24, 0x07	; 7
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <setDigit+0x330>
     8ce:	77 cf       	rjmp	.-274    	; 0x7be <setDigit+0x21e>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     8d0:	88 ef       	ldi	r24, 0xF8	; 248
     8d2:	8b bb       	out	0x1b, r24	; 27
     8d4:	74 cf       	rjmp	.-280    	; 0x7be <setDigit+0x21e>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     8d6:	84 ea       	ldi	r24, 0xA4	; 164
     8d8:	8b bb       	out	0x1b, r24	; 27
     8da:	c7 ce       	rjmp	.-626    	; 0x66a <setDigit+0xca>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     8dc:	80 ec       	ldi	r24, 0xC0	; 192
     8de:	8b bb       	out	0x1b, r24	; 27
     8e0:	c4 ce       	rjmp	.-632    	; 0x66a <setDigit+0xca>
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     8e2:	82 e9       	ldi	r24, 0x92	; 146
     8e4:	8b bb       	out	0x1b, r24	; 27
     8e6:	c1 ce       	rjmp	.-638    	; 0x66a <setDigit+0xca>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     8e8:	84 ea       	ldi	r24, 0xA4	; 164
     8ea:	8b bb       	out	0x1b, r24	; 27
     8ec:	03 cf       	rjmp	.-506    	; 0x6f4 <setDigit+0x154>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     8ee:	80 eb       	ldi	r24, 0xB0	; 176
     8f0:	8b bb       	out	0x1b, r24	; 27
     8f2:	bb ce       	rjmp	.-650    	; 0x66a <setDigit+0xca>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     8f4:	80 ec       	ldi	r24, 0xC0	; 192
     8f6:	8b bb       	out	0x1b, r24	; 27
     8f8:	fd ce       	rjmp	.-518    	; 0x6f4 <setDigit+0x154>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     8fa:	82 e8       	ldi	r24, 0x82	; 130
     8fc:	8b bb       	out	0x1b, r24	; 27
     8fe:	fa ce       	rjmp	.-524    	; 0x6f4 <setDigit+0x154>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     900:	80 e8       	ldi	r24, 0x80	; 128
     902:	8b bb       	out	0x1b, r24	; 27
     904:	f7 ce       	rjmp	.-530    	; 0x6f4 <setDigit+0x154>
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     906:	80 eb       	ldi	r24, 0xB0	; 176
     908:	8b bb       	out	0x1b, r24	; 27
     90a:	f4 ce       	rjmp	.-536    	; 0x6f4 <setDigit+0x154>
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     90c:	82 e9       	ldi	r24, 0x92	; 146
     90e:	8b bb       	out	0x1b, r24	; 27
     910:	da ce       	rjmp	.-588    	; 0x6c6 <setDigit+0x126>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     912:	80 ec       	ldi	r24, 0xC0	; 192
     914:	8b bb       	out	0x1b, r24	; 27
     916:	d7 ce       	rjmp	.-594    	; 0x6c6 <setDigit+0x126>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     918:	84 ea       	ldi	r24, 0xA4	; 164
     91a:	8b bb       	out	0x1b, r24	; 27
     91c:	d4 ce       	rjmp	.-600    	; 0x6c6 <setDigit+0x126>
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     91e:	88 e9       	ldi	r24, 0x98	; 152
     920:	8b bb       	out	0x1b, r24	; 27
     922:	e8 ce       	rjmp	.-560    	; 0x6f4 <setDigit+0x154>
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     924:	82 e9       	ldi	r24, 0x92	; 146
     926:	8b bb       	out	0x1b, r24	; 27
     928:	e5 ce       	rjmp	.-566    	; 0x6f4 <setDigit+0x154>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     92a:	82 e8       	ldi	r24, 0x82	; 130
     92c:	8b bb       	out	0x1b, r24	; 27
     92e:	cb ce       	rjmp	.-618    	; 0x6c6 <setDigit+0x126>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     930:	80 e8       	ldi	r24, 0x80	; 128
     932:	8b bb       	out	0x1b, r24	; 27
     934:	c8 ce       	rjmp	.-624    	; 0x6c6 <setDigit+0x126>
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     936:	88 e9       	ldi	r24, 0x98	; 152
     938:	8b bb       	out	0x1b, r24	; 27
     93a:	97 ce       	rjmp	.-722    	; 0x66a <setDigit+0xca>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     93c:	82 e8       	ldi	r24, 0x82	; 130
     93e:	8b bb       	out	0x1b, r24	; 27
     940:	94 ce       	rjmp	.-728    	; 0x66a <setDigit+0xca>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     942:	80 e8       	ldi	r24, 0x80	; 128
     944:	8b bb       	out	0x1b, r24	; 27
     946:	91 ce       	rjmp	.-734    	; 0x66a <setDigit+0xca>
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     948:	80 eb       	ldi	r24, 0xB0	; 176
     94a:	8b bb       	out	0x1b, r24	; 27
     94c:	bc ce       	rjmp	.-648    	; 0x6c6 <setDigit+0x126>
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     94e:	88 e9       	ldi	r24, 0x98	; 152
     950:	8b bb       	out	0x1b, r24	; 27
     952:	b9 ce       	rjmp	.-654    	; 0x6c6 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	c1 f0       	breq	.+48     	; 0x98a <setDigit+0x3ea>
     95a:	04 97       	sbiw	r24, 0x04	; 4
     95c:	09 f0       	breq	.+2      	; 0x960 <setDigit+0x3c0>
     95e:	2f cf       	rjmp	.-418    	; 0x7be <setDigit+0x21e>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     960:	89 e9       	ldi	r24, 0x99	; 153
     962:	8b bb       	out	0x1b, r24	; 27
     964:	2c cf       	rjmp	.-424    	; 0x7be <setDigit+0x21e>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     966:	82 e9       	ldi	r24, 0x92	; 146
     968:	8b bb       	out	0x1b, r24	; 27
     96a:	29 cf       	rjmp	.-430    	; 0x7be <setDigit+0x21e>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     96c:	84 ea       	ldi	r24, 0xA4	; 164
     96e:	8b bb       	out	0x1b, r24	; 27
     970:	26 cf       	rjmp	.-436    	; 0x7be <setDigit+0x21e>
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     972:	88 e9       	ldi	r24, 0x98	; 152
     974:	8b bb       	out	0x1b, r24	; 27
     976:	23 cf       	rjmp	.-442    	; 0x7be <setDigit+0x21e>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     978:	82 e8       	ldi	r24, 0x82	; 130
     97a:	8b bb       	out	0x1b, r24	; 27
     97c:	20 cf       	rjmp	.-448    	; 0x7be <setDigit+0x21e>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     97e:	80 ec       	ldi	r24, 0xC0	; 192
     980:	8b bb       	out	0x1b, r24	; 27
     982:	1d cf       	rjmp	.-454    	; 0x7be <setDigit+0x21e>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	8b bb       	out	0x1b, r24	; 27
     988:	1a cf       	rjmp	.-460    	; 0x7be <setDigit+0x21e>
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     98a:	80 eb       	ldi	r24, 0xB0	; 176
     98c:	8b bb       	out	0x1b, r24	; 27
     98e:	17 cf       	rjmp	.-466    	; 0x7be <setDigit+0x21e>

00000990 <processButtonPress>:

//This function is called when a button is pressed, and handles processing the press, as well as
//changing tne numbers that are to be outputted.
void processButtonPress( void ){
  
  uint8_t temp = 0xFF - PINA;
     990:	89 b3       	in	r24, 0x19	; 25
     992:	80 95       	com	r24

  switch(temp){
     994:	88 30       	cpi	r24, 0x08	; 8
     996:	09 f4       	brne	.+2      	; 0x99a <processButtonPress+0xa>
     998:	89 c0       	rjmp	.+274    	; 0xaac <processButtonPress+0x11c>
     99a:	f0 f0       	brcs	.+60     	; 0x9d8 <processButtonPress+0x48>
     99c:	80 32       	cpi	r24, 0x20	; 32
     99e:	09 f4       	brne	.+2      	; 0x9a2 <processButtonPress+0x12>
     9a0:	71 c0       	rjmp	.+226    	; 0xa84 <processButtonPress+0xf4>
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <processButtonPress+0x16>
     9a4:	53 c0       	rjmp	.+166    	; 0xa4c <processButtonPress+0xbc>
     9a6:	80 34       	cpi	r24, 0x40	; 64
     9a8:	e9 f1       	breq	.+122    	; 0xa24 <processButtonPress+0x94>
     9aa:	80 38       	cpi	r24, 0x80	; 128
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <processButtonPress+0x20>
     9ae:	b6 c0       	rjmp	.+364    	; 0xb1c <processButtonPress+0x18c>
    case 0x40: //Toggle Set minutes
      settings ^= SET_MIN;
      settings &= ~(SET_HR);
      break;
    case 0x80:
      settings ^= SET_HR;
     9b0:	80 91 d6 01 	lds	r24, 0x01D6
     9b4:	90 91 d7 01 	lds	r25, 0x01D7
     9b8:	22 e0       	ldi	r18, 0x02	; 2
     9ba:	82 27       	eor	r24, r18
     9bc:	90 93 d7 01 	sts	0x01D7, r25
     9c0:	80 93 d6 01 	sts	0x01D6, r24
      settings &= ~(SET_MIN);
     9c4:	80 91 d6 01 	lds	r24, 0x01D6
     9c8:	90 91 d7 01 	lds	r25, 0x01D7
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	90 93 d7 01 	sts	0x01D7, r25
     9d2:	80 93 d6 01 	sts	0x01D6, r24
     9d6:	08 95       	ret
//changing tne numbers that are to be outputted.
void processButtonPress( void ){
  
  uint8_t temp = 0xFF - PINA;

  switch(temp){
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	09 f4       	brne	.+2      	; 0x9de <processButtonPress+0x4e>
     9dc:	45 c0       	rjmp	.+138    	; 0xa68 <processButtonPress+0xd8>
     9de:	84 30       	cpi	r24, 0x04	; 4
     9e0:	d1 f0       	breq	.+52     	; 0xa16 <processButtonPress+0x86>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	c1 f7       	brne	.-16     	; 0x9d6 <processButtonPress+0x46>
    case 0x01: //Add to alarm minutes
      if(settings & SET_MIN){
     9e6:	80 91 d6 01 	lds	r24, 0x01D6
     9ea:	90 91 d7 01 	lds	r25, 0x01D7
     9ee:	80 fd       	sbrc	r24, 0
     9f0:	87 c0       	rjmp	.+270    	; 0xb00 <processButtonPress+0x170>
        minutes = (minutes + 1) % 60;
	seconds = 0;
      }
      else{
        alarmMinutes += 5;
     9f2:	80 91 0a 01 	lds	r24, 0x010A
     9f6:	8b 5f       	subi	r24, 0xFB	; 251
        if(alarmMinutes >= 60){
     9f8:	8c 33       	cpi	r24, 0x3C	; 60
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <processButtonPress+0x6e>
     9fc:	71 c0       	rjmp	.+226    	; 0xae0 <processButtonPress+0x150>
          alarmMinutes = 0;
     9fe:	10 92 0a 01 	sts	0x010A, r1
  	  ++alarmHours;
     a02:	80 91 e4 01 	lds	r24, 0x01E4
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 e4 01 	sts	0x01E4, r24
  	  if(alarmHours >= 24)
     a0c:	88 31       	cpi	r24, 0x18	; 24
     a0e:	18 f3       	brcs	.-58     	; 0x9d6 <processButtonPress+0x46>
  	    alarmHours = 0;
     a10:	10 92 e4 01 	sts	0x01E4, r1
     a14:	08 95       	ret
        if(alarmHours >= 24)
          alarmHours = 0;
      }
      break;
    case 0x04: //Kill alarm
      currentlyAlarming = 0;
     a16:	10 92 e3 01 	sts	0x01E3, r1
      snoozeCount = 0;      //We also want to get rid of snooze
     a1a:	10 92 e2 01 	sts	0x01E2, r1
     a1e:	10 92 e1 01 	sts	0x01E1, r1
      break;
     a22:	08 95       	ret
        upperDot = TRUE;
      else
        upperDot = FALSE;
      break;
    case 0x40: //Toggle Set minutes
      settings ^= SET_MIN;
     a24:	80 91 d6 01 	lds	r24, 0x01D6
     a28:	90 91 d7 01 	lds	r25, 0x01D7
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	82 27       	eor	r24, r18
     a30:	90 93 d7 01 	sts	0x01D7, r25
     a34:	80 93 d6 01 	sts	0x01D6, r24
      settings &= ~(SET_HR);
     a38:	80 91 d6 01 	lds	r24, 0x01D6
     a3c:	90 91 d7 01 	lds	r25, 0x01D7
     a40:	8d 7f       	andi	r24, 0xFD	; 253
     a42:	90 93 d7 01 	sts	0x01D7, r25
     a46:	80 93 d6 01 	sts	0x01D6, r24
      break;
     a4a:	08 95       	ret
//changing tne numbers that are to be outputted.
void processButtonPress( void ){
  
  uint8_t temp = 0xFF - PINA;

  switch(temp){
     a4c:	80 31       	cpi	r24, 0x10	; 16
     a4e:	09 f0       	breq	.+2      	; 0xa52 <processButtonPress+0xc2>
     a50:	64 c0       	rjmp	.+200    	; 0xb1a <processButtonPress+0x18a>
        settings &= ~(ALARM_ARMED); //Disarm the alarm
        snoozeCount = 1;       //This starts the snooze counter
      }
      break;
    case 0x10: //Arm alarm button
      settings ^= ALARM_ARMED;
     a52:	80 91 d6 01 	lds	r24, 0x01D6
     a56:	90 91 d7 01 	lds	r25, 0x01D7
     a5a:	28 e0       	ldi	r18, 0x08	; 8
     a5c:	82 27       	eor	r24, r18
     a5e:	90 93 d7 01 	sts	0x01D7, r25
     a62:	80 93 d6 01 	sts	0x01D6, r24
      break;
     a66:	08 95       	ret
  	    alarmHours = 0;
        }
      }
      break;
    case 0x02: //Add to alarm hours
      if(settings & SET_HR){
     a68:	80 91 d6 01 	lds	r24, 0x01D6
     a6c:	90 91 d7 01 	lds	r25, 0x01D7
     a70:	81 fd       	sbrc	r24, 1
     a72:	39 c0       	rjmp	.+114    	; 0xae6 <processButtonPress+0x156>
        hours = (hours + 1) % 24;
	seconds = 0;
      }
      else {
        ++alarmHours;
     a74:	80 91 e4 01 	lds	r24, 0x01E4
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 e4 01 	sts	0x01E4, r24
        if(alarmHours >= 24)
     a7e:	88 31       	cpi	r24, 0x18	; 24
     a80:	38 f6       	brcc	.-114    	; 0xa10 <processButtonPress+0x80>
     a82:	08 95       	ret
      break;
    case 0x10: //Arm alarm button
      settings ^= ALARM_ARMED;
      break;
    case 0x20: //Set military time button
      settings ^= TIME24;
     a84:	80 91 d6 01 	lds	r24, 0x01D6
     a88:	90 91 d7 01 	lds	r25, 0x01D7
     a8c:	24 e0       	ldi	r18, 0x04	; 4
     a8e:	82 27       	eor	r24, r18
     a90:	90 93 d7 01 	sts	0x01D7, r25
     a94:	80 93 d6 01 	sts	0x01D6, r24
      if(settings & TIME24)
     a98:	80 91 d6 01 	lds	r24, 0x01D6
     a9c:	90 91 d7 01 	lds	r25, 0x01D7
     aa0:	82 ff       	sbrs	r24, 2
     aa2:	1b c0       	rjmp	.+54     	; 0xada <processButtonPress+0x14a>
        upperDot = TRUE;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 db 01 	sts	0x01DB, r24
     aaa:	08 95       	ret
    case 0x04: //Kill alarm
      currentlyAlarming = 0;
      snoozeCount = 0;      //We also want to get rid of snooze
      break;
    case 0x08: //Snooze alarm
      if(currentlyAlarming){
     aac:	80 91 e3 01 	lds	r24, 0x01E3
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <processButtonPress+0x126>
     ab4:	90 cf       	rjmp	.-224    	; 0x9d6 <processButtonPress+0x46>
        currentlyAlarming = 0; //Kill the alarm
     ab6:	10 92 e3 01 	sts	0x01E3, r1
        settings &= ~(ALARM_ARMED); //Disarm the alarm
     aba:	80 91 d6 01 	lds	r24, 0x01D6
     abe:	90 91 d7 01 	lds	r25, 0x01D7
     ac2:	87 7f       	andi	r24, 0xF7	; 247
     ac4:	90 93 d7 01 	sts	0x01D7, r25
     ac8:	80 93 d6 01 	sts	0x01D6, r24
        snoozeCount = 1;       //This starts the snooze counter
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 e2 01 	sts	0x01E2, r25
     ad4:	80 93 e1 01 	sts	0x01E1, r24
     ad8:	08 95       	ret
    case 0x20: //Set military time button
      settings ^= TIME24;
      if(settings & TIME24)
        upperDot = TRUE;
      else
        upperDot = FALSE;
     ada:	10 92 db 01 	sts	0x01DB, r1
     ade:	08 95       	ret
      if(settings & SET_MIN){
        minutes = (minutes + 1) % 60;
	seconds = 0;
      }
      else{
        alarmMinutes += 5;
     ae0:	80 93 0a 01 	sts	0x010A, r24
     ae4:	08 95       	ret
        }
      }
      break;
    case 0x02: //Add to alarm hours
      if(settings & SET_HR){
        hours = (hours + 1) % 24;
     ae6:	80 91 e5 01 	lds	r24, 0x01E5
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	68 e1       	ldi	r22, 0x18	; 24
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
     af6:	80 93 e5 01 	sts	0x01E5, r24
	seconds = 0;
     afa:	10 92 e7 01 	sts	0x01E7, r1
     afe:	08 95       	ret
  uint8_t temp = 0xFF - PINA;

  switch(temp){
    case 0x01: //Add to alarm minutes
      if(settings & SET_MIN){
        minutes = (minutes + 1) % 60;
     b00:	80 91 e6 01 	lds	r24, 0x01E6
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	6c e3       	ldi	r22, 0x3C	; 60
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
     b10:	80 93 e6 01 	sts	0x01E6, r24
	seconds = 0;
     b14:	10 92 e7 01 	sts	0x01E7, r1
     b18:	08 95       	ret
     b1a:	08 95       	ret
     b1c:	08 95       	ret

00000b1e <processCounterOutput>:

}  
 
//This function processess the output of the counter variable.
//It checks for overflow conditions, and then calculates the numbers to be outputted on each 7 segment digit
void processCounterOutput( void ){
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
  //We want to check for overflow/underflow here
  if(counter < 10000 && counter > 1023) //Check for simple overflow
     b26:	80 91 f8 01 	lds	r24, 0x01F8
     b2a:	90 91 f9 01 	lds	r25, 0x01F9
     b2e:	9c 01       	movw	r18, r24
     b30:	34 50       	subi	r19, 0x04	; 4
     b32:	20 31       	cpi	r18, 0x10	; 16
     b34:	33 42       	sbci	r19, 0x23	; 35
     b36:	08 f0       	brcs	.+2      	; 0xb3a <processCounterOutput+0x1c>
     b38:	d0 c0       	rjmp	.+416    	; 0xcda <processCounterOutput+0x1bc>
    counter = (counter % 1024) + 1;
     b3a:	93 70       	andi	r25, 0x03	; 3
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	90 93 f9 01 	sts	0x01F9, r25
     b42:	80 93 f8 01 	sts	0x01F8, r24
  uint16_t tempCounter = counter;
  //calculate new output values

  //Calculate output due for minutes
  //Note: Output 1 is leftmost output
  tempCounter = minutes;
     b46:	40 91 e6 01 	lds	r20, 0x01E6
     b4a:	50 e0       	ldi	r21, 0x00	; 0
  output[4] = tempCounter % 10;
     b4c:	9a 01       	movw	r18, r20
     b4e:	ad ec       	ldi	r26, 0xCD	; 205
     b50:	bc ec       	ldi	r27, 0xCC	; 204
     b52:	0e 94 1e 12 	call	0x243c	; 0x243c <__umulhisi3>
     b56:	fc 01       	movw	r30, r24
     b58:	f6 95       	lsr	r31
     b5a:	e7 95       	ror	r30
     b5c:	f6 95       	lsr	r31
     b5e:	e7 95       	ror	r30
     b60:	f6 95       	lsr	r31
     b62:	e7 95       	ror	r30
     b64:	9f 01       	movw	r18, r30
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	cf 01       	movw	r24, r30
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	48 1b       	sub	r20, r24
     b7e:	59 0b       	sbc	r21, r25
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	40 93 22 02 	sts	0x0222, r20
     b88:	50 93 23 02 	sts	0x0223, r21
     b8c:	60 93 24 02 	sts	0x0224, r22
     b90:	70 93 25 02 	sts	0x0225, r23
  tempCounter /= 10;
  output[3] = tempCounter % 10;
     b94:	9f 01       	movw	r18, r30
     b96:	0e 94 1e 12 	call	0x243c	; 0x243c <__umulhisi3>
     b9a:	96 95       	lsr	r25
     b9c:	87 95       	ror	r24
     b9e:	96 95       	lsr	r25
     ba0:	87 95       	ror	r24
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	9c 01       	movw	r18, r24
     ba8:	22 0f       	add	r18, r18
     baa:	33 1f       	adc	r19, r19
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	82 0f       	add	r24, r18
     bba:	93 1f       	adc	r25, r19
     bbc:	9f 01       	movw	r18, r30
     bbe:	28 1b       	sub	r18, r24
     bc0:	39 0b       	sbc	r19, r25
     bc2:	c9 01       	movw	r24, r18
     bc4:	a0 e0       	ldi	r26, 0x00	; 0
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	80 93 1e 02 	sts	0x021E, r24
     bcc:	90 93 1f 02 	sts	0x021F, r25
     bd0:	a0 93 20 02 	sts	0x0220, r26
     bd4:	b0 93 21 02 	sts	0x0221, r27

  //Calculate the output due for hours
  if(settings & TIME24)  //Check if we want to output military time
     bd8:	80 91 d6 01 	lds	r24, 0x01D6
     bdc:	90 91 d7 01 	lds	r25, 0x01D7
    tempCounter = hours;
     be0:	e0 91 e5 01 	lds	r30, 0x01E5
  output[4] = tempCounter % 10;
  tempCounter /= 10;
  output[3] = tempCounter % 10;

  //Calculate the output due for hours
  if(settings & TIME24)  //Check if we want to output military time
     be4:	82 ff       	sbrs	r24, 2
     be6:	5e c0       	rjmp	.+188    	; 0xca4 <processCounterOutput+0x186>
    tempCounter = hours;
     be8:	ce 2e       	mov	r12, r30
  else { //Otherwise, output "civilian time"
    tempCounter = hours % 12;
     bea:	d1 2c       	mov	r13, r1
     bec:	96 01       	movw	r18, r12
     bee:	ad ec       	ldi	r26, 0xCD	; 205
     bf0:	bc ec       	ldi	r27, 0xCC	; 204
     bf2:	0e 94 1e 12 	call	0x243c	; 0x243c <__umulhisi3>
     bf6:	ac 01       	movw	r20, r24
     bf8:	56 95       	lsr	r21
     bfa:	47 95       	ror	r20
     bfc:	56 95       	lsr	r21
     bfe:	47 95       	ror	r20
     c00:	56 95       	lsr	r21
     c02:	47 95       	ror	r20
     c04:	9a 01       	movw	r18, r20
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	ca 01       	movw	r24, r20
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	c8 1a       	sub	r12, r24
     c1e:	d9 0a       	sbc	r13, r25
     c20:	e1 2c       	mov	r14, r1
     c22:	f1 2c       	mov	r15, r1
     c24:	9a 01       	movw	r18, r20
     c26:	0e 94 1e 12 	call	0x243c	; 0x243c <__umulhisi3>
     c2a:	96 95       	lsr	r25
     c2c:	87 95       	ror	r24
     c2e:	96 95       	lsr	r25
     c30:	87 95       	ror	r24
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	9c 01       	movw	r18, r24
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	9a 01       	movw	r18, r20
     c4e:	28 1b       	sub	r18, r24
     c50:	39 0b       	sbc	r19, r25
     c52:	c9 01       	movw	r24, r18
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
    if(tempCounter == 0)
      tempCounter = 12;
  }
  
  output[2] = tempCounter % 10;
     c58:	c0 92 1a 02 	sts	0x021A, r12
     c5c:	d0 92 1b 02 	sts	0x021B, r13
     c60:	e0 92 1c 02 	sts	0x021C, r14
     c64:	f0 92 1d 02 	sts	0x021D, r15
  tempCounter /= 10;
  output[1] = tempCounter % 10;
     c68:	80 93 16 02 	sts	0x0216, r24
     c6c:	90 93 17 02 	sts	0x0217, r25
     c70:	a0 93 18 02 	sts	0x0218, r26
     c74:	b0 93 19 02 	sts	0x0219, r27

  //We want to output a dot to indicate "PM" if the time is over 11 and we're not in 24 hour mode
  if((hours > 11) && !(settings & TIME24))
     c78:	ec 30       	cpi	r30, 0x0C	; 12
     c7a:	30 f0       	brcs	.+12     	; 0xc88 <processCounterOutput+0x16a>
     c7c:	80 91 d6 01 	lds	r24, 0x01D6
     c80:	90 91 d7 01 	lds	r25, 0x01D7
     c84:	82 ff       	sbrs	r24, 2
     c86:	34 c0       	rjmp	.+104    	; 0xcf0 <processCounterOutput+0x1d2>
    dot[2] = 1;
  else
    dot[2] = 0;
     c88:	10 92 de 01 	sts	0x01DE, r1

  //Blink the colon for seconds
  if(seconds % 2) //If seconds are odd
     c8c:	80 91 e7 01 	lds	r24, 0x01E7
     c90:	80 fd       	sbrc	r24, 0
     c92:	35 c0       	rjmp	.+106    	; 0xcfe <processCounterOutput+0x1e0>
    colon = FALSE;
  else
    colon = TRUE;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 da 01 	sts	0x01DA, r24
  

}
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	08 95       	ret

  //Calculate the output due for hours
  if(settings & TIME24)  //Check if we want to output military time
    tempCounter = hours;
  else { //Otherwise, output "civilian time"
    tempCounter = hours % 12;
     ca4:	8b ea       	ldi	r24, 0xAB	; 171
     ca6:	e8 9f       	mul	r30, r24
     ca8:	c1 2c       	mov	r12, r1
     caa:	11 24       	eor	r1, r1
     cac:	c6 94       	lsr	r12
     cae:	c6 94       	lsr	r12
     cb0:	c6 94       	lsr	r12
     cb2:	8c 2d       	mov	r24, r12
     cb4:	88 0f       	add	r24, r24
     cb6:	c8 0e       	add	r12, r24
     cb8:	cc 0c       	add	r12, r12
     cba:	cc 0c       	add	r12, r12
     cbc:	3e 2f       	mov	r19, r30
     cbe:	3c 19       	sub	r19, r12
     cc0:	c3 2e       	mov	r12, r19
    if(tempCounter == 0)
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <processCounterOutput+0x1a8>
     cc4:	92 cf       	rjmp	.-220    	; 0xbea <processCounterOutput+0xcc>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	22 e0       	ldi	r18, 0x02	; 2
     cd0:	c2 2e       	mov	r12, r18
     cd2:	d1 2c       	mov	r13, r1
     cd4:	e1 2c       	mov	r14, r1
     cd6:	f1 2c       	mov	r15, r1
     cd8:	bf cf       	rjmp	.-130    	; 0xc58 <processCounterOutput+0x13a>
void processCounterOutput( void ){
  //We want to check for overflow/underflow here
  if(counter < 10000 && counter > 1023) //Check for simple overflow
    counter = (counter % 1024) + 1;
 
  if(counter > 10000) //Check for overflow, because variable is a uint, it will wrap around
     cda:	81 31       	cpi	r24, 0x11	; 17
     cdc:	97 42       	sbci	r25, 0x27	; 39
     cde:	08 f4       	brcc	.+2      	; 0xce2 <processCounterOutput+0x1c4>
     ce0:	32 cf       	rjmp	.-412    	; 0xb46 <processCounterOutput+0x28>
    counter = 1023;
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	90 93 f9 01 	sts	0x01F9, r25
     cea:	80 93 f8 01 	sts	0x01F8, r24
     cee:	2b cf       	rjmp	.-426    	; 0xb46 <processCounterOutput+0x28>
  tempCounter /= 10;
  output[1] = tempCounter % 10;

  //We want to output a dot to indicate "PM" if the time is over 11 and we're not in 24 hour mode
  if((hours > 11) && !(settings & TIME24))
    dot[2] = 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 de 01 	sts	0x01DE, r24
  else
    dot[2] = 0;

  //Blink the colon for seconds
  if(seconds % 2) //If seconds are odd
     cf6:	80 91 e7 01 	lds	r24, 0x01E7
     cfa:	80 ff       	sbrs	r24, 0
     cfc:	cb cf       	rjmp	.-106    	; 0xc94 <processCounterOutput+0x176>
    colon = FALSE;
     cfe:	10 92 da 01 	sts	0x01DA, r1
  else
    colon = TRUE;
  

}
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	08 95       	ret

00000d0c <processAlarm>:
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
     d0c:	80 91 d6 01 	lds	r24, 0x01D6
     d10:	90 91 d7 01 	lds	r25, 0x01D7
     d14:	80 fd       	sbrc	r24, 0
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <processAlarm+0x18>
     d18:	80 91 d6 01 	lds	r24, 0x01D6
     d1c:	90 91 d7 01 	lds	r25, 0x01D7
     d20:	81 ff       	sbrs	r24, 1
     d22:	84 c0       	rjmp	.+264    	; 0xe2c <processAlarm+0x120>
    settings &= ~ALARM_ARMED; //Unarm alarm
    currentlyAlarming = 1;    //Trigger alarm
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
     d24:	80 91 e1 01 	lds	r24, 0x01E1
     d28:	90 91 e2 01 	lds	r25, 0x01E2
     d2c:	8b 30       	cpi	r24, 0x0B	; 11
     d2e:	91 05       	cpc	r25, r1
     d30:	08 f4       	brcc	.+2      	; 0xd34 <processAlarm+0x28>
     d32:	52 c0       	rjmp	.+164    	; 0xdd8 <processAlarm+0xcc>
    settings &= ~ALARM_ARMED;  //Disarm alarm
     d34:	80 91 d6 01 	lds	r24, 0x01D6
     d38:	90 91 d7 01 	lds	r25, 0x01D7
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	90 93 d7 01 	sts	0x01D7, r25
     d42:	80 93 d6 01 	sts	0x01D6, r24
    currentlyAlarming = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 93 e3 01 	sts	0x01E3, r24
    snoozeCount = 0; //Stop the snooze count
     d4c:	10 92 e2 01 	sts	0x01E2, r1
     d50:	10 92 e1 01 	sts	0x01E1, r1
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	ec e0       	ldi	r30, 0x0C	; 12
     d58:	f3 e0       	ldi	r31, 0x03	; 3

  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
     d5a:	90 e2       	ldi	r25, 0x20	; 32
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	91 93       	st	Z+, r25


  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
     d60:	33 e0       	ldi	r19, 0x03	; 3
     d62:	ec 31       	cpi	r30, 0x1C	; 28
     d64:	f3 07       	cpc	r31, r19
     d66:	d1 f7       	brne	.-12     	; 0xd5c <processAlarm+0x50>
      lcd_string_array[k] = ' ';
    lcd_string_array[17] = 'W';
     d68:	97 e5       	ldi	r25, 0x57	; 87
     d6a:	90 93 1d 03 	sts	0x031D, r25
    lcd_string_array[18] = 'A';
     d6e:	91 e4       	ldi	r25, 0x41	; 65
     d70:	90 93 1e 03 	sts	0x031E, r25
    lcd_string_array[19] = 'K';
     d74:	9b e4       	ldi	r25, 0x4B	; 75
     d76:	90 93 1f 03 	sts	0x031F, r25
    lcd_string_array[20] = 'E';
     d7a:	95 e4       	ldi	r25, 0x45	; 69
     d7c:	90 93 20 03 	sts	0x0320, r25
    lcd_string_array[21] = ' ';
     d80:	80 93 21 03 	sts	0x0321, r24
    lcd_string_array[22] = 'U';
     d84:	95 e5       	ldi	r25, 0x55	; 85
     d86:	90 93 22 03 	sts	0x0322, r25
    lcd_string_array[23] = 'P';
     d8a:	90 e5       	ldi	r25, 0x50	; 80
     d8c:	90 93 23 03 	sts	0x0323, r25
    lcd_string_array[24] = ' ';
     d90:	80 93 24 03 	sts	0x0324, r24
    lcd_string_array[25] = ':';
     d94:	8a e3       	ldi	r24, 0x3A	; 58
     d96:	80 93 25 03 	sts	0x0325, r24
    lcd_string_array[26] = ')';
     d9a:	89 e2       	ldi	r24, 0x29	; 41
     d9c:	80 93 26 03 	sts	0x0326, r24
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 27] = remoteTemp[i];
  }

  //lcd_string_array[5] is blank
  if(!currentlyAlarming){
     da0:	22 23       	and	r18, r18
     da2:	09 f4       	brne	.+2      	; 0xda6 <processAlarm+0x9a>
     da4:	3e c0       	rjmp	.+124    	; 0xe22 <processAlarm+0x116>

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	90 93 87 00 	sts	0x0087, r25
     dae:	80 93 86 00 	sts	0x0086, r24
  if(!currentlyAlarming){
    SET_VOLUME(0);
  }
  else {
    SET_VOLUME(ALARM_VOLUME);
    SET_HZ(music[musicCounter]);
     db2:	e0 91 e9 01 	lds	r30, 0x01E9
     db6:	f0 91 ea 01 	lds	r31, 0x01EA
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	e5 5f       	subi	r30, 0xF5	; 245
     dc0:	fe 4f       	sbci	r31, 0xFE	; 254
//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
void inline SET_HZ(uint16_t targetHz) {OCR1A = targetHz * 50;}
     dc2:	20 81       	ld	r18, Z
     dc4:	31 81       	ldd	r19, Z+1	; 0x01
     dc6:	42 e3       	ldi	r20, 0x32	; 50
     dc8:	42 9f       	mul	r20, r18
     dca:	c0 01       	movw	r24, r0
     dcc:	43 9f       	mul	r20, r19
     dce:	90 0d       	add	r25, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	9b bd       	out	0x2b, r25	; 43
     dd4:	8a bd       	out	0x2a, r24	; 42
     dd6:	08 95       	ret
    snoozeCount = 0; //Stop the snooze count
  }


  //Detecting Alarm output
  if(currentlyAlarming){
     dd8:	20 91 e3 01 	lds	r18, 0x01E3
     ddc:	21 11       	cpse	r18, r1
     dde:	bb cf       	rjmp	.-138    	; 0xd56 <processAlarm+0x4a>
    lcd_string_array[24] = ' ';
    lcd_string_array[25] = ':';
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
     de0:	02 97       	sbiw	r24, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <processAlarm+0xda>
     de4:	49 c0       	rjmp	.+146    	; 0xe78 <processAlarm+0x16c>
     de6:	ec e0       	ldi	r30, 0x0C	; 12
     de8:	f3 e0       	ldi	r31, 0x03	; 3
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	81 93       	st	Z+, r24
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
    uint8_t k;
    for(k = 0; k < 16; ++k)
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	ec 31       	cpi	r30, 0x1C	; 28
     df2:	f9 07       	cpc	r31, r25
     df4:	d9 f7       	brne	.-10     	; 0xdec <processAlarm+0xe0>
      lcd_string_array[k] = ' ';

    lcd_string_array[17] = 'Z';
     df6:	9a e5       	ldi	r25, 0x5A	; 90
     df8:	90 93 1d 03 	sts	0x031D, r25
    lcd_string_array[18] = 'z';
     dfc:	8a e7       	ldi	r24, 0x7A	; 122
     dfe:	80 93 1e 03 	sts	0x031E, r24
    lcd_string_array[19] = 'Z';
     e02:	90 93 1f 03 	sts	0x031F, r25
    lcd_string_array[20] = 'z';
     e06:	80 93 20 03 	sts	0x0320, r24
    lcd_string_array[21] = 'Z';
     e0a:	90 93 21 03 	sts	0x0321, r25
    lcd_string_array[22] = 'z';
     e0e:	80 93 22 03 	sts	0x0322, r24
    lcd_string_array[23] = 'Z';
     e12:	90 93 23 03 	sts	0x0323, r25
    lcd_string_array[24] = 'z';
     e16:	80 93 24 03 	sts	0x0324, r24
    lcd_string_array[25] = 'Z';
     e1a:	90 93 25 03 	sts	0x0325, r25
    lcd_string_array[26] = 'z';
     e1e:	80 93 26 03 	sts	0x0326, r24

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     e22:	10 92 87 00 	sts	0x0087, r1
     e26:	10 92 86 00 	sts	0x0086, r1
     e2a:	08 95       	ret
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
     e2c:	80 91 d6 01 	lds	r24, 0x01D6
     e30:	90 91 d7 01 	lds	r25, 0x01D7
     e34:	83 ff       	sbrs	r24, 3
     e36:	76 cf       	rjmp	.-276    	; 0xd24 <processAlarm+0x18>
     e38:	90 91 e4 01 	lds	r25, 0x01E4
     e3c:	80 91 e5 01 	lds	r24, 0x01E5
     e40:	98 13       	cpse	r25, r24
     e42:	70 cf       	rjmp	.-288    	; 0xd24 <processAlarm+0x18>
     e44:	90 91 0a 01 	lds	r25, 0x010A
     e48:	80 91 e6 01 	lds	r24, 0x01E6
     e4c:	98 13       	cpse	r25, r24
     e4e:	6a cf       	rjmp	.-300    	; 0xd24 <processAlarm+0x18>
    settings &= ~ALARM_ARMED; //Unarm alarm
     e50:	80 91 d6 01 	lds	r24, 0x01D6
     e54:	90 91 d7 01 	lds	r25, 0x01D7
     e58:	87 7f       	andi	r24, 0xF7	; 247
     e5a:	90 93 d7 01 	sts	0x01D7, r25
     e5e:	80 93 d6 01 	sts	0x01D6, r24
    currentlyAlarming = 1;    //Trigger alarm
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 e3 01 	sts	0x01E3, r24
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
     e68:	80 91 e1 01 	lds	r24, 0x01E1
     e6c:	90 91 e2 01 	lds	r25, 0x01E2
     e70:	0b 97       	sbiw	r24, 0x0b	; 11
     e72:	08 f4       	brcc	.+2      	; 0xe76 <processAlarm+0x16a>
     e74:	6f cf       	rjmp	.-290    	; 0xd54 <processAlarm+0x48>
     e76:	5e cf       	rjmp	.-324    	; 0xd34 <processAlarm+0x28>
    lcd_string_array[24] = 'z';
    lcd_string_array[25] = 'Z';
    lcd_string_array[26] = 'z';

  }
  else if(settings & ALARM_ARMED){  //If no alarm, no snooze, but alarm is set, we want to output when we are going to alarm
     e78:	80 91 d6 01 	lds	r24, 0x01D6
     e7c:	90 91 d7 01 	lds	r25, 0x01D7
     e80:	83 fd       	sbrc	r24, 3
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <processAlarm+0x1f6>
    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
  }
  else{  //The alarm isn't armed, so we want to output that fact
    dot[4] = 0;
     e84:	10 92 e0 01 	sts	0x01E0, r1
    lcd_string_array[0] = 'n';
     e88:	8e e6       	ldi	r24, 0x6E	; 110
     e8a:	80 93 0c 03 	sts	0x030C, r24
    lcd_string_array[1] = 'o';
     e8e:	8f e6       	ldi	r24, 0x6F	; 111
     e90:	80 93 0d 03 	sts	0x030D, r24
    lcd_string_array[2] = ' ';
     e94:	80 e2       	ldi	r24, 0x20	; 32
     e96:	80 93 0e 03 	sts	0x030E, r24
    lcd_string_array[3] = 'a';
     e9a:	81 e6       	ldi	r24, 0x61	; 97
     e9c:	80 93 0f 03 	sts	0x030F, r24
    lcd_string_array[4] = 'l';
     ea0:	9c e6       	ldi	r25, 0x6C	; 108
     ea2:	90 93 10 03 	sts	0x0310, r25
    lcd_string_array[5] = 'a';
     ea6:	80 93 11 03 	sts	0x0311, r24
    lcd_string_array[6] = 'r';
     eaa:	82 e7       	ldi	r24, 0x72	; 114
     eac:	80 93 12 03 	sts	0x0312, r24
    lcd_string_array[7] = 'm';
     eb0:	8d e6       	ldi	r24, 0x6D	; 109
     eb2:	80 93 13 03 	sts	0x0313, r24
     eb6:	e4 e1       	ldi	r30, 0x14	; 20
     eb8:	f3 e0       	ldi	r31, 0x03	; 3

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
      lcd_string_array[i+8] = ' ';
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	81 93       	st	Z+, r24
    lcd_string_array[6] = 'r';
    lcd_string_array[7] = 'm';

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
     ebe:	33 e0       	ldi	r19, 0x03	; 3
     ec0:	e8 32       	cpi	r30, 0x28	; 40
     ec2:	f3 07       	cpc	r31, r19
     ec4:	d9 f7       	brne	.-10     	; 0xebc <processAlarm+0x1b0>
    //16, 17, 18 = ., 19, 20
    //21
    //22, 23, 24 = ., 25, 26

    //Display local temperature
    lcd_string_array[16] = 'l';
     ec6:	8c e6       	ldi	r24, 0x6C	; 108
     ec8:	80 93 1c 03 	sts	0x031C, r24
     ecc:	a8 e9       	ldi	r26, 0x98	; 152
     ece:	b2 e0       	ldi	r27, 0x02	; 2
     ed0:	ee e1       	ldi	r30, 0x1E	; 30
     ed2:	f3 e0       	ldi	r31, 0x03	; 3
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 18] = tempCelString[i];
     ed4:	8d 91       	ld	r24, X+
     ed6:	81 93       	st	Z+, r24
    //21
    //22, 23, 24 = ., 25, 26

    //Display local temperature
    lcd_string_array[16] = 'l';
    for(i = 0; i < 5; ++i)
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	e3 32       	cpi	r30, 0x23	; 35
     edc:	f8 07       	cpc	r31, r24
     ede:	d1 f7       	brne	.-12     	; 0xed4 <processAlarm+0x1c8>
      lcd_string_array[i + 18] = tempCelString[i];
    //Display remote temperature
    lcd_string_array[25] = 'r';
     ee0:	82 e7       	ldi	r24, 0x72	; 114
     ee2:	80 93 25 03 	sts	0x0325, r24
     ee6:	e7 e2       	ldi	r30, 0x27	; 39
     ee8:	f3 e0       	ldi	r31, 0x03	; 3
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 27] = remoteTemp[i];
     eee:	dc 01       	movw	r26, r24
     ef0:	ae 56       	subi	r26, 0x6E	; 110
     ef2:	bd 4f       	sbci	r27, 0xFD	; 253
     ef4:	2c 91       	ld	r18, X
     ef6:	21 93       	st	Z+, r18
     ef8:	01 96       	adiw	r24, 0x01	; 1
    lcd_string_array[16] = 'l';
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 18] = tempCelString[i];
    //Display remote temperature
    lcd_string_array[25] = 'r';
    for(i = 0; i < 5; ++i)
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	91 05       	cpc	r25, r1
     efe:	b9 f7       	brne	.-18     	; 0xeee <processAlarm+0x1e2>
     f00:	90 cf       	rjmp	.-224    	; 0xe22 <processAlarm+0x116>
    lcd_string_array[25] = 'Z';
    lcd_string_array[26] = 'z';

  }
  else if(settings & ALARM_ARMED){  //If no alarm, no snooze, but alarm is set, we want to output when we are going to alarm
    dot[4] = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 e0 01 	sts	0x01E0, r24
    lcd_string_array[0] = 'A';
     f08:	81 e4       	ldi	r24, 0x41	; 65
     f0a:	80 93 0c 03 	sts	0x030C, r24
    lcd_string_array[1] = 'L';
     f0e:	9c e4       	ldi	r25, 0x4C	; 76
     f10:	90 93 0d 03 	sts	0x030D, r25
    lcd_string_array[2] = 'A';
     f14:	80 93 0e 03 	sts	0x030E, r24
    lcd_string_array[3] = 'R';
     f18:	82 e5       	ldi	r24, 0x52	; 82
     f1a:	80 93 0f 03 	sts	0x030F, r24
    lcd_string_array[4] = 'M';
     f1e:	8d e4       	ldi	r24, 0x4D	; 77
     f20:	80 93 10 03 	sts	0x0310, r24
    lcd_string_array[5] = ' ';
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	80 93 11 03 	sts	0x0311, r24
    lcd_string_array[6] = '@';
     f2a:	90 e4       	ldi	r25, 0x40	; 64
     f2c:	90 93 12 03 	sts	0x0312, r25
    lcd_string_array[7] = ' ';
     f30:	80 93 13 03 	sts	0x0313, r24
    if(settings & TIME24){ //24 hour mode
     f34:	20 91 d6 01 	lds	r18, 0x01D6
     f38:	30 91 d7 01 	lds	r19, 0x01D7
     f3c:	22 fd       	sbrc	r18, 2
     f3e:	5b c0       	rjmp	.+182    	; 0xff6 <processAlarm+0x2ea>
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
     f40:	20 91 e4 01 	lds	r18, 0x01E4
     f44:	22 23       	and	r18, r18
     f46:	09 f4       	brne	.+2      	; 0xf4a <processAlarm+0x23e>
     f48:	71 c0       	rjmp	.+226    	; 0x102c <processAlarm+0x320>
     f4a:	2c 30       	cpi	r18, 0x0C	; 12
     f4c:	09 f4       	brne	.+2      	; 0xf50 <processAlarm+0x244>
     f4e:	6e c0       	rjmp	.+220    	; 0x102c <processAlarm+0x320>
        lcd_string_array[8] = '1';
	lcd_string_array[9] = '2';
      }
      else{ //We have to do actual math
        if((alarmHours % 12) < 10)
     f50:	9b ea       	ldi	r25, 0xAB	; 171
     f52:	29 9f       	mul	r18, r25
     f54:	91 2d       	mov	r25, r1
     f56:	11 24       	eor	r1, r1
     f58:	96 95       	lsr	r25
     f5a:	96 95       	lsr	r25
     f5c:	96 95       	lsr	r25
     f5e:	39 2f       	mov	r19, r25
     f60:	33 0f       	add	r19, r19
     f62:	93 0f       	add	r25, r19
     f64:	99 0f       	add	r25, r25
     f66:	99 0f       	add	r25, r25
     f68:	32 2f       	mov	r19, r18
     f6a:	39 1b       	sub	r19, r25
     f6c:	93 2f       	mov	r25, r19
     f6e:	3a 30       	cpi	r19, 0x0A	; 10
     f70:	08 f0       	brcs	.+2      	; 0xf74 <processAlarm+0x268>
	  lcd_string_array[8] = ' ';
	else
	  lcd_string_array[8] = ((alarmHours % 12) / 10) + 48;
     f72:	81 e3       	ldi	r24, 0x31	; 49
     f74:	80 93 14 03 	sts	0x0314, r24
	lcd_string_array[9] = ((alarmHours % 12) % 10) + 48;	
     f78:	8d ec       	ldi	r24, 0xCD	; 205
     f7a:	98 9f       	mul	r25, r24
     f7c:	81 2d       	mov	r24, r1
     f7e:	11 24       	eor	r1, r1
     f80:	86 95       	lsr	r24
     f82:	86 95       	lsr	r24
     f84:	86 95       	lsr	r24
     f86:	3a e0       	ldi	r19, 0x0A	; 10
     f88:	83 9f       	mul	r24, r19
     f8a:	90 19       	sub	r25, r0
     f8c:	11 24       	eor	r1, r1
     f8e:	89 2f       	mov	r24, r25
     f90:	80 5d       	subi	r24, 0xD0	; 208
     f92:	80 93 15 03 	sts	0x0315, r24
      }
    }
    lcd_string_array[10] = ':';
     f96:	8a e3       	ldi	r24, 0x3A	; 58
     f98:	80 93 16 03 	sts	0x0316, r24
    //time for minutes
    if(alarmMinutes < 10)
     f9c:	80 91 0a 01 	lds	r24, 0x010A
     fa0:	8a 30       	cpi	r24, 0x0A	; 10
     fa2:	c8 f5       	brcc	.+114    	; 0x1016 <processAlarm+0x30a>
      lcd_string_array[11] = '0';
     fa4:	90 e3       	ldi	r25, 0x30	; 48
     fa6:	90 93 17 03 	sts	0x0317, r25
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    lcd_string_array[12]  = (alarmMinutes % 10) + 48;
     faa:	9d ec       	ldi	r25, 0xCD	; 205
     fac:	89 9f       	mul	r24, r25
     fae:	91 2d       	mov	r25, r1
     fb0:	11 24       	eor	r1, r1
     fb2:	96 95       	lsr	r25
     fb4:	96 95       	lsr	r25
     fb6:	96 95       	lsr	r25
     fb8:	3a e0       	ldi	r19, 0x0A	; 10
     fba:	93 9f       	mul	r25, r19
     fbc:	80 19       	sub	r24, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	80 5d       	subi	r24, 0xD0	; 208
     fc2:	80 93 18 03 	sts	0x0318, r24
    
    if(!(settings & TIME24)){ //12 hour mode
     fc6:	80 91 d6 01 	lds	r24, 0x01D6
     fca:	90 91 d7 01 	lds	r25, 0x01D7
     fce:	82 fd       	sbrc	r24, 2
     fd0:	1c c0       	rjmp	.+56     	; 0x100a <processAlarm+0x2fe>
      if(alarmHours > 11){
     fd2:	2c 30       	cpi	r18, 0x0C	; 12
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <processAlarm+0x2cc>
     fd6:	3f c0       	rjmp	.+126    	; 0x1056 <processAlarm+0x34a>
        lcd_string_array[13] = 'p';
     fd8:	80 e7       	ldi	r24, 0x70	; 112
     fda:	80 93 19 03 	sts	0x0319, r24
      }
      else{
        lcd_string_array[13] = 'a';
      }
      lcd_string_array[14] = 'm';
     fde:	8d e6       	ldi	r24, 0x6D	; 109
     fe0:	80 93 1a 03 	sts	0x031A, r24
     fe4:	ec e1       	ldi	r30, 0x1C	; 28
     fe6:	f3 e0       	ldi	r31, 0x03	; 3
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	81 93       	st	Z+, r24
	lcd_string_array[14] = ' ';
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	ec 32       	cpi	r30, 0x2C	; 44
     ff0:	f9 07       	cpc	r31, r25
     ff2:	d9 f7       	brne	.-10     	; 0xfea <processAlarm+0x2de>
     ff4:	16 cf       	rjmp	.-468    	; 0xe22 <processAlarm+0x116>
    lcd_string_array[4] = 'M';
    lcd_string_array[5] = ' ';
    lcd_string_array[6] = '@';
    lcd_string_array[7] = ' ';
    if(settings & TIME24){ //24 hour mode
      if(alarmHours == 0){
     ff6:	20 91 e4 01 	lds	r18, 0x01E4
     ffa:	21 11       	cpse	r18, r1
     ffc:	1e c0       	rjmp	.+60     	; 0x103a <processAlarm+0x32e>
        lcd_string_array[8] = '0';
     ffe:	80 e3       	ldi	r24, 0x30	; 48
    1000:	80 93 14 03 	sts	0x0314, r24
	lcd_string_array[9] = '0';
    1004:	80 93 15 03 	sts	0x0315, r24
    1008:	c6 cf       	rjmp	.-116    	; 0xf96 <processAlarm+0x28a>
      }
      lcd_string_array[14] = 'm';
      
    }
    else{
        lcd_string_array[13] = ' ';
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	80 93 19 03 	sts	0x0319, r24
	lcd_string_array[14] = ' ';
    1010:	80 93 1a 03 	sts	0x031A, r24
    1014:	e7 cf       	rjmp	.-50     	; 0xfe4 <processAlarm+0x2d8>
    lcd_string_array[10] = ':';
    //time for minutes
    if(alarmMinutes < 10)
      lcd_string_array[11] = '0';
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    1016:	9d ec       	ldi	r25, 0xCD	; 205
    1018:	89 9f       	mul	r24, r25
    101a:	91 2d       	mov	r25, r1
    101c:	11 24       	eor	r1, r1
    101e:	96 95       	lsr	r25
    1020:	96 95       	lsr	r25
    1022:	96 95       	lsr	r25
    1024:	90 5d       	subi	r25, 0xD0	; 208
    1026:	90 93 17 03 	sts	0x0317, r25
    102a:	bf cf       	rjmp	.-130    	; 0xfaa <processAlarm+0x29e>
        lcd_string_array[9] = (alarmHours % 10) + 48;
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
        lcd_string_array[8] = '1';
    102c:	81 e3       	ldi	r24, 0x31	; 49
    102e:	80 93 14 03 	sts	0x0314, r24
	lcd_string_array[9] = '2';
    1032:	82 e3       	ldi	r24, 0x32	; 50
    1034:	80 93 15 03 	sts	0x0315, r24
    1038:	ae cf       	rjmp	.-164    	; 0xf96 <processAlarm+0x28a>
      if(alarmHours == 0){
        lcd_string_array[8] = '0';
	lcd_string_array[9] = '0';
      }
      else{
        if(alarmHours < 10)
    103a:	2a 30       	cpi	r18, 0x0A	; 10
    103c:	80 f4       	brcc	.+32     	; 0x105e <processAlarm+0x352>
	  lcd_string_array[8] = '0';
    103e:	80 e3       	ldi	r24, 0x30	; 48
    1040:	80 93 14 03 	sts	0x0314, r24
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
    1044:	8d ec       	ldi	r24, 0xCD	; 205
    1046:	28 9f       	mul	r18, r24
    1048:	81 2d       	mov	r24, r1
    104a:	11 24       	eor	r1, r1
    104c:	86 95       	lsr	r24
    104e:	86 95       	lsr	r24
    1050:	86 95       	lsr	r24
    1052:	92 2f       	mov	r25, r18
    1054:	98 cf       	rjmp	.-208    	; 0xf86 <processAlarm+0x27a>
    if(!(settings & TIME24)){ //12 hour mode
      if(alarmHours > 11){
        lcd_string_array[13] = 'p';
      }
      else{
        lcd_string_array[13] = 'a';
    1056:	81 e6       	ldi	r24, 0x61	; 97
    1058:	80 93 19 03 	sts	0x0319, r24
    105c:	c0 cf       	rjmp	.-128    	; 0xfde <processAlarm+0x2d2>
      }
      else{
        if(alarmHours < 10)
	  lcd_string_array[8] = '0';
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
    105e:	8d ec       	ldi	r24, 0xCD	; 205
    1060:	28 9f       	mul	r18, r24
    1062:	81 2d       	mov	r24, r1
    1064:	11 24       	eor	r1, r1
    1066:	86 95       	lsr	r24
    1068:	86 95       	lsr	r24
    106a:	86 95       	lsr	r24
    106c:	80 5d       	subi	r24, 0xD0	; 208
    106e:	80 93 14 03 	sts	0x0314, r24
    1072:	e8 cf       	rjmp	.-48     	; 0x1044 <processAlarm+0x338>

00001074 <processOutputBrightness>:
//Processed the ADC count and adjusts the output brighness for the screen
//Calculations courtesy of: http://academics.triton.edu/faculty/mlarosa/slope.htm
void inline processOutputBrightness( void ){


  if(lastADCread < 480)
    1074:	80 91 3d 01 	lds	r24, 0x013D
    1078:	90 91 3e 01 	lds	r25, 0x013E
    107c:	80 3e       	cpi	r24, 0xE0	; 224
    107e:	91 40       	sbci	r25, 0x01	; 1
    1080:	c0 f0       	brcs	.+48     	; 0x10b2 <processOutputBrightness+0x3e>
    setLEDBrightness(MIN_BRT);
  else
    setLEDBrightness((lastADCread * -.4) + 410);
    1082:	60 91 3d 01 	lds	r22, 0x013D
    1086:	70 91 3e 01 	lds	r23, 0x013E
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__floatunsisf>
    1092:	2d ec       	ldi	r18, 0xCD	; 205
    1094:	3c ec       	ldi	r19, 0xCC	; 204
    1096:	4c ec       	ldi	r20, 0xCC	; 204
    1098:	5e eb       	ldi	r21, 0xBE	; 190
    109a:	0e 94 8d 13 	call	0x271a	; 0x271a <__mulsf3>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4d ec       	ldi	r20, 0xCD	; 205
    10a4:	53 e4       	ldi	r21, 0x43	; 67
    10a6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__addsf3>
    10aa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fixunssfsi>
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
    10ae:	63 bd       	out	0x23, r22	; 35
    10b0:	08 95       	ret
    10b2:	8c ed       	ldi	r24, 0xDC	; 220
    10b4:	83 bd       	out	0x23, r24	; 35
    10b6:	08 95       	ret

000010b8 <checkButtons>:
//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	8b bb       	out	0x1b, r24	; 27
    10bc:	1a ba       	out	0x1a, r1	; 26
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}
    10be:	88 b3       	in	r24, 0x18	; 24
    10c0:	80 67       	ori	r24, 0x70	; 112
    10c2:	88 bb       	out	0x18, r24	; 24
	...
  NOP();

  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    10cc:	89 b3       	in	r24, 0x19	; 25
    10ce:	8f 3f       	cpi	r24, 0xFF	; 255
    10d0:	61 f1       	breq	.+88     	; 0x112a <__stack+0x2b>
    if(unpressed){
    10d2:	80 91 40 01 	lds	r24, 0x0140
    10d6:	81 11       	cpse	r24, r1
    10d8:	2c c0       	rjmp	.+88     	; 0x1132 <__stack+0x33>
      processButtonPress();
      unpressed = 0; //Latches the button press
    }
    else if(PINA == lastEntered){ //Don't preform any action
    10da:	89 b3       	in	r24, 0x19	; 25
    10dc:	20 91 f1 01 	lds	r18, 0x01F1
    10e0:	30 91 f2 01 	lds	r19, 0x01F2
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	82 17       	cp	r24, r18
    10e8:	93 07       	cpc	r25, r19
    10ea:	41 f1       	breq	.+80     	; 0x113c <__stack+0x3d>
      ++debounceCounter;
    }
    else if(PINA != lastEntered){
    10ec:	89 b3       	in	r24, 0x19	; 25
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	28 17       	cp	r18, r24
    10f2:	39 07       	cpc	r19, r25
    10f4:	41 f0       	breq	.+16     	; 0x1106 <__stack+0x7>
      processButtonPress();
    10f6:	0e 94 c8 04 	call	0x990	; 0x990 <processButtonPress>
      debounceCounter = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	90 93 f0 01 	sts	0x01F0, r25
    1102:	80 93 ef 01 	sts	0x01EF, r24
    }

    lastEntered = PINA;
    1106:	89 b3       	in	r24, 0x19	; 25
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	90 93 f2 01 	sts	0x01F2, r25
    110e:	80 93 f1 01 	sts	0x01F1, r24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
    1116:	c4 9a       	sbi	0x18, 4	; 24
    1118:	88 b3       	in	r24, 0x18	; 24
    111a:	8f 79       	andi	r24, 0x9F	; 159
    111c:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    111e:	c6 9a       	sbi	0x18, 6	; 24
	...

  //Wait for voltages to settle before moving on
  NOP();
  NOP();
  NOP();
  NOP();
    1128:	08 95       	ret
    }

    lastEntered = PINA;
  }
  else {
    unpressed = 1;  //Release the latch
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 40 01 	sts	0x0140, r24
    1130:	f0 cf       	rjmp	.-32     	; 0x1112 <__stack+0x13>
  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    if(unpressed){
      processButtonPress();
    1132:	0e 94 c8 04 	call	0x990	; 0x990 <processButtonPress>
      unpressed = 0; //Latches the button press
    1136:	10 92 40 01 	sts	0x0140, r1
    113a:	e5 cf       	rjmp	.-54     	; 0x1106 <__stack+0x7>
    }
    else if(PINA == lastEntered){ //Don't preform any action
      ++debounceCounter;
    113c:	80 91 ef 01 	lds	r24, 0x01EF
    1140:	90 91 f0 01 	lds	r25, 0x01F0
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	90 93 f0 01 	sts	0x01F0, r25
    114a:	80 93 ef 01 	sts	0x01EF, r24
    114e:	db cf       	rjmp	.-74     	; 0x1106 <__stack+0x7>

00001150 <updateSPI>:

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
    1150:	1e 98       	cbi	0x03, 6	; 3
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
void inline ENC_PARALLEL_DISABLE(void) {PORTE |=   0x80 ;}
    1152:	1f 9a       	sbi	0x03, 7	; 3
  
  ENC_CLK_ENABLE();        //Allow us to read in serial data
  ENC_PARALLEL_DISABLE();  //Allow us to read in serial data

  //NOPs required for electrical propogation
  NOP();
    1154:	00 00       	nop
  NOP();
    1156:	00 00       	nop

  //Write to the bar graph and read from the encoders
  SPDR = bargraphOutput;
    1158:	80 91 ed 01 	lds	r24, 0x01ED
    115c:	8f b9       	out	0x0f, r24	; 15
  lastEncoderValue = SPDR;
    115e:	8f b1       	in	r24, 0x0f	; 15
    1160:	80 93 3f 01 	sts	0x013F, r24

  //Wait for SPI operation
  while (bit_is_clear(SPSR, SPIF)){};
    1164:	77 9b       	sbis	0x0e, 7	; 14
    1166:	fe cf       	rjmp	.-4      	; 0x1164 <updateSPI+0x14>

  upToDateEncoderValue = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 ee 01 	sts	0x01EE, r24
//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
    116e:	1e 9a       	sbi	0x03, 6	; 3

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
    1170:	1f 98       	cbi	0x03, 7	; 3

  ENC_CLK_DISABLE();
  ENC_PARALLEL_ENABLE();

  //Output the bar graph info
  PORTB |=  0x01;
    1172:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;
    1174:	c0 98       	cbi	0x18, 0	; 24
    1176:	08 95       	ret

00001178 <processEncoders>:
  uint8_t static lEncoderPrev = 0;
  uint8_t static rEncoderPrev = 0;
  uint8_t static lEncoder = 0;
  uint8_t static rEncoder = 0;
  
  lEncoderPrev = lEncoder;
    1178:	80 91 0b 02 	lds	r24, 0x020B
    117c:	80 93 0a 02 	sts	0x020A, r24
  rEncoderPrev = rEncoder;
    1180:	20 91 09 02 	lds	r18, 0x0209
    1184:	20 93 08 02 	sts	0x0208, r18

  //Save previous values
  lEncoder =  (lastEncoderValue & 0x03);
    1188:	80 91 3f 01 	lds	r24, 0x013F
    118c:	98 2f       	mov	r25, r24
    118e:	93 70       	andi	r25, 0x03	; 3
    1190:	90 93 0b 02 	sts	0x020B, r25
  rEncoder = ((lastEncoderValue & 0x0C) >> 2);
    1194:	8c 70       	andi	r24, 0x0C	; 12
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	95 95       	asr	r25
    119a:	87 95       	ror	r24
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	80 93 09 02 	sts	0x0209, r24
      ENC_L_COUNTUP();
    if((lEncoderPrev == 0x02) && (lEncoder == 0x03))
      ENC_L_COUNTDOWN();
  }

  if(rEncoder != rEncoderPrev){
    11a4:	28 17       	cp	r18, r24
    11a6:	31 f0       	breq	.+12     	; 0x11b4 <processEncoders+0x3c>
    if((rEncoderPrev == 0x01) && (rEncoder == 0x03))
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <processEncoders+0x3e>
      ENC_R_COUNTUP();
    if((rEncoderPrev == 0x02) && (rEncoder == 0x03))
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <processEncoders+0x3c>
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	41 f1       	breq	.+80     	; 0x1204 <processEncoders+0x8c>
    11b4:	08 95       	ret
    if((lEncoderPrev == 0x02) && (lEncoder == 0x03))
      ENC_L_COUNTDOWN();
  }

  if(rEncoder != rEncoderPrev){
    if((rEncoderPrev == 0x01) && (rEncoder == 0x03))
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <processEncoders+0x3c>
void inline ENC_L_COUNTDOWN(void){
  //ENC_R_COUNTDOWN();
}
void inline ENC_R_COUNTUP(void){
  
  if(settings & SET_MIN){
    11ba:	80 91 d6 01 	lds	r24, 0x01D6
    11be:	90 91 d7 01 	lds	r25, 0x01D7
    11c2:	80 ff       	sbrs	r24, 0
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <processEncoders+0x66>
      minutes = (minutes + 1) % 60;
    11c6:	80 91 e6 01 	lds	r24, 0x01E6
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	6c e3       	ldi	r22, 0x3C	; 60
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
    11d6:	80 93 e6 01 	sts	0x01E6, r24
      seconds = 0;
    11da:	10 92 e7 01 	sts	0x01E7, r1
  }
  if(settings & SET_HR){
    11de:	80 91 d6 01 	lds	r24, 0x01D6
    11e2:	90 91 d7 01 	lds	r25, 0x01D7
    11e6:	81 ff       	sbrs	r24, 1
    11e8:	e5 cf       	rjmp	.-54     	; 0x11b4 <processEncoders+0x3c>
    hours = (hours + 1) % 24;
    11ea:	80 91 e5 01 	lds	r24, 0x01E5
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	68 e1       	ldi	r22, 0x18	; 24
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
    11fa:	80 93 e5 01 	sts	0x01E5, r24
    seconds = 0;
    11fe:	10 92 e7 01 	sts	0x01E7, r1
    1202:	08 95       	ret
  }
}
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    1204:	80 91 d6 01 	lds	r24, 0x01D6
    1208:	90 91 d7 01 	lds	r25, 0x01D7
    120c:	80 ff       	sbrs	r24, 0
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <processEncoders+0xaa>
    if(minutes == 0)
    1210:	80 91 e6 01 	lds	r24, 0x01E6
    1214:	81 11       	cpse	r24, r1
    1216:	19 c0       	rjmp	.+50     	; 0x124a <processEncoders+0xd2>
      minutes = 59;
    1218:	8b e3       	ldi	r24, 0x3B	; 59
    121a:	80 93 e6 01 	sts	0x01E6, r24
    else
      minutes -= 1;
    seconds = 0;
    121e:	10 92 e7 01 	sts	0x01E7, r1
  }
  if(settings & SET_HR){
    1222:	80 91 d6 01 	lds	r24, 0x01D6
    1226:	90 91 d7 01 	lds	r25, 0x01D7
    122a:	81 ff       	sbrs	r24, 1
    122c:	c3 cf       	rjmp	.-122    	; 0x11b4 <processEncoders+0x3c>
    if(hours == 0)
    122e:	80 91 e5 01 	lds	r24, 0x01E5
    1232:	81 11       	cpse	r24, r1
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <processEncoders+0xca>
      hours = 23;
    1236:	87 e1       	ldi	r24, 0x17	; 23
    1238:	80 93 e5 01 	sts	0x01E5, r24
    else
      hours -= 1;
    seconds = 0;
    123c:	10 92 e7 01 	sts	0x01E7, r1
    1240:	08 95       	ret
  }
  if(settings & SET_HR){
    if(hours == 0)
      hours = 23;
    else
      hours -= 1;
    1242:	81 50       	subi	r24, 0x01	; 1
    1244:	80 93 e5 01 	sts	0x01E5, r24
    1248:	f9 cf       	rjmp	.-14     	; 0x123c <processEncoders+0xc4>
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    if(minutes == 0)
      minutes = 59;
    else
      minutes -= 1;
    124a:	81 50       	subi	r24, 0x01	; 1
    124c:	80 93 e6 01 	sts	0x01E6, r24
    1250:	e6 cf       	rjmp	.-52     	; 0x121e <processEncoders+0xa6>

00001252 <incrementCounter>:
  
}

//Called to increment the counter variable
void inline incrementCounter( void ){
  if(inc2Bool & inc4Bool)
    1252:	80 91 f4 01 	lds	r24, 0x01F4
    1256:	90 91 f3 01 	lds	r25, 0x01F3
    125a:	29 2f       	mov	r18, r25
    125c:	28 23       	and	r18, r24
    125e:	c1 f4       	brne	.+48     	; 0x1290 <incrementCounter+0x3e>
    NOP();
  else if (inc2Bool)
    1260:	81 11       	cpse	r24, r1
    1262:	0c c0       	rjmp	.+24     	; 0x127c <incrementCounter+0x2a>
    counter += 2;
  else if (inc4Bool)
    1264:	91 11       	cpse	r25, r1
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <incrementCounter+0x42>
    counter += 4;
  else
    counter += 1;
    1268:	80 91 f8 01 	lds	r24, 0x01F8
    126c:	90 91 f9 01 	lds	r25, 0x01F9
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	90 93 f9 01 	sts	0x01F9, r25
    1276:	80 93 f8 01 	sts	0x01F8, r24
    127a:	08 95       	ret
//Called to increment the counter variable
void inline incrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
  else if (inc2Bool)
    counter += 2;
    127c:	80 91 f8 01 	lds	r24, 0x01F8
    1280:	90 91 f9 01 	lds	r25, 0x01F9
    1284:	02 96       	adiw	r24, 0x02	; 2
    1286:	90 93 f9 01 	sts	0x01F9, r25
    128a:	80 93 f8 01 	sts	0x01F8, r24
    128e:	08 95       	ret
}

//Called to increment the counter variable
void inline incrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
    1290:	00 00       	nop
    1292:	08 95       	ret
  else if (inc2Bool)
    counter += 2;
  else if (inc4Bool)
    counter += 4;
    1294:	80 91 f8 01 	lds	r24, 0x01F8
    1298:	90 91 f9 01 	lds	r25, 0x01F9
    129c:	04 96       	adiw	r24, 0x04	; 4
    129e:	90 93 f9 01 	sts	0x01F9, r25
    12a2:	80 93 f8 01 	sts	0x01F8, r24
    12a6:	08 95       	ret

000012a8 <decrementCounter>:
    
}

//Called to decrement the counter variable
void inline decrementCounter( void ){
  if(inc2Bool & inc4Bool)
    12a8:	80 91 f4 01 	lds	r24, 0x01F4
    12ac:	90 91 f3 01 	lds	r25, 0x01F3
    12b0:	29 2f       	mov	r18, r25
    12b2:	28 23       	and	r18, r24
    12b4:	c1 f4       	brne	.+48     	; 0x12e6 <decrementCounter+0x3e>
    NOP();
  else if (inc2Bool)
    12b6:	81 11       	cpse	r24, r1
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <decrementCounter+0x2a>
    counter -= 2;
  else if (inc4Bool)
    12ba:	91 11       	cpse	r25, r1
    12bc:	16 c0       	rjmp	.+44     	; 0x12ea <decrementCounter+0x42>
    counter -= 4;
  else
    counter -= 1;
    12be:	80 91 f8 01 	lds	r24, 0x01F8
    12c2:	90 91 f9 01 	lds	r25, 0x01F9
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	90 93 f9 01 	sts	0x01F9, r25
    12cc:	80 93 f8 01 	sts	0x01F8, r24
    12d0:	08 95       	ret
//Called to decrement the counter variable
void inline decrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
  else if (inc2Bool)
    counter -= 2;
    12d2:	80 91 f8 01 	lds	r24, 0x01F8
    12d6:	90 91 f9 01 	lds	r25, 0x01F9
    12da:	02 97       	sbiw	r24, 0x02	; 2
    12dc:	90 93 f9 01 	sts	0x01F9, r25
    12e0:	80 93 f8 01 	sts	0x01F8, r24
    12e4:	08 95       	ret
}

//Called to decrement the counter variable
void inline decrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
    12e6:	00 00       	nop
    12e8:	08 95       	ret
  else if (inc2Bool)
    counter -= 2;
  else if (inc4Bool)
    counter -= 4;
    12ea:	80 91 f8 01 	lds	r24, 0x01F8
    12ee:	90 91 f9 01 	lds	r25, 0x01F9
    12f2:	04 97       	sbiw	r24, 0x04	; 4
    12f4:	90 93 f9 01 	sts	0x01F9, r25
    12f8:	80 93 f8 01 	sts	0x01F8, r24
    12fc:	08 95       	ret

000012fe <ENC_L_COUNTUP>:
    counter -= 1;
}


//Parsed commands from the encoders (parsed to one call per detent)
void inline ENC_L_COUNTUP(void){
    12fe:	08 95       	ret

00001300 <ENC_L_COUNTDOWN>:
  //ENC_R_COUNTUP();
}
void inline ENC_L_COUNTDOWN(void){
    1300:	08 95       	ret

00001302 <ENC_R_COUNTUP>:
  //ENC_R_COUNTDOWN();
}
void inline ENC_R_COUNTUP(void){
  
  if(settings & SET_MIN){
    1302:	80 91 d6 01 	lds	r24, 0x01D6
    1306:	90 91 d7 01 	lds	r25, 0x01D7
    130a:	80 ff       	sbrs	r24, 0
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <ENC_R_COUNTUP+0x24>
      minutes = (minutes + 1) % 60;
    130e:	80 91 e6 01 	lds	r24, 0x01E6
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	6c e3       	ldi	r22, 0x3C	; 60
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
    131e:	80 93 e6 01 	sts	0x01E6, r24
      seconds = 0;
    1322:	10 92 e7 01 	sts	0x01E7, r1
  }
  if(settings & SET_HR){
    1326:	80 91 d6 01 	lds	r24, 0x01D6
    132a:	90 91 d7 01 	lds	r25, 0x01D7
    132e:	81 ff       	sbrs	r24, 1
    1330:	0c c0       	rjmp	.+24     	; 0x134a <ENC_R_COUNTUP+0x48>
    hours = (hours + 1) % 24;
    1332:	80 91 e5 01 	lds	r24, 0x01E5
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	68 e1       	ldi	r22, 0x18	; 24
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
    1342:	80 93 e5 01 	sts	0x01E5, r24
    seconds = 0;
    1346:	10 92 e7 01 	sts	0x01E7, r1
    134a:	08 95       	ret

0000134c <ENC_R_COUNTDOWN>:
  }
}
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    134c:	80 91 d6 01 	lds	r24, 0x01D6
    1350:	90 91 d7 01 	lds	r25, 0x01D7
    1354:	80 ff       	sbrs	r24, 0
    1356:	09 c0       	rjmp	.+18     	; 0x136a <ENC_R_COUNTDOWN+0x1e>
    if(minutes == 0)
    1358:	80 91 e6 01 	lds	r24, 0x01E6
    135c:	88 23       	and	r24, r24
    135e:	c9 f0       	breq	.+50     	; 0x1392 <ENC_R_COUNTDOWN+0x46>
      minutes = 59;
    else
      minutes -= 1;
    1360:	81 50       	subi	r24, 0x01	; 1
    1362:	80 93 e6 01 	sts	0x01E6, r24
    seconds = 0;
    1366:	10 92 e7 01 	sts	0x01E7, r1
  }
  if(settings & SET_HR){
    136a:	80 91 d6 01 	lds	r24, 0x01D6
    136e:	90 91 d7 01 	lds	r25, 0x01D7
    1372:	81 ff       	sbrs	r24, 1
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <ENC_R_COUNTDOWN+0x3c>
    if(hours == 0)
    1376:	80 91 e5 01 	lds	r24, 0x01E5
    137a:	88 23       	and	r24, r24
    137c:	31 f0       	breq	.+12     	; 0x138a <ENC_R_COUNTDOWN+0x3e>
      hours = 23;
    else
      hours -= 1;
    137e:	81 50       	subi	r24, 0x01	; 1
    1380:	80 93 e5 01 	sts	0x01E5, r24
    seconds = 0;
    1384:	10 92 e7 01 	sts	0x01E7, r1
    1388:	08 95       	ret
      minutes -= 1;
    seconds = 0;
  }
  if(settings & SET_HR){
    if(hours == 0)
      hours = 23;
    138a:	87 e1       	ldi	r24, 0x17	; 23
    138c:	80 93 e5 01 	sts	0x01E5, r24
    1390:	f9 cf       	rjmp	.-14     	; 0x1384 <ENC_R_COUNTDOWN+0x38>
  }
}
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    if(minutes == 0)
      minutes = 59;
    1392:	8b e3       	ldi	r24, 0x3B	; 59
    1394:	80 93 e6 01 	sts	0x01E6, r24
    1398:	e6 cf       	rjmp	.-52     	; 0x1366 <ENC_R_COUNTDOWN+0x1a>

0000139a <__vector_18>:
      hours -= 1;
    seconds = 0;
  }
}

ISR(USART0_RX_vect){
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	0b b6       	in	r0, 0x3b	; 59
    13a6:	0f 92       	push	r0
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
  static uint8_t buf;

  buf = UDR0;
    13c0:	8c b1       	in	r24, 0x0c	; 12
    13c2:	80 93 07 02 	sts	0x0207, r24

  rxBuffer[rxBufferCnt++] = buf;
    13c6:	e0 91 f7 01 	lds	r30, 0x01F7
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	9e 0f       	add	r25, r30
    13ce:	90 93 f7 01 	sts	0x01F7, r25
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	e1 56       	subi	r30, 0x61	; 97
    13d6:	fd 4f       	sbci	r31, 0xFD	; 253
    13d8:	80 83       	st	Z, r24

  if(rxBufferCnt > 60 || rxBuffer[rxBufferCnt-1] == '\n'){
    13da:	80 91 f7 01 	lds	r24, 0x01F7
    13de:	8d 33       	cpi	r24, 0x3D	; 61
    13e0:	d8 f4       	brcc	.+54     	; 0x1418 <__vector_18+0x7e>
    13e2:	e0 91 f7 01 	lds	r30, 0x01F7
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	e2 56       	subi	r30, 0x62	; 98
    13ea:	fd 4f       	sbci	r31, 0xFD	; 253
    13ec:	80 81       	ld	r24, Z
    13ee:	8a 30       	cpi	r24, 0x0A	; 10
    13f0:	99 f0       	breq	.+38     	; 0x1418 <__vector_18+0x7e>
  }

//  uart_putc(buf);
//  uart_putc('_');

}
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0b be       	out	0x3b, r0	; 59
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti
  buf = UDR0;

  rxBuffer[rxBufferCnt++] = buf;

  if(rxBufferCnt > 60 || rxBuffer[rxBufferCnt-1] == '\n'){
    rxBuffer[rxBufferCnt] = '\0';
    1418:	e0 91 f7 01 	lds	r30, 0x01F7
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	e1 56       	subi	r30, 0x61	; 97
    1420:	fd 4f       	sbci	r31, 0xFD	; 253
    1422:	10 82       	st	Z, r1
    rxBufferCnt = 0;
    1424:	10 92 f7 01 	sts	0x01F7, r1
    inputFlag = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 f6 01 	sts	0x01F6, r24
    strcpy(finalBuffer, rxBuffer);
    142e:	6f e9       	ldi	r22, 0x9F	; 159
    1430:	72 e0       	ldi	r23, 0x02	; 2
    1432:	82 e5       	ldi	r24, 0x52	; 82
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <strcpy>
    143a:	db cf       	rjmp	.-74     	; 0x13f2 <__vector_18+0x58>

0000143c <init_lm73>:

}

//Initialize the lm73 sensor specifically
void init_lm73(void){
  twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1);  //Start the TWI write process (twi_start_wr())
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	6c e8       	ldi	r22, 0x8C	; 140
    1440:	73 e0       	ldi	r23, 0x03	; 3
    1442:	80 e9       	ldi	r24, 0x90	; 144
    1444:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <twi_start_wr>

00001448 <lm73Read>:
//Read from the LM73 sensor and place the data in global variables
void lm73Read(void){
  char static tempStr[12];
  uint16_t lm73_temp;  //a place to assemble the temperature from the lm73

  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes)  (twi_start_rd())
    1448:	42 e0       	ldi	r20, 0x02	; 2
    144a:	6e e8       	ldi	r22, 0x8E	; 142
    144c:	73 e0       	ldi	r23, 0x03	; 3
    144e:	80 e9       	ldi	r24, 0x90	; 144
    1450:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <twi_start_rd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1454:	8f e3       	ldi	r24, 0x3F	; 63
    1456:	9f e1       	ldi	r25, 0x1F	; 31
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <lm73Read+0x10>
    145c:	00 c0       	rjmp	.+0      	; 0x145e <lm73Read+0x16>
    145e:	00 00       	nop
  _delay_ms(2);    //wait for it to finish
  lm73_temp = lm73_rd_buf[0];  //save high temperature byte into lm73_temp
    1460:	80 91 8e 03 	lds	r24, 0x038E
    1464:	90 e0       	ldi	r25, 0x00	; 0
  lm73_temp = lm73_temp << 8;  //shift it into upper byte 
    1466:	98 2f       	mov	r25, r24
    1468:	88 27       	eor	r24, r24
  lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
    146a:	20 91 8f 03 	lds	r18, 0x038F
    146e:	82 2b       	or	r24, r18
  lm73_data = lm73_temp >> 7;
    1470:	88 0f       	add	r24, r24
    1472:	89 2f       	mov	r24, r25
    1474:	88 1f       	adc	r24, r24
    1476:	99 0b       	sbc	r25, r25
    1478:	91 95       	neg	r25
    147a:	90 93 11 02 	sts	0x0211, r25
    147e:	80 93 10 02 	sts	0x0210, r24

//  lm73_data = lm73_temp;
 
  lm73_precision = 0;
 
  if(lm73_rd_buf[1] & 0b01000000) //Check for .5degC //bit_is_set(lm73_temp,9))
    1482:	26 fd       	sbrc	r18, 6
    1484:	3e c0       	rjmp	.+124    	; 0x1502 <lm73Read+0xba>
  lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
  lm73_data = lm73_temp >> 7;

//  lm73_data = lm73_temp;
 
  lm73_precision = 0;
    1486:	10 92 0f 02 	sts	0x020F, r1
    148a:	10 92 0e 02 	sts	0x020E, r1
 
  if(lm73_rd_buf[1] & 0b01000000) //Check for .5degC //bit_is_set(lm73_temp,9))
    lm73_precision |= 0x02;
  if(lm73_rd_buf[1] & 0b00100000) //Check for .25degC //bit_is_set(lm73_temp,10))
    148e:	25 ff       	sbrs	r18, 5
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <lm73Read+0x5c>
    lm73_precision |= 0x01;
    1492:	20 91 0e 02 	lds	r18, 0x020E
    1496:	30 91 0f 02 	lds	r19, 0x020F
    149a:	21 60       	ori	r18, 0x01	; 1
    149c:	30 93 0f 02 	sts	0x020F, r19
    14a0:	20 93 0e 02 	sts	0x020E, r18

  itoa(lm73_data, tempStr, 10);
    14a4:	4a e0       	ldi	r20, 0x0A	; 10
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	6b ef       	ldi	r22, 0xFB	; 251
    14aa:	71 e0       	ldi	r23, 0x01	; 1
    14ac:	0e 94 01 14 	call	0x2802	; 0x2802 <itoa>

  strcat(tempStr, ".");
    14b0:	eb ef       	ldi	r30, 0xFB	; 251
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	01 90       	ld	r0, Z+
    14b6:	00 20       	and	r0, r0
    14b8:	e9 f7       	brne	.-6      	; 0x14b4 <lm73Read+0x6c>
    14ba:	31 97       	sbiw	r30, 0x01	; 1
    14bc:	cf 01       	movw	r24, r30
    14be:	8b 5f       	subi	r24, 0xFB	; 251
    14c0:	91 40       	sbci	r25, 0x01	; 1
    14c2:	2e e2       	ldi	r18, 0x2E	; 46
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	31 83       	std	Z+1, r19	; 0x01
    14c8:	20 83       	st	Z, r18

  if(lm73_precision == 0x03)
    14ca:	20 91 0e 02 	lds	r18, 0x020E
    14ce:	30 91 0f 02 	lds	r19, 0x020F
    strcat(tempStr, "75");
    14d2:	fc 01       	movw	r30, r24
    14d4:	e4 50       	subi	r30, 0x04	; 4
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254

  itoa(lm73_data, tempStr, 10);

  strcat(tempStr, ".");

  if(lm73_precision == 0x03)
    14d8:	23 30       	cpi	r18, 0x03	; 3
    14da:	31 05       	cpc	r19, r1
    14dc:	29 f1       	breq	.+74     	; 0x1528 <lm73Read+0xe0>
    strcat(tempStr, "75");
  else if (lm73_precision == 0x02)
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	49 f1       	breq	.+82     	; 0x1536 <lm73Read+0xee>
    strcat(tempStr, "50");
  else if (lm73_precision == 0x01)
    14e4:	21 30       	cpi	r18, 0x01	; 1
    14e6:	31 05       	cpc	r19, r1
    14e8:	99 f0       	breq	.+38     	; 0x1510 <lm73Read+0xc8>
    strcat(tempStr, "25");
  else
    strcat(tempStr, "00");
    14ea:	20 e3       	ldi	r18, 0x30	; 48
    14ec:	30 e3       	ldi	r19, 0x30	; 48
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	20 83       	st	Z, r18
    14f2:	31 83       	std	Z+1, r19	; 0x01
    14f4:	42 83       	std	Z+2, r20	; 0x02

  strcpy(tempCelString, tempStr);
    14f6:	6b ef       	ldi	r22, 0xFB	; 251
    14f8:	71 e0       	ldi	r23, 0x01	; 1
    14fa:	88 e9       	ldi	r24, 0x98	; 152
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <strcpy>
//  lm73_data = lm73_temp;
 
  lm73_precision = 0;
 
  if(lm73_rd_buf[1] & 0b01000000) //Check for .5degC //bit_is_set(lm73_temp,9))
    lm73_precision |= 0x02;
    1502:	42 e0       	ldi	r20, 0x02	; 2
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	50 93 0f 02 	sts	0x020F, r21
    150a:	40 93 0e 02 	sts	0x020E, r20
    150e:	bf cf       	rjmp	.-130    	; 0x148e <lm73Read+0x46>
  if(lm73_precision == 0x03)
    strcat(tempStr, "75");
  else if (lm73_precision == 0x02)
    strcat(tempStr, "50");
  else if (lm73_precision == 0x01)
    strcat(tempStr, "25");
    1510:	22 e3       	ldi	r18, 0x32	; 50
    1512:	35 e3       	ldi	r19, 0x35	; 53
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	20 83       	st	Z, r18
    1518:	31 83       	std	Z+1, r19	; 0x01
    151a:	42 83       	std	Z+2, r20	; 0x02
  else
    strcat(tempStr, "00");

  strcpy(tempCelString, tempStr);
    151c:	6b ef       	ldi	r22, 0xFB	; 251
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	88 e9       	ldi	r24, 0x98	; 152
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <strcpy>
  itoa(lm73_data, tempStr, 10);

  strcat(tempStr, ".");

  if(lm73_precision == 0x03)
    strcat(tempStr, "75");
    1528:	27 e3       	ldi	r18, 0x37	; 55
    152a:	35 e3       	ldi	r19, 0x35	; 53
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	20 83       	st	Z, r18
    1530:	31 83       	std	Z+1, r19	; 0x01
    1532:	42 83       	std	Z+2, r20	; 0x02
    1534:	e0 cf       	rjmp	.-64     	; 0x14f6 <lm73Read+0xae>
  else if (lm73_precision == 0x02)
    strcat(tempStr, "50");
    1536:	25 e3       	ldi	r18, 0x35	; 53
    1538:	30 e3       	ldi	r19, 0x30	; 48
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	20 83       	st	Z, r18
    153e:	31 83       	std	Z+1, r19	; 0x01
    1540:	42 83       	std	Z+2, r20	; 0x02
    1542:	d9 cf       	rjmp	.-78     	; 0x14f6 <lm73Read+0xae>

00001544 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	81 11       	cpse	r24, r1
    1548:	01 c0       	rjmp	.+2      	; 0x154c <send_lcd+0x8>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    154e:	77 9b       	sbis	0x0e, 7	; 14
    1550:	fe cf       	rjmp	.-4      	; 0x154e <send_lcd+0xa>
  SPDR = byte;                        //send payload
    1552:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1554:	77 9b       	sbis	0x0e, 7	; 14
    1556:	fe cf       	rjmp	.-4      	; 0x1554 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1558:	80 91 62 00 	lds	r24, 0x0062
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	80 93 62 00 	sts	0x0062, r24
    1562:	80 91 62 00 	lds	r24, 0x0062
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	80 93 62 00 	sts	0x0062, r24
    156c:	08 95       	ret

0000156e <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
    156e:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    1570:	c0 91 0c 02 	lds	r28, 0x020C
    1574:	8c 0f       	add	r24, r28
    1576:	91 1d       	adc	r25, r1
    1578:	fc 01       	movw	r30, r24
    157a:	60 81       	ld	r22, Z
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
 i++;   //increment to next character
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	8c 0f       	add	r24, r28
    1586:	80 93 0c 02 	sts	0x020C, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    158a:	80 31       	cpi	r24, 0x10	; 16
    158c:	89 f0       	breq	.+34     	; 0x15b0 <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    158e:	80 32       	cpi	r24, 0x20	; 32
    1590:	11 f0       	breq	.+4      	; 0x1596 <refresh_lcd+0x28>

 return i;
}//refresh_lcd
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1596:	85 ed       	ldi	r24, 0xD5	; 213
    1598:	8a 95       	dec	r24
    159a:	f1 f7       	brne	.-4      	; 0x1598 <refresh_lcd+0x2a>
    159c:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    159e:	60 e8       	ldi	r22, 0x80	; 128
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    15a6:	10 92 0c 02 	sts	0x020C, r1
    15aa:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret
    15b0:	f5 ed       	ldi	r31, 0xD5	; 213
    15b2:	fa 95       	dec	r31
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <refresh_lcd+0x44>
    15b6:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    15b8:	60 ec       	ldi	r22, 0xC0	; 192
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    15c0:	80 91 0c 02 	lds	r24, 0x020C
    15c4:	e4 cf       	rjmp	.-56     	; 0x158e <refresh_lcd+0x20>

000015c6 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	1f 92       	push	r1
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    15da:	66 0f       	add	r22, r22
    15dc:	66 0f       	add	r22, r22
    15de:	66 0f       	add	r22, r22
    15e0:	60 5c       	subi	r22, 0xC0	; 192
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	99 83       	std	Y+1, r25	; 0x01
    15e6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    15ea:	85 ed       	ldi	r24, 0xD5	; 213
    15ec:	8a 95       	dec	r24
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <set_custom_character+0x26>
    15f0:	00 00       	nop
    15f2:	e1 2e       	mov	r14, r17
    15f4:	99 81       	ldd	r25, Y+1	; 0x01
    15f6:	f9 2e       	mov	r15, r25
    15f8:	87 01       	movw	r16, r14
    15fa:	08 5f       	subi	r16, 0xF8	; 248
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    15fe:	f7 01       	movw	r30, r14
    1600:	61 91       	ld	r22, Z+
    1602:	7f 01       	movw	r14, r30
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    160a:	f5 ed       	ldi	r31, 0xD5	; 213
    160c:	fa 95       	dec	r31
    160e:	f1 f7       	brne	.-4      	; 0x160c <set_custom_character+0x46>
    1610:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    1612:	e0 16       	cp	r14, r16
    1614:	f1 06       	cpc	r15, r17
    1616:	99 f7       	brne	.-26     	; 0x15fe <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    1618:	0f 90       	pop	r0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	08 95       	ret

00001628 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    1628:	90 e4       	ldi	r25, 0x40	; 64
    162a:	89 9f       	mul	r24, r25
    162c:	60 0d       	add	r22, r0
    162e:	11 24       	eor	r1, r1
    1630:	60 5c       	subi	r22, 0xC0	; 192
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

00001638 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    1638:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    163a:	88 23       	and	r24, r24
    163c:	b9 f1       	breq	.+110    	; 0x16ac <uint2lcd+0x74>
    163e:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1640:	84 36       	cpi	r24, 0x64	; 100
    1642:	98 f4       	brcc	.+38     	; 0x166a <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1644:	8a 30       	cpi	r24, 0x0A	; 10
    1646:	d8 f4       	brcc	.+54     	; 0x167e <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1648:	8d ec       	ldi	r24, 0xCD	; 205
    164a:	c8 9f       	mul	r28, r24
    164c:	81 2d       	mov	r24, r1
    164e:	11 24       	eor	r1, r1
    1650:	86 95       	lsr	r24
    1652:	86 95       	lsr	r24
    1654:	86 95       	lsr	r24
    1656:	6c 2f       	mov	r22, r28
    1658:	2a e0       	ldi	r18, 0x0A	; 10
    165a:	82 9f       	mul	r24, r18
    165c:	60 19       	sub	r22, r0
    165e:	11 24       	eor	r1, r1
    1660:	60 5d       	subi	r22, 0xD0	; 208
    1662:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1664:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1666:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    166a:	69 e2       	ldi	r22, 0x29	; 41
    166c:	86 9f       	mul	r24, r22
    166e:	61 2d       	mov	r22, r1
    1670:	11 24       	eor	r1, r1
    1672:	62 95       	swap	r22
    1674:	6f 70       	andi	r22, 0x0F	; 15
    1676:	60 5d       	subi	r22, 0xD0	; 208
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    167e:	89 e2       	ldi	r24, 0x29	; 41
    1680:	c8 9f       	mul	r28, r24
    1682:	81 2d       	mov	r24, r1
    1684:	11 24       	eor	r1, r1
    1686:	82 95       	swap	r24
    1688:	8f 70       	andi	r24, 0x0F	; 15
    168a:	9c 2f       	mov	r25, r28
    168c:	24 e6       	ldi	r18, 0x64	; 100
    168e:	82 9f       	mul	r24, r18
    1690:	90 19       	sub	r25, r0
    1692:	11 24       	eor	r1, r1
    1694:	6d ec       	ldi	r22, 0xCD	; 205
    1696:	96 9f       	mul	r25, r22
    1698:	61 2d       	mov	r22, r1
    169a:	11 24       	eor	r1, r1
    169c:	66 95       	lsr	r22
    169e:	66 95       	lsr	r22
    16a0:	66 95       	lsr	r22
    16a2:	60 5d       	subi	r22, 0xD0	; 208
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    16aa:	ce cf       	rjmp	.-100    	; 0x1648 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    16ac:	60 e3       	ldi	r22, 0x30	; 48
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    16b0:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    16b2:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

000016b6 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    16b6:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    16b8:	87 fd       	sbrc	r24, 7
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    16bc:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    16be:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <uint2lcd>
    16c2:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    16c4:	6d e2       	ldi	r22, 0x2D	; 45
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    16cc:	85 ed       	ldi	r24, 0xD5	; 213
    16ce:	8a 95       	dec	r24
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <int2lcd+0x18>
    16d2:	00 00       	nop
    16d4:	8c 2f       	mov	r24, r28
    16d6:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    16d8:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    16da:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <uint2lcd>

000016de <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    16de:	6e e0       	ldi	r22, 0x0E	; 14
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

000016e6 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    16e6:	6c e0       	ldi	r22, 0x0C	; 12
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

000016ee <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    16ee:	6e e1       	ldi	r22, 0x1E	; 30
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

000016f6 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    16f6:	68 e1       	ldi	r22, 0x18	; 24
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

000016fe <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16fe:	e2 e6       	ldi	r30, 0x62	; 98
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 60       	ori	r24, 0x08	; 8
    1706:	80 83       	st	Z, r24
    1708:	80 81       	ld	r24, Z
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	80 83       	st	Z, r24
    170e:	08 95       	ret

00001710 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1718:	8f e1       	ldi	r24, 0x1F	; 31
    171a:	9c e1       	ldi	r25, 0x1C	; 28
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <clear_display+0xc>
    1720:	00 c0       	rjmp	.+0      	; 0x1722 <clear_display+0x12>
    1722:	00 00       	nop
    1724:	08 95       	ret

00001726 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    172e:	8f e6       	ldi	r24, 0x6F	; 111
    1730:	97 e1       	ldi	r25, 0x17	; 23
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <cursor_home+0xc>
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <cursor_home+0x12>
    1738:	00 00       	nop
    173a:	08 95       	ret

0000173c <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    173c:	60 ec       	ldi	r22, 0xC0	; 192
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

00001744 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1744:	60 e8       	ldi	r22, 0x80	; 128
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

0000174c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    174c:	cf 93       	push	r28
    174e:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    1750:	60 e2       	ldi	r22, 0x20	; 32
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1758:	85 ed       	ldi	r24, 0xD5	; 213
    175a:	8a 95       	dec	r24
    175c:	f1 f7       	brne	.-4      	; 0x175a <fill_spaces+0xe>
    175e:	00 00       	nop
    1760:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1762:	b1 f7       	brne	.-20     	; 0x1750 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1768:	68 2f       	mov	r22, r24
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <send_lcd>

00001770 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	c0 e0       	ldi	r28, 0x00	; 0
    177e:	f8 01       	movw	r30, r16
    1780:	e4 0f       	add	r30, r20
    1782:	f5 1f       	adc	r31, r21
    1784:	60 81       	ld	r22, Z
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    178c:	85 ed       	ldi	r24, 0xD5	; 213
    178e:	8a 95       	dec	r24
    1790:	f1 f7       	brne	.-4      	; 0x178e <string2lcd+0x1e>
    1792:	00 00       	nop
    1794:	cf 5f       	subi	r28, 0xFF	; 255
    1796:	4c 2f       	mov	r20, r28
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	f8 01       	movw	r30, r16
    179c:	01 90       	ld	r0, Z+
    179e:	00 20       	and	r0, r0
    17a0:	e9 f7       	brne	.-6      	; 0x179c <string2lcd+0x2c>
    17a2:	9f 01       	movw	r18, r30
    17a4:	20 1b       	sub	r18, r16
    17a6:	31 0b       	sbc	r19, r17
    17a8:	22 50       	subi	r18, 0x02	; 2
    17aa:	31 09       	sbc	r19, r1
    17ac:	24 17       	cp	r18, r20
    17ae:	35 07       	cpc	r19, r21
    17b0:	30 f7       	brcc	.-52     	; 0x177e <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	99 ef       	ldi	r25, 0xF9	; 249
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <lcd_init+0x4>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <lcd_init+0xa>
    17c4:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    17c6:	88 e0       	ldi	r24, 0x08	; 8
    17c8:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    17cc:	60 e3       	ldi	r22, 0x30	; 48
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    17d4:	8f e5       	ldi	r24, 0x5F	; 95
    17d6:	9d e6       	ldi	r25, 0x6D	; 109
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <lcd_init+0x1e>
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <lcd_init+0x24>
    17de:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    17e0:	60 e3       	ldi	r22, 0x30	; 48
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    17e8:	8f e5       	ldi	r24, 0x5F	; 95
    17ea:	9d e6       	ldi	r25, 0x6D	; 109
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <lcd_init+0x32>
    17f0:	00 c0       	rjmp	.+0      	; 0x17f2 <lcd_init+0x38>
    17f2:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    17f4:	60 e3       	ldi	r22, 0x30	; 48
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    17fc:	8f e5       	ldi	r24, 0x5F	; 95
    17fe:	9d e6       	ldi	r25, 0x6D	; 109
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <lcd_init+0x46>
    1804:	00 c0       	rjmp	.+0      	; 0x1806 <lcd_init+0x4c>
    1806:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    1808:	68 e3       	ldi	r22, 0x38	; 56
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1810:	8f e1       	ldi	r24, 0x1F	; 31
    1812:	9e e4       	ldi	r25, 0x4E	; 78
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <lcd_init+0x5a>
    1818:	00 c0       	rjmp	.+0      	; 0x181a <lcd_init+0x60>
    181a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    181c:	68 e0       	ldi	r22, 0x08	; 8
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1824:	8f e1       	ldi	r24, 0x1F	; 31
    1826:	9e e4       	ldi	r25, 0x4E	; 78
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <lcd_init+0x6e>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <lcd_init+0x74>
    182e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1838:	8f e1       	ldi	r24, 0x1F	; 31
    183a:	9e e4       	ldi	r25, 0x4E	; 78
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <lcd_init+0x82>
    1840:	00 c0       	rjmp	.+0      	; 0x1842 <lcd_init+0x88>
    1842:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    1844:	66 e0       	ldi	r22, 0x06	; 6
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    184c:	8f e1       	ldi	r24, 0x1F	; 31
    184e:	9e e4       	ldi	r25, 0x4E	; 78
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <lcd_init+0x96>
    1854:	00 c0       	rjmp	.+0      	; 0x1856 <lcd_init+0x9c>
    1856:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    1858:	6c e0       	ldi	r22, 0x0C	; 12
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1860:	8f e1       	ldi	r24, 0x1F	; 31
    1862:	9e e4       	ldi	r25, 0x4E	; 78
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <lcd_init+0xaa>
    1868:	00 c0       	rjmp	.+0      	; 0x186a <lcd_init+0xb0>
    186a:	00 00       	nop
    186c:	08 95       	ret

0000186e <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    186e:	8f 92       	push	r8
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	69 97       	sbiw	r28, 0x19	; 25
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	f4 2e       	mov	r15, r20
    1898:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    189a:	00 23       	and	r16, r16
    189c:	59 f0       	breq	.+22     	; 0x18b4 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    189e:	4b 01       	movw	r8, r22
    18a0:	5c 01       	movw	r10, r24
    18a2:	88 24       	eor	r8, r8
    18a4:	b7 fc       	sbrc	r11, 7
    18a6:	83 94       	inc	r8
    18a8:	99 24       	eor	r9, r9
    18aa:	aa 24       	eor	r10, r10
    18ac:	bb 24       	eor	r11, r11
    18ae:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    18b0:	97 fd       	sbrc	r25, 7
    18b2:	8f c0       	rjmp	.+286    	; 0x19d2 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    18b4:	11 23       	and	r17, r17
    18b6:	09 f4       	brne	.+2      	; 0x18ba <lcd_int32+0x4c>
    18b8:	84 c0       	rjmp	.+264    	; 0x19c2 <lcd_int32+0x154>
    18ba:	9e 01       	movw	r18, r28
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	69 01       	movw	r12, r18
    18c2:	59 01       	movw	r10, r18
    18c4:	88 24       	eor	r8, r8
    18c6:	8a 94       	dec	r8
    18c8:	81 0e       	add	r8, r17
    18ca:	91 2c       	mov	r9, r1
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	83 1a       	sub	r8, r19
    18d0:	93 0a       	sbc	r9, r19
    18d2:	8c 0c       	add	r8, r12
    18d4:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    18d6:	2a e0       	ldi	r18, 0x0A	; 10
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divmodsi4>
    18e2:	e6 2f       	mov	r30, r22
    18e4:	2a 8b       	std	Y+18, r18	; 0x12
    18e6:	3b 8b       	std	Y+19, r19	; 0x13
    18e8:	4c 8b       	std	Y+20, r20	; 0x14
    18ea:	5d 8b       	std	Y+21, r21	; 0x15
    18ec:	6a 89       	ldd	r22, Y+18	; 0x12
    18ee:	7b 89       	ldd	r23, Y+19	; 0x13
    18f0:	8c 89       	ldd	r24, Y+20	; 0x14
    18f2:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    18f4:	20 e3       	ldi	r18, 0x30	; 48
    18f6:	2e 0f       	add	r18, r30
    18f8:	f5 01       	movw	r30, r10
    18fa:	21 93       	st	Z+, r18
    18fc:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    18fe:	e8 15       	cp	r30, r8
    1900:	f9 05       	cpc	r31, r9
    1902:	49 f7       	brne	.-46     	; 0x18d6 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1904:	bb 24       	eor	r11, r11
    1906:	b3 94       	inc	r11
    1908:	b1 0e       	add	r11, r17
    190a:	f6 01       	movw	r30, r12
    190c:	e1 0f       	add	r30, r17
    190e:	f1 1d       	adc	r31, r1
    1910:	2e e2       	ldi	r18, 0x2E	; 46
    1912:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1914:	2a e0       	ldi	r18, 0x0A	; 10
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divmodsi4>
    1920:	e6 2f       	mov	r30, r22
    1922:	2a 8b       	std	Y+18, r18	; 0x12
    1924:	3b 8b       	std	Y+19, r19	; 0x13
    1926:	4c 8b       	std	Y+20, r20	; 0x14
    1928:	5d 8b       	std	Y+21, r21	; 0x15
    192a:	6e 8b       	std	Y+22, r22	; 0x16
    192c:	7f 8b       	std	Y+23, r23	; 0x17
    192e:	88 8f       	std	Y+24, r24	; 0x18
    1930:	99 8f       	std	Y+25, r25	; 0x19
    1932:	6a 89       	ldd	r22, Y+18	; 0x12
    1934:	7b 89       	ldd	r23, Y+19	; 0x13
    1936:	8c 89       	ldd	r24, Y+20	; 0x14
    1938:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    193a:	11 e0       	ldi	r17, 0x01	; 1
    193c:	1b 0d       	add	r17, r11
    193e:	d6 01       	movw	r26, r12
    1940:	ab 0d       	add	r26, r11
    1942:	b1 1d       	adc	r27, r1
    1944:	e0 5d       	subi	r30, 0xD0	; 208
    1946:	ec 93       	st	X, r30
    1948:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    194a:	61 15       	cp	r22, r1
    194c:	71 05       	cpc	r23, r1
    194e:	81 05       	cpc	r24, r1
    1950:	91 05       	cpc	r25, r1
    1952:	01 f7       	brne	.-64     	; 0x1914 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1954:	ff 20       	and	r15, r15
    1956:	61 f0       	breq	.+24     	; 0x1970 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1958:	e1 10       	cpse	r14, r1
    195a:	39 c0       	rjmp	.+114    	; 0x19ce <lcd_int32+0x160>
    195c:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    195e:	1f 15       	cp	r17, r15
    1960:	38 f4       	brcc	.+14     	; 0x1970 <lcd_int32+0x102>
    1962:	f6 01       	movw	r30, r12
    1964:	e1 0f       	add	r30, r17
    1966:	f1 1d       	adc	r31, r1
    1968:	80 83       	st	Z, r24
    196a:	1f 5f       	subi	r17, 0xFF	; 255
    196c:	1f 11       	cpse	r17, r15
    196e:	f9 cf       	rjmp	.-14     	; 0x1962 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1970:	00 23       	and	r16, r16
    1972:	31 f0       	breq	.+12     	; 0x1980 <lcd_int32+0x112>
    1974:	f6 01       	movw	r30, r12
    1976:	e1 0f       	add	r30, r17
    1978:	f1 1d       	adc	r31, r1
    197a:	8d e2       	ldi	r24, 0x2D	; 45
    197c:	80 83       	st	Z, r24
    197e:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1980:	11 50       	subi	r17, 0x01	; 1
    1982:	f6 01       	movw	r30, r12
    1984:	e1 0f       	add	r30, r17
    1986:	f1 1d       	adc	r31, r1
    1988:	60 81       	ld	r22, Z
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1990:	35 ed       	ldi	r19, 0xD5	; 213
    1992:	3a 95       	dec	r19
    1994:	f1 f7       	brne	.-4      	; 0x1992 <lcd_int32+0x124>
    1996:	00 00       	nop
    1998:	11 11       	cpse	r17, r1
    199a:	f2 cf       	rjmp	.-28     	; 0x1980 <lcd_int32+0x112>

}
    199c:	69 96       	adiw	r28, 0x19	; 25
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    19c2:	b1 2c       	mov	r11, r1
    19c4:	9e 01       	movw	r18, r28
    19c6:	2f 5f       	subi	r18, 0xFF	; 255
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	69 01       	movw	r12, r18
    19cc:	a3 cf       	rjmp	.-186    	; 0x1914 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    19ce:	80 e3       	ldi	r24, 0x30	; 48
    19d0:	c6 cf       	rjmp	.-116    	; 0x195e <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    19d2:	90 95       	com	r25
    19d4:	80 95       	com	r24
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	69 cf       	rjmp	.-302    	; 0x18b4 <lcd_int32+0x46>

000019e2 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	61 97       	sbiw	r28, 0x11	; 17
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	a6 2e       	mov	r10, r22
    1a12:	54 2e       	mov	r5, r20
    1a14:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1a16:	79 2e       	mov	r7, r25
    1a18:	77 1c       	adc	r7, r7
    1a1a:	77 24       	eor	r7, r7
    1a1c:	77 1c       	adc	r7, r7
    1a1e:	b7 2c       	mov	r11, r7
    1a20:	c7 2c       	mov	r12, r7
    1a22:	d1 2c       	mov	r13, r1
    1a24:	ee 27       	eor	r30, r30
    1a26:	ff 27       	eor	r31, r31
    1a28:	ec 19       	sub	r30, r12
    1a2a:	fd 09       	sbc	r31, r13
    1a2c:	8e 27       	eor	r24, r30
    1a2e:	9f 27       	eor	r25, r31
    1a30:	fc 01       	movw	r30, r24
    1a32:	ec 0d       	add	r30, r12
    1a34:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1a36:	44 23       	and	r20, r20
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <lcd_int16+0x5a>
    1a3a:	8e c0       	rjmp	.+284    	; 0x1b58 <lcd_int16+0x176>
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	7c 01       	movw	r14, r24
    1a42:	8c 01       	movw	r16, r24
    1a44:	88 24       	eor	r8, r8
    1a46:	8a 94       	dec	r8
    1a48:	84 0e       	add	r8, r20
    1a4a:	91 2c       	mov	r9, r1
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	89 1a       	sub	r8, r25
    1a50:	99 0a       	sbc	r9, r25
    1a52:	8e 0c       	add	r8, r14
    1a54:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1a56:	6a e0       	ldi	r22, 0x0A	; 10
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	cf 01       	movw	r24, r30
    1a5c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
    1a60:	26 2f       	mov	r18, r22
    1a62:	e2 2f       	mov	r30, r18
    1a64:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    1a66:	80 5d       	subi	r24, 0xD0	; 208
    1a68:	d8 01       	movw	r26, r16
    1a6a:	8d 93       	st	X+, r24
    1a6c:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1a6e:	a8 15       	cp	r26, r8
    1a70:	b9 05       	cpc	r27, r9
    1a72:	89 f7       	brne	.-30     	; 0x1a56 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1a74:	01 e0       	ldi	r16, 0x01	; 1
    1a76:	05 0d       	add	r16, r5
    1a78:	d7 01       	movw	r26, r14
    1a7a:	a5 0d       	add	r26, r5
    1a7c:	b1 1d       	adc	r27, r1
    1a7e:	8e e2       	ldi	r24, 0x2E	; 46
    1a80:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1a82:	6a e0       	ldi	r22, 0x0A	; 10
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	cf 01       	movw	r24, r30
    1a88:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__divmodhi4>
    1a8c:	26 2f       	mov	r18, r22
    1a8e:	e2 2f       	mov	r30, r18
    1a90:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    1a92:	11 e0       	ldi	r17, 0x01	; 1
    1a94:	10 0f       	add	r17, r16
    1a96:	d7 01       	movw	r26, r14
    1a98:	a0 0f       	add	r26, r16
    1a9a:	b1 1d       	adc	r27, r1
    1a9c:	80 5d       	subi	r24, 0xD0	; 208
    1a9e:	8c 93       	st	X, r24
    1aa0:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    1aa2:	30 97       	sbiw	r30, 0x00	; 0
    1aa4:	71 f7       	brne	.-36     	; 0x1a82 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1aa6:	61 10       	cpse	r6, r1
    1aa8:	15 c0       	rjmp	.+42     	; 0x1ad4 <lcd_int16+0xf2>
    1aaa:	77 20       	and	r7, r7
    1aac:	39 f0       	breq	.+14     	; 0x1abc <lcd_int16+0xda>
        {
                sline[i++] = '-';
    1aae:	11 e0       	ldi	r17, 0x01	; 1
    1ab0:	10 0f       	add	r17, r16
    1ab2:	f7 01       	movw	r30, r14
    1ab4:	e0 0f       	add	r30, r16
    1ab6:	f1 1d       	adc	r31, r1
    1ab8:	8d e2       	ldi	r24, 0x2D	; 45
    1aba:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1abc:	aa 20       	and	r10, r10
    1abe:	41 f1       	breq	.+80     	; 0x1b10 <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1ac0:	81 2f       	mov	r24, r17
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	2a 2d       	mov	r18, r10
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	82 17       	cp	r24, r18
    1aca:	93 07       	cpc	r25, r19
    1acc:	0c f5       	brge	.+66     	; 0x1b10 <lcd_int16+0x12e>
    1ace:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	0c c0       	rjmp	.+24     	; 0x1aec <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1ad4:	aa 20       	and	r10, r10
    1ad6:	a1 f0       	breq	.+40     	; 0x1b00 <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1ad8:	81 2f       	mov	r24, r17
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	2a 2d       	mov	r18, r10
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	2c 19       	sub	r18, r12
    1ae2:	3d 09       	sbc	r19, r13
    1ae4:	82 17       	cp	r24, r18
    1ae6:	93 07       	cpc	r25, r19
    1ae8:	5c f4       	brge	.+22     	; 0x1b00 <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1aea:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1aec:	1f 5f       	subi	r17, 0xFF	; 255
    1aee:	f7 01       	movw	r30, r14
    1af0:	e8 0f       	add	r30, r24
    1af2:	f9 1f       	adc	r31, r25
    1af4:	40 83       	st	Z, r20
    1af6:	81 2f       	mov	r24, r17
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	82 17       	cp	r24, r18
    1afc:	93 07       	cpc	r25, r19
    1afe:	b4 f3       	brlt	.-20     	; 0x1aec <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    1b00:	bb 20       	and	r11, r11
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <lcd_int16+0x12e>
    1b04:	f7 01       	movw	r30, r14
    1b06:	e1 0f       	add	r30, r17
    1b08:	f1 1d       	adc	r31, r1
    1b0a:	8d e2       	ldi	r24, 0x2D	; 45
    1b0c:	80 83       	st	Z, r24
    1b0e:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1b10:	11 50       	subi	r17, 0x01	; 1
    1b12:	f7 01       	movw	r30, r14
    1b14:	e1 0f       	add	r30, r17
    1b16:	f1 1d       	adc	r31, r1
    1b18:	60 81       	ld	r22, Z
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <send_lcd>
    1b20:	95 ed       	ldi	r25, 0xD5	; 213
    1b22:	9a 95       	dec	r25
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <lcd_int16+0x140>
    1b26:	00 00       	nop
    1b28:	11 11       	cpse	r17, r1
    1b2a:	f2 cf       	rjmp	.-28     	; 0x1b10 <lcd_int16+0x12e>
}
    1b2c:	61 96       	adiw	r28, 0x11	; 17
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	bf 90       	pop	r11
    1b4a:	af 90       	pop	r10
    1b4c:	9f 90       	pop	r9
    1b4e:	8f 90       	pop	r8
    1b50:	7f 90       	pop	r7
    1b52:	6f 90       	pop	r6
    1b54:	5f 90       	pop	r5
    1b56:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1b58:	00 e0       	ldi	r16, 0x00	; 0
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	7c 01       	movw	r14, r24
    1b60:	90 cf       	rjmp	.-224    	; 0x1a82 <lcd_int16+0xa0>

00001b62 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1b62:	5d 9b       	sbis	0x0b, 5	; 11
    1b64:	fe cf       	rjmp	.-4      	; 0x1b62 <uart_putc>
    UDR0 = data;    // Send data byte
    1b66:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1b68:	5d 9b       	sbis	0x0b, 5	; 11
    1b6a:	fe cf       	rjmp	.-4      	; 0x1b68 <uart_putc+0x6>
}
    1b6c:	08 95       	ret

00001b6e <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1b6e:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1b70:	90 81       	ld	r25, Z
    1b72:	99 23       	and	r25, r25
    1b74:	49 f0       	breq	.+18     	; 0x1b88 <uart_puts+0x1a>
    1b76:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1b78:	5d 9b       	sbis	0x0b, 5	; 11
    1b7a:	fe cf       	rjmp	.-4      	; 0x1b78 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1b7c:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1b7e:	5d 9b       	sbis	0x0b, 5	; 11
    1b80:	fe cf       	rjmp	.-4      	; 0x1b7e <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1b82:	91 91       	ld	r25, Z+
    1b84:	91 11       	cpse	r25, r1
    1b86:	f8 cf       	rjmp	.-16     	; 0x1b78 <uart_puts+0xa>
    1b88:	08 95       	ret

00001b8a <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	44 91       	lpm	r20, Z
    1b90:	44 23       	and	r20, r20
    1b92:	69 f0       	breq	.+26     	; 0x1bae <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	f9 01       	movw	r30, r18
    1b98:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1b9a:	5d 9b       	sbis	0x0b, 5	; 11
    1b9c:	fe cf       	rjmp	.-4      	; 0x1b9a <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    1b9e:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1ba0:	5d 9b       	sbis	0x0b, 5	; 11
    1ba2:	fe cf       	rjmp	.-4      	; 0x1ba0 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	44 91       	lpm	r20, Z
    1baa:	41 11       	cpse	r20, r1
    1bac:	f3 cf       	rjmp	.-26     	; 0x1b94 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1bae:	08 95       	ret

00001bb0 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
  //rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    1bb0:	8a b1       	in	r24, 0x0a	; 10
    1bb2:	88 69       	ori	r24, 0x98	; 152
    1bb4:	8a b9       	out	0x0a, r24	; 10
  //  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1bb6:	e5 e9       	ldi	r30, 0x95	; 149
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	86 60       	ori	r24, 0x06	; 6
    1bbe:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1bc0:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1bc4:	87 e6       	ldi	r24, 0x67	; 103
    1bc6:	89 b9       	out	0x09, r24	; 9
    1bc8:	08 95       	ret

00001bca <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1bca:	80 e8       	ldi	r24, 0x80	; 128
    1bcc:	9e e3       	ldi	r25, 0x3E	; 62
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <uart_getc+0xa>
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1bd2:	21 f0       	breq	.+8      	; 0x1bdc <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1bd4:	5f 9b       	sbis	0x0b, 7	; 11
    1bd6:	fc cf       	rjmp	.-8      	; 0x1bd0 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1bd8:	8c b1       	in	r24, 0x0c	; 12
    1bda:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1bde:	08 95       	ret

00001be0 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    1be0:	08 95       	ret

00001be2 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	0b b6       	in	r0, 0x3b	; 59
    1bee:	0f 92       	push	r0
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	8f 93       	push	r24
    1bf6:	9f 93       	push	r25
    1bf8:	af 93       	push	r26
    1bfa:	bf 93       	push	r27
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1c00:	e0 91 71 00 	lds	r30, 0x0071
    1c04:	8e 2f       	mov	r24, r30
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	fc 01       	movw	r30, r24
    1c0a:	38 97       	sbiw	r30, 0x08	; 8
    1c0c:	e1 35       	cpi	r30, 0x51	; 81
    1c0e:	f1 05       	cpc	r31, r1
    1c10:	b0 f0       	brcs	.+44     	; 0x1c3e <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1c12:	80 91 71 00 	lds	r24, 0x0071
    1c16:	80 93 90 03 	sts	0x0390, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1c20:	ff 91       	pop	r31
    1c22:	ef 91       	pop	r30
    1c24:	bf 91       	pop	r27
    1c26:	af 91       	pop	r26
    1c28:	9f 91       	pop	r25
    1c2a:	8f 91       	pop	r24
    1c2c:	3f 91       	pop	r19
    1c2e:	2f 91       	pop	r18
    1c30:	0f 90       	pop	r0
    1c32:	0b be       	out	0x3b, r0	; 59
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1c3e:	ea 5b       	subi	r30, 0xBA	; 186
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	0c 94 15 12 	jmp	0x242a	; 0x242a <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1c46:	80 91 0d 02 	lds	r24, 0x020D
    1c4a:	e0 91 91 03 	lds	r30, 0x0391
    1c4e:	f0 91 92 03 	lds	r31, 0x0392
    1c52:	e8 0f       	add	r30, r24
    1c54:	f1 1d       	adc	r31, r1
    1c56:	80 91 73 00 	lds	r24, 0x0073
    1c5a:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    1c5c:	84 e9       	ldi	r24, 0x94	; 148
    1c5e:	80 93 74 00 	sts	0x0074, r24
      break;      
    1c62:	de cf       	rjmp	.-68     	; 0x1c20 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1c64:	80 91 93 03 	lds	r24, 0x0393
    1c68:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1c6c:	10 92 0d 02 	sts	0x020D, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1c70:	85 e8       	ldi	r24, 0x85	; 133
    1c72:	80 93 74 00 	sts	0x0074, r24
      break;
    1c76:	d4 cf       	rjmp	.-88     	; 0x1c20 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1c78:	80 91 0d 02 	lds	r24, 0x020D
    1c7c:	90 91 94 03 	lds	r25, 0x0394
    1c80:	89 17       	cp	r24, r25
    1c82:	60 f7       	brcc	.-40     	; 0x1c5c <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1c84:	e0 91 91 03 	lds	r30, 0x0391
    1c88:	f0 91 92 03 	lds	r31, 0x0392
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	98 0f       	add	r25, r24
    1c90:	90 93 0d 02 	sts	0x020D, r25
    1c94:	e8 0f       	add	r30, r24
    1c96:	f1 1d       	adc	r31, r1
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    1c9e:	85 e8       	ldi	r24, 0x85	; 133
    1ca0:	80 93 74 00 	sts	0x0074, r24
    1ca4:	bd cf       	rjmp	.-134    	; 0x1c20 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1ca6:	85 ea       	ldi	r24, 0xA5	; 165
    1ca8:	80 93 74 00 	sts	0x0074, r24
      break;
    1cac:	b9 cf       	rjmp	.-142    	; 0x1c20 <__vector_33+0x3e>
    1cae:	20 91 0d 02 	lds	r18, 0x020D
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1cb2:	80 91 94 03 	lds	r24, 0x0394
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	28 17       	cp	r18, r24
    1cbe:	39 07       	cpc	r19, r25
    1cc0:	dc f4       	brge	.+54     	; 0x1cf8 <__vector_33+0x116>
    1cc2:	85 ec       	ldi	r24, 0xC5	; 197
    1cc4:	80 93 74 00 	sts	0x0074, r24
    1cc8:	ab cf       	rjmp	.-170    	; 0x1c20 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1cca:	e0 91 91 03 	lds	r30, 0x0391
    1cce:	f0 91 92 03 	lds	r31, 0x0392
    1cd2:	80 91 0d 02 	lds	r24, 0x020D
    1cd6:	21 e0       	ldi	r18, 0x01	; 1
    1cd8:	28 0f       	add	r18, r24
    1cda:	20 93 0d 02 	sts	0x020D, r18
    1cde:	e8 0f       	add	r30, r24
    1ce0:	f1 1d       	adc	r31, r1
    1ce2:	80 91 73 00 	lds	r24, 0x0073
    1ce6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1ce8:	80 91 94 03 	lds	r24, 0x0394
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	28 17       	cp	r18, r24
    1cf4:	39 07       	cpc	r19, r25
    1cf6:	2c f3       	brlt	.-54     	; 0x1cc2 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1cf8:	85 e8       	ldi	r24, 0x85	; 133
    1cfa:	80 93 74 00 	sts	0x0074, r24
    1cfe:	90 cf       	rjmp	.-224    	; 0x1c20 <__vector_33+0x3e>

00001d00 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1d00:	80 91 74 00 	lds	r24, 0x0074
}
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	08 95       	ret

00001d08 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1d08:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1d0c:	90 fd       	sbrc	r25, 0
    1d0e:	fc cf       	rjmp	.-8      	; 0x1d08 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1d10:	8e 7f       	andi	r24, 0xFE	; 254
    1d12:	80 93 93 03 	sts	0x0393, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    1d16:	70 93 92 03 	sts	0x0392, r23
    1d1a:	60 93 91 03 	sts	0x0391, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    1d1e:	40 93 94 03 	sts	0x0394, r20
  TWCR = TWCR_START;                    //initiate START
    1d22:	85 ea       	ldi	r24, 0xA5	; 165
    1d24:	80 93 74 00 	sts	0x0074, r24
    1d28:	08 95       	ret

00001d2a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1d2a:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1d2e:	90 fd       	sbrc	r25, 0
    1d30:	fc cf       	rjmp	.-8      	; 0x1d2a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1d32:	81 60       	ori	r24, 0x01	; 1
    1d34:	80 93 93 03 	sts	0x0393, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    1d38:	70 93 92 03 	sts	0x0392, r23
    1d3c:	60 93 91 03 	sts	0x0391, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    1d40:	40 93 94 03 	sts	0x0394, r20
  TWCR = TWCR_START;                   //initiate START
    1d44:	85 ea       	ldi	r24, 0xA5	; 165
    1d46:	80 93 74 00 	sts	0x0074, r24
    1d4a:	08 95       	ret

00001d4c <init_twi>:
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	80 93 73 00 	sts	0x0073, r24
    1d52:	10 92 71 00 	sts	0x0071, r1
    1d56:	8c e0       	ldi	r24, 0x0C	; 12
    1d58:	80 93 70 00 	sts	0x0070, r24
    1d5c:	08 95       	ret

00001d5e <main>:
//Main function call
int main()
{
//set port bits 4-7 B as outputs
while(1){
  configureIO();
    1d5e:	0e 94 3e 01 	call	0x27c	; 0x27c <configureIO>
  configureTimers();
    1d62:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <configureTimers>

//Setup SPI on the interface
void configureSPI( void ){
  //Configure SPI
  //Master mode, clk low on idle, leading edge sample
  SPCR = (1 << SPE) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA);   
    1d66:	80 e5       	ldi	r24, 0x50	; 80
    1d68:	8d b9       	out	0x0d, r24	; 13
}

//Configures the ADC
void configureADC( void ){
  //Configure the MUX for single-ended input on PORTF pin 0, right adjusted, 10 bits
  ADMUX  = (1<<REFS0);
    1d6a:	80 e4       	ldi	r24, 0x40	; 64
    1d6c:	87 b9       	out	0x07, r24	; 7

  //Enable the ADC, don't start yet, single shot mode
  //division factor is 128 (125khz)
  //enable interrupts on conversion
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADIE);
    1d6e:	8f e8       	ldi	r24, 0x8F	; 143
    1d70:	86 b9       	out	0x06, r24	; 6
while(1){
  configureIO();
  configureTimers();
  configureSPI();
  configureADC();
  uart_init();
    1d72:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <uart_init>
  init_twi();
    1d76:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <init_twi>
  lcd_init();
    1d7a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <lcd_init>
  clear_display();
    1d7e:	0e 94 88 0b 	call	0x1710	; 0x1710 <clear_display>
  sei();
    1d82:	78 94       	sei

  strcpy(finalBuffer, " ");
    1d84:	80 e2       	ldi	r24, 0x20	; 32
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	90 93 53 02 	sts	0x0253, r25
    1d8c:	80 93 52 02 	sts	0x0252, r24

  uart_puts("[128 init]\n\r");
    1d90:	81 e4       	ldi	r24, 0x41	; 65
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <uart_puts>
  //uart_puts(tempString);


  int16_t timeBuf = 0;
//  char remoteTemp[6];
  remoteTemp[5] = '\0';
    1d98:	10 92 97 02 	sts	0x0297, r1

  int j, k;

//  uint16_t temp_adcResult = 0;

  string2lcd("Nick McComb     ");
    1d9c:	8e e4       	ldi	r24, 0x4E	; 78
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <string2lcd>
  line2_col1();
    1da4:	0e 94 9e 0b 	call	0x173c	; 0x173c <line2_col1>
  string2lcd(" ECE 473        ");
    1da8:	8f e5       	ldi	r24, 0x5F	; 95
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1db0:	2f ef       	ldi	r18, 0xFF	; 255
    1db2:	39 e6       	ldi	r19, 0x69	; 105
    1db4:	88 e1       	ldi	r24, 0x18	; 24
    1db6:	21 50       	subi	r18, 0x01	; 1
    1db8:	30 40       	sbci	r19, 0x00	; 0
    1dba:	80 40       	sbci	r24, 0x00	; 0
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <main+0x58>
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <main+0x62>
    1dc0:	00 00       	nop

  _delay_ms(500);

  strcpy(lcdOutput, "Hello, friend :)11234567890123459");
    1dc2:	82 e2       	ldi	r24, 0x22	; 34
    1dc4:	e0 e7       	ldi	r30, 0x70	; 112
    1dc6:	f1 e0       	ldi	r31, 0x01	; 1
    1dc8:	af ed       	ldi	r26, 0xDF	; 223
    1dca:	b2 e0       	ldi	r27, 0x02	; 2
    1dcc:	01 90       	ld	r0, Z+
    1dce:	0d 92       	st	X+, r0
    1dd0:	8a 95       	dec	r24
    1dd2:	e1 f7       	brne	.-8      	; 0x1dcc <main+0x6e>
  strcpy(lcd_string_array, "                                ");
    1dd4:	81 e2       	ldi	r24, 0x21	; 33
    1dd6:	e2 e9       	ldi	r30, 0x92	; 146
    1dd8:	f1 e0       	ldi	r31, 0x01	; 1
    1dda:	ac e0       	ldi	r26, 0x0C	; 12
    1ddc:	b3 e0       	ldi	r27, 0x03	; 3
    1dde:	01 90       	ld	r0, Z+
    1de0:	0d 92       	st	X+, r0
    1de2:	8a 95       	dec	r24
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <main+0x80>

  strcpy(lcd_string_array, "Nick McComb      ECE473          ");
    1de6:	82 e2       	ldi	r24, 0x22	; 34
    1de8:	e3 eb       	ldi	r30, 0xB3	; 179
    1dea:	f1 e0       	ldi	r31, 0x01	; 1
    1dec:	ac e0       	ldi	r26, 0x0C	; 12
    1dee:	b3 e0       	ldi	r27, 0x03	; 3
    1df0:	01 90       	ld	r0, Z+
    1df2:	0d 92       	st	X+, r0
    1df4:	8a 95       	dec	r24
    1df6:	e1 f7       	brne	.-8      	; 0x1df0 <main+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1df8:	ef ea       	ldi	r30, 0xAF	; 175
    1dfa:	f4 e0       	ldi	r31, 0x04	; 4
    1dfc:	31 97       	sbiw	r30, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <main+0x9e>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <main+0xa4>
    1e02:	00 00       	nop

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
    1e08:	c4 9a       	sbi	0x18, 4	; 24
    1e0a:	88 b3       	in	r24, 0x18	; 24
    1e0c:	8f 79       	andi	r24, 0x9F	; 159
    1e0e:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1e10:	c6 9a       	sbi	0x18, 6	; 24
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
    1e12:	80 e1       	ldi	r24, 0x10	; 16
    1e14:	83 bd       	out	0x23, r24	; 35
    1e16:	b2 e5       	ldi	r27, 0x52	; 82
    1e18:	cb 2e       	mov	r12, r27
    1e1a:	b2 e0       	ldi	r27, 0x02	; 2
    1e1c:	db 2e       	mov	r13, r27
//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
    1e1e:	bb 24       	eor	r11, r11
    1e20:	ba 94       	dec	r11
    1e22:	99 24       	eor	r9, r9
    1e24:	9a 94       	dec	r9
    }

    lastEntered = PINA;
  }
  else {
    unpressed = 1;  //Release the latch
    1e26:	88 24       	eor	r8, r8
    1e28:	83 94       	inc	r8
    1e2a:	aa 24       	eor	r10, r10
    1e2c:	a3 94       	inc	r10
    else if(PINA == lastEntered){ //Don't preform any action
      ++debounceCounter;
    }
    else if(PINA != lastEntered){
      processButtonPress();
      debounceCounter = 1;
    1e2e:	ee 24       	eor	r14, r14
    1e30:	e3 94       	inc	r14
    1e32:	f1 2c       	mov	r15, r1
    for(k = 0; k < 3; ++k){
      for(j = 0; j < 5; ++j){
        //Check the buttons for input
        checkButtons(); 
	setDigit(j);  //At last measure takes ~9uS to run (varies 400nS)
        global_targetDigit = j;	
    1e34:	03 e0       	ldi	r16, 0x03	; 3
    1e36:	10 e0       	ldi	r17, 0x00	; 0
}


//Main function call
int main()
{
    1e38:	c0 e0       	ldi	r28, 0x00	; 0
    1e3a:	d0 e0       	ldi	r29, 0x00	; 0
//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
    1e3c:	9b ba       	out	0x1b, r9	; 27
    1e3e:	1a ba       	out	0x1a, r1	; 26
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}
    1e40:	88 b3       	in	r24, 0x18	; 24
    1e42:	80 67       	ori	r24, 0x70	; 112
    1e44:	88 bb       	out	0x18, r24	; 24
	...
  NOP();

  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    1e4e:	89 b3       	in	r24, 0x19	; 25
    1e50:	8f 3f       	cpi	r24, 0xFF	; 255
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <main+0xf8>
    1e54:	49 c1       	rjmp	.+658    	; 0x20e8 <main+0x38a>
    if(unpressed){
    1e56:	80 91 40 01 	lds	r24, 0x0140
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	48 c1       	rjmp	.+656    	; 0x20ee <main+0x390>
      processButtonPress();
      unpressed = 0; //Latches the button press
    }
    else if(PINA == lastEntered){ //Don't preform any action
    1e5e:	89 b3       	in	r24, 0x19	; 25
    1e60:	20 91 f1 01 	lds	r18, 0x01F1
    1e64:	30 91 f2 01 	lds	r19, 0x01F2
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	82 17       	cp	r24, r18
    1e6c:	93 07       	cpc	r25, r19
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <main+0x114>
    1e70:	43 c1       	rjmp	.+646    	; 0x20f8 <main+0x39a>
      ++debounceCounter;
    }
    else if(PINA != lastEntered){
    1e72:	89 b3       	in	r24, 0x19	; 25
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	28 17       	cp	r18, r24
    1e78:	39 07       	cpc	r19, r25
    1e7a:	31 f0       	breq	.+12     	; 0x1e88 <main+0x12a>
      processButtonPress();
    1e7c:	0e 94 c8 04 	call	0x990	; 0x990 <processButtonPress>
      debounceCounter = 1;
    1e80:	f0 92 f0 01 	sts	0x01F0, r15
    1e84:	e0 92 ef 01 	sts	0x01EF, r14
    }

    lastEntered = PINA;
    1e88:	89 b3       	in	r24, 0x19	; 25
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	90 93 f2 01 	sts	0x01F2, r25
    1e90:	80 93 f1 01 	sts	0x01F1, r24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1e94:	ba ba       	out	0x1a, r11	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
    1e96:	c4 9a       	sbi	0x18, 4	; 24
    1e98:	88 b3       	in	r24, 0x18	; 24
    1e9a:	8f 79       	andi	r24, 0x9F	; 159
    1e9c:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1e9e:	c6 9a       	sbi	0x18, 6	; 24
	...
  while(1){  //Main control loop
    for(k = 0; k < 3; ++k){
      for(j = 0; j < 5; ++j){
        //Check the buttons for input
        checkButtons(); 
	setDigit(j);  //At last measure takes ~9uS to run (varies 400nS)
    1ea8:	8c 2f       	mov	r24, r28
    1eaa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <setDigit>
        global_targetDigit = j;	
    1eae:	c0 93 e8 01 	sts	0x01E8, r28
    1eb2:	8a e0       	ldi	r24, 0x0A	; 10
    1eb4:	ef e8       	ldi	r30, 0x8F	; 143
    1eb6:	f1 e0       	ldi	r31, 0x01	; 1
    1eb8:	31 97       	sbiw	r30, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <main+0x15a>
    1ebc:	00 c0       	rjmp	.+0      	; 0x1ebe <main+0x160>
    1ebe:	00 00       	nop
    1ec0:	81 50       	subi	r24, 0x01	; 1

	for(z = 0; z < 10; ++z){_delay_us(100);}
    1ec2:	c1 f7       	brne	.-16     	; 0x1eb4 <main+0x156>
	
        //Update everything on the SPI bus (minus the LCD)
	//This means we're reading the encoders and writing to the bar graph
	if(j != 0){
    1ec4:	20 97       	sbiw	r28, 0x00	; 0
    1ec6:	a1 f0       	breq	.+40     	; 0x1ef0 <main+0x192>

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
    1ec8:	1e 98       	cbi	0x03, 6	; 3
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
void inline ENC_PARALLEL_DISABLE(void) {PORTE |=   0x80 ;}
    1eca:	1f 9a       	sbi	0x03, 7	; 3
  
  ENC_CLK_ENABLE();        //Allow us to read in serial data
  ENC_PARALLEL_DISABLE();  //Allow us to read in serial data

  //NOPs required for electrical propogation
  NOP();
    1ecc:	00 00       	nop
  NOP();
    1ece:	00 00       	nop

  //Write to the bar graph and read from the encoders
  SPDR = bargraphOutput;
    1ed0:	80 91 ed 01 	lds	r24, 0x01ED
    1ed4:	8f b9       	out	0x0f, r24	; 15
  lastEncoderValue = SPDR;
    1ed6:	8f b1       	in	r24, 0x0f	; 15
    1ed8:	80 93 3f 01 	sts	0x013F, r24

  //Wait for SPI operation
  while (bit_is_clear(SPSR, SPIF)){};
    1edc:	77 9b       	sbis	0x0e, 7	; 14
    1ede:	fe cf       	rjmp	.-4      	; 0x1edc <main+0x17e>

  upToDateEncoderValue = 1;
    1ee0:	a0 92 ee 01 	sts	0x01EE, r10
//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
    1ee4:	1e 9a       	sbi	0x03, 6	; 3

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
    1ee6:	1f 98       	cbi	0x03, 7	; 3

  ENC_CLK_DISABLE();
  ENC_PARALLEL_ENABLE();

  //Output the bar graph info
  PORTB |=  0x01;
    1ee8:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;
    1eea:	c0 98       	cbi	0x18, 0	; 24
	
        //Update everything on the SPI bus (minus the LCD)
	//This means we're reading the encoders and writing to the bar graph
	if(j != 0){
	updateSPI();
	processEncoders();
    1eec:	0e 94 bc 08 	call	0x1178	; 0x1178 <processEncoders>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
    1ef0:	bb ba       	out	0x1b, r11	; 27
	//_delay_us(100);

        clearSegment();
//DEBUG_LOW();
//	_delay_us(5);
	NOP();
    1ef2:	00 00       	nop

  uint8_t z;

  while(1){  //Main control loop
    for(k = 0; k < 3; ++k){
      for(j = 0; j < 5; ++j){
    1ef4:	21 96       	adiw	r28, 0x01	; 1
    1ef6:	c5 30       	cpi	r28, 0x05	; 5
    1ef8:	d1 05       	cpc	r29, r1
    1efa:	09 f0       	breq	.+2      	; 0x1efe <main+0x1a0>
    1efc:	9f cf       	rjmp	.-194    	; 0x1e3c <main+0xde>
    1efe:	01 50       	subi	r16, 0x01	; 1
    1f00:	11 09       	sbc	r17, r1
  setLEDBrightness(0x10);

  uint8_t z;

  while(1){  //Main control loop
    for(k = 0; k < 3; ++k){
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <main+0x1a8>
    1f04:	99 cf       	rjmp	.-206    	; 0x1e38 <main+0xda>
//	_delay_us(5);
	NOP();
      }
    }

    processCounterOutput();  //Doesn't have to happen all of the time, so it's called here.
    1f06:	0e 94 8f 05 	call	0xb1e	; 0xb1e <processCounterOutput>
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
    1f0a:	80 91 d6 01 	lds	r24, 0x01D6
    1f0e:	90 91 d7 01 	lds	r25, 0x01D7
    1f12:	80 fd       	sbrc	r24, 0
    1f14:	13 c0       	rjmp	.+38     	; 0x1f3c <main+0x1de>
    1f16:	80 91 d6 01 	lds	r24, 0x01D6
    1f1a:	90 91 d7 01 	lds	r25, 0x01D7
    1f1e:	81 fd       	sbrc	r24, 1
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <main+0x1de>
    1f22:	80 91 d6 01 	lds	r24, 0x01D6
    1f26:	90 91 d7 01 	lds	r25, 0x01D7
    1f2a:	83 ff       	sbrs	r24, 3
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <main+0x1de>
    1f2e:	90 91 e4 01 	lds	r25, 0x01E4
    1f32:	80 91 e5 01 	lds	r24, 0x01E5
    1f36:	98 17       	cp	r25, r24
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <main+0x1de>
    1f3a:	c3 c1       	rjmp	.+902    	; 0x22c2 <main+0x564>
    settings &= ~ALARM_ARMED; //Unarm alarm
    currentlyAlarming = 1;    //Trigger alarm
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
    1f3c:	80 91 e1 01 	lds	r24, 0x01E1
    1f40:	90 91 e2 01 	lds	r25, 0x01E2
    1f44:	8b 30       	cpi	r24, 0x0B	; 11
    1f46:	91 05       	cpc	r25, r1
    1f48:	08 f4       	brcc	.+2      	; 0x1f4c <main+0x1ee>
    1f4a:	e0 c0       	rjmp	.+448    	; 0x210c <main+0x3ae>
    settings &= ~ALARM_ARMED;  //Disarm alarm
    1f4c:	80 91 d6 01 	lds	r24, 0x01D6
    1f50:	90 91 d7 01 	lds	r25, 0x01D7
    1f54:	87 7f       	andi	r24, 0xF7	; 247
    1f56:	90 93 d7 01 	sts	0x01D7, r25
    1f5a:	80 93 d6 01 	sts	0x01D6, r24
    currentlyAlarming = 1;
    1f5e:	80 92 e3 01 	sts	0x01E3, r8
    snoozeCount = 0; //Stop the snooze count
    1f62:	10 92 e2 01 	sts	0x01E2, r1
    1f66:	10 92 e1 01 	sts	0x01E1, r1
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	ec e0       	ldi	r30, 0x0C	; 12
    1f6e:	f3 e0       	ldi	r31, 0x03	; 3

  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
    1f70:	90 e2       	ldi	r25, 0x20	; 32
    1f72:	80 e2       	ldi	r24, 0x20	; 32
    1f74:	91 93       	st	Z+, r25


  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
    1f76:	33 e0       	ldi	r19, 0x03	; 3
    1f78:	ec 31       	cpi	r30, 0x1C	; 28
    1f7a:	f3 07       	cpc	r31, r19
    1f7c:	d1 f7       	brne	.-12     	; 0x1f72 <main+0x214>
      lcd_string_array[k] = ' ';
    lcd_string_array[17] = 'W';
    1f7e:	97 e5       	ldi	r25, 0x57	; 87
    1f80:	90 93 1d 03 	sts	0x031D, r25
    lcd_string_array[18] = 'A';
    1f84:	91 e4       	ldi	r25, 0x41	; 65
    1f86:	90 93 1e 03 	sts	0x031E, r25
    lcd_string_array[19] = 'K';
    1f8a:	9b e4       	ldi	r25, 0x4B	; 75
    1f8c:	90 93 1f 03 	sts	0x031F, r25
    lcd_string_array[20] = 'E';
    1f90:	95 e4       	ldi	r25, 0x45	; 69
    1f92:	90 93 20 03 	sts	0x0320, r25
    lcd_string_array[21] = ' ';
    1f96:	80 93 21 03 	sts	0x0321, r24
    lcd_string_array[22] = 'U';
    1f9a:	95 e5       	ldi	r25, 0x55	; 85
    1f9c:	90 93 22 03 	sts	0x0322, r25
    lcd_string_array[23] = 'P';
    1fa0:	90 e5       	ldi	r25, 0x50	; 80
    1fa2:	90 93 23 03 	sts	0x0323, r25
    lcd_string_array[24] = ' ';
    1fa6:	80 93 24 03 	sts	0x0324, r24
    lcd_string_array[25] = ':';
    1faa:	8a e3       	ldi	r24, 0x3A	; 58
    1fac:	80 93 25 03 	sts	0x0325, r24
    lcd_string_array[26] = ')';
    1fb0:	89 e2       	ldi	r24, 0x29	; 41
    1fb2:	80 93 26 03 	sts	0x0326, r24
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 27] = remoteTemp[i];
  }

  //lcd_string_array[5] is blank
  if(!currentlyAlarming){
    1fb6:	22 23       	and	r18, r18
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <main+0x25e>
    1fba:	cc c0       	rjmp	.+408    	; 0x2154 <main+0x3f6>

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	90 93 87 00 	sts	0x0087, r25
    1fc4:	80 93 86 00 	sts	0x0086, r24
  if(!currentlyAlarming){
    SET_VOLUME(0);
  }
  else {
    SET_VOLUME(ALARM_VOLUME);
    SET_HZ(music[musicCounter]);
    1fc8:	e0 91 e9 01 	lds	r30, 0x01E9
    1fcc:	f0 91 ea 01 	lds	r31, 0x01EA
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	e5 5f       	subi	r30, 0xF5	; 245
    1fd6:	fe 4f       	sbci	r31, 0xFE	; 254
//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
void inline SET_HZ(uint16_t targetHz) {OCR1A = targetHz * 50;}
    1fd8:	20 81       	ld	r18, Z
    1fda:	31 81       	ldd	r19, Z+1	; 0x01
    1fdc:	42 e3       	ldi	r20, 0x32	; 50
    1fde:	42 9f       	mul	r20, r18
    1fe0:	c0 01       	movw	r24, r0
    1fe2:	43 9f       	mul	r20, r19
    1fe4:	90 0d       	add	r25, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	9b bd       	out	0x2b, r25	; 43
    1fea:	8a bd       	out	0x2a, r24	; 42
    processCounterOutput();  //Doesn't have to happen all of the time, so it's called here.
    processAlarm();          //This processes the alarm outputs (incl the LCD)

    //Refresh the LCD and when the string has been outputted, copy the queued string into
    //the string to be outputted. This prevents weird artifacts from appearing on the screen.
    if(!refresh_lcd(lcd_final))
    1fec:	82 e3       	ldi	r24, 0x32	; 50
    1fee:	92 e0       	ldi	r25, 0x02	; 2
    1ff0:	0e 94 b7 0a 	call	0x156e	; 0x156e <refresh_lcd>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <main+0x29c>
    1ff8:	b7 c0       	rjmp	.+366    	; 0x2168 <main+0x40a>
      strcpy(lcd_final, lcd_string_array);

DEBUG_HIGH();
    1ffa:	80 91 62 00 	lds	r24, 0x0062
    1ffe:	82 60       	ori	r24, 0x02	; 2
    2000:	80 93 62 00 	sts	0x0062, r24
    2004:	8a e0       	ldi	r24, 0x0A	; 10
    2006:	ef e8       	ldi	r30, 0x8F	; 143
    2008:	f1 e0       	ldi	r31, 0x01	; 1
    200a:	31 97       	sbiw	r30, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <main+0x2ac>
    200e:	00 c0       	rjmp	.+0      	; 0x2010 <main+0x2b2>
    2010:	00 00       	nop
    2012:	81 50       	subi	r24, 0x01	; 1

    for(z = 0; z < 10; ++z){_delay_us(100);}
    2014:	c1 f7       	brne	.-16     	; 0x2006 <main+0x2a8>

    if(inputFlag){ //We need to parse the input from the remote sensor
    2016:	80 91 f6 01 	lds	r24, 0x01F6
    201a:	88 23       	and	r24, r24
    201c:	09 f4       	brne	.+2      	; 0x2020 <main+0x2c2>
    201e:	51 c0       	rjmp	.+162    	; 0x20c2 <main+0x364>
      inputFlag = 0;  //Reset flag
    2020:	10 92 f6 01 	sts	0x01F6, r1

#ifdef USE_GPS_TIME
      //Check if we're receiving time info
      if(strlen(finalBuffer) > 5){
    2024:	f6 01       	movw	r30, r12
    2026:	01 90       	ld	r0, Z+
    2028:	00 20       	and	r0, r0
    202a:	e9 f7       	brne	.-6      	; 0x2026 <main+0x2c8>
    202c:	31 97       	sbiw	r30, 0x01	; 1
    202e:	e2 55       	subi	r30, 0x52	; 82
    2030:	f2 40       	sbci	r31, 0x02	; 2
    2032:	36 97       	sbiw	r30, 0x06	; 6
    2034:	08 f4       	brcc	.+2      	; 0x2038 <main+0x2da>
    2036:	43 c0       	rjmp	.+134    	; 0x20be <main+0x360>

        //Calculate hours from GPS
        timeBuf = 0;
	timeBuf = (finalBuffer[6] - 48) * 10 + (finalBuffer[7] - 48);
    2038:	80 91 58 02 	lds	r24, 0x0258
    203c:	20 91 59 02 	lds	r18, 0x0259
    2040:	08 2e       	mov	r0, r24
    2042:	00 0c       	add	r0, r0
    2044:	99 0b       	sbc	r25, r25
    2046:	c0 97       	sbiw	r24, 0x30	; 48
    2048:	ac 01       	movw	r20, r24
    204a:	44 0f       	add	r20, r20
    204c:	55 1f       	adc	r21, r21
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	84 0f       	add	r24, r20
    205c:	95 1f       	adc	r25, r21
    205e:	02 2e       	mov	r0, r18
    2060:	00 0c       	add	r0, r0
    2062:	33 0b       	sbc	r19, r19
    2064:	20 53       	subi	r18, 0x30	; 48
    2066:	31 09       	sbc	r19, r1
    2068:	82 0f       	add	r24, r18
    206a:	93 1f       	adc	r25, r19
	//Daylight savings time
        timeBuf -= 8;    //DST Hack
    206c:	9c 01       	movw	r18, r24
    206e:	28 50       	subi	r18, 0x08	; 8
    2070:	31 09       	sbc	r19, r1
	if(timeBuf < 0)  //Check for overflow
    2072:	37 fd       	sbrc	r19, 7
    2074:	de c0       	rjmp	.+444    	; 0x2232 <main+0x4d4>
	  timeBuf += 24; //Overflow hack
        hours = timeBuf;
    2076:	20 93 e5 01 	sts	0x01E5, r18

	//Calculate minutes from GPS
	timeBuf = (finalBuffer[8] - 48) * 10 + (finalBuffer[9] - 48);
    207a:	80 91 5a 02 	lds	r24, 0x025A
    207e:	20 91 5b 02 	lds	r18, 0x025B
    2082:	08 2e       	mov	r0, r24
    2084:	00 0c       	add	r0, r0
    2086:	99 0b       	sbc	r25, r25
    2088:	c0 97       	sbiw	r24, 0x30	; 48
    208a:	ac 01       	movw	r20, r24
    208c:	44 0f       	add	r20, r20
    208e:	55 1f       	adc	r21, r21
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	84 0f       	add	r24, r20
    209e:	95 1f       	adc	r25, r21
    20a0:	02 2e       	mov	r0, r18
    20a2:	00 0c       	add	r0, r0
    20a4:	33 0b       	sbc	r19, r19
    20a6:	20 53       	subi	r18, 0x30	; 48
    20a8:	31 09       	sbc	r19, r1
    20aa:	82 0f       	add	r24, r18
    20ac:	93 1f       	adc	r25, r19
        minutes = timeBuf;
    20ae:	80 93 e6 01 	sts	0x01E6, r24

	//I chose 30 seconds because the colon uses the 
	//seconds counter, and this should invisibly
	//make the jump back to 0, while never getting
	//high enough to trigger a minute jump
	if(seconds >= 30)
    20b2:	80 91 e7 01 	lds	r24, 0x01E7
    20b6:	8e 31       	cpi	r24, 0x1E	; 30
    20b8:	10 f0       	brcs	.+4      	; 0x20be <main+0x360>
	  seconds = 0;
    20ba:	10 92 e7 01 	sts	0x01E7, r1
//	seconds = 0; 
      }
#endif 
      if(finalBuffer[6] == ' ') {
    20be:	80 91 58 02 	lds	r24, 0x0258
    }

    //Process the remote temperature
    static uint8_t k;
    for(k = 0; k < 5; ++k)
      remoteTemp[k] = finalBuffer[k];
    20c2:	f8 01       	movw	r30, r16
    20c4:	ee 5a       	subi	r30, 0xAE	; 174
    20c6:	fd 4f       	sbci	r31, 0xFD	; 253
    20c8:	80 81       	ld	r24, Z
    20ca:	f8 01       	movw	r30, r16
    20cc:	ee 56       	subi	r30, 0x6E	; 110
    20ce:	fd 4f       	sbci	r31, 0xFD	; 253
    20d0:	80 83       	st	Z, r24
    20d2:	0f 5f       	subi	r16, 0xFF	; 255
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
      }
    }

    //Process the remote temperature
    static uint8_t k;
    for(k = 0; k < 5; ++k)
    20d6:	05 30       	cpi	r16, 0x05	; 5
    20d8:	11 05       	cpc	r17, r1
    20da:	99 f7       	brne	.-26     	; 0x20c2 <main+0x364>
    20dc:	85 e0       	ldi	r24, 0x05	; 5
    20de:	80 93 fa 01 	sts	0x01FA, r24
      remoteTemp[k] = finalBuffer[k];

    //Process the local temperature
    lm73Read();
    20e2:	0e 94 24 0a 	call	0x1448	; 0x1448 <lm73Read>

    }
    20e6:	a6 ce       	rjmp	.-692    	; 0x1e34 <main+0xd6>
    }

    lastEntered = PINA;
  }
  else {
    unpressed = 1;  //Release the latch
    20e8:	a0 92 40 01 	sts	0x0140, r10
    20ec:	d3 ce       	rjmp	.-602    	; 0x1e94 <main+0x136>
  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    if(unpressed){
      processButtonPress();
    20ee:	0e 94 c8 04 	call	0x990	; 0x990 <processButtonPress>
      unpressed = 0; //Latches the button press
    20f2:	10 92 40 01 	sts	0x0140, r1
    20f6:	c8 ce       	rjmp	.-624    	; 0x1e88 <main+0x12a>
    }
    else if(PINA == lastEntered){ //Don't preform any action
      ++debounceCounter;
    20f8:	80 91 ef 01 	lds	r24, 0x01EF
    20fc:	90 91 f0 01 	lds	r25, 0x01F0
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	90 93 f0 01 	sts	0x01F0, r25
    2106:	80 93 ef 01 	sts	0x01EF, r24
    210a:	be ce       	rjmp	.-644    	; 0x1e88 <main+0x12a>
    snoozeCount = 0; //Stop the snooze count
  }


  //Detecting Alarm output
  if(currentlyAlarming){
    210c:	20 91 e3 01 	lds	r18, 0x01E3
    2110:	21 11       	cpse	r18, r1
    2112:	2c cf       	rjmp	.-424    	; 0x1f6c <main+0x20e>
    lcd_string_array[24] = ' ';
    lcd_string_array[25] = ':';
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
    2114:	02 97       	sbiw	r24, 0x02	; 2
    2116:	78 f1       	brcs	.+94     	; 0x2176 <main+0x418>
    2118:	ec e0       	ldi	r30, 0x0C	; 12
    211a:	f3 e0       	ldi	r31, 0x03	; 3
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
    211c:	80 e2       	ldi	r24, 0x20	; 32
    211e:	81 93       	st	Z+, r24
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
    uint8_t k;
    for(k = 0; k < 16; ++k)
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	ec 31       	cpi	r30, 0x1C	; 28
    2124:	f9 07       	cpc	r31, r25
    2126:	d9 f7       	brne	.-10     	; 0x211e <main+0x3c0>
      lcd_string_array[k] = ' ';

    lcd_string_array[17] = 'Z';
    2128:	9a e5       	ldi	r25, 0x5A	; 90
    212a:	90 93 1d 03 	sts	0x031D, r25
    lcd_string_array[18] = 'z';
    212e:	8a e7       	ldi	r24, 0x7A	; 122
    2130:	80 93 1e 03 	sts	0x031E, r24
    lcd_string_array[19] = 'Z';
    2134:	90 93 1f 03 	sts	0x031F, r25
    lcd_string_array[20] = 'z';
    2138:	80 93 20 03 	sts	0x0320, r24
    lcd_string_array[21] = 'Z';
    213c:	90 93 21 03 	sts	0x0321, r25
    lcd_string_array[22] = 'z';
    2140:	80 93 22 03 	sts	0x0322, r24
    lcd_string_array[23] = 'Z';
    2144:	90 93 23 03 	sts	0x0323, r25
    lcd_string_array[24] = 'z';
    2148:	80 93 24 03 	sts	0x0324, r24
    lcd_string_array[25] = 'Z';
    214c:	90 93 25 03 	sts	0x0325, r25
    lcd_string_array[26] = 'z';
    2150:	80 93 26 03 	sts	0x0326, r24

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
    2154:	10 92 87 00 	sts	0x0087, r1
    2158:	10 92 86 00 	sts	0x0086, r1
    processCounterOutput();  //Doesn't have to happen all of the time, so it's called here.
    processAlarm();          //This processes the alarm outputs (incl the LCD)

    //Refresh the LCD and when the string has been outputted, copy the queued string into
    //the string to be outputted. This prevents weird artifacts from appearing on the screen.
    if(!refresh_lcd(lcd_final))
    215c:	82 e3       	ldi	r24, 0x32	; 50
    215e:	92 e0       	ldi	r25, 0x02	; 2
    2160:	0e 94 b7 0a 	call	0x156e	; 0x156e <refresh_lcd>
    2164:	81 11       	cpse	r24, r1
    2166:	49 cf       	rjmp	.-366    	; 0x1ffa <main+0x29c>
      strcpy(lcd_final, lcd_string_array);
    2168:	6c e0       	ldi	r22, 0x0C	; 12
    216a:	73 e0       	ldi	r23, 0x03	; 3
    216c:	82 e3       	ldi	r24, 0x32	; 50
    216e:	92 e0       	ldi	r25, 0x02	; 2
    2170:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <strcpy>
    2174:	42 cf       	rjmp	.-380    	; 0x1ffa <main+0x29c>
    lcd_string_array[24] = 'z';
    lcd_string_array[25] = 'Z';
    lcd_string_array[26] = 'z';

  }
  else if(settings & ALARM_ARMED){  //If no alarm, no snooze, but alarm is set, we want to output when we are going to alarm
    2176:	80 91 d6 01 	lds	r24, 0x01D6
    217a:	90 91 d7 01 	lds	r25, 0x01D7
    217e:	83 ff       	sbrs	r24, 3
    2180:	5b c0       	rjmp	.+182    	; 0x2238 <main+0x4da>
    dot[4] = 1;
    2182:	80 92 e0 01 	sts	0x01E0, r8
    lcd_string_array[0] = 'A';
    2186:	81 e4       	ldi	r24, 0x41	; 65
    2188:	80 93 0c 03 	sts	0x030C, r24
    lcd_string_array[1] = 'L';
    218c:	9c e4       	ldi	r25, 0x4C	; 76
    218e:	90 93 0d 03 	sts	0x030D, r25
    lcd_string_array[2] = 'A';
    2192:	80 93 0e 03 	sts	0x030E, r24
    lcd_string_array[3] = 'R';
    2196:	82 e5       	ldi	r24, 0x52	; 82
    2198:	80 93 0f 03 	sts	0x030F, r24
    lcd_string_array[4] = 'M';
    219c:	8d e4       	ldi	r24, 0x4D	; 77
    219e:	80 93 10 03 	sts	0x0310, r24
    lcd_string_array[5] = ' ';
    21a2:	20 e2       	ldi	r18, 0x20	; 32
    21a4:	20 93 11 03 	sts	0x0311, r18
    lcd_string_array[6] = '@';
    21a8:	80 e4       	ldi	r24, 0x40	; 64
    21aa:	80 93 12 03 	sts	0x0312, r24
    lcd_string_array[7] = ' ';
    21ae:	20 93 13 03 	sts	0x0313, r18
    if(settings & TIME24){ //24 hour mode
    21b2:	80 91 d6 01 	lds	r24, 0x01D6
    21b6:	90 91 d7 01 	lds	r25, 0x01D7
      if(alarmHours == 0){
    21ba:	90 91 e4 01 	lds	r25, 0x01E4
    lcd_string_array[3] = 'R';
    lcd_string_array[4] = 'M';
    lcd_string_array[5] = ' ';
    lcd_string_array[6] = '@';
    lcd_string_array[7] = ' ';
    if(settings & TIME24){ //24 hour mode
    21be:	82 ff       	sbrs	r24, 2
    21c0:	9a c0       	rjmp	.+308    	; 0x22f6 <main+0x598>
      if(alarmHours == 0){
    21c2:	91 11       	cpse	r25, r1
    21c4:	d3 c0       	rjmp	.+422    	; 0x236c <main+0x60e>
        lcd_string_array[8] = '0';
    21c6:	80 e3       	ldi	r24, 0x30	; 48
    21c8:	80 93 14 03 	sts	0x0314, r24
	lcd_string_array[9] = '0';
    21cc:	80 93 15 03 	sts	0x0315, r24
	else
	  lcd_string_array[8] = ((alarmHours % 12) / 10) + 48;
	lcd_string_array[9] = ((alarmHours % 12) % 10) + 48;	
      }
    }
    lcd_string_array[10] = ':';
    21d0:	8a e3       	ldi	r24, 0x3A	; 58
    21d2:	80 93 16 03 	sts	0x0316, r24
    //time for minutes
    if(alarmMinutes < 10)
    21d6:	80 91 0a 01 	lds	r24, 0x010A
    21da:	8a 30       	cpi	r24, 0x0A	; 10
    21dc:	08 f0       	brcs	.+2      	; 0x21e0 <main+0x482>
    21de:	bb c0       	rjmp	.+374    	; 0x2356 <main+0x5f8>
      lcd_string_array[11] = '0';
    21e0:	20 e3       	ldi	r18, 0x30	; 48
    21e2:	20 93 17 03 	sts	0x0317, r18
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    lcd_string_array[12]  = (alarmMinutes % 10) + 48;
    21e6:	2d ec       	ldi	r18, 0xCD	; 205
    21e8:	82 9f       	mul	r24, r18
    21ea:	21 2d       	mov	r18, r1
    21ec:	11 24       	eor	r1, r1
    21ee:	26 95       	lsr	r18
    21f0:	26 95       	lsr	r18
    21f2:	26 95       	lsr	r18
    21f4:	fa e0       	ldi	r31, 0x0A	; 10
    21f6:	2f 9f       	mul	r18, r31
    21f8:	80 19       	sub	r24, r0
    21fa:	11 24       	eor	r1, r1
    21fc:	80 5d       	subi	r24, 0xD0	; 208
    21fe:	80 93 18 03 	sts	0x0318, r24
    
    if(!(settings & TIME24)){ //12 hour mode
    2202:	20 91 d6 01 	lds	r18, 0x01D6
    2206:	30 91 d7 01 	lds	r19, 0x01D7
    220a:	22 fd       	sbrc	r18, 2
    220c:	54 c0       	rjmp	.+168    	; 0x22b6 <main+0x558>
      if(alarmHours > 11){
    220e:	9c 30       	cpi	r25, 0x0C	; 12
    2210:	08 f4       	brcc	.+2      	; 0x2214 <main+0x4b6>
    2212:	c9 c0       	rjmp	.+402    	; 0x23a6 <main+0x648>
        lcd_string_array[13] = 'p';
    2214:	80 e7       	ldi	r24, 0x70	; 112
    2216:	80 93 19 03 	sts	0x0319, r24
      }
      else{
        lcd_string_array[13] = 'a';
      }
      lcd_string_array[14] = 'm';
    221a:	8d e6       	ldi	r24, 0x6D	; 109
    221c:	80 93 1a 03 	sts	0x031A, r24
    2220:	ec e1       	ldi	r30, 0x1C	; 28
    2222:	f3 e0       	ldi	r31, 0x03	; 3
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
    2224:	80 e2       	ldi	r24, 0x20	; 32
    2226:	81 93       	st	Z+, r24
	lcd_string_array[14] = ' ';
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
    2228:	23 e0       	ldi	r18, 0x03	; 3
    222a:	ec 32       	cpi	r30, 0x2C	; 44
    222c:	f2 07       	cpc	r31, r18
    222e:	d9 f7       	brne	.-10     	; 0x2226 <main+0x4c8>
    2230:	91 cf       	rjmp	.-222    	; 0x2154 <main+0x3f6>
        timeBuf = 0;
	timeBuf = (finalBuffer[6] - 48) * 10 + (finalBuffer[7] - 48);
	//Daylight savings time
        timeBuf -= 8;    //DST Hack
	if(timeBuf < 0)  //Check for overflow
	  timeBuf += 24; //Overflow hack
    2232:	28 5e       	subi	r18, 0xE8	; 232
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	1f cf       	rjmp	.-450    	; 0x2076 <main+0x318>
    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
  }
  else{  //The alarm isn't armed, so we want to output that fact
    dot[4] = 0;
    2238:	10 92 e0 01 	sts	0x01E0, r1
    lcd_string_array[0] = 'n';
    223c:	8e e6       	ldi	r24, 0x6E	; 110
    223e:	80 93 0c 03 	sts	0x030C, r24
    lcd_string_array[1] = 'o';
    2242:	8f e6       	ldi	r24, 0x6F	; 111
    2244:	80 93 0d 03 	sts	0x030D, r24
    lcd_string_array[2] = ' ';
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	80 93 0e 03 	sts	0x030E, r24
    lcd_string_array[3] = 'a';
    224e:	81 e6       	ldi	r24, 0x61	; 97
    2250:	80 93 0f 03 	sts	0x030F, r24
    lcd_string_array[4] = 'l';
    2254:	9c e6       	ldi	r25, 0x6C	; 108
    2256:	90 93 10 03 	sts	0x0310, r25
    lcd_string_array[5] = 'a';
    225a:	80 93 11 03 	sts	0x0311, r24
    lcd_string_array[6] = 'r';
    225e:	82 e7       	ldi	r24, 0x72	; 114
    2260:	80 93 12 03 	sts	0x0312, r24
    lcd_string_array[7] = 'm';
    2264:	8d e6       	ldi	r24, 0x6D	; 109
    2266:	80 93 13 03 	sts	0x0313, r24
    226a:	e4 e1       	ldi	r30, 0x14	; 20
    226c:	f3 e0       	ldi	r31, 0x03	; 3

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
      lcd_string_array[i+8] = ' ';
    226e:	80 e2       	ldi	r24, 0x20	; 32
    2270:	81 93       	st	Z+, r24
    lcd_string_array[6] = 'r';
    lcd_string_array[7] = 'm';

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
    2272:	33 e0       	ldi	r19, 0x03	; 3
    2274:	e8 32       	cpi	r30, 0x28	; 40
    2276:	f3 07       	cpc	r31, r19
    2278:	d9 f7       	brne	.-10     	; 0x2270 <main+0x512>
    //16, 17, 18 = ., 19, 20
    //21
    //22, 23, 24 = ., 25, 26

    //Display local temperature
    lcd_string_array[16] = 'l';
    227a:	8c e6       	ldi	r24, 0x6C	; 108
    227c:	80 93 1c 03 	sts	0x031C, r24
    2280:	a8 e9       	ldi	r26, 0x98	; 152
    2282:	b2 e0       	ldi	r27, 0x02	; 2
    2284:	ee e1       	ldi	r30, 0x1E	; 30
    2286:	f3 e0       	ldi	r31, 0x03	; 3
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 18] = tempCelString[i];
    2288:	8d 91       	ld	r24, X+
    228a:	81 93       	st	Z+, r24
    //21
    //22, 23, 24 = ., 25, 26

    //Display local temperature
    lcd_string_array[16] = 'l';
    for(i = 0; i < 5; ++i)
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	e3 32       	cpi	r30, 0x23	; 35
    2290:	f8 07       	cpc	r31, r24
    2292:	d1 f7       	brne	.-12     	; 0x2288 <main+0x52a>
      lcd_string_array[i + 18] = tempCelString[i];
    //Display remote temperature
    lcd_string_array[25] = 'r';
    2294:	82 e7       	ldi	r24, 0x72	; 114
    2296:	80 93 25 03 	sts	0x0325, r24
    229a:	e7 e2       	ldi	r30, 0x27	; 39
    229c:	f3 e0       	ldi	r31, 0x03	; 3
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 27] = remoteTemp[i];
    22a2:	dc 01       	movw	r26, r24
    22a4:	ae 56       	subi	r26, 0x6E	; 110
    22a6:	bd 4f       	sbci	r27, 0xFD	; 253
    22a8:	2c 91       	ld	r18, X
    22aa:	21 93       	st	Z+, r18
    22ac:	01 96       	adiw	r24, 0x01	; 1
    lcd_string_array[16] = 'l';
    for(i = 0; i < 5; ++i)
      lcd_string_array[i + 18] = tempCelString[i];
    //Display remote temperature
    lcd_string_array[25] = 'r';
    for(i = 0; i < 5; ++i)
    22ae:	85 30       	cpi	r24, 0x05	; 5
    22b0:	91 05       	cpc	r25, r1
    22b2:	b9 f7       	brne	.-18     	; 0x22a2 <main+0x544>
    22b4:	4f cf       	rjmp	.-354    	; 0x2154 <main+0x3f6>
      }
      lcd_string_array[14] = 'm';
      
    }
    else{
        lcd_string_array[13] = ' ';
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	80 93 19 03 	sts	0x0319, r24
	lcd_string_array[14] = ' ';
    22bc:	80 93 1a 03 	sts	0x031A, r24
    22c0:	af cf       	rjmp	.-162    	; 0x2220 <main+0x4c2>
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
    22c2:	90 91 0a 01 	lds	r25, 0x010A
    22c6:	80 91 e6 01 	lds	r24, 0x01E6
    22ca:	98 13       	cpse	r25, r24
    22cc:	37 ce       	rjmp	.-914    	; 0x1f3c <main+0x1de>
    settings &= ~ALARM_ARMED; //Unarm alarm
    22ce:	80 91 d6 01 	lds	r24, 0x01D6
    22d2:	90 91 d7 01 	lds	r25, 0x01D7
    22d6:	87 7f       	andi	r24, 0xF7	; 247
    22d8:	90 93 d7 01 	sts	0x01D7, r25
    22dc:	80 93 d6 01 	sts	0x01D6, r24
    currentlyAlarming = 1;    //Trigger alarm
    22e0:	80 92 e3 01 	sts	0x01E3, r8
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
    22e4:	80 91 e1 01 	lds	r24, 0x01E1
    22e8:	90 91 e2 01 	lds	r25, 0x01E2
    22ec:	0b 97       	sbiw	r24, 0x0b	; 11
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <main+0x594>
    22f0:	2d ce       	rjmp	.-934    	; 0x1f4c <main+0x1ee>
    22f2:	28 2d       	mov	r18, r8
    22f4:	3b ce       	rjmp	.-906    	; 0x1f6c <main+0x20e>
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
    22f6:	99 23       	and	r25, r25
    22f8:	09 f4       	brne	.+2      	; 0x22fc <main+0x59e>
    22fa:	4e c0       	rjmp	.+156    	; 0x2398 <main+0x63a>
    22fc:	9c 30       	cpi	r25, 0x0C	; 12
    22fe:	09 f4       	brne	.+2      	; 0x2302 <main+0x5a4>
    2300:	4b c0       	rjmp	.+150    	; 0x2398 <main+0x63a>
        lcd_string_array[8] = '1';
	lcd_string_array[9] = '2';
      }
      else{ //We have to do actual math
        if((alarmHours % 12) < 10)
    2302:	8b ea       	ldi	r24, 0xAB	; 171
    2304:	98 9f       	mul	r25, r24
    2306:	81 2d       	mov	r24, r1
    2308:	11 24       	eor	r1, r1
    230a:	86 95       	lsr	r24
    230c:	86 95       	lsr	r24
    230e:	86 95       	lsr	r24
    2310:	38 2f       	mov	r19, r24
    2312:	33 0f       	add	r19, r19
    2314:	83 0f       	add	r24, r19
    2316:	88 0f       	add	r24, r24
    2318:	88 0f       	add	r24, r24
    231a:	39 2f       	mov	r19, r25
    231c:	38 1b       	sub	r19, r24
    231e:	83 2f       	mov	r24, r19
    2320:	3a 30       	cpi	r19, 0x0A	; 10
    2322:	08 f0       	brcs	.+2      	; 0x2326 <main+0x5c8>
	  lcd_string_array[8] = ' ';
	else
	  lcd_string_array[8] = ((alarmHours % 12) / 10) + 48;
    2324:	21 e3       	ldi	r18, 0x31	; 49
    2326:	20 93 14 03 	sts	0x0314, r18
	lcd_string_array[9] = ((alarmHours % 12) % 10) + 48;	
    232a:	2d ec       	ldi	r18, 0xCD	; 205
    232c:	82 9f       	mul	r24, r18
    232e:	21 2d       	mov	r18, r1
    2330:	11 24       	eor	r1, r1
    2332:	26 95       	lsr	r18
    2334:	26 95       	lsr	r18
    2336:	26 95       	lsr	r18
    2338:	ea e0       	ldi	r30, 0x0A	; 10
    233a:	2e 9f       	mul	r18, r30
    233c:	80 19       	sub	r24, r0
    233e:	11 24       	eor	r1, r1
    2340:	80 5d       	subi	r24, 0xD0	; 208
    2342:	80 93 15 03 	sts	0x0315, r24
      }
    }
    lcd_string_array[10] = ':';
    2346:	8a e3       	ldi	r24, 0x3A	; 58
    2348:	80 93 16 03 	sts	0x0316, r24
    //time for minutes
    if(alarmMinutes < 10)
    234c:	80 91 0a 01 	lds	r24, 0x010A
    2350:	8a 30       	cpi	r24, 0x0A	; 10
    2352:	08 f4       	brcc	.+2      	; 0x2356 <main+0x5f8>
    2354:	45 cf       	rjmp	.-374    	; 0x21e0 <main+0x482>
      lcd_string_array[11] = '0';
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    2356:	2d ec       	ldi	r18, 0xCD	; 205
    2358:	82 9f       	mul	r24, r18
    235a:	21 2d       	mov	r18, r1
    235c:	11 24       	eor	r1, r1
    235e:	26 95       	lsr	r18
    2360:	26 95       	lsr	r18
    2362:	26 95       	lsr	r18
    2364:	20 5d       	subi	r18, 0xD0	; 208
    2366:	20 93 17 03 	sts	0x0317, r18
    236a:	3d cf       	rjmp	.-390    	; 0x21e6 <main+0x488>
      if(alarmHours == 0){
        lcd_string_array[8] = '0';
	lcd_string_array[9] = '0';
      }
      else{
        if(alarmHours < 10)
    236c:	9a 30       	cpi	r25, 0x0A	; 10
    236e:	f8 f4       	brcc	.+62     	; 0x23ae <main+0x650>
	  lcd_string_array[8] = '0';
    2370:	80 e3       	ldi	r24, 0x30	; 48
    2372:	80 93 14 03 	sts	0x0314, r24
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
    2376:	8d ec       	ldi	r24, 0xCD	; 205
    2378:	98 9f       	mul	r25, r24
    237a:	81 2d       	mov	r24, r1
    237c:	11 24       	eor	r1, r1
    237e:	86 95       	lsr	r24
    2380:	86 95       	lsr	r24
    2382:	86 95       	lsr	r24
    2384:	f9 2f       	mov	r31, r25
    2386:	ea e0       	ldi	r30, 0x0A	; 10
    2388:	8e 9f       	mul	r24, r30
    238a:	f0 19       	sub	r31, r0
    238c:	11 24       	eor	r1, r1
    238e:	8f 2f       	mov	r24, r31
    2390:	80 5d       	subi	r24, 0xD0	; 208
    2392:	80 93 15 03 	sts	0x0315, r24
    2396:	1c cf       	rjmp	.-456    	; 0x21d0 <main+0x472>
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
        lcd_string_array[8] = '1';
    2398:	81 e3       	ldi	r24, 0x31	; 49
    239a:	80 93 14 03 	sts	0x0314, r24
	lcd_string_array[9] = '2';
    239e:	82 e3       	ldi	r24, 0x32	; 50
    23a0:	80 93 15 03 	sts	0x0315, r24
    23a4:	15 cf       	rjmp	.-470    	; 0x21d0 <main+0x472>
    if(!(settings & TIME24)){ //12 hour mode
      if(alarmHours > 11){
        lcd_string_array[13] = 'p';
      }
      else{
        lcd_string_array[13] = 'a';
    23a6:	81 e6       	ldi	r24, 0x61	; 97
    23a8:	80 93 19 03 	sts	0x0319, r24
    23ac:	36 cf       	rjmp	.-404    	; 0x221a <main+0x4bc>
      }
      else{
        if(alarmHours < 10)
	  lcd_string_array[8] = '0';
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
    23ae:	8d ec       	ldi	r24, 0xCD	; 205
    23b0:	98 9f       	mul	r25, r24
    23b2:	81 2d       	mov	r24, r1
    23b4:	11 24       	eor	r1, r1
    23b6:	86 95       	lsr	r24
    23b8:	86 95       	lsr	r24
    23ba:	86 95       	lsr	r24
    23bc:	80 5d       	subi	r24, 0xD0	; 208
    23be:	80 93 14 03 	sts	0x0314, r24
    23c2:	d9 cf       	rjmp	.-78     	; 0x2376 <main+0x618>

000023c4 <__divmodhi4>:
    23c4:	97 fb       	bst	r25, 7
    23c6:	07 2e       	mov	r0, r23
    23c8:	16 f4       	brtc	.+4      	; 0x23ce <__divmodhi4+0xa>
    23ca:	00 94       	com	r0
    23cc:	07 d0       	rcall	.+14     	; 0x23dc <__divmodhi4_neg1>
    23ce:	77 fd       	sbrc	r23, 7
    23d0:	09 d0       	rcall	.+18     	; 0x23e4 <__divmodhi4_neg2>
    23d2:	0e 94 2d 12 	call	0x245a	; 0x245a <__udivmodhi4>
    23d6:	07 fc       	sbrc	r0, 7
    23d8:	05 d0       	rcall	.+10     	; 0x23e4 <__divmodhi4_neg2>
    23da:	3e f4       	brtc	.+14     	; 0x23ea <__divmodhi4_exit>

000023dc <__divmodhi4_neg1>:
    23dc:	90 95       	com	r25
    23de:	81 95       	neg	r24
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	08 95       	ret

000023e4 <__divmodhi4_neg2>:
    23e4:	70 95       	com	r23
    23e6:	61 95       	neg	r22
    23e8:	7f 4f       	sbci	r23, 0xFF	; 255

000023ea <__divmodhi4_exit>:
    23ea:	08 95       	ret

000023ec <__divmodsi4>:
    23ec:	05 2e       	mov	r0, r21
    23ee:	97 fb       	bst	r25, 7
    23f0:	1e f4       	brtc	.+6      	; 0x23f8 <__divmodsi4+0xc>
    23f2:	00 94       	com	r0
    23f4:	0e 94 0d 12 	call	0x241a	; 0x241a <__negsi2>
    23f8:	57 fd       	sbrc	r21, 7
    23fa:	07 d0       	rcall	.+14     	; 0x240a <__divmodsi4_neg2>
    23fc:	0e 94 41 12 	call	0x2482	; 0x2482 <__udivmodsi4>
    2400:	07 fc       	sbrc	r0, 7
    2402:	03 d0       	rcall	.+6      	; 0x240a <__divmodsi4_neg2>
    2404:	4e f4       	brtc	.+18     	; 0x2418 <__divmodsi4_exit>
    2406:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__negsi2>

0000240a <__divmodsi4_neg2>:
    240a:	50 95       	com	r21
    240c:	40 95       	com	r20
    240e:	30 95       	com	r19
    2410:	21 95       	neg	r18
    2412:	3f 4f       	sbci	r19, 0xFF	; 255
    2414:	4f 4f       	sbci	r20, 0xFF	; 255
    2416:	5f 4f       	sbci	r21, 0xFF	; 255

00002418 <__divmodsi4_exit>:
    2418:	08 95       	ret

0000241a <__negsi2>:
    241a:	90 95       	com	r25
    241c:	80 95       	com	r24
    241e:	70 95       	com	r23
    2420:	61 95       	neg	r22
    2422:	7f 4f       	sbci	r23, 0xFF	; 255
    2424:	8f 4f       	sbci	r24, 0xFF	; 255
    2426:	9f 4f       	sbci	r25, 0xFF	; 255
    2428:	08 95       	ret

0000242a <__tablejump2__>:
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	00 24       	eor	r0, r0
    2430:	00 1c       	adc	r0, r0
    2432:	0b be       	out	0x3b, r0	; 59
    2434:	07 90       	elpm	r0, Z+
    2436:	f6 91       	elpm	r31, Z
    2438:	e0 2d       	mov	r30, r0
    243a:	09 94       	ijmp

0000243c <__umulhisi3>:
    243c:	a2 9f       	mul	r26, r18
    243e:	b0 01       	movw	r22, r0
    2440:	b3 9f       	mul	r27, r19
    2442:	c0 01       	movw	r24, r0
    2444:	a3 9f       	mul	r26, r19
    2446:	70 0d       	add	r23, r0
    2448:	81 1d       	adc	r24, r1
    244a:	11 24       	eor	r1, r1
    244c:	91 1d       	adc	r25, r1
    244e:	b2 9f       	mul	r27, r18
    2450:	70 0d       	add	r23, r0
    2452:	81 1d       	adc	r24, r1
    2454:	11 24       	eor	r1, r1
    2456:	91 1d       	adc	r25, r1
    2458:	08 95       	ret

0000245a <__udivmodhi4>:
    245a:	aa 1b       	sub	r26, r26
    245c:	bb 1b       	sub	r27, r27
    245e:	51 e1       	ldi	r21, 0x11	; 17
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <__udivmodhi4_ep>

00002462 <__udivmodhi4_loop>:
    2462:	aa 1f       	adc	r26, r26
    2464:	bb 1f       	adc	r27, r27
    2466:	a6 17       	cp	r26, r22
    2468:	b7 07       	cpc	r27, r23
    246a:	10 f0       	brcs	.+4      	; 0x2470 <__udivmodhi4_ep>
    246c:	a6 1b       	sub	r26, r22
    246e:	b7 0b       	sbc	r27, r23

00002470 <__udivmodhi4_ep>:
    2470:	88 1f       	adc	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	5a 95       	dec	r21
    2476:	a9 f7       	brne	.-22     	; 0x2462 <__udivmodhi4_loop>
    2478:	80 95       	com	r24
    247a:	90 95       	com	r25
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	08 95       	ret

00002482 <__udivmodsi4>:
    2482:	a1 e2       	ldi	r26, 0x21	; 33
    2484:	1a 2e       	mov	r1, r26
    2486:	aa 1b       	sub	r26, r26
    2488:	bb 1b       	sub	r27, r27
    248a:	fd 01       	movw	r30, r26
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <__udivmodsi4_ep>

0000248e <__udivmodsi4_loop>:
    248e:	aa 1f       	adc	r26, r26
    2490:	bb 1f       	adc	r27, r27
    2492:	ee 1f       	adc	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	a2 17       	cp	r26, r18
    2498:	b3 07       	cpc	r27, r19
    249a:	e4 07       	cpc	r30, r20
    249c:	f5 07       	cpc	r31, r21
    249e:	20 f0       	brcs	.+8      	; 0x24a8 <__udivmodsi4_ep>
    24a0:	a2 1b       	sub	r26, r18
    24a2:	b3 0b       	sbc	r27, r19
    24a4:	e4 0b       	sbc	r30, r20
    24a6:	f5 0b       	sbc	r31, r21

000024a8 <__udivmodsi4_ep>:
    24a8:	66 1f       	adc	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	1a 94       	dec	r1
    24b2:	69 f7       	brne	.-38     	; 0x248e <__udivmodsi4_loop>
    24b4:	60 95       	com	r22
    24b6:	70 95       	com	r23
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	9b 01       	movw	r18, r22
    24be:	ac 01       	movw	r20, r24
    24c0:	bd 01       	movw	r22, r26
    24c2:	cf 01       	movw	r24, r30
    24c4:	08 95       	ret

000024c6 <__subsf3>:
    24c6:	50 58       	subi	r21, 0x80	; 128

000024c8 <__addsf3>:
    24c8:	bb 27       	eor	r27, r27
    24ca:	aa 27       	eor	r26, r26
    24cc:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__addsf3x>
    24d0:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__fp_round>
    24d4:	0e 94 45 13 	call	0x268a	; 0x268a <__fp_pscA>
    24d8:	38 f0       	brcs	.+14     	; 0x24e8 <__addsf3+0x20>
    24da:	0e 94 4c 13 	call	0x2698	; 0x2698 <__fp_pscB>
    24de:	20 f0       	brcs	.+8      	; 0x24e8 <__addsf3+0x20>
    24e0:	39 f4       	brne	.+14     	; 0x24f0 <__addsf3+0x28>
    24e2:	9f 3f       	cpi	r25, 0xFF	; 255
    24e4:	19 f4       	brne	.+6      	; 0x24ec <__addsf3+0x24>
    24e6:	26 f4       	brtc	.+8      	; 0x24f0 <__addsf3+0x28>
    24e8:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_nan>
    24ec:	0e f4       	brtc	.+2      	; 0x24f0 <__addsf3+0x28>
    24ee:	e0 95       	com	r30
    24f0:	e7 fb       	bst	r30, 7
    24f2:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__fp_inf>

000024f6 <__addsf3x>:
    24f6:	e9 2f       	mov	r30, r25
    24f8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fp_split3>
    24fc:	58 f3       	brcs	.-42     	; 0x24d4 <__addsf3+0xc>
    24fe:	ba 17       	cp	r27, r26
    2500:	62 07       	cpc	r22, r18
    2502:	73 07       	cpc	r23, r19
    2504:	84 07       	cpc	r24, r20
    2506:	95 07       	cpc	r25, r21
    2508:	20 f0       	brcs	.+8      	; 0x2512 <__addsf3x+0x1c>
    250a:	79 f4       	brne	.+30     	; 0x252a <__addsf3x+0x34>
    250c:	a6 f5       	brtc	.+104    	; 0x2576 <__addsf3x+0x80>
    250e:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_zero>
    2512:	0e f4       	brtc	.+2      	; 0x2516 <__addsf3x+0x20>
    2514:	e0 95       	com	r30
    2516:	0b 2e       	mov	r0, r27
    2518:	ba 2f       	mov	r27, r26
    251a:	a0 2d       	mov	r26, r0
    251c:	0b 01       	movw	r0, r22
    251e:	b9 01       	movw	r22, r18
    2520:	90 01       	movw	r18, r0
    2522:	0c 01       	movw	r0, r24
    2524:	ca 01       	movw	r24, r20
    2526:	a0 01       	movw	r20, r0
    2528:	11 24       	eor	r1, r1
    252a:	ff 27       	eor	r31, r31
    252c:	59 1b       	sub	r21, r25
    252e:	99 f0       	breq	.+38     	; 0x2556 <__addsf3x+0x60>
    2530:	59 3f       	cpi	r21, 0xF9	; 249
    2532:	50 f4       	brcc	.+20     	; 0x2548 <__addsf3x+0x52>
    2534:	50 3e       	cpi	r21, 0xE0	; 224
    2536:	68 f1       	brcs	.+90     	; 0x2592 <__addsf3x+0x9c>
    2538:	1a 16       	cp	r1, r26
    253a:	f0 40       	sbci	r31, 0x00	; 0
    253c:	a2 2f       	mov	r26, r18
    253e:	23 2f       	mov	r18, r19
    2540:	34 2f       	mov	r19, r20
    2542:	44 27       	eor	r20, r20
    2544:	58 5f       	subi	r21, 0xF8	; 248
    2546:	f3 cf       	rjmp	.-26     	; 0x252e <__addsf3x+0x38>
    2548:	46 95       	lsr	r20
    254a:	37 95       	ror	r19
    254c:	27 95       	ror	r18
    254e:	a7 95       	ror	r26
    2550:	f0 40       	sbci	r31, 0x00	; 0
    2552:	53 95       	inc	r21
    2554:	c9 f7       	brne	.-14     	; 0x2548 <__addsf3x+0x52>
    2556:	7e f4       	brtc	.+30     	; 0x2576 <__addsf3x+0x80>
    2558:	1f 16       	cp	r1, r31
    255a:	ba 0b       	sbc	r27, r26
    255c:	62 0b       	sbc	r22, r18
    255e:	73 0b       	sbc	r23, r19
    2560:	84 0b       	sbc	r24, r20
    2562:	ba f0       	brmi	.+46     	; 0x2592 <__addsf3x+0x9c>
    2564:	91 50       	subi	r25, 0x01	; 1
    2566:	a1 f0       	breq	.+40     	; 0x2590 <__addsf3x+0x9a>
    2568:	ff 0f       	add	r31, r31
    256a:	bb 1f       	adc	r27, r27
    256c:	66 1f       	adc	r22, r22
    256e:	77 1f       	adc	r23, r23
    2570:	88 1f       	adc	r24, r24
    2572:	c2 f7       	brpl	.-16     	; 0x2564 <__addsf3x+0x6e>
    2574:	0e c0       	rjmp	.+28     	; 0x2592 <__addsf3x+0x9c>
    2576:	ba 0f       	add	r27, r26
    2578:	62 1f       	adc	r22, r18
    257a:	73 1f       	adc	r23, r19
    257c:	84 1f       	adc	r24, r20
    257e:	48 f4       	brcc	.+18     	; 0x2592 <__addsf3x+0x9c>
    2580:	87 95       	ror	r24
    2582:	77 95       	ror	r23
    2584:	67 95       	ror	r22
    2586:	b7 95       	ror	r27
    2588:	f7 95       	ror	r31
    258a:	9e 3f       	cpi	r25, 0xFE	; 254
    258c:	08 f0       	brcs	.+2      	; 0x2590 <__addsf3x+0x9a>
    258e:	b0 cf       	rjmp	.-160    	; 0x24f0 <__addsf3+0x28>
    2590:	93 95       	inc	r25
    2592:	88 0f       	add	r24, r24
    2594:	08 f0       	brcs	.+2      	; 0x2598 <__addsf3x+0xa2>
    2596:	99 27       	eor	r25, r25
    2598:	ee 0f       	add	r30, r30
    259a:	97 95       	ror	r25
    259c:	87 95       	ror	r24
    259e:	08 95       	ret

000025a0 <__fixunssfsi>:
    25a0:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__fp_splitA>
    25a4:	88 f0       	brcs	.+34     	; 0x25c8 <__fixunssfsi+0x28>
    25a6:	9f 57       	subi	r25, 0x7F	; 127
    25a8:	98 f0       	brcs	.+38     	; 0x25d0 <__fixunssfsi+0x30>
    25aa:	b9 2f       	mov	r27, r25
    25ac:	99 27       	eor	r25, r25
    25ae:	b7 51       	subi	r27, 0x17	; 23
    25b0:	b0 f0       	brcs	.+44     	; 0x25de <__fixunssfsi+0x3e>
    25b2:	e1 f0       	breq	.+56     	; 0x25ec <__fixunssfsi+0x4c>
    25b4:	66 0f       	add	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	1a f0       	brmi	.+6      	; 0x25c4 <__fixunssfsi+0x24>
    25be:	ba 95       	dec	r27
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <__fixunssfsi+0x14>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <__fixunssfsi+0x4c>
    25c4:	b1 30       	cpi	r27, 0x01	; 1
    25c6:	91 f0       	breq	.+36     	; 0x25ec <__fixunssfsi+0x4c>
    25c8:	0e 94 86 13 	call	0x270c	; 0x270c <__fp_zero>
    25cc:	b1 e0       	ldi	r27, 0x01	; 1
    25ce:	08 95       	ret
    25d0:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_zero>
    25d4:	67 2f       	mov	r22, r23
    25d6:	78 2f       	mov	r23, r24
    25d8:	88 27       	eor	r24, r24
    25da:	b8 5f       	subi	r27, 0xF8	; 248
    25dc:	39 f0       	breq	.+14     	; 0x25ec <__fixunssfsi+0x4c>
    25de:	b9 3f       	cpi	r27, 0xF9	; 249
    25e0:	cc f3       	brlt	.-14     	; 0x25d4 <__fixunssfsi+0x34>
    25e2:	86 95       	lsr	r24
    25e4:	77 95       	ror	r23
    25e6:	67 95       	ror	r22
    25e8:	b3 95       	inc	r27
    25ea:	d9 f7       	brne	.-10     	; 0x25e2 <__fixunssfsi+0x42>
    25ec:	3e f4       	brtc	.+14     	; 0x25fc <__fixunssfsi+0x5c>
    25ee:	90 95       	com	r25
    25f0:	80 95       	com	r24
    25f2:	70 95       	com	r23
    25f4:	61 95       	neg	r22
    25f6:	7f 4f       	sbci	r23, 0xFF	; 255
    25f8:	8f 4f       	sbci	r24, 0xFF	; 255
    25fa:	9f 4f       	sbci	r25, 0xFF	; 255
    25fc:	08 95       	ret

000025fe <__floatunsisf>:
    25fe:	e8 94       	clt
    2600:	09 c0       	rjmp	.+18     	; 0x2614 <__floatsisf+0x12>

00002602 <__floatsisf>:
    2602:	97 fb       	bst	r25, 7
    2604:	3e f4       	brtc	.+14     	; 0x2614 <__floatsisf+0x12>
    2606:	90 95       	com	r25
    2608:	80 95       	com	r24
    260a:	70 95       	com	r23
    260c:	61 95       	neg	r22
    260e:	7f 4f       	sbci	r23, 0xFF	; 255
    2610:	8f 4f       	sbci	r24, 0xFF	; 255
    2612:	9f 4f       	sbci	r25, 0xFF	; 255
    2614:	99 23       	and	r25, r25
    2616:	a9 f0       	breq	.+42     	; 0x2642 <__floatsisf+0x40>
    2618:	f9 2f       	mov	r31, r25
    261a:	96 e9       	ldi	r25, 0x96	; 150
    261c:	bb 27       	eor	r27, r27
    261e:	93 95       	inc	r25
    2620:	f6 95       	lsr	r31
    2622:	87 95       	ror	r24
    2624:	77 95       	ror	r23
    2626:	67 95       	ror	r22
    2628:	b7 95       	ror	r27
    262a:	f1 11       	cpse	r31, r1
    262c:	f8 cf       	rjmp	.-16     	; 0x261e <__floatsisf+0x1c>
    262e:	fa f4       	brpl	.+62     	; 0x266e <__floatsisf+0x6c>
    2630:	bb 0f       	add	r27, r27
    2632:	11 f4       	brne	.+4      	; 0x2638 <__floatsisf+0x36>
    2634:	60 ff       	sbrs	r22, 0
    2636:	1b c0       	rjmp	.+54     	; 0x266e <__floatsisf+0x6c>
    2638:	6f 5f       	subi	r22, 0xFF	; 255
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	8f 4f       	sbci	r24, 0xFF	; 255
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	16 c0       	rjmp	.+44     	; 0x266e <__floatsisf+0x6c>
    2642:	88 23       	and	r24, r24
    2644:	11 f0       	breq	.+4      	; 0x264a <__floatsisf+0x48>
    2646:	96 e9       	ldi	r25, 0x96	; 150
    2648:	11 c0       	rjmp	.+34     	; 0x266c <__floatsisf+0x6a>
    264a:	77 23       	and	r23, r23
    264c:	21 f0       	breq	.+8      	; 0x2656 <__floatsisf+0x54>
    264e:	9e e8       	ldi	r25, 0x8E	; 142
    2650:	87 2f       	mov	r24, r23
    2652:	76 2f       	mov	r23, r22
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <__floatsisf+0x5e>
    2656:	66 23       	and	r22, r22
    2658:	71 f0       	breq	.+28     	; 0x2676 <__floatsisf+0x74>
    265a:	96 e8       	ldi	r25, 0x86	; 134
    265c:	86 2f       	mov	r24, r22
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	2a f0       	brmi	.+10     	; 0x266e <__floatsisf+0x6c>
    2664:	9a 95       	dec	r25
    2666:	66 0f       	add	r22, r22
    2668:	77 1f       	adc	r23, r23
    266a:	88 1f       	adc	r24, r24
    266c:	da f7       	brpl	.-10     	; 0x2664 <__floatsisf+0x62>
    266e:	88 0f       	add	r24, r24
    2670:	96 95       	lsr	r25
    2672:	87 95       	ror	r24
    2674:	97 f9       	bld	r25, 7
    2676:	08 95       	ret

00002678 <__fp_inf>:
    2678:	97 f9       	bld	r25, 7
    267a:	9f 67       	ori	r25, 0x7F	; 127
    267c:	80 e8       	ldi	r24, 0x80	; 128
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	08 95       	ret

00002684 <__fp_nan>:
    2684:	9f ef       	ldi	r25, 0xFF	; 255
    2686:	80 ec       	ldi	r24, 0xC0	; 192
    2688:	08 95       	ret

0000268a <__fp_pscA>:
    268a:	00 24       	eor	r0, r0
    268c:	0a 94       	dec	r0
    268e:	16 16       	cp	r1, r22
    2690:	17 06       	cpc	r1, r23
    2692:	18 06       	cpc	r1, r24
    2694:	09 06       	cpc	r0, r25
    2696:	08 95       	ret

00002698 <__fp_pscB>:
    2698:	00 24       	eor	r0, r0
    269a:	0a 94       	dec	r0
    269c:	12 16       	cp	r1, r18
    269e:	13 06       	cpc	r1, r19
    26a0:	14 06       	cpc	r1, r20
    26a2:	05 06       	cpc	r0, r21
    26a4:	08 95       	ret

000026a6 <__fp_round>:
    26a6:	09 2e       	mov	r0, r25
    26a8:	03 94       	inc	r0
    26aa:	00 0c       	add	r0, r0
    26ac:	11 f4       	brne	.+4      	; 0x26b2 <__fp_round+0xc>
    26ae:	88 23       	and	r24, r24
    26b0:	52 f0       	brmi	.+20     	; 0x26c6 <__fp_round+0x20>
    26b2:	bb 0f       	add	r27, r27
    26b4:	40 f4       	brcc	.+16     	; 0x26c6 <__fp_round+0x20>
    26b6:	bf 2b       	or	r27, r31
    26b8:	11 f4       	brne	.+4      	; 0x26be <__fp_round+0x18>
    26ba:	60 ff       	sbrs	r22, 0
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <__fp_round+0x20>
    26be:	6f 5f       	subi	r22, 0xFF	; 255
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	8f 4f       	sbci	r24, 0xFF	; 255
    26c4:	9f 4f       	sbci	r25, 0xFF	; 255
    26c6:	08 95       	ret

000026c8 <__fp_split3>:
    26c8:	57 fd       	sbrc	r21, 7
    26ca:	90 58       	subi	r25, 0x80	; 128
    26cc:	44 0f       	add	r20, r20
    26ce:	55 1f       	adc	r21, r21
    26d0:	59 f0       	breq	.+22     	; 0x26e8 <__fp_splitA+0x10>
    26d2:	5f 3f       	cpi	r21, 0xFF	; 255
    26d4:	71 f0       	breq	.+28     	; 0x26f2 <__fp_splitA+0x1a>
    26d6:	47 95       	ror	r20

000026d8 <__fp_splitA>:
    26d8:	88 0f       	add	r24, r24
    26da:	97 fb       	bst	r25, 7
    26dc:	99 1f       	adc	r25, r25
    26de:	61 f0       	breq	.+24     	; 0x26f8 <__fp_splitA+0x20>
    26e0:	9f 3f       	cpi	r25, 0xFF	; 255
    26e2:	79 f0       	breq	.+30     	; 0x2702 <__fp_splitA+0x2a>
    26e4:	87 95       	ror	r24
    26e6:	08 95       	ret
    26e8:	12 16       	cp	r1, r18
    26ea:	13 06       	cpc	r1, r19
    26ec:	14 06       	cpc	r1, r20
    26ee:	55 1f       	adc	r21, r21
    26f0:	f2 cf       	rjmp	.-28     	; 0x26d6 <__fp_split3+0xe>
    26f2:	46 95       	lsr	r20
    26f4:	f1 df       	rcall	.-30     	; 0x26d8 <__fp_splitA>
    26f6:	08 c0       	rjmp	.+16     	; 0x2708 <__fp_splitA+0x30>
    26f8:	16 16       	cp	r1, r22
    26fa:	17 06       	cpc	r1, r23
    26fc:	18 06       	cpc	r1, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	f1 cf       	rjmp	.-30     	; 0x26e4 <__fp_splitA+0xc>
    2702:	86 95       	lsr	r24
    2704:	71 05       	cpc	r23, r1
    2706:	61 05       	cpc	r22, r1
    2708:	08 94       	sec
    270a:	08 95       	ret

0000270c <__fp_zero>:
    270c:	e8 94       	clt

0000270e <__fp_szero>:
    270e:	bb 27       	eor	r27, r27
    2710:	66 27       	eor	r22, r22
    2712:	77 27       	eor	r23, r23
    2714:	cb 01       	movw	r24, r22
    2716:	97 f9       	bld	r25, 7
    2718:	08 95       	ret

0000271a <__mulsf3>:
    271a:	0e 94 a0 13 	call	0x2740	; 0x2740 <__mulsf3x>
    271e:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__fp_round>
    2722:	0e 94 45 13 	call	0x268a	; 0x268a <__fp_pscA>
    2726:	38 f0       	brcs	.+14     	; 0x2736 <__mulsf3+0x1c>
    2728:	0e 94 4c 13 	call	0x2698	; 0x2698 <__fp_pscB>
    272c:	20 f0       	brcs	.+8      	; 0x2736 <__mulsf3+0x1c>
    272e:	95 23       	and	r25, r21
    2730:	11 f0       	breq	.+4      	; 0x2736 <__mulsf3+0x1c>
    2732:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__fp_inf>
    2736:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_nan>
    273a:	11 24       	eor	r1, r1
    273c:	0c 94 87 13 	jmp	0x270e	; 0x270e <__fp_szero>

00002740 <__mulsf3x>:
    2740:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fp_split3>
    2744:	70 f3       	brcs	.-36     	; 0x2722 <__mulsf3+0x8>

00002746 <__mulsf3_pse>:
    2746:	95 9f       	mul	r25, r21
    2748:	c1 f3       	breq	.-16     	; 0x273a <__mulsf3+0x20>
    274a:	95 0f       	add	r25, r21
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	55 1f       	adc	r21, r21
    2750:	62 9f       	mul	r22, r18
    2752:	f0 01       	movw	r30, r0
    2754:	72 9f       	mul	r23, r18
    2756:	bb 27       	eor	r27, r27
    2758:	f0 0d       	add	r31, r0
    275a:	b1 1d       	adc	r27, r1
    275c:	63 9f       	mul	r22, r19
    275e:	aa 27       	eor	r26, r26
    2760:	f0 0d       	add	r31, r0
    2762:	b1 1d       	adc	r27, r1
    2764:	aa 1f       	adc	r26, r26
    2766:	64 9f       	mul	r22, r20
    2768:	66 27       	eor	r22, r22
    276a:	b0 0d       	add	r27, r0
    276c:	a1 1d       	adc	r26, r1
    276e:	66 1f       	adc	r22, r22
    2770:	82 9f       	mul	r24, r18
    2772:	22 27       	eor	r18, r18
    2774:	b0 0d       	add	r27, r0
    2776:	a1 1d       	adc	r26, r1
    2778:	62 1f       	adc	r22, r18
    277a:	73 9f       	mul	r23, r19
    277c:	b0 0d       	add	r27, r0
    277e:	a1 1d       	adc	r26, r1
    2780:	62 1f       	adc	r22, r18
    2782:	83 9f       	mul	r24, r19
    2784:	a0 0d       	add	r26, r0
    2786:	61 1d       	adc	r22, r1
    2788:	22 1f       	adc	r18, r18
    278a:	74 9f       	mul	r23, r20
    278c:	33 27       	eor	r19, r19
    278e:	a0 0d       	add	r26, r0
    2790:	61 1d       	adc	r22, r1
    2792:	23 1f       	adc	r18, r19
    2794:	84 9f       	mul	r24, r20
    2796:	60 0d       	add	r22, r0
    2798:	21 1d       	adc	r18, r1
    279a:	82 2f       	mov	r24, r18
    279c:	76 2f       	mov	r23, r22
    279e:	6a 2f       	mov	r22, r26
    27a0:	11 24       	eor	r1, r1
    27a2:	9f 57       	subi	r25, 0x7F	; 127
    27a4:	50 40       	sbci	r21, 0x00	; 0
    27a6:	9a f0       	brmi	.+38     	; 0x27ce <__mulsf3_pse+0x88>
    27a8:	f1 f0       	breq	.+60     	; 0x27e6 <__mulsf3_pse+0xa0>
    27aa:	88 23       	and	r24, r24
    27ac:	4a f0       	brmi	.+18     	; 0x27c0 <__mulsf3_pse+0x7a>
    27ae:	ee 0f       	add	r30, r30
    27b0:	ff 1f       	adc	r31, r31
    27b2:	bb 1f       	adc	r27, r27
    27b4:	66 1f       	adc	r22, r22
    27b6:	77 1f       	adc	r23, r23
    27b8:	88 1f       	adc	r24, r24
    27ba:	91 50       	subi	r25, 0x01	; 1
    27bc:	50 40       	sbci	r21, 0x00	; 0
    27be:	a9 f7       	brne	.-22     	; 0x27aa <__mulsf3_pse+0x64>
    27c0:	9e 3f       	cpi	r25, 0xFE	; 254
    27c2:	51 05       	cpc	r21, r1
    27c4:	80 f0       	brcs	.+32     	; 0x27e6 <__mulsf3_pse+0xa0>
    27c6:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__fp_inf>
    27ca:	0c 94 87 13 	jmp	0x270e	; 0x270e <__fp_szero>
    27ce:	5f 3f       	cpi	r21, 0xFF	; 255
    27d0:	e4 f3       	brlt	.-8      	; 0x27ca <__mulsf3_pse+0x84>
    27d2:	98 3e       	cpi	r25, 0xE8	; 232
    27d4:	d4 f3       	brlt	.-12     	; 0x27ca <__mulsf3_pse+0x84>
    27d6:	86 95       	lsr	r24
    27d8:	77 95       	ror	r23
    27da:	67 95       	ror	r22
    27dc:	b7 95       	ror	r27
    27de:	f7 95       	ror	r31
    27e0:	e7 95       	ror	r30
    27e2:	9f 5f       	subi	r25, 0xFF	; 255
    27e4:	c1 f7       	brne	.-16     	; 0x27d6 <__mulsf3_pse+0x90>
    27e6:	fe 2b       	or	r31, r30
    27e8:	88 0f       	add	r24, r24
    27ea:	91 1d       	adc	r25, r1
    27ec:	96 95       	lsr	r25
    27ee:	87 95       	ror	r24
    27f0:	97 f9       	bld	r25, 7
    27f2:	08 95       	ret

000027f4 <strcpy>:
    27f4:	fb 01       	movw	r30, r22
    27f6:	dc 01       	movw	r26, r24
    27f8:	01 90       	ld	r0, Z+
    27fa:	0d 92       	st	X+, r0
    27fc:	00 20       	and	r0, r0
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <strcpy+0x4>
    2800:	08 95       	ret

00002802 <itoa>:
    2802:	45 32       	cpi	r20, 0x25	; 37
    2804:	51 05       	cpc	r21, r1
    2806:	20 f4       	brcc	.+8      	; 0x2810 <itoa+0xe>
    2808:	42 30       	cpi	r20, 0x02	; 2
    280a:	10 f0       	brcs	.+4      	; 0x2810 <itoa+0xe>
    280c:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__itoa_ncheck>
    2810:	fb 01       	movw	r30, r22
    2812:	10 82       	st	Z, r1
    2814:	cb 01       	movw	r24, r22
    2816:	08 95       	ret

00002818 <__itoa_ncheck>:
    2818:	bb 27       	eor	r27, r27
    281a:	4a 30       	cpi	r20, 0x0A	; 10
    281c:	31 f4       	brne	.+12     	; 0x282a <__itoa_ncheck+0x12>
    281e:	99 23       	and	r25, r25
    2820:	22 f4       	brpl	.+8      	; 0x282a <__itoa_ncheck+0x12>
    2822:	bd e2       	ldi	r27, 0x2D	; 45
    2824:	90 95       	com	r25
    2826:	81 95       	neg	r24
    2828:	9f 4f       	sbci	r25, 0xFF	; 255
    282a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__utoa_common>

0000282e <__utoa_ncheck>:
    282e:	bb 27       	eor	r27, r27

00002830 <__utoa_common>:
    2830:	fb 01       	movw	r30, r22
    2832:	55 27       	eor	r21, r21
    2834:	aa 27       	eor	r26, r26
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	aa 1f       	adc	r26, r26
    283c:	a4 17       	cp	r26, r20
    283e:	10 f0       	brcs	.+4      	; 0x2844 <__utoa_common+0x14>
    2840:	a4 1b       	sub	r26, r20
    2842:	83 95       	inc	r24
    2844:	50 51       	subi	r21, 0x10	; 16
    2846:	b9 f7       	brne	.-18     	; 0x2836 <__utoa_common+0x6>
    2848:	a0 5d       	subi	r26, 0xD0	; 208
    284a:	aa 33       	cpi	r26, 0x3A	; 58
    284c:	08 f0       	brcs	.+2      	; 0x2850 <__utoa_common+0x20>
    284e:	a9 5d       	subi	r26, 0xD9	; 217
    2850:	a1 93       	st	Z+, r26
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	79 f7       	brne	.-34     	; 0x2834 <__utoa_common+0x4>
    2856:	b1 11       	cpse	r27, r1
    2858:	b1 93       	st	Z+, r27
    285a:	11 92       	st	Z+, r1
    285c:	cb 01       	movw	r24, r22
    285e:	0c 94 31 14 	jmp	0x2862	; 0x2862 <strrev>

00002862 <strrev>:
    2862:	dc 01       	movw	r26, r24
    2864:	fc 01       	movw	r30, r24
    2866:	67 2f       	mov	r22, r23
    2868:	71 91       	ld	r23, Z+
    286a:	77 23       	and	r23, r23
    286c:	e1 f7       	brne	.-8      	; 0x2866 <strrev+0x4>
    286e:	32 97       	sbiw	r30, 0x02	; 2
    2870:	04 c0       	rjmp	.+8      	; 0x287a <strrev+0x18>
    2872:	7c 91       	ld	r23, X
    2874:	6d 93       	st	X+, r22
    2876:	70 83       	st	Z, r23
    2878:	62 91       	ld	r22, -Z
    287a:	ae 17       	cp	r26, r30
    287c:	bf 07       	cpc	r27, r31
    287e:	c8 f3       	brcs	.-14     	; 0x2872 <strrev+0x10>
    2880:	08 95       	ret

00002882 <_exit>:
    2882:	f8 94       	cli

00002884 <__stop_program>:
    2884:	ff cf       	rjmp	.-2      	; 0x2884 <__stop_program>
