
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002842  000028d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002842  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800150  00800150  00002926  2**0
                  ALLOC
  3 .stab         000046c8  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000154a  00000000  00000000  00006ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000853a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000854c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_10>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_12>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_16>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_21>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      70:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      8c:	ad 05       	cpc	r26, r13
      8e:	b7 05       	cpc	r27, r7
      90:	c1 05       	cpc	r28, r1
      92:	cb 05       	cpc	r28, r11
      94:	d6 05       	cpc	r29, r6
      96:	e1 05       	cpc	r30, r1
      98:	ec 05       	cpc	r30, r12
      9a:	99 05       	cpc	r25, r9
      9c:	a3 05       	cpc	r26, r3
      9e:	42 07       	cpc	r20, r18
      a0:	3a 07       	cpc	r19, r26
      a2:	35 07       	cpc	r19, r21
      a4:	5f 07       	cpc	r21, r31
      a6:	52 07       	cpc	r21, r18
      a8:	5a 07       	cpc	r21, r26
      aa:	4a 07       	cpc	r20, r26
      ac:	13 07       	cpc	r17, r19
      ae:	0b 07       	cpc	r16, r27
      b0:	06 07       	cpc	r16, r22
      b2:	fe 06       	cpc	r15, r30
      b4:	67 07       	cpc	r22, r23
      b6:	1b 07       	cpc	r17, r27
      b8:	f1 06       	cpc	r15, r17
      ba:	d9 06       	cpc	r13, r25
      bc:	87 07       	cpc	r24, r23
      be:	30 07       	cpc	r19, r16
      c0:	28 07       	cpc	r18, r24
      c2:	20 07       	cpc	r18, r16
      c4:	a7 07       	cpc	r26, r23
      c6:	e1 06       	cpc	r14, r17
      c8:	97 07       	cpc	r25, r23
      ca:	e9 06       	cpc	r14, r25
      cc:	b4 07       	cpc	r27, r20
      ce:	7f 07       	cpc	r23, r31
      d0:	9f 07       	cpc	r25, r31
      d2:	f9 06       	cpc	r15, r25
      d4:	77 07       	cpc	r23, r23
      d6:	6f 07       	cpc	r22, r31
      d8:	8f 07       	cpc	r24, r31
      da:	d4 06       	cpc	r13, r20
      dc:	a2 06       	cpc	r10, r18
      de:	9a 06       	cpc	r9, r26
      e0:	aa 06       	cpc	r10, r26
      e2:	ac 07       	cpc	r26, r28
      e4:	8d 06       	cpc	r8, r29
      e6:	85 06       	cpc	r8, r21
      e8:	af 06       	cpc	r10, r31
      ea:	68 06       	cpc	r6, r24
      ec:	cc 06       	cpc	r12, r28
      ee:	95 06       	cpc	r9, r21
      f0:	78 06       	cpc	r7, r24
      f2:	70 06       	cpc	r7, r16
      f4:	bc 06       	cpc	r11, r28
      f6:	80 06       	cpc	r8, r16
      f8:	b4 06       	cpc	r11, r20
      fa:	60 06       	cpc	r6, r16
      fc:	46 06       	cpc	r4, r22
      fe:	c4 06       	cpc	r12, r20
     100:	36 06       	cpc	r3, r22
     102:	2e 06       	cpc	r2, r30
     104:	53 06       	cpc	r5, r19
     106:	4b 06       	cpc	r4, r27
     108:	58 06       	cpc	r5, r24
     10a:	29 06       	cpc	r2, r25
     10c:	3e 06       	cpc	r3, r30
     10e:	11 06       	cpc	r1, r17
     110:	21 06       	cpc	r2, r17
     112:	0c 06       	cpc	r0, r28
     114:	04 06       	cpc	r0, r20
     116:	fc 05       	cpc	r31, r12
     118:	f7 05       	cpc	r31, r7
     11a:	19 06       	cpc	r1, r25
     11c:	be 08       	sbc	r11, r14
     11e:	dc 08       	sbc	r13, r12
     120:	b8 08       	sbc	r11, r8
     122:	ca 08       	sbc	r12, r10
     124:	ac 08       	sbc	r10, r12
     126:	b2 08       	sbc	r11, r2
     128:	ac 08       	sbc	r10, r12
     12a:	b2 08       	sbc	r11, r2
     12c:	e2 08       	sbc	r14, r2
     12e:	be 08       	sbc	r11, r14
     130:	dc 08       	sbc	r13, r12
     132:	b8 08       	sbc	r11, r8
     134:	ca 08       	sbc	r12, r10
     136:	c4 08       	sbc	r12, r4
     138:	a6 08       	sbc	r10, r6
     13a:	c4 08       	sbc	r12, r4
     13c:	a6 08       	sbc	r10, r6
     13e:	0c 09       	sbc	r16, r12
     140:	48 09       	sbc	r20, r8
     142:	00 09       	sbc	r16, r0
     144:	78 09       	sbc	r23, r8
     146:	00 09       	sbc	r16, r0
     148:	3c 09       	sbc	r19, r12
     14a:	36 09       	sbc	r19, r6
     14c:	a6 08       	sbc	r10, r6
     14e:	12 09       	sbc	r17, r2
     150:	a6 08       	sbc	r10, r6
     152:	24 09       	sbc	r18, r4
     154:	d0 08       	sbc	r13, r0
     156:	66 09       	sbc	r22, r6
     158:	ac 08       	sbc	r10, r12
     15a:	5a 09       	sbc	r21, r10
     15c:	e8 08       	sbc	r14, r8
     15e:	60 09       	sbc	r22, r0
     160:	ee 08       	sbc	r14, r14
     162:	6c 09       	sbc	r22, r12
     164:	30 09       	sbc	r19, r0
     166:	d6 08       	sbc	r13, r6
     168:	d0 08       	sbc	r13, r0
     16a:	18 09       	sbc	r17, r8
     16c:	f4 08       	sbc	r15, r4
     16e:	be 08       	sbc	r11, r14
     170:	dc 08       	sbc	r13, r12
     172:	b8 08       	sbc	r11, r8
     174:	ca 08       	sbc	r12, r10
     176:	ac 08       	sbc	r10, r12
     178:	b2 08       	sbc	r11, r2
     17a:	ac 08       	sbc	r10, r12
     17c:	b2 08       	sbc	r11, r2
     17e:	e2 08       	sbc	r14, r2
     180:	be 08       	sbc	r11, r14
     182:	42 09       	sbc	r20, r2
     184:	d6 08       	sbc	r13, r6
     186:	b8 08       	sbc	r11, r8
     188:	c4 08       	sbc	r12, r4
     18a:	a6 08       	sbc	r10, r6
     18c:	c4 08       	sbc	r12, r4
     18e:	a6 08       	sbc	r10, r6
     190:	0c 09       	sbc	r16, r12
     192:	4e 09       	sbc	r20, r14
     194:	1e 09       	sbc	r17, r14
     196:	e2 08       	sbc	r14, r2
     198:	54 09       	sbc	r21, r4
     19a:	12 09       	sbc	r17, r2
     19c:	e8 08       	sbc	r14, r8
     19e:	ee 08       	sbc	r14, r14
     1a0:	d0 08       	sbc	r13, r0
     1a2:	d6 08       	sbc	r13, r6
     1a4:	72 09       	sbc	r23, r2
     1a6:	f4 08       	sbc	r15, r4
     1a8:	90 09       	sbc	r25, r0
     1aa:	b4 09       	sbc	r27, r4
     1ac:	8a 09       	sbc	r24, r10
     1ae:	ae 09       	sbc	r26, r14
     1b0:	32 0a       	sbc	r3, r18
     1b2:	2c 0a       	sbc	r2, r28
     1b4:	8a 09       	sbc	r24, r10
     1b6:	b4 09       	sbc	r27, r4
     1b8:	ba 09       	sbc	r27, r10
     1ba:	96 09       	sbc	r25, r6
     1bc:	3e 0a       	sbc	r3, r30
     1be:	8a 09       	sbc	r24, r10
     1c0:	90 09       	sbc	r25, r0
     1c2:	ae 09       	sbc	r26, r14
     1c4:	8a 09       	sbc	r24, r10
     1c6:	f6 09       	sbc	r31, r6
     1c8:	8a 09       	sbc	r24, r10
     1ca:	a2 09       	sbc	r26, r2
     1cc:	90 09       	sbc	r25, r0
     1ce:	d2 09       	sbc	r29, r2
     1d0:	ba 09       	sbc	r27, r10
     1d2:	96 09       	sbc	r25, r6
     1d4:	cc 09       	sbc	r28, r12
     1d6:	50 0a       	sbc	r5, r16
     1d8:	a2 09       	sbc	r26, r2
     1da:	c0 09       	sbc	r28, r0
     1dc:	5c 0a       	sbc	r5, r28
     1de:	0e 0a       	sbc	r0, r30
     1e0:	c0 09       	sbc	r28, r0
     1e2:	26 0a       	sbc	r2, r22
     1e4:	8a 09       	sbc	r24, r10
     1e6:	90 09       	sbc	r25, r0
     1e8:	ae 09       	sbc	r26, r14
     1ea:	8a 09       	sbc	r24, r10
     1ec:	f0 09       	sbc	r31, r0
     1ee:	96 09       	sbc	r25, r6
     1f0:	b4 09       	sbc	r27, r4
     1f2:	8a 09       	sbc	r24, r10
     1f4:	a2 09       	sbc	r26, r2
     1f6:	90 09       	sbc	r25, r0
     1f8:	d2 09       	sbc	r29, r2
     1fa:	ba 09       	sbc	r27, r10
     1fc:	96 09       	sbc	r25, r6
     1fe:	4a 0a       	sbc	r4, r26
     200:	e4 09       	sbc	r30, r4
     202:	de 09       	sbc	r29, r14
     204:	a8 09       	sbc	r26, r8
     206:	d8 09       	sbc	r29, r8
     208:	c6 09       	sbc	r28, r6
     20a:	a8 09       	sbc	r26, r8
     20c:	1a 0a       	sbc	r1, r26
     20e:	20 0a       	sbc	r2, r16
     210:	14 0a       	sbc	r1, r20
     212:	e4 09       	sbc	r30, r4
     214:	de 09       	sbc	r29, r14
     216:	a8 09       	sbc	r26, r8
     218:	d8 09       	sbc	r29, r8
     21a:	c6 09       	sbc	r28, r6
     21c:	38 0a       	sbc	r3, r24
     21e:	44 0a       	sbc	r4, r20
     220:	cc 09       	sbc	r28, r12
     222:	fc 09       	sbc	r31, r12
     224:	02 0a       	sbc	r0, r18
     226:	0c 0f       	add	r16, r28
     228:	00 0f       	add	r16, r16
     22a:	fa 0e       	add	r15, r26
     22c:	ee 0e       	add	r14, r30
     22e:	e8 0e       	add	r14, r24
     230:	dc 0e       	add	r13, r28
     232:	d6 0e       	add	r13, r22
     234:	d0 0e       	add	r13, r16
     236:	ca 0e       	add	r12, r26
     238:	c4 0e       	add	r12, r20
     23a:	b8 0e       	add	r11, r24
     23c:	b2 0e       	add	r11, r18
     23e:	ac 0e       	add	r10, r28
     240:	a0 0e       	add	r10, r16
     242:	9a 0e       	add	r9, r26
     244:	8e 0e       	add	r8, r30
     246:	88 0e       	add	r8, r24
     248:	7c 0e       	add	r7, r28
     24a:	76 0e       	add	r7, r22
     24c:	6a 0e       	add	r6, r26
     24e:	64 0e       	add	r6, r20
     250:	5e 0e       	add	r5, r30
     252:	58 0e       	add	r5, r24
     254:	52 0e       	add	r5, r18
     256:	46 0e       	add	r4, r22
     258:	40 0e       	add	r4, r16
     25a:	3a 0e       	add	r3, r26
     25c:	34 0e       	add	r3, r20
     25e:	2e 0e       	add	r2, r30
     260:	22 0e       	add	r2, r18
     262:	1c 0e       	add	r1, r28
     264:	10 0e       	add	r1, r16
     266:	0a 0e       	add	r0, r26
     268:	04 0e       	add	r0, r20
     26a:	fe 0d       	add	r31, r14
     26c:	f2 0d       	add	r31, r2
     26e:	ec 0d       	add	r30, r12
     270:	e0 0d       	add	r30, r0
     272:	da 0d       	add	r29, r10
     274:	ce 0d       	add	r28, r14
     276:	c8 0d       	add	r28, r8
     278:	bc 0d       	add	r27, r12
     27a:	b6 0d       	add	r27, r6
     27c:	aa 0d       	add	r26, r10
     27e:	a4 0d       	add	r26, r4
     280:	98 0d       	add	r25, r8
     282:	92 0d       	add	r25, r2
     284:	8c 0d       	add	r24, r12
     286:	86 0d       	add	r24, r6
     288:	80 0d       	add	r24, r0
     28a:	74 0d       	add	r23, r4
     28c:	6e 0d       	add	r22, r14
     28e:	68 0d       	add	r22, r8
     290:	62 0d       	add	r22, r2
     292:	5c 0d       	add	r21, r12
     294:	50 0d       	add	r21, r0
     296:	4a 0d       	add	r20, r10
     298:	3e 0d       	add	r19, r14
     29a:	38 0d       	add	r19, r8
     29c:	32 0d       	add	r19, r2
     29e:	2c 0d       	add	r18, r12
     2a0:	20 0d       	add	r18, r0
     2a2:	1a 0d       	add	r17, r10
     2a4:	14 0d       	add	r17, r4
     2a6:	0e 0d       	add	r16, r14
     2a8:	08 0d       	add	r16, r8
     2aa:	fc 0c       	add	r15, r12
     2ac:	f6 0c       	add	r15, r6
     2ae:	ea 0c       	add	r14, r10
     2b0:	e4 0c       	add	r14, r4
     2b2:	de 0c       	add	r13, r14
     2b4:	d8 0c       	add	r13, r8
     2b6:	cc 0c       	add	r12, r12
     2b8:	c6 0c       	add	r12, r6
     2ba:	c0 0c       	add	r12, r0
     2bc:	ba 0c       	add	r11, r10
     2be:	ae 0c       	add	r10, r14
     2c0:	a8 0c       	add	r10, r8
     2c2:	a2 0c       	add	r10, r2
     2c4:	9c 0c       	add	r9, r12
     2c6:	96 0c       	add	r9, r6
     2c8:	8a 0c       	add	r8, r10
     2ca:	84 0c       	add	r8, r4
     2cc:	78 0c       	add	r7, r8
     2ce:	72 0c       	add	r7, r2
     2d0:	66 0c       	add	r6, r6
     2d2:	60 0c       	add	r6, r0
     2d4:	54 0c       	add	r5, r4
     2d6:	4e 0c       	add	r4, r14
     2d8:	42 0c       	add	r4, r2
     2da:	3c 0c       	add	r3, r12
     2dc:	36 0c       	add	r3, r6
     2de:	30 0c       	add	r3, r0
     2e0:	2a 0c       	add	r2, r10
     2e2:	1e 0c       	add	r1, r14
     2e4:	18 0c       	add	r1, r8
     2e6:	0c 0c       	add	r0, r12
     2e8:	06 0c       	add	r0, r6
     2ea:	00 0c       	add	r0, r0
     2ec:	fa 0b       	sbc	r31, r26
     2ee:	ee 0b       	sbc	r30, r30
     2f0:	e8 0b       	sbc	r30, r24
     2f2:	e2 0b       	sbc	r30, r18
     2f4:	dc 0b       	sbc	r29, r28
     2f6:	d0 0b       	sbc	r29, r16
     2f8:	ca 0b       	sbc	r28, r26
     2fa:	be 0b       	sbc	r27, r30
     2fc:	b8 0b       	sbc	r27, r24
     2fe:	ac 0b       	sbc	r26, r28
     300:	a6 0b       	sbc	r26, r22
     302:	9a 0b       	sbc	r25, r26
     304:	94 0b       	sbc	r25, r20
     306:	88 0b       	sbc	r24, r24
     308:	82 0b       	sbc	r24, r18
     30a:	76 0b       	sbc	r23, r22
     30c:	70 0b       	sbc	r23, r16
     30e:	64 0b       	sbc	r22, r20
     310:	5e 0b       	sbc	r21, r30
     312:	58 0b       	sbc	r21, r24
     314:	52 0b       	sbc	r21, r18
     316:	4c 0b       	sbc	r20, r28
     318:	40 0b       	sbc	r20, r16
     31a:	3a 0b       	sbc	r19, r26
     31c:	34 0b       	sbc	r19, r20
     31e:	28 0b       	sbc	r18, r24
     320:	22 0b       	sbc	r18, r18
     322:	16 0b       	sbc	r17, r22
     324:	10 0b       	sbc	r17, r16
     326:	04 0b       	sbc	r16, r20
     328:	fe 0a       	sbc	r15, r30
     32a:	f2 0a       	sbc	r15, r18
     32c:	ec 0a       	sbc	r14, r28
     32e:	e6 0a       	sbc	r14, r22
     330:	e0 0a       	sbc	r14, r16
     332:	d4 0a       	sbc	r13, r20
     334:	ce 0a       	sbc	r12, r30
     336:	c2 0a       	sbc	r12, r18
     338:	bc 0a       	sbc	r11, r28
     33a:	b0 0a       	sbc	r11, r16
     33c:	aa 0a       	sbc	r10, r26
     33e:	9e 0a       	sbc	r9, r30
     340:	98 0a       	sbc	r9, r24
     342:	92 0a       	sbc	r9, r18
     344:	8c 0a       	sbc	r8, r28
     346:	86 0a       	sbc	r8, r22
     348:	7a 0a       	sbc	r7, r26
     34a:	74 0a       	sbc	r7, r20
     34c:	6e 0a       	sbc	r6, r30
     34e:	12 0f       	add	r17, r18
     350:	3c 0f       	add	r19, r28
     352:	2a 0f       	add	r18, r26
     354:	3c 0f       	add	r19, r28
     356:	2a 0f       	add	r18, r26
     358:	3c 0f       	add	r19, r28
     35a:	2a 0f       	add	r18, r26
     35c:	60 0f       	add	r22, r16
     35e:	2a 0f       	add	r18, r26
     360:	60 0f       	add	r22, r16
     362:	48 0f       	add	r20, r24
     364:	36 0f       	add	r19, r22
     366:	78 0f       	add	r23, r24
     368:	36 0f       	add	r19, r22
     36a:	66 0f       	add	r22, r22
     36c:	54 0f       	add	r21, r20
     36e:	42 0f       	add	r20, r18
     370:	2a 0f       	add	r18, r26
     372:	42 0f       	add	r20, r18
     374:	2a 0f       	add	r18, r26
     376:	42 0f       	add	r20, r18
     378:	2a 0f       	add	r18, r26
     37a:	5a 0f       	add	r21, r26
     37c:	2a 0f       	add	r18, r26
     37e:	5a 0f       	add	r21, r26
     380:	48 0f       	add	r20, r24
     382:	6c 0f       	add	r22, r28
     384:	72 0f       	add	r23, r18
     386:	2a 0f       	add	r18, r26
     388:	36 0f       	add	r19, r22
     38a:	7e 0f       	add	r23, r30
     38c:	54 0f       	add	r21, r20

0000038e <__ctors_end>:
     38e:	11 24       	eor	r1, r1
     390:	1f be       	out	0x3f, r1	; 63
     392:	cf ef       	ldi	r28, 0xFF	; 255
     394:	d0 e1       	ldi	r29, 0x10	; 16
     396:	de bf       	out	0x3e, r29	; 62
     398:	cd bf       	out	0x3d, r28	; 61

0000039a <__do_copy_data>:
     39a:	11 e0       	ldi	r17, 0x01	; 1
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b1 e0       	ldi	r27, 0x01	; 1
     3a0:	e2 e4       	ldi	r30, 0x42	; 66
     3a2:	f8 e2       	ldi	r31, 0x28	; 40
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	0b bf       	out	0x3b, r16	; 59
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__do_copy_data+0x14>
     3aa:	07 90       	elpm	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	a0 35       	cpi	r26, 0x50	; 80
     3b0:	b1 07       	cpc	r27, r17
     3b2:	d9 f7       	brne	.-10     	; 0x3aa <__do_copy_data+0x10>

000003b4 <__do_clear_bss>:
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	a0 e5       	ldi	r26, 0x50	; 80
     3b8:	b1 e0       	ldi	r27, 0x01	; 1
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	a0 3c       	cpi	r26, 0xC0	; 192
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 dd 12 	call	0x25ba	; 0x25ba <main>
     3c8:	0c 94 1f 14 	jmp	0x283e	; 0x283e <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <display_alarm>:
	0b01000000, //thousands place
	0b00100000, //center colon
	0b01110000  //hi-Z mode
};
/****************/
void display_alarm(){
     3d0:	cf 93       	push	r28
cur_digit=0;
     3d2:	10 92 54 01 	sts	0x0154, r1

	//Set Register A
	DDRA = 0xFF; //output
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     3da:	8b bb       	out	0x1b, r24	; 27

tmp=alarm_minutes;
     3dc:	e0 91 23 01 	lds	r30, 0x0123
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	f0 93 72 01 	sts	0x0172, r31
     3e6:	e0 93 71 01 	sts	0x0171, r30
for(i=0; i<2 ; i++){
     3ea:	10 92 7b 01 	sts	0x017B, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     3ee:	cf ef       	ldi	r28, 0xFF	; 255
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     3f0:	9f 01       	movw	r18, r30
     3f2:	ad ec       	ldi	r26, 0xCD	; 205
     3f4:	bc ec       	ldi	r27, 0xCC	; 204
     3f6:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     3fa:	ac 01       	movw	r20, r24
     3fc:	56 95       	lsr	r21
     3fe:	47 95       	ror	r20
     400:	56 95       	lsr	r21
     402:	47 95       	ror	r20
     404:	56 95       	lsr	r21
     406:	47 95       	ror	r20
     408:	ca 01       	movw	r24, r20
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	44 0f       	add	r20, r20
     410:	55 1f       	adc	r21, r21
     412:	44 0f       	add	r20, r20
     414:	55 1f       	adc	r21, r21
     416:	44 0f       	add	r20, r20
     418:	55 1f       	adc	r21, r21
     41a:	48 0f       	add	r20, r24
     41c:	59 1f       	adc	r21, r25
     41e:	e4 1b       	sub	r30, r20
     420:	f5 0b       	sbc	r31, r21
     422:	e0 93 7e 01 	sts	0x017E, r30
		PORTB=0x00;
     426:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     428:	98 b3       	in	r25, 0x18	; 24
     42a:	e0 91 54 01 	lds	r30, 0x0154
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	e0 50       	subi	r30, 0x00	; 0
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	89 2b       	or	r24, r25
     438:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     43a:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     43c:	e0 91 7e 01 	lds	r30, 0x017E
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ea 5e       	subi	r30, 0xEA	; 234
     444:	fe 4f       	sbci	r31, 0xFE	; 254
     446:	80 81       	ld	r24, Z
     448:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	81 ee       	ldi	r24, 0xE1	; 225
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <display_alarm+0x7e>
     452:	00 c0       	rjmp	.+0      	; 0x454 <display_alarm+0x84>
     454:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     456:	80 91 54 01 	lds	r24, 0x0154
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 54 01 	sts	0x0154, r24
		tmp /= 10; //get next value
     460:	20 91 71 01 	lds	r18, 0x0171
     464:	30 91 72 01 	lds	r19, 0x0172
     468:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     46c:	fc 01       	movw	r30, r24
     46e:	f6 95       	lsr	r31
     470:	e7 95       	ror	r30
     472:	f6 95       	lsr	r31
     474:	e7 95       	ror	r30
     476:	f6 95       	lsr	r31
     478:	e7 95       	ror	r30
     47a:	f0 93 72 01 	sts	0x0172, r31
     47e:	e0 93 71 01 	sts	0x0171, r30
	//Set Register A
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
     482:	80 91 7b 01 	lds	r24, 0x017B
     486:	8f 5f       	subi	r24, 0xFF	; 255
     488:	80 93 7b 01 	sts	0x017B, r24
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	08 f4       	brcc	.+2      	; 0x492 <display_alarm+0xc2>
     490:	af cf       	rjmp	.-162    	; 0x3f0 <display_alarm+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=alarm_hours;
     492:	40 91 24 01 	lds	r20, 0x0124
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	50 93 72 01 	sts	0x0172, r21
     49c:	40 93 71 01 	sts	0x0171, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     4a0:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=alarm_hours;
do {
		cur_value = tmp % 10; //get current digit to display
     4a2:	9a 01       	movw	r18, r20
     4a4:	ad ec       	ldi	r26, 0xCD	; 205
     4a6:	bc ec       	ldi	r27, 0xCC	; 204
     4a8:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     4ac:	96 95       	lsr	r25
     4ae:	87 95       	ror	r24
     4b0:	96 95       	lsr	r25
     4b2:	87 95       	ror	r24
     4b4:	96 95       	lsr	r25
     4b6:	87 95       	ror	r24
     4b8:	9c 01       	movw	r18, r24
     4ba:	22 0f       	add	r18, r18
     4bc:	33 1f       	adc	r19, r19
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	82 0f       	add	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	48 1b       	sub	r20, r24
     4d0:	59 0b       	sbc	r21, r25
     4d2:	40 93 7e 01 	sts	0x017E, r20
		PORTB=0x00;
     4d6:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     4d8:	98 b3       	in	r25, 0x18	; 24
     4da:	e0 91 54 01 	lds	r30, 0x0154
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e0 50       	subi	r30, 0x00	; 0
     4e2:	ff 4f       	sbci	r31, 0xFF	; 255
     4e4:	80 81       	ld	r24, Z
     4e6:	89 2b       	or	r24, r25
     4e8:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     4ea:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     4ec:	e0 91 7e 01 	lds	r30, 0x017E
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	ea 5e       	subi	r30, 0xEA	; 234
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	80 81       	ld	r24, Z
     4f8:	8b bb       	out	0x1b, r24	; 27
     4fa:	81 ee       	ldi	r24, 0xE1	; 225
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <display_alarm+0x12e>
     502:	00 c0       	rjmp	.+0      	; 0x504 <display_alarm+0x134>
     504:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     506:	80 91 54 01 	lds	r24, 0x0154
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	80 93 54 01 	sts	0x0154, r24
		tmp /= 10; //get next value
     510:	20 91 71 01 	lds	r18, 0x0171
     514:	30 91 72 01 	lds	r19, 0x0172
     518:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     51c:	ac 01       	movw	r20, r24
     51e:	56 95       	lsr	r21
     520:	47 95       	ror	r20
     522:	56 95       	lsr	r21
     524:	47 95       	ror	r20
     526:	56 95       	lsr	r21
     528:	47 95       	ror	r20
     52a:	50 93 72 01 	sts	0x0172, r21
     52e:	40 93 71 01 	sts	0x0171, r20
	} while (tmp >= 1);
     532:	41 15       	cp	r20, r1
     534:	51 05       	cpc	r21, r1
     536:	09 f0       	breq	.+2      	; 0x53a <display_alarm+0x16a>
     538:	b4 cf       	rjmp	.-152    	; 0x4a2 <display_alarm+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     53a:	80 e6       	ldi	r24, 0x60	; 96
     53c:	88 bb       	out	0x18, r24	; 24





}
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <display_digits>:

/*******************************/
void display_digits() 
{
     542:	cf 93       	push	r28
	cur_digit=0;
     544:	10 92 54 01 	sts	0x0154, r1

	//Set Register A
	DDRA = 0xFF; //output
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     54c:	8b bb       	out	0x1b, r24	; 27
PORTB=0x00;
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
     54e:	e0 91 56 01 	lds	r30, 0x0156
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	f0 93 72 01 	sts	0x0172, r31
     558:	e0 93 71 01 	sts	0x0171, r30
for(i=0; i<2 ; i++){
     55c:	10 92 7b 01 	sts	0x017B, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     560:	cf ef       	ldi	r28, 0xFF	; 255
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     562:	9f 01       	movw	r18, r30
     564:	ad ec       	ldi	r26, 0xCD	; 205
     566:	bc ec       	ldi	r27, 0xCC	; 204
     568:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     56c:	ac 01       	movw	r20, r24
     56e:	56 95       	lsr	r21
     570:	47 95       	ror	r20
     572:	56 95       	lsr	r21
     574:	47 95       	ror	r20
     576:	56 95       	lsr	r21
     578:	47 95       	ror	r20
     57a:	ca 01       	movw	r24, r20
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	44 0f       	add	r20, r20
     582:	55 1f       	adc	r21, r21
     584:	44 0f       	add	r20, r20
     586:	55 1f       	adc	r21, r21
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	48 0f       	add	r20, r24
     58e:	59 1f       	adc	r21, r25
     590:	e4 1b       	sub	r30, r20
     592:	f5 0b       	sbc	r31, r21
     594:	e0 93 7e 01 	sts	0x017E, r30
		PORTB=0x00;
     598:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     59a:	98 b3       	in	r25, 0x18	; 24
     59c:	e0 91 54 01 	lds	r30, 0x0154
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	e0 50       	subi	r30, 0x00	; 0
     5a4:	ff 4f       	sbci	r31, 0xFF	; 255
     5a6:	80 81       	ld	r24, Z
     5a8:	89 2b       	or	r24, r25
     5aa:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     5ac:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     5ae:	e0 91 7e 01 	lds	r30, 0x017E
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	ea 5e       	subi	r30, 0xEA	; 234
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	80 81       	ld	r24, Z
     5ba:	8b bb       	out	0x1b, r24	; 27
     5bc:	81 ee       	ldi	r24, 0xE1	; 225
     5be:	94 e0       	ldi	r25, 0x04	; 4
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <display_digits+0x7e>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <display_digits+0x84>
     5c6:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     5c8:	80 91 54 01 	lds	r24, 0x0154
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	80 93 54 01 	sts	0x0154, r24
		tmp /= 10; //get next value
     5d2:	20 91 71 01 	lds	r18, 0x0171
     5d6:	30 91 72 01 	lds	r19, 0x0172
     5da:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     5de:	fc 01       	movw	r30, r24
     5e0:	f6 95       	lsr	r31
     5e2:	e7 95       	ror	r30
     5e4:	f6 95       	lsr	r31
     5e6:	e7 95       	ror	r30
     5e8:	f6 95       	lsr	r31
     5ea:	e7 95       	ror	r30
     5ec:	f0 93 72 01 	sts	0x0172, r31
     5f0:	e0 93 71 01 	sts	0x0171, r30
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
     5f4:	80 91 7b 01 	lds	r24, 0x017B
     5f8:	8f 5f       	subi	r24, 0xFF	; 255
     5fa:	80 93 7b 01 	sts	0x017B, r24
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	08 f4       	brcc	.+2      	; 0x604 <display_digits+0xc2>
     602:	af cf       	rjmp	.-162    	; 0x562 <display_digits+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=hours;
     604:	40 91 25 01 	lds	r20, 0x0125
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	50 93 72 01 	sts	0x0172, r21
     60e:	40 93 71 01 	sts	0x0171, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     612:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=hours;
do {
		cur_value = tmp % 10; //get current digit to display
     614:	9a 01       	movw	r18, r20
     616:	ad ec       	ldi	r26, 0xCD	; 205
     618:	bc ec       	ldi	r27, 0xCC	; 204
     61a:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     61e:	96 95       	lsr	r25
     620:	87 95       	ror	r24
     622:	96 95       	lsr	r25
     624:	87 95       	ror	r24
     626:	96 95       	lsr	r25
     628:	87 95       	ror	r24
     62a:	9c 01       	movw	r18, r24
     62c:	22 0f       	add	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	82 0f       	add	r24, r18
     63e:	93 1f       	adc	r25, r19
     640:	48 1b       	sub	r20, r24
     642:	59 0b       	sbc	r21, r25
     644:	40 93 7e 01 	sts	0x017E, r20
		PORTB=0x00;
     648:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     64a:	98 b3       	in	r25, 0x18	; 24
     64c:	e0 91 54 01 	lds	r30, 0x0154
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	e0 50       	subi	r30, 0x00	; 0
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	80 81       	ld	r24, Z
     658:	89 2b       	or	r24, r25
     65a:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     65c:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     65e:	e0 91 7e 01 	lds	r30, 0x017E
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ea 5e       	subi	r30, 0xEA	; 234
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	80 81       	ld	r24, Z
     66a:	8b bb       	out	0x1b, r24	; 27
     66c:	81 ee       	ldi	r24, 0xE1	; 225
     66e:	94 e0       	ldi	r25, 0x04	; 4
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <display_digits+0x12e>
     674:	00 c0       	rjmp	.+0      	; 0x676 <display_digits+0x134>
     676:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     678:	80 91 54 01 	lds	r24, 0x0154
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	80 93 54 01 	sts	0x0154, r24
		tmp /= 10; //get next value
     682:	20 91 71 01 	lds	r18, 0x0171
     686:	30 91 72 01 	lds	r19, 0x0172
     68a:	0e 94 ca 13 	call	0x2794	; 0x2794 <__umulhisi3>
     68e:	ac 01       	movw	r20, r24
     690:	56 95       	lsr	r21
     692:	47 95       	ror	r20
     694:	56 95       	lsr	r21
     696:	47 95       	ror	r20
     698:	56 95       	lsr	r21
     69a:	47 95       	ror	r20
     69c:	50 93 72 01 	sts	0x0172, r21
     6a0:	40 93 71 01 	sts	0x0171, r20
	} while (tmp >= 1);
     6a4:	41 15       	cp	r20, r1
     6a6:	51 05       	cpc	r21, r1
     6a8:	09 f0       	breq	.+2      	; 0x6ac <display_digits+0x16a>
     6aa:	b4 cf       	rjmp	.-152    	; 0x614 <display_digits+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     6ac:	80 e6       	ldi	r24, 0x60	; 96
     6ae:	88 bb       	out	0x18, r24	; 24
}
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <Button>:
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
     6b4:	99 b3       	in	r25, 0x19	; 25
     6b6:	80 91 27 01 	lds	r24, 0x0127
     6ba:	89 1b       	sub	r24, r25
 switch(checker){
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	51 f1       	breq	.+84     	; 0x714 <Button+0x60>
     6c0:	e0 f0       	brcs	.+56     	; 0x6fa <Button+0x46>
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	71 f0       	breq	.+28     	; 0x6e2 <Button+0x2e>
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	89 f5       	brne	.+98     	; 0x72c <Button+0x78>
		BARAGRAPH ^= ( 1 <<2);
	
		break;

	case 0x08:
		alarm_minutes= alarm_minutes+5;
     6ca:	80 91 23 01 	lds	r24, 0x0123
     6ce:	8b 5f       	subi	r24, 0xFB	; 251
     6d0:	80 93 23 01 	sts	0x0123, r24
		BARAGRAPH ^= (1<<5);
     6d4:	90 91 5c 01 	lds	r25, 0x015C
     6d8:	80 e2       	ldi	r24, 0x20	; 32
     6da:	89 27       	eor	r24, r25
     6dc:	80 93 5c 01 	sts	0x015C, r24
     6e0:	08 95       	ret
	

		break;

	case 0x04:
		alarm ^=0x01;
     6e2:	20 91 78 01 	lds	r18, 0x0178
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	92 27       	eor	r25, r18
     6ea:	90 93 78 01 	sts	0x0178, r25
		BARAGRAPH ^= ( 1 <<2);
     6ee:	90 91 5c 01 	lds	r25, 0x015C
     6f2:	89 27       	eor	r24, r25
     6f4:	80 93 5c 01 	sts	0x015C, r24
	
		break;
     6f8:	08 95       	ret
	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
}
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
 switch(checker){
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	c1 f4       	brne	.+48     	; 0x72e <Button+0x7a>

	case 0x01:
		edit_hour ^=0x01;
     6fe:	90 91 8f 01 	lds	r25, 0x018F
     702:	98 27       	eor	r25, r24
     704:	90 93 8f 01 	sts	0x018F, r25
		BARAGRAPH ^=( 1 << 0 );
     708:	90 91 5c 01 	lds	r25, 0x015C
     70c:	89 27       	eor	r24, r25
     70e:	80 93 5c 01 	sts	0x015C, r24
     712:	08 95       	ret
		break;
    
	case 0x02:
    		edit_minutes ^=0x01;
     714:	20 91 73 01 	lds	r18, 0x0173
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	92 27       	eor	r25, r18
     71c:	90 93 73 01 	sts	0x0173, r25
		BARAGRAPH ^= ( 1 << 1);
     720:	90 91 5c 01 	lds	r25, 0x015C
     724:	89 27       	eor	r24, r25
     726:	80 93 5c 01 	sts	0x015C, r24
	

		break;
     72a:	08 95       	ret
     72c:	08 95       	ret
     72e:	08 95       	ret

00000730 <encoder>:
}
/******************************************encoder************************/
void encoder(){


 OE1 = encoder1;
     730:	30 91 59 01 	lds	r19, 0x0159
     734:	30 93 5b 01 	sts	0x015B, r19
  OE2 = encoder2;
     738:	20 91 58 01 	lds	r18, 0x0158
     73c:	20 93 5a 01 	sts	0x015A, r18

  

  encoder1 =  (spdr_to_encoder & 0x03);
     740:	80 91 7c 01 	lds	r24, 0x017C
     744:	90 91 7d 01 	lds	r25, 0x017D
     748:	48 2f       	mov	r20, r24
     74a:	43 70       	andi	r20, 0x03	; 3
     74c:	40 93 59 01 	sts	0x0159, r20
  encoder2 = ((spdr_to_encoder& 0x0C) >> 2);
     750:	8c 70       	andi	r24, 0x0C	; 12
     752:	99 27       	eor	r25, r25
     754:	96 95       	lsr	r25
     756:	87 95       	ror	r24
     758:	96 95       	lsr	r25
     75a:	87 95       	ror	r24
     75c:	98 2f       	mov	r25, r24
     75e:	80 93 58 01 	sts	0x0158, r24



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
     762:	34 17       	cp	r19, r20
     764:	21 f0       	breq	.+8      	; 0x76e <encoder+0x3e>
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     766:	31 30       	cpi	r19, 0x01	; 1
     768:	41 f1       	breq	.+80     	; 0x7ba <encoder+0x8a>
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     76a:	32 30       	cpi	r19, 0x02	; 2
     76c:	49 f0       	breq	.+18     	; 0x780 <encoder+0x50>
    	

	}
  }
/********************************************************/
  if(encoder2 != OE2){
     76e:	29 17       	cp	r18, r25
     770:	31 f0       	breq	.+12     	; 0x77e <encoder+0x4e>
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     772:	21 30       	cpi	r18, 0x01	; 1
     774:	b1 f0       	breq	.+44     	; 0x7a2 <encoder+0x72>
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
     776:	22 30       	cpi	r18, 0x02	; 2
     778:	11 f4       	brne	.+4      	; 0x77e <encoder+0x4e>
     77a:	93 30       	cpi	r25, 0x03	; 3
     77c:	79 f1       	breq	.+94     	; 0x7dc <encoder+0xac>
     77e:	08 95       	ret
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     780:	43 30       	cpi	r20, 0x03	; 3
     782:	a9 f7       	brne	.-22     	; 0x76e <encoder+0x3e>
		if(edit_hour & edit_minutes){    	
     784:	80 91 8f 01 	lds	r24, 0x018F
     788:	30 91 73 01 	lds	r19, 0x0173
     78c:	43 2f       	mov	r20, r19
     78e:	48 23       	and	r20, r24
     790:	71 f7       	brne	.-36     	; 0x76e <encoder+0x3e>
		}
	  	else if (edit_hour){
     792:	88 23       	and	r24, r24
     794:	69 f1       	breq	.+90     	; 0x7f0 <encoder+0xc0>
	    	hours=hours-1;
     796:	80 91 25 01 	lds	r24, 0x0125
     79a:	81 50       	subi	r24, 0x01	; 1
     79c:	80 93 25 01 	sts	0x0125, r24
     7a0:	e6 cf       	rjmp	.-52     	; 0x76e <encoder+0x3e>

	}
  }
/********************************************************/
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     7a2:	93 30       	cpi	r25, 0x03	; 3
     7a4:	61 f7       	brne	.-40     	; 0x77e <encoder+0x4e>
	OCR3A=OCR3A+50;
     7a6:	80 91 86 00 	lds	r24, 0x0086
     7aa:	90 91 87 00 	lds	r25, 0x0087
     7ae:	c2 96       	adiw	r24, 0x32	; 50
     7b0:	90 93 87 00 	sts	0x0087, r25
     7b4:	80 93 86 00 	sts	0x0086, r24
     7b8:	08 95       	ret



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     7ba:	43 30       	cpi	r20, 0x03	; 3
     7bc:	c1 f6       	brne	.-80     	; 0x76e <encoder+0x3e>
  
	if(edit_hour & edit_minutes){    	
     7be:	80 91 8f 01 	lds	r24, 0x018F
     7c2:	30 91 73 01 	lds	r19, 0x0173
     7c6:	43 2f       	mov	r20, r19
     7c8:	48 23       	and	r20, r24
     7ca:	89 f6       	brne	.-94     	; 0x76e <encoder+0x3e>
	}
	  	else if (edit_hour){
     7cc:	88 23       	and	r24, r24
     7ce:	c9 f0       	breq	.+50     	; 0x802 <encoder+0xd2>
	    	hours=hours+1;
     7d0:	80 91 25 01 	lds	r24, 0x0125
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 93 25 01 	sts	0x0125, r24
     7da:	c9 cf       	rjmp	.-110    	; 0x76e <encoder+0x3e>
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
	OCR3A=OCR3A-50;
     7dc:	80 91 86 00 	lds	r24, 0x0086
     7e0:	90 91 87 00 	lds	r25, 0x0087
     7e4:	c2 97       	sbiw	r24, 0x32	; 50
     7e6:	90 93 87 00 	sts	0x0087, r25
     7ea:	80 93 86 00 	sts	0x0086, r24
     7ee:	08 95       	ret
		if(edit_hour & edit_minutes){    	
		}
	  	else if (edit_hour){
	    	hours=hours-1;
		}
	  	else if (edit_minutes){
     7f0:	33 23       	and	r19, r19
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <encoder+0xc6>
     7f4:	bc cf       	rjmp	.-136    	; 0x76e <encoder+0x3e>
	    	minutes=minutes-1;
     7f6:	80 91 56 01 	lds	r24, 0x0156
     7fa:	81 50       	subi	r24, 0x01	; 1
     7fc:	80 93 56 01 	sts	0x0156, r24
     800:	b6 cf       	rjmp	.-148    	; 0x76e <encoder+0x3e>
	if(edit_hour & edit_minutes){    	
	}
	  	else if (edit_hour){
	    	hours=hours+1;
		}
	  	else if (edit_minutes){
     802:	33 23       	and	r19, r19
     804:	09 f4       	brne	.+2      	; 0x808 <encoder+0xd8>
     806:	b3 cf       	rjmp	.-154    	; 0x76e <encoder+0x3e>
	    	minutes=minutes+1;
     808:	80 91 56 01 	lds	r24, 0x0156
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	80 93 56 01 	sts	0x0156, r24
     812:	ad cf       	rjmp	.-166    	; 0x76e <encoder+0x3e>

00000814 <checker>:


}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
     814:	80 91 57 01 	lds	r24, 0x0157
     818:	8c 33       	cpi	r24, 0x3C	; 60
     81a:	b1 f0       	breq	.+44     	; 0x848 <checker+0x34>
     81c:	80 91 56 01 	lds	r24, 0x0156
	sec=0;
	minutes++;

}

if(minutes==60){
     820:	8c 33       	cpi	r24, 0x3C	; 60
     822:	d9 f0       	breq	.+54     	; 0x85a <checker+0x46>
     824:	80 91 25 01 	lds	r24, 0x0125
	minutes=0;
	hours++;

}

if(hours==13){
     828:	8d 30       	cpi	r24, 0x0D	; 13
     82a:	01 f1       	breq	.+64     	; 0x86c <checker+0x58>

if(vol_n <0){
vol_n=0;
}

if( vol_n >2000){
     82c:	80 91 20 01 	lds	r24, 0x0120
     830:	90 91 21 01 	lds	r25, 0x0121
     834:	81 3d       	cpi	r24, 0xD1	; 209
     836:	97 40       	sbci	r25, 0x07	; 7
     838:	30 f0       	brcs	.+12     	; 0x846 <checker+0x32>
vol_n=2000;
     83a:	80 ed       	ldi	r24, 0xD0	; 208
     83c:	97 e0       	ldi	r25, 0x07	; 7
     83e:	90 93 21 01 	sts	0x0121, r25
     842:	80 93 20 01 	sts	0x0120, r24
     846:	08 95       	ret

}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
	sec=0;
     848:	10 92 57 01 	sts	0x0157, r1
	minutes++;
     84c:	80 91 56 01 	lds	r24, 0x0156
     850:	8f 5f       	subi	r24, 0xFF	; 255
     852:	80 93 56 01 	sts	0x0156, r24

}

if(minutes==60){
     856:	8c 33       	cpi	r24, 0x3C	; 60
     858:	29 f7       	brne	.-54     	; 0x824 <checker+0x10>

	minutes=0;
     85a:	10 92 56 01 	sts	0x0156, r1
	hours++;
     85e:	80 91 25 01 	lds	r24, 0x0125
     862:	8f 5f       	subi	r24, 0xFF	; 255
     864:	80 93 25 01 	sts	0x0125, r24

}

if(hours==13){
     868:	8d 30       	cpi	r24, 0x0D	; 13
     86a:	01 f7       	brne	.-64     	; 0x82c <checker+0x18>
	hours=1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 25 01 	sts	0x0125, r24
     872:	dc cf       	rjmp	.-72     	; 0x82c <checker+0x18>

00000874 <alarm_check>:

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     874:	90 91 25 01 	lds	r25, 0x0125
     878:	80 91 24 01 	lds	r24, 0x0124
     87c:	98 17       	cp	r25, r24
     87e:	19 f0       	breq	.+6      	; 0x886 <alarm_check+0x12>
	alarmON=1;
}

else{

	alarmON=0;
     880:	10 92 55 01 	sts	0x0155, r1
     884:	08 95       	ret

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     886:	90 91 56 01 	lds	r25, 0x0156
     88a:	80 91 23 01 	lds	r24, 0x0123
     88e:	98 13       	cpse	r25, r24
     890:	f7 cf       	rjmp	.-18     	; 0x880 <alarm_check+0xc>

	alarmON=1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 55 01 	sts	0x0155, r24
     898:	08 95       	ret

0000089a <lcd_control>:

}
/**************************LCD control***********************/
void lcd_control(){

if(strcmp(lcd_now,lcd_old)){
     89a:	6f e7       	ldi	r22, 0x7F	; 127
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	81 e6       	ldi	r24, 0x61	; 97
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 0f 14 	call	0x281e	; 0x281e <strcmp>
     8a6:	89 2b       	or	r24, r25
     8a8:	09 f4       	brne	.+2      	; 0x8ac <lcd_control+0x12>
     8aa:	08 95       	ret
	strcpy(lcd_old,lcd_now);
     8ac:	61 e6       	ldi	r22, 0x61	; 97
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	8f e7       	ldi	r24, 0x7F	; 127
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 18 14 	call	0x2830	; 0x2830 <strcpy>
	clear_display();
     8b8:	0e 94 b4 10 	call	0x2168	; 0x2168 <clear_display>
	string2lcd(lcd_now);
     8bc:	81 e6       	ldi	r24, 0x61	; 97
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <string2lcd>

000008c4 <__vector_10>:

}

}
/*************************************************************TIMER 2**********************/
ISR(TIMER2_OVF_vect){
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1

}
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_21>:

/************************************ADC***********************/
ISR(ADC_vect){
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	8f 93       	push	r24
     8e4:	9f 93       	push	r25

adcr=ADC;
     8e6:	84 b1       	in	r24, 0x04	; 4
     8e8:	95 b1       	in	r25, 0x05	; 5
     8ea:	80 93 22 01 	sts	0x0122, r24
}
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <__vector_12>:

/***********************************TIMER 1 **********************/
ISR(TIMER1_COMPA_vect){
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	0b b6       	in	r0, 0x3b	; 59
     908:	0f 92       	push	r0
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31

PORTD ^=ALARM_PIN;
     922:	82 b3       	in	r24, 0x12	; 18
     924:	80 58       	subi	r24, 0x80	; 128
     926:	82 bb       	out	0x12, r24	; 18
if(beat >= max_beat) {   //if we've played the note long enough
     928:	20 91 79 01 	lds	r18, 0x0179
     92c:	30 91 7a 01 	lds	r19, 0x017A
     930:	80 91 76 01 	lds	r24, 0x0176
     934:	90 91 77 01 	lds	r25, 0x0177
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	58 f0       	brcs	.+22     	; 0x954 <__vector_12+0x58>
    notes++;               //move on to the next note
     93e:	80 91 74 01 	lds	r24, 0x0174
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	80 93 74 01 	sts	0x0174, r24
    play_song(song, notes);//and play it
     948:	60 91 74 01 	lds	r22, 0x0174
     94c:	80 91 75 01 	lds	r24, 0x0175
     950:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <play_song>
  }

}
     954:	ff 91       	pop	r31
     956:	ef 91       	pop	r30
     958:	bf 91       	pop	r27
     95a:	af 91       	pop	r26
     95c:	9f 91       	pop	r25
     95e:	8f 91       	pop	r24
     960:	7f 91       	pop	r23
     962:	6f 91       	pop	r22
     964:	5f 91       	pop	r21
     966:	4f 91       	pop	r20
     968:	3f 91       	pop	r19
     96a:	2f 91       	pop	r18
     96c:	0f 90       	pop	r0
     96e:	0b be       	out	0x3b, r0	; 59
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_16>:
/**********************************************************TIMER 0 *************************************/
ISR(TIMER0_OVF_vect){
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	2f 93       	push	r18
     98a:	3f 93       	push	r19
     98c:	4f 93       	push	r20
     98e:	5f 93       	push	r21
     990:	6f 93       	push	r22
     992:	7f 93       	push	r23
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
     998:	af 93       	push	r26
     99a:	bf 93       	push	r27
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31




/**********************************seconds*******************************/
counter++;
     9a0:	80 91 5f 01 	lds	r24, 0x015F
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	80 93 5f 01 	sts	0x015F, r24
if(counter % 8 == 0) {
     9aa:	98 2f       	mov	r25, r24
     9ac:	97 70       	andi	r25, 0x07	; 7
     9ae:	51 f4       	brne	.+20     	; 0x9c4 <__vector_16+0x4a>
    //for note duration (64th notes) 
    beat++;
     9b0:	20 91 79 01 	lds	r18, 0x0179
     9b4:	30 91 7a 01 	lds	r19, 0x017A
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	30 93 7a 01 	sts	0x017A, r19
     9c0:	20 93 79 01 	sts	0x0179, r18
  }  

if((counter %128)==0) { 
     9c4:	98 2f       	mov	r25, r24
     9c6:	9f 77       	andi	r25, 0x7F	; 127
     9c8:	09 f4       	brne	.+2      	; 0x9cc <__vector_16+0x52>
     9ca:	6f c0       	rjmp	.+222    	; 0xaaa <__vector_16+0x130>
sec++;
//ADCSRA |= (1<<ADSC);

}

if((counter %132)==0){
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	84 38       	cpi	r24, 0x84	; 132
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <__vector_16+0x5a>
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	2c e7       	ldi	r18, 0x7C	; 124
     9d6:	92 9f       	mul	r25, r18
     9d8:	80 0d       	add	r24, r0
     9da:	11 24       	eor	r1, r1
     9dc:	81 11       	cpse	r24, r1
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <__vector_16+0x68>
ADCSRA |= (1<<ADSC);
     9e0:	36 9a       	sbi	0x06, 6	; 6

}
/******************************************************************BUTTONS*****************************************************************************/
 /*enabling button to read */
  DDRA = 0x00; //make PORTA as an input
     9e2:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF; // pull ups
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	8b bb       	out	0x1b, r24	; 27
  PORTB=0x70;
     9e8:	80 e7       	ldi	r24, 0x70	; 112
     9ea:	88 bb       	out	0x18, r24	; 24
     9ec:	89 ef       	ldi	r24, 0xF9	; 249
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <__vector_16+0x76>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <__vector_16+0x7c>
     9f6:	00 00       	nop

  _delay_ms(1); 

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
     9f8:	89 b3       	in	r24, 0x19	; 25
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	20 91 27 01 	lds	r18, 0x0127
     a00:	30 91 28 01 	lds	r19, 0x0128
     a04:	82 17       	cp	r24, r18
     a06:	93 07       	cpc	r25, r19
     a08:	09 f4       	brne	.+2      	; 0xa0c <__vector_16+0x92>
     a0a:	62 c0       	rjmp	.+196    	; 0xad0 <__vector_16+0x156>
    if(nothing){
     a0c:	80 91 26 01 	lds	r24, 0x0126
     a10:	81 11       	cpse	r24, r1
     a12:	62 c0       	rjmp	.+196    	; 0xad8 <__vector_16+0x15e>
        
	Button();
        nothing = 0; 
    }
    else if(PINA == SavedPORTA_Value){ //do nothing
     a14:	89 b3       	in	r24, 0x19	; 25
     a16:	20 91 5d 01 	lds	r18, 0x015D
     a1a:	30 91 5e 01 	lds	r19, 0x015E
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	82 17       	cp	r24, r18
     a22:	93 07       	cpc	r25, r19
     a24:	39 f0       	breq	.+14     	; 0xa34 <__vector_16+0xba>
      
    }
    else if(PINA != SavedPORTA_Value){
     a26:	89 b3       	in	r24, 0x19	; 25
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	28 17       	cp	r18, r24
     a2c:	39 07       	cpc	r19, r25
     a2e:	11 f0       	breq	.+4      	; 0xa34 <__vector_16+0xba>
   Button();
     a30:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Button>
      
	
    }

    SavedPORTA_Value = PINA;
     a34:	89 b3       	in	r24, 0x19	; 25
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 5e 01 	sts	0x015E, r25
     a3c:	80 93 5d 01 	sts	0x015D, r24
  }
  else {
    nothing = 1;  
  }
 
	DDRA = 0xFF; 
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	8a bb       	out	0x1a, r24	; 26
	PORTB =0x70;  
     a44:	80 e7       	ldi	r24, 0x70	; 112
     a46:	88 bb       	out	0x18, r24	; 24

/******************************************start the ISP part, where seding data to SPDR*************************************************************/

	

	PORTE =0x00;
     a48:	13 b8       	out	0x03, r1	; 3
	PORTE =0x80;  
     a4a:	80 e8       	ldi	r24, 0x80	; 128
     a4c:	83 b9       	out	0x03, r24	; 3
     a4e:	83 ef       	ldi	r24, 0xF3	; 243
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <__vector_16+0xd8>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <__vector_16+0xde>
     a58:	00 00       	nop
 
	_delay_ms(2);


  SPDR = BARAGRAPH;		//SPDR SEND Data so it can receive, and vice versa 
     a5a:	80 91 5c 01 	lds	r24, 0x015C
     a5e:	8f b9       	out	0x0f, r24	; 15
  spdr_to_encoder = SPDR;
     a60:	8f b1       	in	r24, 0x0f	; 15
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 7d 01 	sts	0x017D, r25
     a68:	80 93 7c 01 	sts	0x017C, r24

  
  while (bit_is_clear(SPSR, SPIF)){};
     a6c:	77 9b       	sbis	0x0e, 7	; 14
     a6e:	fe cf       	rjmp	.-4      	; 0xa6c <__vector_16+0xf2>


			//low high
  PORTE =   0xC0 ;
     a70:	80 ec       	ldi	r24, 0xC0	; 192
     a72:	83 b9       	out	0x03, r24	; 3
  PORTE =   0x40;
     a74:	80 e4       	ldi	r24, 0x40	; 64
     a76:	83 b9       	out	0x03, r24	; 3

 
  PORTB =  0x71;
     a78:	81 e7       	ldi	r24, 0x71	; 113
     a7a:	88 bb       	out	0x18, r24	; 24
  PORTB = 0x70;
     a7c:	80 e7       	ldi	r24, 0x70	; 112
     a7e:	88 bb       	out	0x18, r24	; 24

/**************************************************END The ISP Part*********************************************************************************/
  
/****************************************************** ENCODER************************************************************/
  encoder();
     a80:	0e 94 98 03 	call	0x730	; 0x730 <encoder>




}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0b be       	out	0x3b, r0	; 59
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti
  }  

if((counter %128)==0) { 
//OCR3A=vol_n;

PORTB=decoder_select[4];
     aaa:	80 91 04 01 	lds	r24, 0x0104
     aae:	88 bb       	out	0x18, r24	; 24
PORTA=0xFC;
     ab0:	8c ef       	ldi	r24, 0xFC	; 252
     ab2:	8b bb       	out	0x1b, r24	; 27
     ab4:	87 ea       	ldi	r24, 0xA7	; 167
     ab6:	91 e6       	ldi	r25, 0x61	; 97
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <__vector_16+0x13e>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <__vector_16+0x144>
     abe:	00 00       	nop
_delay_ms(100);
sec++;
     ac0:	80 91 57 01 	lds	r24, 0x0157
     ac4:	8f 5f       	subi	r24, 0xFF	; 255
     ac6:	80 93 57 01 	sts	0x0157, r24
     aca:	80 91 5f 01 	lds	r24, 0x015F
     ace:	7e cf       	rjmp	.-260    	; 0x9cc <__vector_16+0x52>
    }

    SavedPORTA_Value = PINA;
  }
  else {
    nothing = 1;  
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 26 01 	sts	0x0126, r24
     ad6:	b4 cf       	rjmp	.-152    	; 0xa40 <__vector_16+0xc6>

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
    if(nothing){
        
	Button();
     ad8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Button>
        nothing = 0; 
     adc:	10 92 26 01 	sts	0x0126, r1
     ae0:	a9 cf       	rjmp	.-174    	; 0xa34 <__vector_16+0xba>

00000ae2 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ae2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ae4:	10 92 7a 01 	sts	0x017A, r1
     ae8:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	90 93 77 01 	sts	0x0177, r25
     af2:	80 93 76 01 	sts	0x0176, r24
     af6:	08 95       	ret

00000af8 <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     af8:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     afa:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     afc:	10 92 7a 01 	sts	0x017A, r1
     b00:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;  //set the max beat
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	30 93 77 01 	sts	0x0177, r19
     b0a:	20 93 76 01 	sts	0x0176, r18
  switch (octave) {
     b0e:	84 2f       	mov	r24, r20
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	89 30       	cpi	r24, 0x09	; 9
     b14:	91 05       	cpc	r25, r1
     b16:	18 f0       	brcs	.+6      	; 0xb1e <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     b18:	1b bc       	out	0x2b, r1	; 43
     b1a:	1a bc       	out	0x2a, r1	; 42
     b1c:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     b1e:	8a 5b       	subi	r24, 0xBA	; 186
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     b24:	85 2f       	mov	r24, r21
     b26:	55 0f       	add	r21, r21
     b28:	99 0b       	sbc	r25, r25
     b2a:	aa 0b       	sbc	r26, r26
     b2c:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     b2e:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     b32:	fc 01       	movw	r30, r24
     b34:	e1 54       	subi	r30, 0x41	; 65
     b36:	f1 09       	sbc	r31, r1
     b38:	e7 30       	cpi	r30, 0x07	; 7
     b3a:	f1 05       	cpc	r31, r1
     b3c:	78 f7       	brcc	.-34     	; 0xb1c <play_note+0x24>
     b3e:	e1 5b       	subi	r30, 0xB1	; 177
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     b46:	fc 01       	movw	r30, r24
     b48:	e1 54       	subi	r30, 0x41	; 65
     b4a:	f1 09       	sbc	r31, r1
     b4c:	e7 30       	cpi	r30, 0x07	; 7
     b4e:	f1 05       	cpc	r31, r1
     b50:	28 f7       	brcc	.-54     	; 0xb1c <play_note+0x24>
     b52:	ea 5a       	subi	r30, 0xAA	; 170
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     b5a:	fc 01       	movw	r30, r24
     b5c:	e1 54       	subi	r30, 0x41	; 65
     b5e:	f1 09       	sbc	r31, r1
     b60:	e7 30       	cpi	r30, 0x07	; 7
     b62:	f1 05       	cpc	r31, r1
     b64:	d8 f6       	brcc	.-74     	; 0xb1c <play_note+0x24>
     b66:	e3 5a       	subi	r30, 0xA3	; 163
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     b6e:	fc 01       	movw	r30, r24
     b70:	e1 54       	subi	r30, 0x41	; 65
     b72:	f1 09       	sbc	r31, r1
     b74:	e7 30       	cpi	r30, 0x07	; 7
     b76:	f1 05       	cpc	r31, r1
     b78:	88 f6       	brcc	.-94     	; 0xb1c <play_note+0x24>
     b7a:	ec 59       	subi	r30, 0x9C	; 156
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     b82:	fc 01       	movw	r30, r24
     b84:	e1 54       	subi	r30, 0x41	; 65
     b86:	f1 09       	sbc	r31, r1
     b88:	e7 30       	cpi	r30, 0x07	; 7
     b8a:	f1 05       	cpc	r31, r1
     b8c:	38 f6       	brcc	.-114    	; 0xb1c <play_note+0x24>
     b8e:	e5 59       	subi	r30, 0x95	; 149
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     b96:	fc 01       	movw	r30, r24
     b98:	e1 54       	subi	r30, 0x41	; 65
     b9a:	f1 09       	sbc	r31, r1
     b9c:	e7 30       	cpi	r30, 0x07	; 7
     b9e:	f1 05       	cpc	r31, r1
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <play_note+0xac>
     ba2:	bc cf       	rjmp	.-136    	; 0xb1c <play_note+0x24>
     ba4:	ee 58       	subi	r30, 0x8E	; 142
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     bac:	fc 01       	movw	r30, r24
     bae:	e1 54       	subi	r30, 0x41	; 65
     bb0:	f1 09       	sbc	r31, r1
     bb2:	e7 30       	cpi	r30, 0x07	; 7
     bb4:	f1 05       	cpc	r31, r1
     bb6:	08 f0       	brcs	.+2      	; 0xbba <play_note+0xc2>
     bb8:	b1 cf       	rjmp	.-158    	; 0xb1c <play_note+0x24>
     bba:	e7 58       	subi	r30, 0x87	; 135
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     bc2:	fc 01       	movw	r30, r24
     bc4:	e1 54       	subi	r30, 0x41	; 65
     bc6:	f1 09       	sbc	r31, r1
     bc8:	e7 30       	cpi	r30, 0x07	; 7
     bca:	f1 05       	cpc	r31, r1
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <play_note+0xd8>
     bce:	a6 cf       	rjmp	.-180    	; 0xb1c <play_note+0x24>
     bd0:	e0 58       	subi	r30, 0x80	; 128
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     bd8:	fc 01       	movw	r30, r24
     bda:	e1 54       	subi	r30, 0x41	; 65
     bdc:	f1 09       	sbc	r31, r1
     bde:	e7 30       	cpi	r30, 0x07	; 7
     be0:	f1 05       	cpc	r31, r1
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <play_note+0xee>
     be4:	9b cf       	rjmp	.-202    	; 0xb1c <play_note+0x24>
     be6:	e9 57       	subi	r30, 0x79	; 121
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     bee:	88 e5       	ldi	r24, 0x58	; 88
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9b bd       	out	0x2b, r25	; 43
     bf4:	8a bd       	out	0x2a, r24	; 42
	break;
     bf6:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     bf8:	66 23       	and	r22, r22
     bfa:	09 f4       	brne	.+2      	; 0xbfe <play_note+0x106>
     bfc:	0f c2       	rjmp	.+1054   	; 0x101c <play_note+0x524>
     bfe:	83 e6       	ldi	r24, 0x63	; 99
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9b bd       	out	0x2b, r25	; 43
     c04:	8a bd       	out	0x2a, r24	; 42
     c06:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     c08:	66 23       	and	r22, r22
     c0a:	09 f4       	brne	.+2      	; 0xc0e <play_note+0x116>
     c0c:	11 c2       	rjmp	.+1058   	; 0x1030 <play_note+0x538>
     c0e:	8f e6       	ldi	r24, 0x6F	; 111
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9b bd       	out	0x2b, r25	; 43
     c14:	8a bd       	out	0x2a, r24	; 42
     c16:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     c18:	86 e7       	ldi	r24, 0x76	; 118
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	9b bd       	out	0x2b, r25	; 43
     c1e:	8a bd       	out	0x2a, r24	; 42
	break;
     c20:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     c22:	66 23       	and	r22, r22
     c24:	09 f4       	brne	.+2      	; 0xc28 <play_note+0x130>
     c26:	ff c1       	rjmp	.+1022   	; 0x1026 <play_note+0x52e>
     c28:	8a e4       	ldi	r24, 0x4A	; 74
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9b bd       	out	0x2b, r25	; 43
     c2e:	8a bd       	out	0x2a, r24	; 42
     c30:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     c32:	66 23       	and	r22, r22
     c34:	09 f4       	brne	.+2      	; 0xc38 <play_note+0x140>
     c36:	01 c2       	rjmp	.+1026   	; 0x103a <play_note+0x542>
     c38:	83 e5       	ldi	r24, 0x53	; 83
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9b bd       	out	0x2b, r25	; 43
     c3e:	8a bd       	out	0x2a, r24	; 42
     c40:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     c42:	66 23       	and	r22, r22
     c44:	09 f4       	brne	.+2      	; 0xc48 <play_note+0x150>
     c46:	b8 c1       	rjmp	.+880    	; 0xfb8 <play_note+0x4c0>
     c48:	82 e4       	ldi	r24, 0x42	; 66
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9b bd       	out	0x2b, r25	; 43
     c4e:	8a bd       	out	0x2a, r24	; 42
     c50:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     c52:	81 eb       	ldi	r24, 0xB1	; 177
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9b bd       	out	0x2b, r25	; 43
     c58:	8a bd       	out	0x2a, r24	; 42
	break;
     c5a:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     c5c:	66 23       	and	r22, r22
     c5e:	09 f4       	brne	.+2      	; 0xc62 <play_note+0x16a>
     c60:	d3 c1       	rjmp	.+934    	; 0x1008 <play_note+0x510>
     c62:	85 e8       	ldi	r24, 0x85	; 133
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9b bd       	out	0x2b, r25	; 43
     c68:	8a bd       	out	0x2a, r24	; 42
     c6a:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     c6c:	66 23       	and	r22, r22
     c6e:	09 f4       	brne	.+2      	; 0xc72 <play_note+0x17a>
     c70:	c1 c1       	rjmp	.+898    	; 0xff4 <play_note+0x4fc>
     c72:	85 e9       	ldi	r24, 0x95	; 149
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9b bd       	out	0x2b, r25	; 43
     c78:	8a bd       	out	0x2a, r24	; 42
     c7a:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     c7c:	66 23       	and	r22, r22
     c7e:	09 f4       	brne	.+2      	; 0xc82 <play_note+0x18a>
     c80:	be c1       	rjmp	.+892    	; 0xffe <play_note+0x506>
     c82:	87 ea       	ldi	r24, 0xA7	; 167
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9b bd       	out	0x2b, r25	; 43
     c88:	8a bd       	out	0x2a, r24	; 42
     c8a:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     c8c:	84 e6       	ldi	r24, 0x64	; 100
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	9b bd       	out	0x2b, r25	; 43
     c92:	8a bd       	out	0x2a, r24	; 42
	break;
     c94:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     c96:	66 23       	and	r22, r22
     c98:	09 f4       	brne	.+2      	; 0xc9c <play_note+0x1a4>
     c9a:	bb c1       	rjmp	.+886    	; 0x1012 <play_note+0x51a>
     c9c:	80 ee       	ldi	r24, 0xE0	; 224
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9b bd       	out	0x2b, r25	; 43
     ca2:	8a bd       	out	0x2a, r24	; 42
     ca4:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     ca6:	8d ee       	ldi	r24, 0xED	; 237
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9b bd       	out	0x2b, r25	; 43
     cac:	8a bd       	out	0x2a, r24	; 42
	break;
     cae:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     cb0:	66 23       	and	r22, r22
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <play_note+0x1be>
     cb4:	8b c1       	rjmp	.+790    	; 0xfcc <play_note+0x4d4>
     cb6:	87 ec       	ldi	r24, 0xC7	; 199
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9b bd       	out	0x2b, r25	; 43
     cbc:	8a bd       	out	0x2a, r24	; 42
     cbe:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     cc0:	66 23       	and	r22, r22
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <play_note+0x1ce>
     cc4:	74 c1       	rjmp	.+744    	; 0xfae <play_note+0x4b6>
     cc6:	80 e9       	ldi	r24, 0x90	; 144
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	9b bd       	out	0x2b, r25	; 43
     ccc:	8a bd       	out	0x2a, r24	; 42
     cce:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     cd0:	66 23       	and	r22, r22
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <play_note+0x1de>
     cd4:	cb c1       	rjmp	.+918    	; 0x106c <play_note+0x574>
     cd6:	84 e8       	ldi	r24, 0x84	; 132
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	9b bd       	out	0x2b, r25	; 43
     cdc:	8a bd       	out	0x2a, r24	; 42
     cde:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     ce0:	66 23       	and	r22, r22
     ce2:	09 f4       	brne	.+2      	; 0xce6 <play_note+0x1ee>
     ce4:	af c1       	rjmp	.+862    	; 0x1044 <play_note+0x54c>
     ce6:	8b e2       	ldi	r24, 0x2B	; 43
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	9b bd       	out	0x2b, r25	; 43
     cec:	8a bd       	out	0x2a, r24	; 42
     cee:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     cf0:	66 23       	and	r22, r22
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <play_note+0x1fe>
     cf4:	b1 c1       	rjmp	.+866    	; 0x1058 <play_note+0x560>
     cf6:	82 ea       	ldi	r24, 0xA2	; 162
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	9b bd       	out	0x2b, r25	; 43
     cfc:	8a bd       	out	0x2a, r24	; 42
     cfe:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     d00:	8c ed       	ldi	r24, 0xDC	; 220
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	9b bd       	out	0x2b, r25	; 43
     d06:	8a bd       	out	0x2a, r24	; 42
	break;
     d08:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     d0a:	66 23       	and	r22, r22
     d0c:	09 f4       	brne	.+2      	; 0xd10 <play_note+0x218>
     d0e:	59 c1       	rjmp	.+690    	; 0xfc2 <play_note+0x4ca>
     d10:	87 e1       	ldi	r24, 0x17	; 23
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	9b bd       	out	0x2b, r25	; 43
     d16:	8a bd       	out	0x2a, r24	; 42
     d18:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     d1a:	66 23       	and	r22, r22
     d1c:	09 f4       	brne	.+2      	; 0xd20 <play_note+0x228>
     d1e:	b0 c1       	rjmp	.+864    	; 0x1080 <play_note+0x588>
     d20:	88 e5       	ldi	r24, 0x58	; 88
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	9b bd       	out	0x2b, r25	; 43
     d26:	8a bd       	out	0x2a, r24	; 42
     d28:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     d2a:	8a ec       	ldi	r24, 0xCA	; 202
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	9b bd       	out	0x2b, r25	; 43
     d30:	8a bd       	out	0x2a, r24	; 42
	break;
     d32:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     d34:	66 23       	and	r22, r22
     d36:	09 f4       	brne	.+2      	; 0xd3a <play_note+0x242>
     d38:	35 c1       	rjmp	.+618    	; 0xfa4 <play_note+0x4ac>
     d3a:	86 e4       	ldi	r24, 0x46	; 70
     d3c:	96 e0       	ldi	r25, 0x06	; 6
     d3e:	9b bd       	out	0x2b, r25	; 43
     d40:	8a bd       	out	0x2a, r24	; 42
     d42:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     d44:	66 23       	and	r22, r22
     d46:	09 f4       	brne	.+2      	; 0xd4a <play_note+0x252>
     d48:	82 c1       	rjmp	.+772    	; 0x104e <play_note+0x556>
     d4a:	8a e0       	ldi	r24, 0x0A	; 10
     d4c:	97 e0       	ldi	r25, 0x07	; 7
     d4e:	9b bd       	out	0x2b, r25	; 43
     d50:	8a bd       	out	0x2a, r24	; 42
     d52:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     d54:	86 e9       	ldi	r24, 0x96	; 150
     d56:	95 e0       	ldi	r25, 0x05	; 5
     d58:	9b bd       	out	0x2b, r25	; 43
     d5a:	8a bd       	out	0x2a, r24	; 42
	break;
     d5c:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     d5e:	8a eb       	ldi	r24, 0xBA	; 186
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	9b bd       	out	0x2b, r25	; 43
     d64:	8a bd       	out	0x2a, r24	; 42
	break;
     d66:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     d68:	66 23       	and	r22, r22
     d6a:	09 f4       	brne	.+2      	; 0xd6e <play_note+0x276>
     d6c:	7a c1       	rjmp	.+756    	; 0x1062 <play_note+0x56a>
     d6e:	81 ec       	ldi	r24, 0xC1	; 193
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	9b bd       	out	0x2b, r25	; 43
     d74:	8a bd       	out	0x2a, r24	; 42
     d76:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     d78:	66 23       	and	r22, r22
     d7a:	09 f4       	brne	.+2      	; 0xd7e <play_note+0x286>
     d7c:	7c c1       	rjmp	.+760    	; 0x1076 <play_note+0x57e>
     d7e:	8b e0       	ldi	r24, 0x0B	; 11
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	9b bd       	out	0x2b, r25	; 43
     d84:	8a bd       	out	0x2a, r24	; 42
     d86:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     d88:	66 23       	and	r22, r22
     d8a:	09 f4       	brne	.+2      	; 0xd8e <play_note+0x296>
     d8c:	7e c1       	rjmp	.+764    	; 0x108a <play_note+0x592>
     d8e:	80 e5       	ldi	r24, 0x50	; 80
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	9b bd       	out	0x2b, r25	; 43
     d94:	8a bd       	out	0x2a, r24	; 42
     d96:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     d98:	66 23       	and	r22, r22
     d9a:	09 f4       	brne	.+2      	; 0xd9e <play_note+0x2a6>
     d9c:	ad c1       	rjmp	.+858    	; 0x10f8 <play_note+0x600>
     d9e:	82 e2       	ldi	r24, 0x22	; 34
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	9b bd       	out	0x2b, r25	; 43
     da4:	8a bd       	out	0x2a, r24	; 42
     da6:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     da8:	86 e7       	ldi	r24, 0x76	; 118
     daa:	97 e0       	ldi	r25, 0x07	; 7
     dac:	9b bd       	out	0x2b, r25	; 43
     dae:	8a bd       	out	0x2a, r24	; 42
	break;
     db0:	08 95       	ret
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     db2:	66 23       	and	r22, r22
     db4:	09 f4       	brne	.+2      	; 0xdb8 <play_note+0x2c0>
     db6:	0f c1       	rjmp	.+542    	; 0xfd6 <play_note+0x4de>
     db8:	8e ec       	ldi	r24, 0xCE	; 206
     dba:	92 e1       	ldi	r25, 0x12	; 18
     dbc:	9b bd       	out	0x2b, r25	; 43
     dbe:	8a bd       	out	0x2a, r24	; 42
     dc0:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     dc2:	66 23       	and	r22, r22
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <play_note+0x2d0>
     dc6:	7a c1       	rjmp	.+756    	; 0x10bc <play_note+0x5c4>
     dc8:	8d e1       	ldi	r24, 0x1D	; 29
     dca:	95 e1       	ldi	r25, 0x15	; 21
     dcc:	9b bd       	out	0x2b, r25	; 43
     dce:	8a bd       	out	0x2a, r24	; 42
     dd0:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     dd2:	66 23       	and	r22, r22
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <play_note+0x2e0>
     dd6:	dc c0       	rjmp	.+440    	; 0xf90 <play_note+0x498>
     dd8:	80 e6       	ldi	r24, 0x60	; 96
     dda:	98 e0       	ldi	r25, 0x08	; 8
     ddc:	9b bd       	out	0x2b, r25	; 43
     dde:	8a bd       	out	0x2a, r24	; 42
     de0:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     de2:	66 23       	and	r22, r22
     de4:	09 f4       	brne	.+2      	; 0xde8 <play_note+0x2f0>
     de6:	92 c1       	rjmp	.+804    	; 0x110c <__stack+0xd>
     de8:	80 e1       	ldi	r24, 0x10	; 16
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9b bd       	out	0x2b, r25	; 43
     dee:	8a bd       	out	0x2a, r24	; 42
     df0:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     df2:	8e e2       	ldi	r24, 0x2E	; 46
     df4:	9b e0       	ldi	r25, 0x0B	; 11
     df6:	9b bd       	out	0x2b, r25	; 43
     df8:	8a bd       	out	0x2a, r24	; 42
	break;
     dfa:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     dfc:	66 23       	and	r22, r22
     dfe:	09 f4       	brne	.+2      	; 0xe02 <play_note+0x30a>
     e00:	49 c1       	rjmp	.+658    	; 0x1094 <play_note+0x59c>
     e02:	8b e1       	ldi	r24, 0x1B	; 27
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9b bd       	out	0x2b, r25	; 43
     e08:	8a bd       	out	0x2a, r24	; 42
     e0a:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     e0c:	8c e1       	ldi	r24, 0x1C	; 28
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9b bd       	out	0x2b, r25	; 43
     e12:	8a bd       	out	0x2a, r24	; 42
	break;
     e14:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     e16:	66 23       	and	r22, r22
     e18:	09 f4       	brne	.+2      	; 0xe1c <play_note+0x324>
     e1a:	41 c1       	rjmp	.+642    	; 0x109e <play_note+0x5a6>
     e1c:	87 e0       	ldi	r24, 0x07	; 7
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9b bd       	out	0x2b, r25	; 43
     e22:	8a bd       	out	0x2a, r24	; 42
     e24:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     e26:	66 23       	and	r22, r22
     e28:	09 f4       	brne	.+2      	; 0xe2c <play_note+0x334>
     e2a:	da c0       	rjmp	.+436    	; 0xfe0 <play_note+0x4e8>
     e2c:	8b e0       	ldi	r24, 0x0B	; 11
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9b bd       	out	0x2b, r25	; 43
     e32:	8a bd       	out	0x2a, r24	; 42
     e34:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     e36:	82 e1       	ldi	r24, 0x12	; 18
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9b bd       	out	0x2b, r25	; 43
     e3c:	8a bd       	out	0x2a, r24	; 42
	break;
     e3e:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     e40:	66 23       	and	r22, r22
     e42:	09 f4       	brne	.+2      	; 0xe46 <play_note+0x34e>
     e44:	9b c0       	rjmp	.+310    	; 0xf7c <play_note+0x484>
     e46:	89 e1       	ldi	r24, 0x19	; 25
     e48:	99 e1       	ldi	r25, 0x19	; 25
     e4a:	9b bd       	out	0x2b, r25	; 43
     e4c:	8a bd       	out	0x2a, r24	; 42
     e4e:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     e50:	66 23       	and	r22, r22
     e52:	09 f4       	brne	.+2      	; 0xe56 <play_note+0x35e>
     e54:	29 c1       	rjmp	.+594    	; 0x10a8 <play_note+0x5b0>
     e56:	80 e3       	ldi	r24, 0x30	; 48
     e58:	9c e1       	ldi	r25, 0x1C	; 28
     e5a:	9b bd       	out	0x2b, r25	; 43
     e5c:	8a bd       	out	0x2a, r24	; 42
     e5e:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     e60:	8c ed       	ldi	r24, 0xDC	; 220
     e62:	9d e1       	ldi	r25, 0x1D	; 29
     e64:	9b bd       	out	0x2b, r25	; 43
     e66:	8a bd       	out	0x2a, r24	; 42
	break;
     e68:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     e6a:	8a e3       	ldi	r24, 0x3A	; 58
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9b bd       	out	0x2b, r25	; 43
     e70:	8a bd       	out	0x2a, r24	; 42
	break;
     e72:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     e74:	66 23       	and	r22, r22
     e76:	09 f4       	brne	.+2      	; 0xe7a <play_note+0x382>
     e78:	35 c1       	rjmp	.+618    	; 0x10e4 <play_note+0x5ec>
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9b bd       	out	0x2b, r25	; 43
     e80:	8a bd       	out	0x2a, r24	; 42
     e82:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     e84:	66 23       	and	r22, r22
     e86:	09 f4       	brne	.+2      	; 0xe8a <play_note+0x392>
     e88:	32 c1       	rjmp	.+612    	; 0x10ee <play_note+0x5f6>
     e8a:	84 e2       	ldi	r24, 0x24	; 36
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9b bd       	out	0x2b, r25	; 43
     e90:	8a bd       	out	0x2a, r24	; 42
     e92:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     e94:	66 23       	and	r22, r22
     e96:	09 f4       	brne	.+2      	; 0xe9a <play_note+0x3a2>
     e98:	76 c0       	rjmp	.+236    	; 0xf86 <play_note+0x48e>
     e9a:	89 e2       	ldi	r24, 0x29	; 41
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9b bd       	out	0x2b, r25	; 43
     ea0:	8a bd       	out	0x2a, r24	; 42
     ea2:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     ea4:	66 23       	and	r22, r22
     ea6:	09 f4       	brne	.+2      	; 0xeaa <play_note+0x3b2>
     ea8:	78 c0       	rjmp	.+240    	; 0xf9a <play_note+0x4a2>
     eaa:	81 e3       	ldi	r24, 0x31	; 49
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9b bd       	out	0x2b, r25	; 43
     eb0:	8a bd       	out	0x2a, r24	; 42
     eb2:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     eb4:	8b e2       	ldi	r24, 0x2B	; 43
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9b bd       	out	0x2b, r25	; 43
     eba:	8a bd       	out	0x2a, r24	; 42
	break;
     ebc:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     ebe:	66 23       	and	r22, r22
     ec0:	09 f4       	brne	.+2      	; 0xec4 <play_note+0x3cc>
     ec2:	93 c0       	rjmp	.+294    	; 0xfea <play_note+0x4f2>
     ec4:	87 e3       	ldi	r24, 0x37	; 55
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9b bd       	out	0x2b, r25	; 43
     eca:	8a bd       	out	0x2a, r24	; 42
     ecc:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     ece:	66 23       	and	r22, r22
     ed0:	09 f4       	brne	.+2      	; 0xed4 <play_note+0x3dc>
     ed2:	4f c0       	rjmp	.+158    	; 0xf72 <play_note+0x47a>
     ed4:	88 e1       	ldi	r24, 0x18	; 24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9b bd       	out	0x2b, r25	; 43
     eda:	8a bd       	out	0x2a, r24	; 42
     edc:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     ede:	66 23       	and	r22, r22
     ee0:	09 f4       	brne	.+2      	; 0xee4 <play_note+0x3ec>
     ee2:	f6 c0       	rjmp	.+492    	; 0x10d0 <play_note+0x5d8>
     ee4:	82 eb       	ldi	r24, 0xB2	; 178
     ee6:	94 e0       	ldi	r25, 0x04	; 4
     ee8:	9b bd       	out	0x2b, r25	; 43
     eea:	8a bd       	out	0x2a, r24	; 42
     eec:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     eee:	66 23       	and	r22, r22
     ef0:	09 f4       	brne	.+2      	; 0xef4 <play_note+0x3fc>
     ef2:	16 c1       	rjmp	.+556    	; 0x1120 <__stack+0x21>
     ef4:	8d e8       	ldi	r24, 0x8D	; 141
     ef6:	9a e0       	ldi	r25, 0x0A	; 10
     ef8:	9b bd       	out	0x2b, r25	; 43
     efa:	8a bd       	out	0x2a, r24	; 42
     efc:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     efe:	66 23       	and	r22, r22
     f00:	09 f4       	brne	.+2      	; 0xf04 <play_note+0x40c>
     f02:	d7 c0       	rjmp	.+430    	; 0x10b2 <play_note+0x5ba>
     f04:	86 e1       	ldi	r24, 0x16	; 22
     f06:	9e e0       	ldi	r25, 0x0E	; 14
     f08:	9b bd       	out	0x2b, r25	; 43
     f0a:	8a bd       	out	0x2a, r24	; 42
     f0c:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     f0e:	66 23       	and	r22, r22
     f10:	09 f4       	brne	.+2      	; 0xf14 <play_note+0x41c>
     f12:	f7 c0       	rjmp	.+494    	; 0x1102 <__stack+0x3>
     f14:	80 ec       	ldi	r24, 0xC0	; 192
     f16:	90 e1       	ldi	r25, 0x10	; 16
     f18:	9b bd       	out	0x2b, r25	; 43
     f1a:	8a bd       	out	0x2a, r24	; 42
     f1c:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     f1e:	66 23       	and	r22, r22
     f20:	09 f4       	brne	.+2      	; 0xf24 <play_note+0x42c>
     f22:	d1 c0       	rjmp	.+418    	; 0x10c6 <play_note+0x5ce>
     f24:	8f e2       	ldi	r24, 0x2F	; 47
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	9b bd       	out	0x2b, r25	; 43
     f2a:	8a bd       	out	0x2a, r24	; 42
     f2c:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     f2e:	66 23       	and	r22, r22
     f30:	09 f4       	brne	.+2      	; 0xf34 <play_note+0x43c>
     f32:	f1 c0       	rjmp	.+482    	; 0x1116 <__stack+0x17>
     f34:	87 e6       	ldi	r24, 0x67	; 103
     f36:	99 e0       	ldi	r25, 0x09	; 9
     f38:	9b bd       	out	0x2b, r25	; 43
     f3a:	8a bd       	out	0x2a, r24	; 42
     f3c:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     f3e:	66 23       	and	r22, r22
     f40:	09 f4       	brne	.+2      	; 0xf44 <play_note+0x44c>
     f42:	cb c0       	rjmp	.+406    	; 0x10da <play_note+0x5e2>
     f44:	8d e8       	ldi	r24, 0x8D	; 141
     f46:	9c e0       	ldi	r25, 0x0C	; 12
     f48:	9b bd       	out	0x2b, r25	; 43
     f4a:	8a bd       	out	0x2a, r24	; 42
     f4c:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     f4e:	8d e5       	ldi	r24, 0x5D	; 93
     f50:	96 e1       	ldi	r25, 0x16	; 22
     f52:	9b bd       	out	0x2b, r25	; 43
     f54:	8a bd       	out	0x2a, r24	; 42
	break;
     f56:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     f58:	66 23       	and	r22, r22
     f5a:	09 f4       	brne	.+2      	; 0xf5e <play_note+0x466>
     f5c:	e6 c0       	rjmp	.+460    	; 0x112a <__stack+0x2b>
     f5e:	86 e4       	ldi	r24, 0x46	; 70
     f60:	95 e0       	ldi	r25, 0x05	; 5
     f62:	9b bd       	out	0x2b, r25	; 43
     f64:	8a bd       	out	0x2a, r24	; 42
     f66:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     f68:	8d ee       	ldi	r24, 0xED	; 237
     f6a:	9e e0       	ldi	r25, 0x0E	; 14
     f6c:	9b bd       	out	0x2b, r25	; 43
     f6e:	8a bd       	out	0x2a, r24	; 42
	break;
     f70:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     f72:	85 e1       	ldi	r24, 0x15	; 21
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9b bd       	out	0x2b, r25	; 43
     f78:	8a bd       	out	0x2a, r24	; 42
     f7a:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     f7c:	82 eb       	ldi	r24, 0xB2	; 178
     f7e:	97 e1       	ldi	r25, 0x17	; 23
     f80:	9b bd       	out	0x2b, r25	; 43
     f82:	8a bd       	out	0x2a, r24	; 42
     f84:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     f86:	86 e2       	ldi	r24, 0x26	; 38
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9b bd       	out	0x2b, r25	; 43
     f8c:	8a bd       	out	0x2a, r24	; 42
     f8e:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     f90:	87 ee       	ldi	r24, 0xE7	; 231
     f92:	97 e0       	ldi	r25, 0x07	; 7
     f94:	9b bd       	out	0x2b, r25	; 43
     f96:	8a bd       	out	0x2a, r24	; 42
     f98:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     f9a:	8e e2       	ldi	r24, 0x2E	; 46
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9b bd       	out	0x2b, r25	; 43
     fa0:	8a bd       	out	0x2a, r24	; 42
     fa2:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     fa4:	8b ee       	ldi	r24, 0xEB	; 235
     fa6:	95 e0       	ldi	r25, 0x05	; 5
     fa8:	9b bd       	out	0x2b, r25	; 43
     faa:	8a bd       	out	0x2a, r24	; 42
     fac:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     fae:	8a e7       	ldi	r24, 0x7A	; 122
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	9b bd       	out	0x2b, r25	; 43
     fb4:	8a bd       	out	0x2a, r24	; 42
     fb6:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     fb8:	8e e3       	ldi	r24, 0x3E	; 62
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b bd       	out	0x2b, r25	; 43
     fbe:	8a bd       	out	0x2a, r24	; 42
     fc0:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     fc2:	89 ef       	ldi	r24, 0xF9	; 249
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	9b bd       	out	0x2b, r25	; 43
     fc8:	8a bd       	out	0x2a, r24	; 42
     fca:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     fcc:	8c eb       	ldi	r24, 0xBC	; 188
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9b bd       	out	0x2b, r25	; 43
     fd2:	8a bd       	out	0x2a, r24	; 42
     fd4:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     fd6:	80 ec       	ldi	r24, 0xC0	; 192
     fd8:	91 e1       	ldi	r25, 0x11	; 17
     fda:	9b bd       	out	0x2b, r25	; 43
     fdc:	8a bd       	out	0x2a, r24	; 42
     fde:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     fe0:	89 e0       	ldi	r24, 0x09	; 9
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9b bd       	out	0x2b, r25	; 43
     fe6:	8a bd       	out	0x2a, r24	; 42
     fe8:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     fea:	84 e3       	ldi	r24, 0x34	; 52
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9b bd       	out	0x2b, r25	; 43
     ff0:	8a bd       	out	0x2a, r24	; 42
     ff2:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     ff4:	8d e8       	ldi	r24, 0x8D	; 141
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9b bd       	out	0x2b, r25	; 43
     ffa:	8a bd       	out	0x2a, r24	; 42
     ffc:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     ffe:	8e e9       	ldi	r24, 0x9E	; 158
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9b bd       	out	0x2b, r25	; 43
    1004:	8a bd       	out	0x2a, r24	; 42
    1006:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
    1008:	8d e7       	ldi	r24, 0x7D	; 125
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9b bd       	out	0x2b, r25	; 43
    100e:	8a bd       	out	0x2a, r24	; 42
    1010:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
    1012:	83 ed       	ldi	r24, 0xD3	; 211
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9b bd       	out	0x2b, r25	; 43
    1018:	8a bd       	out	0x2a, r24	; 42
    101a:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
    101c:	8d e5       	ldi	r24, 0x5D	; 93
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9b bd       	out	0x2b, r25	; 43
    1022:	8a bd       	out	0x2a, r24	; 42
    1024:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
    1026:	86 e4       	ldi	r24, 0x46	; 70
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9b bd       	out	0x2b, r25	; 43
    102c:	8a bd       	out	0x2a, r24	; 42
    102e:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
    1030:	89 e6       	ldi	r24, 0x69	; 105
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9b bd       	out	0x2b, r25	; 43
    1036:	8a bd       	out	0x2a, r24	; 42
    1038:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
    103a:	8e e4       	ldi	r24, 0x4E	; 78
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9b bd       	out	0x2b, r25	; 43
    1040:	8a bd       	out	0x2a, r24	; 42
    1042:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
    1044:	8b e1       	ldi	r24, 0x1B	; 27
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	9b bd       	out	0x2b, r25	; 43
    104a:	8a bd       	out	0x2a, r24	; 42
    104c:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
    104e:	85 ea       	ldi	r24, 0xA5	; 165
    1050:	96 e0       	ldi	r25, 0x06	; 6
    1052:	9b bd       	out	0x2b, r25	; 43
    1054:	8a bd       	out	0x2a, r24	; 42
    1056:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
    1058:	8c e7       	ldi	r24, 0x7C	; 124
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	9b bd       	out	0x2b, r25	; 43
    105e:	8a bd       	out	0x2a, r24	; 42
    1060:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
    1062:	88 ea       	ldi	r24, 0xA8	; 168
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	9b bd       	out	0x2b, r25	; 43
    1068:	8a bd       	out	0x2a, r24	; 42
    106a:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
    106c:	82 e5       	ldi	r24, 0x52	; 82
    106e:	93 e0       	ldi	r25, 0x03	; 3
    1070:	9b bd       	out	0x2b, r25	; 43
    1072:	8a bd       	out	0x2a, r24	; 42
    1074:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
    1076:	8c ef       	ldi	r24, 0xFC	; 252
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9b bd       	out	0x2b, r25	; 43
    107c:	8a bd       	out	0x2a, r24	; 42
    107e:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
    1080:	87 e3       	ldi	r24, 0x37	; 55
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	9b bd       	out	0x2b, r25	; 43
    1086:	8a bd       	out	0x2a, r24	; 42
    1088:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
    108a:	8d e3       	ldi	r24, 0x3D	; 61
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	9b bd       	out	0x2b, r25	; 43
    1090:	8a bd       	out	0x2a, r24	; 42
    1092:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
    1094:	89 e1       	ldi	r24, 0x19	; 25
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9b bd       	out	0x2b, r25	; 43
    109a:	8a bd       	out	0x2a, r24	; 42
    109c:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
    109e:	85 e0       	ldi	r24, 0x05	; 5
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9b bd       	out	0x2b, r25	; 43
    10a4:	8a bd       	out	0x2a, r24	; 42
    10a6:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
    10a8:	8a e9       	ldi	r24, 0x9A	; 154
    10aa:	9a e1       	ldi	r25, 0x1A	; 26
    10ac:	9b bd       	out	0x2b, r25	; 43
    10ae:	8a bd       	out	0x2a, r24	; 42
    10b0:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
    10b2:	8c e4       	ldi	r24, 0x4C	; 76
    10b4:	9d e0       	ldi	r25, 0x0D	; 13
    10b6:	9b bd       	out	0x2b, r25	; 43
    10b8:	8a bd       	out	0x2a, r24	; 42
    10ba:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
    10bc:	8d ee       	ldi	r24, 0xED	; 237
    10be:	93 e1       	ldi	r25, 0x13	; 19
    10c0:	9b bd       	out	0x2b, r25	; 43
    10c2:	8a bd       	out	0x2a, r24	; 42
    10c4:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
    10c6:	83 ef       	ldi	r24, 0xF3	; 243
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	9b bd       	out	0x2b, r25	; 43
    10cc:	8a bd       	out	0x2a, r24	; 42
    10ce:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
    10d0:	8f e6       	ldi	r24, 0x6F	; 111
    10d2:	94 e0       	ldi	r25, 0x04	; 4
    10d4:	9b bd       	out	0x2b, r25	; 43
    10d6:	8a bd       	out	0x2a, r24	; 42
    10d8:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
    10da:	88 ed       	ldi	r24, 0xD8	; 216
    10dc:	9b e0       	ldi	r25, 0x0B	; 11
    10de:	9b bd       	out	0x2b, r25	; 43
    10e0:	8a bd       	out	0x2a, r24	; 42
    10e2:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
    10e4:	8e e1       	ldi	r24, 0x1E	; 30
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9b bd       	out	0x2b, r25	; 43
    10ea:	8a bd       	out	0x2a, r24	; 42
    10ec:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
    10ee:	82 e2       	ldi	r24, 0x22	; 34
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9b bd       	out	0x2b, r25	; 43
    10f4:	8a bd       	out	0x2a, r24	; 42
    10f6:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
    10f8:	85 ef       	ldi	r24, 0xF5	; 245
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	9b bd       	out	0x2b, r25	; 43
    10fe:	8a bd       	out	0x2a, r24	; 42
    1100:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
    1102:	80 ed       	ldi	r24, 0xD0	; 208
    1104:	9f e0       	ldi	r25, 0x0F	; 15
    1106:	9b bd       	out	0x2b, r25	; 43
    1108:	8a bd       	out	0x2a, r24	; 42
    110a:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
    110c:	8d e0       	ldi	r24, 0x0D	; 13
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9b bd       	out	0x2b, r25	; 43
    1112:	8a bd       	out	0x2a, r24	; 42
    1114:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
    1116:	8f ed       	ldi	r24, 0xDF	; 223
    1118:	98 e0       	ldi	r25, 0x08	; 8
    111a:	9b bd       	out	0x2b, r25	; 43
    111c:	8a bd       	out	0x2a, r24	; 42
    111e:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
    1120:	86 ef       	ldi	r24, 0xF6	; 246
    1122:	99 e0       	ldi	r25, 0x09	; 9
    1124:	9b bd       	out	0x2b, r25	; 43
    1126:	8a bd       	out	0x2a, r24	; 42
    1128:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
    112a:	8a ef       	ldi	r24, 0xFA	; 250
    112c:	94 e0       	ldi	r25, 0x04	; 4
    112e:	9b bd       	out	0x2b, r25	; 43
    1130:	8a bd       	out	0x2a, r24	; 42
    1132:	08 95       	ret

00001134 <song0>:
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1134:	86 34       	cpi	r24, 0x46	; 70
    1136:	91 05       	cpc	r25, r1
    1138:	20 f0       	brcs	.+8      	; 0x1142 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	80 93 74 01 	sts	0x0174, r24
    1140:	08 95       	ret
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1142:	fc 01       	movw	r30, r24
    1144:	e2 57       	subi	r30, 0x72	; 114
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
    114c:	22 e0       	ldi	r18, 0x02	; 2
    114e:	44 e0       	ldi	r20, 0x04	; 4
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	81 e4       	ldi	r24, 0x41	; 65
    1154:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
    1158:	26 e0       	ldi	r18, 0x06	; 6
    115a:	44 e0       	ldi	r20, 0x04	; 4
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	81 e4       	ldi	r24, 0x41	; 65
    1160:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
    1164:	22 e0       	ldi	r18, 0x02	; 2
    1166:	44 e0       	ldi	r20, 0x04	; 4
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	81 e4       	ldi	r24, 0x41	; 65
    116c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
    1170:	28 e0       	ldi	r18, 0x08	; 8
    1172:	44 e0       	ldi	r20, 0x04	; 4
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	84 e4       	ldi	r24, 0x44	; 68
    1178:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
    117c:	28 e0       	ldi	r18, 0x08	; 8
    117e:	44 e0       	ldi	r20, 0x04	; 4
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	86 e4       	ldi	r24, 0x46	; 70
    1184:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
    1188:	26 e0       	ldi	r18, 0x06	; 6
    118a:	44 e0       	ldi	r20, 0x04	; 4
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	82 e4       	ldi	r24, 0x42	; 66
    1190:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
    1194:	28 e0       	ldi	r18, 0x08	; 8
    1196:	44 e0       	ldi	r20, 0x04	; 4
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	83 e4       	ldi	r24, 0x43	; 67
    119c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
    11a0:	28 e0       	ldi	r18, 0x08	; 8
    11a2:	44 e0       	ldi	r20, 0x04	; 4
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	81 e4       	ldi	r24, 0x41	; 65
    11a8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
    11ac:	28 e0       	ldi	r18, 0x08	; 8
    11ae:	44 e0       	ldi	r20, 0x04	; 4
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	87 e4       	ldi	r24, 0x47	; 71
    11b4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
    11b8:	28 e0       	ldi	r18, 0x08	; 8
    11ba:	44 e0       	ldi	r20, 0x04	; 4
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	85 e4       	ldi	r24, 0x45	; 69
    11c0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
    11c4:	20 e1       	ldi	r18, 0x10	; 16
    11c6:	44 e0       	ldi	r20, 0x04	; 4
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	81 e4       	ldi	r24, 0x41	; 65
    11cc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
    11d0:	24 e0       	ldi	r18, 0x04	; 4
    11d2:	45 e0       	ldi	r20, 0x05	; 5
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	83 e4       	ldi	r24, 0x43	; 67
    11d8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
    11dc:	24 e0       	ldi	r18, 0x04	; 4
    11de:	45 e0       	ldi	r20, 0x05	; 5
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	84 e4       	ldi	r24, 0x44	; 68
    11e4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11e8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11ea:	10 92 7a 01 	sts	0x017A, r1
    11ee:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    11f2:	88 e0       	ldi	r24, 0x08	; 8
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	90 93 77 01 	sts	0x0177, r25
    11fa:	80 93 76 01 	sts	0x0176, r24
    11fe:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1200:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1202:	10 92 7a 01 	sts	0x017A, r1
    1206:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	90 93 77 01 	sts	0x0177, r25
    1212:	80 93 76 01 	sts	0x0176, r24
    1216:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
    1218:	20 e1       	ldi	r18, 0x10	; 16
    121a:	44 e0       	ldi	r20, 0x04	; 4
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	82 e4       	ldi	r24, 0x42	; 66
    1220:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
    1224:	28 e0       	ldi	r18, 0x08	; 8
    1226:	44 e0       	ldi	r20, 0x04	; 4
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	82 e4       	ldi	r24, 0x42	; 66
    122c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
    1230:	28 e1       	ldi	r18, 0x18	; 24
    1232:	44 e0       	ldi	r20, 0x04	; 4
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	87 e4       	ldi	r24, 0x47	; 71
    1238:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
    123c:	20 e1       	ldi	r18, 0x10	; 16
    123e:	45 e0       	ldi	r20, 0x05	; 5
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	84 e4       	ldi	r24, 0x44	; 68
    1244:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1248:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    124a:	10 92 7a 01 	sts	0x017A, r1
    124e:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	90 93 77 01 	sts	0x0177, r25
    125a:	80 93 76 01 	sts	0x0176, r24
    125e:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
    1260:	24 e0       	ldi	r18, 0x04	; 4
    1262:	44 e0       	ldi	r20, 0x04	; 4
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	81 e4       	ldi	r24, 0x41	; 65
    1268:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
    126c:	26 e0       	ldi	r18, 0x06	; 6
    126e:	44 e0       	ldi	r20, 0x04	; 4
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	87 e4       	ldi	r24, 0x47	; 71
    1274:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
    1278:	24 e0       	ldi	r18, 0x04	; 4
    127a:	44 e0       	ldi	r20, 0x04	; 4
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	87 e4       	ldi	r24, 0x47	; 71
    1280:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
    1284:	28 e0       	ldi	r18, 0x08	; 8
    1286:	44 e0       	ldi	r20, 0x04	; 4
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	87 e4       	ldi	r24, 0x47	; 71
    128c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
    1290:	23 e0       	ldi	r18, 0x03	; 3
    1292:	44 e0       	ldi	r20, 0x04	; 4
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	87 e4       	ldi	r24, 0x47	; 71
    1298:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
    129c:	20 e1       	ldi	r18, 0x10	; 16
    129e:	44 e0       	ldi	r20, 0x04	; 4
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	84 e4       	ldi	r24, 0x44	; 68
    12a4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
    12a8:	20 e1       	ldi	r18, 0x10	; 16
    12aa:	45 e0       	ldi	r20, 0x05	; 5
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	83 e4       	ldi	r24, 0x43	; 67
    12b0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
    12b4:	22 e0       	ldi	r18, 0x02	; 2
    12b6:	44 e0       	ldi	r20, 0x04	; 4
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	82 e4       	ldi	r24, 0x42	; 66
    12bc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
    12c0:	24 e0       	ldi	r18, 0x04	; 4
    12c2:	45 e0       	ldi	r20, 0x05	; 5
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	84 e4       	ldi	r24, 0x44	; 68
    12c8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
    12cc:	24 e0       	ldi	r18, 0x04	; 4
    12ce:	44 e0       	ldi	r20, 0x04	; 4
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	81 e4       	ldi	r24, 0x41	; 65
    12d4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
    12d8:	28 e0       	ldi	r18, 0x08	; 8
    12da:	44 e0       	ldi	r20, 0x04	; 4
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	82 e4       	ldi	r24, 0x42	; 66
    12e0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
    12e4:	28 e1       	ldi	r18, 0x18	; 24
    12e6:	44 e0       	ldi	r20, 0x04	; 4
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	86 e4       	ldi	r24, 0x46	; 70
    12ec:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
    12f0:	27 e0       	ldi	r18, 0x07	; 7
    12f2:	44 e0       	ldi	r20, 0x04	; 4
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	87 e4       	ldi	r24, 0x47	; 71
    12f8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>

000012fc <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    12fc:	8f 33       	cpi	r24, 0x3F	; 63
    12fe:	91 05       	cpc	r25, r1
    1300:	20 f0       	brcs	.+8      	; 0x130a <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	80 93 74 01 	sts	0x0174, r24
    1308:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    130a:	fc 01       	movw	r30, r24
    130c:	ec 52       	subi	r30, 0x2C	; 44
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
    1314:	24 e0       	ldi	r18, 0x04	; 4
    1316:	44 e0       	ldi	r20, 0x04	; 4
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	83 e4       	ldi	r24, 0x43	; 67
    131c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
    1320:	28 e0       	ldi	r18, 0x08	; 8
    1322:	44 e0       	ldi	r20, 0x04	; 4
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	85 e4       	ldi	r24, 0x45	; 69
    1328:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    132c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    132e:	10 92 7a 01 	sts	0x017A, r1
    1332:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 77 01 	sts	0x0177, r25
    133e:	80 93 76 01 	sts	0x0176, r24
    1342:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
    1344:	28 e0       	ldi	r18, 0x08	; 8
    1346:	44 e0       	ldi	r20, 0x04	; 4
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	84 e4       	ldi	r24, 0x44	; 68
    134c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
    1350:	20 e1       	ldi	r18, 0x10	; 16
    1352:	43 e0       	ldi	r20, 0x03	; 3
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	83 e4       	ldi	r24, 0x43	; 67
    1358:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
    135c:	24 e0       	ldi	r18, 0x04	; 4
    135e:	44 e0       	ldi	r20, 0x04	; 4
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	84 e4       	ldi	r24, 0x44	; 68
    1364:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
    1368:	24 e0       	ldi	r18, 0x04	; 4
    136a:	43 e0       	ldi	r20, 0x03	; 3
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	82 e4       	ldi	r24, 0x42	; 66
    1370:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
    1374:	27 e0       	ldi	r18, 0x07	; 7
    1376:	43 e0       	ldi	r20, 0x03	; 3
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	81 e4       	ldi	r24, 0x41	; 65
    137c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
    1380:	24 e0       	ldi	r18, 0x04	; 4
    1382:	44 e0       	ldi	r20, 0x04	; 4
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	86 e4       	ldi	r24, 0x46	; 70
    1388:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
    138c:	20 e1       	ldi	r18, 0x10	; 16
    138e:	42 e0       	ldi	r20, 0x02	; 2
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	82 e4       	ldi	r24, 0x42	; 66
    1394:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
    1398:	20 e1       	ldi	r18, 0x10	; 16
    139a:	43 e0       	ldi	r20, 0x03	; 3
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	81 e4       	ldi	r24, 0x41	; 65
    13a0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
    13a4:	28 e0       	ldi	r18, 0x08	; 8
    13a6:	44 e0       	ldi	r20, 0x04	; 4
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	83 e4       	ldi	r24, 0x43	; 67
    13ac:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
    13b0:	20 e1       	ldi	r18, 0x10	; 16
    13b2:	43 e0       	ldi	r20, 0x03	; 3
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	84 e4       	ldi	r24, 0x44	; 68
    13b8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
    13bc:	20 e1       	ldi	r18, 0x10	; 16
    13be:	43 e0       	ldi	r20, 0x03	; 3
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	85 e4       	ldi	r24, 0x45	; 69
    13c4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    13c8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    13ca:	10 92 7a 01 	sts	0x017A, r1
    13ce:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    13d2:	88 e0       	ldi	r24, 0x08	; 8
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	90 93 77 01 	sts	0x0177, r25
    13da:	80 93 76 01 	sts	0x0176, r24
    13de:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
    13e0:	27 e0       	ldi	r18, 0x07	; 7
    13e2:	43 e0       	ldi	r20, 0x03	; 3
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	82 e4       	ldi	r24, 0x42	; 66
    13e8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
    13ec:	2c e0       	ldi	r18, 0x0C	; 12
    13ee:	43 e0       	ldi	r20, 0x03	; 3
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	82 e4       	ldi	r24, 0x42	; 66
    13f4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
    13f8:	20 e1       	ldi	r18, 0x10	; 16
    13fa:	43 e0       	ldi	r20, 0x03	; 3
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	81 e4       	ldi	r24, 0x41	; 65
    1400:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1404:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1406:	10 92 7a 01 	sts	0x017A, r1
    140a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    140e:	80 e1       	ldi	r24, 0x10	; 16
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	90 93 77 01 	sts	0x0177, r25
    1416:	80 93 76 01 	sts	0x0176, r24
    141a:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
    141c:	24 e0       	ldi	r18, 0x04	; 4
    141e:	44 e0       	ldi	r20, 0x04	; 4
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	87 e4       	ldi	r24, 0x47	; 71
    1424:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
    1428:	28 e0       	ldi	r18, 0x08	; 8
    142a:	42 e0       	ldi	r20, 0x02	; 2
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	82 e4       	ldi	r24, 0x42	; 66
    1430:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
    1434:	20 e1       	ldi	r18, 0x10	; 16
    1436:	42 e0       	ldi	r20, 0x02	; 2
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	81 e4       	ldi	r24, 0x41	; 65
    143c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
    1440:	20 e1       	ldi	r18, 0x10	; 16
    1442:	42 e0       	ldi	r20, 0x02	; 2
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	81 e4       	ldi	r24, 0x41	; 65
    1448:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
    144c:	2c e0       	ldi	r18, 0x0C	; 12
    144e:	44 e0       	ldi	r20, 0x04	; 4
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	85 e4       	ldi	r24, 0x45	; 69
    1454:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
    1458:	22 e0       	ldi	r18, 0x02	; 2
    145a:	44 e0       	ldi	r20, 0x04	; 4
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	84 e4       	ldi	r24, 0x44	; 68
    1460:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
    1464:	22 e0       	ldi	r18, 0x02	; 2
    1466:	44 e0       	ldi	r20, 0x04	; 4
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	85 e4       	ldi	r24, 0x45	; 69
    146c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
    1470:	28 e0       	ldi	r18, 0x08	; 8
    1472:	43 e0       	ldi	r20, 0x03	; 3
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	83 e4       	ldi	r24, 0x43	; 67
    1478:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
    147c:	24 e0       	ldi	r18, 0x04	; 4
    147e:	43 e0       	ldi	r20, 0x03	; 3
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	81 e4       	ldi	r24, 0x41	; 65
    1484:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
    1488:	28 e0       	ldi	r18, 0x08	; 8
    148a:	43 e0       	ldi	r20, 0x03	; 3
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	85 e4       	ldi	r24, 0x45	; 69
    1490:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
    1494:	28 e0       	ldi	r18, 0x08	; 8
    1496:	43 e0       	ldi	r20, 0x03	; 3
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	81 e4       	ldi	r24, 0x41	; 65
    149c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14a0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14a2:	10 92 7a 01 	sts	0x017A, r1
    14a6:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	90 93 77 01 	sts	0x0177, r25
    14b2:	80 93 76 01 	sts	0x0176, r24
    14b6:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	44 e0       	ldi	r20, 0x04	; 4
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	81 e4       	ldi	r24, 0x41	; 65
    14c0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>

000014c4 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    14c4:	85 39       	cpi	r24, 0x95	; 149
    14c6:	91 05       	cpc	r25, r1
    14c8:	20 f0       	brcs	.+8      	; 0x14d2 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	80 93 74 01 	sts	0x0174, r24
    14d0:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    14d2:	fc 01       	movw	r30, r24
    14d4:	ed 5e       	subi	r30, 0xED	; 237
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
    14dc:	24 e0       	ldi	r18, 0x04	; 4
    14de:	43 e0       	ldi	r20, 0x03	; 3
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	87 e4       	ldi	r24, 0x47	; 71
    14e4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
    14e8:	22 e0       	ldi	r18, 0x02	; 2
    14ea:	43 e0       	ldi	r20, 0x03	; 3
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	81 e4       	ldi	r24, 0x41	; 65
    14f0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14f4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14f6:	10 92 7a 01 	sts	0x017A, r1
    14fa:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	90 93 77 01 	sts	0x0177, r25
    1506:	80 93 76 01 	sts	0x0176, r24
    150a:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
    150c:	22 e0       	ldi	r18, 0x02	; 2
    150e:	44 e0       	ldi	r20, 0x04	; 4
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	83 e4       	ldi	r24, 0x43	; 67
    1514:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
    1518:	22 e0       	ldi	r18, 0x02	; 2
    151a:	44 e0       	ldi	r20, 0x04	; 4
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	85 e4       	ldi	r24, 0x45	; 69
    1520:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
    1524:	24 e0       	ldi	r18, 0x04	; 4
    1526:	44 e0       	ldi	r20, 0x04	; 4
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	84 e4       	ldi	r24, 0x44	; 68
    152c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
    1530:	22 e0       	ldi	r18, 0x02	; 2
    1532:	44 e0       	ldi	r20, 0x04	; 4
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	83 e4       	ldi	r24, 0x43	; 67
    1538:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    153c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    153e:	10 92 7a 01 	sts	0x017A, r1
    1542:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	90 93 77 01 	sts	0x0177, r25
    154e:	80 93 76 01 	sts	0x0176, r24
    1552:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
    1554:	22 e0       	ldi	r18, 0x02	; 2
    1556:	44 e0       	ldi	r20, 0x04	; 4
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	83 e4       	ldi	r24, 0x43	; 67
    155c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1560:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1562:	10 92 7a 01 	sts	0x017A, r1
    1566:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 77 01 	sts	0x0177, r25
    1572:	80 93 76 01 	sts	0x0176, r24
    1576:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
    1578:	22 e0       	ldi	r18, 0x02	; 2
    157a:	44 e0       	ldi	r20, 0x04	; 4
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	83 e4       	ldi	r24, 0x43	; 67
    1580:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1584:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1586:	10 92 7a 01 	sts	0x017A, r1
    158a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	90 93 77 01 	sts	0x0177, r25
    1596:	80 93 76 01 	sts	0x0176, r24
    159a:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
    159c:	22 e0       	ldi	r18, 0x02	; 2
    159e:	44 e0       	ldi	r20, 0x04	; 4
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	83 e4       	ldi	r24, 0x43	; 67
    15a4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15a8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15aa:	10 92 7a 01 	sts	0x017A, r1
    15ae:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    15b2:	80 e1       	ldi	r24, 0x10	; 16
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 77 01 	sts	0x0177, r25
    15ba:	80 93 76 01 	sts	0x0176, r24
    15be:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
    15c0:	22 e0       	ldi	r18, 0x02	; 2
    15c2:	44 e0       	ldi	r20, 0x04	; 4
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	85 e4       	ldi	r24, 0x45	; 69
    15c8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
    15cc:	22 e0       	ldi	r18, 0x02	; 2
    15ce:	44 e0       	ldi	r20, 0x04	; 4
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	84 e4       	ldi	r24, 0x44	; 68
    15d4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
    15d8:	22 e0       	ldi	r18, 0x02	; 2
    15da:	44 e0       	ldi	r20, 0x04	; 4
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	83 e4       	ldi	r24, 0x43	; 67
    15e0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15e4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15e6:	10 92 7a 01 	sts	0x017A, r1
    15ea:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	90 93 77 01 	sts	0x0177, r25
    15f6:	80 93 76 01 	sts	0x0176, r24
    15fa:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
    15fc:	22 e0       	ldi	r18, 0x02	; 2
    15fe:	44 e0       	ldi	r20, 0x04	; 4
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	83 e4       	ldi	r24, 0x43	; 67
    1604:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1608:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    160a:	10 92 7a 01 	sts	0x017A, r1
    160e:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	90 93 77 01 	sts	0x0177, r25
    161a:	80 93 76 01 	sts	0x0176, r24
    161e:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
    1620:	22 e0       	ldi	r18, 0x02	; 2
    1622:	44 e0       	ldi	r20, 0x04	; 4
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	83 e4       	ldi	r24, 0x43	; 67
    1628:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    162c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    162e:	10 92 7a 01 	sts	0x017A, r1
    1632:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 77 01 	sts	0x0177, r25
    163e:	80 93 76 01 	sts	0x0176, r24
    1642:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
    1644:	22 e0       	ldi	r18, 0x02	; 2
    1646:	44 e0       	ldi	r20, 0x04	; 4
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	83 e4       	ldi	r24, 0x43	; 67
    164c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1650:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1652:	10 92 7a 01 	sts	0x017A, r1
    1656:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	90 93 77 01 	sts	0x0177, r25
    1662:	80 93 76 01 	sts	0x0176, r24
    1666:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
    1668:	24 e0       	ldi	r18, 0x04	; 4
    166a:	43 e0       	ldi	r20, 0x03	; 3
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	87 e4       	ldi	r24, 0x47	; 71
    1670:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
    1674:	22 e0       	ldi	r18, 0x02	; 2
    1676:	43 e0       	ldi	r20, 0x03	; 3
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	81 e4       	ldi	r24, 0x41	; 65
    167c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1680:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1682:	10 92 7a 01 	sts	0x017A, r1
    1686:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	90 93 77 01 	sts	0x0177, r25
    1692:	80 93 76 01 	sts	0x0176, r24
    1696:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
    1698:	22 e0       	ldi	r18, 0x02	; 2
    169a:	44 e0       	ldi	r20, 0x04	; 4
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	83 e4       	ldi	r24, 0x43	; 67
    16a0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
    16a4:	22 e0       	ldi	r18, 0x02	; 2
    16a6:	44 e0       	ldi	r20, 0x04	; 4
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	85 e4       	ldi	r24, 0x45	; 69
    16ac:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
    16b0:	24 e0       	ldi	r18, 0x04	; 4
    16b2:	44 e0       	ldi	r20, 0x04	; 4
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	84 e4       	ldi	r24, 0x44	; 68
    16b8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
    16bc:	22 e0       	ldi	r18, 0x02	; 2
    16be:	44 e0       	ldi	r20, 0x04	; 4
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	83 e4       	ldi	r24, 0x43	; 67
    16c4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16c8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16ca:	10 92 7a 01 	sts	0x017A, r1
    16ce:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	90 93 77 01 	sts	0x0177, r25
    16da:	80 93 76 01 	sts	0x0176, r24
    16de:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
    16e0:	22 e0       	ldi	r18, 0x02	; 2
    16e2:	44 e0       	ldi	r20, 0x04	; 4
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	83 e4       	ldi	r24, 0x43	; 67
    16e8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16ec:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16ee:	10 92 7a 01 	sts	0x017A, r1
    16f2:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	90 93 77 01 	sts	0x0177, r25
    16fe:	80 93 76 01 	sts	0x0176, r24
    1702:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
    1704:	22 e0       	ldi	r18, 0x02	; 2
    1706:	44 e0       	ldi	r20, 0x04	; 4
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	83 e4       	ldi	r24, 0x43	; 67
    170c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1710:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1712:	10 92 7a 01 	sts	0x017A, r1
    1716:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	90 93 77 01 	sts	0x0177, r25
    1722:	80 93 76 01 	sts	0x0176, r24
    1726:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
    1728:	22 e0       	ldi	r18, 0x02	; 2
    172a:	44 e0       	ldi	r20, 0x04	; 4
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	83 e4       	ldi	r24, 0x43	; 67
    1730:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1734:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1736:	10 92 7a 01 	sts	0x017A, r1
    173a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    173e:	8a e0       	ldi	r24, 0x0A	; 10
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	90 93 77 01 	sts	0x0177, r25
    1746:	80 93 76 01 	sts	0x0176, r24
    174a:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    174c:	24 e0       	ldi	r18, 0x04	; 4
    174e:	44 e0       	ldi	r20, 0x04	; 4
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	83 e4       	ldi	r24, 0x43	; 67
    1754:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1758:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    175a:	10 92 7a 01 	sts	0x017A, r1
    175e:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	90 93 77 01 	sts	0x0177, r25
    176a:	80 93 76 01 	sts	0x0176, r24
    176e:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    1770:	22 e0       	ldi	r18, 0x02	; 2
    1772:	44 e0       	ldi	r20, 0x04	; 4
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	84 e4       	ldi	r24, 0x44	; 68
    1778:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    177c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    177e:	10 92 7a 01 	sts	0x017A, r1
    1782:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	90 93 77 01 	sts	0x0177, r25
    178e:	80 93 76 01 	sts	0x0176, r24
    1792:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    1794:	24 e0       	ldi	r18, 0x04	; 4
    1796:	44 e0       	ldi	r20, 0x04	; 4
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	85 e4       	ldi	r24, 0x45	; 69
    179c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    17a0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    17a2:	10 92 7a 01 	sts	0x017A, r1
    17a6:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    17aa:	84 e0       	ldi	r24, 0x04	; 4
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	90 93 77 01 	sts	0x0177, r25
    17b2:	80 93 76 01 	sts	0x0176, r24
    17b6:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    17b8:	22 e0       	ldi	r18, 0x02	; 2
    17ba:	44 e0       	ldi	r20, 0x04	; 4
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	84 e4       	ldi	r24, 0x44	; 68
    17c0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    17c4:	22 e0       	ldi	r18, 0x02	; 2
    17c6:	44 e0       	ldi	r20, 0x04	; 4
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	83 e4       	ldi	r24, 0x43	; 67
    17cc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    17d0:	22 e0       	ldi	r18, 0x02	; 2
    17d2:	43 e0       	ldi	r20, 0x03	; 3
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	81 e4       	ldi	r24, 0x41	; 65
    17d8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    17dc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    17de:	10 92 7a 01 	sts	0x017A, r1
    17e2:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	90 93 77 01 	sts	0x0177, r25
    17ee:	80 93 76 01 	sts	0x0176, r24
    17f2:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    17f4:	22 e0       	ldi	r18, 0x02	; 2
    17f6:	44 e0       	ldi	r20, 0x04	; 4
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	83 e4       	ldi	r24, 0x43	; 67
    17fc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    1800:	22 e0       	ldi	r18, 0x02	; 2
    1802:	43 e0       	ldi	r20, 0x03	; 3
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	81 e4       	ldi	r24, 0x41	; 65
    1808:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    180c:	22 e0       	ldi	r18, 0x02	; 2
    180e:	43 e0       	ldi	r20, 0x03	; 3
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	81 e4       	ldi	r24, 0x41	; 65
    1814:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1818:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    181a:	10 92 7a 01 	sts	0x017A, r1
    181e:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	90 93 77 01 	sts	0x0177, r25
    182a:	80 93 76 01 	sts	0x0176, r24
    182e:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    1830:	22 e0       	ldi	r18, 0x02	; 2
    1832:	44 e0       	ldi	r20, 0x04	; 4
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	85 e4       	ldi	r24, 0x45	; 69
    1838:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    183c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    183e:	10 92 7a 01 	sts	0x017A, r1
    1842:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	90 93 77 01 	sts	0x0177, r25
    184e:	80 93 76 01 	sts	0x0176, r24
    1852:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    1854:	22 e0       	ldi	r18, 0x02	; 2
    1856:	44 e0       	ldi	r20, 0x04	; 4
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	85 e4       	ldi	r24, 0x45	; 69
    185c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    1860:	22 e0       	ldi	r18, 0x02	; 2
    1862:	44 e0       	ldi	r20, 0x04	; 4
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	86 e4       	ldi	r24, 0x46	; 70
    1868:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    186c:	22 e0       	ldi	r18, 0x02	; 2
    186e:	44 e0       	ldi	r20, 0x04	; 4
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	87 e4       	ldi	r24, 0x47	; 71
    1874:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    1878:	22 e0       	ldi	r18, 0x02	; 2
    187a:	44 e0       	ldi	r20, 0x04	; 4
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	87 e4       	ldi	r24, 0x47	; 71
    1880:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1884:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1886:	10 92 7a 01 	sts	0x017A, r1
    188a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    188e:	88 e0       	ldi	r24, 0x08	; 8
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	90 93 77 01 	sts	0x0177, r25
    1896:	80 93 76 01 	sts	0x0176, r24
    189a:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    189c:	24 e0       	ldi	r18, 0x04	; 4
    189e:	44 e0       	ldi	r20, 0x04	; 4
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	87 e4       	ldi	r24, 0x47	; 71
    18a4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    18a8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    18aa:	10 92 7a 01 	sts	0x017A, r1
    18ae:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	90 93 77 01 	sts	0x0177, r25
    18ba:	80 93 76 01 	sts	0x0176, r24
    18be:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    18c0:	21 e0       	ldi	r18, 0x01	; 1
    18c2:	44 e0       	ldi	r20, 0x04	; 4
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	87 e4       	ldi	r24, 0x47	; 71
    18c8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    18cc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    18ce:	10 92 7a 01 	sts	0x017A, r1
    18d2:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	90 93 77 01 	sts	0x0177, r25
    18de:	80 93 76 01 	sts	0x0176, r24
    18e2:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    18e4:	22 e0       	ldi	r18, 0x02	; 2
    18e6:	44 e0       	ldi	r20, 0x04	; 4
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	87 e4       	ldi	r24, 0x47	; 71
    18ec:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    18f0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    18f2:	10 92 7a 01 	sts	0x017A, r1
    18f6:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	90 93 77 01 	sts	0x0177, r25
    1902:	80 93 76 01 	sts	0x0176, r24
    1906:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    1908:	22 e0       	ldi	r18, 0x02	; 2
    190a:	43 e0       	ldi	r20, 0x03	; 3
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	85 e4       	ldi	r24, 0x45	; 69
    1910:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1914:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1916:	10 92 7a 01 	sts	0x017A, r1
    191a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	90 93 77 01 	sts	0x0177, r25
    1926:	80 93 76 01 	sts	0x0176, r24
    192a:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    192c:	22 e0       	ldi	r18, 0x02	; 2
    192e:	43 e0       	ldi	r20, 0x03	; 3
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	85 e4       	ldi	r24, 0x45	; 69
    1934:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    1938:	22 e0       	ldi	r18, 0x02	; 2
    193a:	43 e0       	ldi	r20, 0x03	; 3
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	86 e4       	ldi	r24, 0x46	; 70
    1940:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    1944:	22 e0       	ldi	r18, 0x02	; 2
    1946:	43 e0       	ldi	r20, 0x03	; 3
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	87 e4       	ldi	r24, 0x47	; 71
    194c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    1950:	22 e0       	ldi	r18, 0x02	; 2
    1952:	43 e0       	ldi	r20, 0x03	; 3
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	87 e4       	ldi	r24, 0x47	; 71
    1958:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    195c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    195e:	10 92 7a 01 	sts	0x017A, r1
    1962:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1966:	84 e0       	ldi	r24, 0x04	; 4
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	90 93 77 01 	sts	0x0177, r25
    196e:	80 93 76 01 	sts	0x0176, r24
    1972:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    1974:	22 e0       	ldi	r18, 0x02	; 2
    1976:	44 e0       	ldi	r20, 0x04	; 4
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	84 e4       	ldi	r24, 0x44	; 68
    197c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    1980:	22 e0       	ldi	r18, 0x02	; 2
    1982:	44 e0       	ldi	r20, 0x04	; 4
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	83 e4       	ldi	r24, 0x43	; 67
    1988:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    198c:	22 e0       	ldi	r18, 0x02	; 2
    198e:	43 e0       	ldi	r20, 0x03	; 3
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	81 e4       	ldi	r24, 0x41	; 65
    1994:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1998:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    199a:	10 92 7a 01 	sts	0x017A, r1
    199e:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	90 93 77 01 	sts	0x0177, r25
    19aa:	80 93 76 01 	sts	0x0176, r24
    19ae:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    19b0:	22 e0       	ldi	r18, 0x02	; 2
    19b2:	44 e0       	ldi	r20, 0x04	; 4
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	83 e4       	ldi	r24, 0x43	; 67
    19b8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    19bc:	22 e0       	ldi	r18, 0x02	; 2
    19be:	43 e0       	ldi	r20, 0x03	; 3
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	81 e4       	ldi	r24, 0x41	; 65
    19c4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    19c8:	22 e0       	ldi	r18, 0x02	; 2
    19ca:	43 e0       	ldi	r20, 0x03	; 3
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	81 e4       	ldi	r24, 0x41	; 65
    19d0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    19d4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    19d6:	10 92 7a 01 	sts	0x017A, r1
    19da:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	90 93 77 01 	sts	0x0177, r25
    19e6:	80 93 76 01 	sts	0x0176, r24
    19ea:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    19ec:	22 e0       	ldi	r18, 0x02	; 2
    19ee:	44 e0       	ldi	r20, 0x04	; 4
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	85 e4       	ldi	r24, 0x45	; 69
    19f4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    19f8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    19fa:	10 92 7a 01 	sts	0x017A, r1
    19fe:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	90 93 77 01 	sts	0x0177, r25
    1a0a:	80 93 76 01 	sts	0x0176, r24
    1a0e:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    1a10:	22 e0       	ldi	r18, 0x02	; 2
    1a12:	44 e0       	ldi	r20, 0x04	; 4
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	85 e4       	ldi	r24, 0x45	; 69
    1a18:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    1a1c:	22 e0       	ldi	r18, 0x02	; 2
    1a1e:	44 e0       	ldi	r20, 0x04	; 4
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	86 e4       	ldi	r24, 0x46	; 70
    1a24:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    1a28:	22 e0       	ldi	r18, 0x02	; 2
    1a2a:	44 e0       	ldi	r20, 0x04	; 4
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	87 e4       	ldi	r24, 0x47	; 71
    1a30:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    1a34:	22 e0       	ldi	r18, 0x02	; 2
    1a36:	44 e0       	ldi	r20, 0x04	; 4
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	87 e4       	ldi	r24, 0x47	; 71
    1a3c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1a40:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1a42:	10 92 7a 01 	sts	0x017A, r1
    1a46:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	90 93 77 01 	sts	0x0177, r25
    1a52:	80 93 76 01 	sts	0x0176, r24
    1a56:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    1a58:	22 e0       	ldi	r18, 0x02	; 2
    1a5a:	43 e0       	ldi	r20, 0x03	; 3
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	82 e4       	ldi	r24, 0x42	; 66
    1a60:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    1a64:	22 e0       	ldi	r18, 0x02	; 2
    1a66:	44 e0       	ldi	r20, 0x04	; 4
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	84 e4       	ldi	r24, 0x44	; 68
    1a6c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    1a70:	22 e0       	ldi	r18, 0x02	; 2
    1a72:	44 e0       	ldi	r20, 0x04	; 4
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	83 e4       	ldi	r24, 0x43	; 67
    1a78:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1a7c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1a7e:	10 92 7a 01 	sts	0x017A, r1
    1a82:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	90 93 77 01 	sts	0x0177, r25
    1a8e:	80 93 76 01 	sts	0x0176, r24
    1a92:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    1a94:	22 e0       	ldi	r18, 0x02	; 2
    1a96:	44 e0       	ldi	r20, 0x04	; 4
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	85 e4       	ldi	r24, 0x45	; 69
    1a9c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1aa0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1aa2:	10 92 7a 01 	sts	0x017A, r1
    1aa6:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	90 93 77 01 	sts	0x0177, r25
    1ab2:	80 93 76 01 	sts	0x0176, r24
    1ab6:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    1ab8:	22 e0       	ldi	r18, 0x02	; 2
    1aba:	44 e0       	ldi	r20, 0x04	; 4
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	87 e4       	ldi	r24, 0x47	; 71
    1ac0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    1ac4:	22 e0       	ldi	r18, 0x02	; 2
    1ac6:	44 e0       	ldi	r20, 0x04	; 4
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	86 e4       	ldi	r24, 0x46	; 70
    1acc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    1ad0:	24 e0       	ldi	r18, 0x04	; 4
    1ad2:	44 e0       	ldi	r20, 0x04	; 4
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	81 e4       	ldi	r24, 0x41	; 65
    1ad8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    1adc:	22 e0       	ldi	r18, 0x02	; 2
    1ade:	44 e0       	ldi	r20, 0x04	; 4
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	87 e4       	ldi	r24, 0x47	; 71
    1ae4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1ae8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1aea:	10 92 7a 01 	sts	0x017A, r1
    1aee:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	90 93 77 01 	sts	0x0177, r25
    1afa:	80 93 76 01 	sts	0x0176, r24
    1afe:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    1b00:	22 e0       	ldi	r18, 0x02	; 2
    1b02:	44 e0       	ldi	r20, 0x04	; 4
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	85 e4       	ldi	r24, 0x45	; 69
    1b08:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    1b0c:	23 e0       	ldi	r18, 0x03	; 3
    1b0e:	43 e0       	ldi	r20, 0x03	; 3
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	87 e4       	ldi	r24, 0x47	; 71
    1b14:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    1b18:	24 e0       	ldi	r18, 0x04	; 4
    1b1a:	43 e0       	ldi	r20, 0x03	; 3
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	81 e4       	ldi	r24, 0x41	; 65
    1b20:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    1b24:	22 e0       	ldi	r18, 0x02	; 2
    1b26:	43 e0       	ldi	r20, 0x03	; 3
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	82 e4       	ldi	r24, 0x42	; 66
    1b2c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1b30:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1b32:	10 92 7a 01 	sts	0x017A, r1
    1b36:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	90 93 77 01 	sts	0x0177, r25
    1b42:	80 93 76 01 	sts	0x0176, r24
    1b46:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    1b48:	22 e0       	ldi	r18, 0x02	; 2
    1b4a:	43 e0       	ldi	r20, 0x03	; 3
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	82 e4       	ldi	r24, 0x42	; 66
    1b50:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1b54:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1b56:	10 92 7a 01 	sts	0x017A, r1
    1b5a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	90 93 77 01 	sts	0x0177, r25
    1b66:	80 93 76 01 	sts	0x0176, r24
    1b6a:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    1b6c:	22 e0       	ldi	r18, 0x02	; 2
    1b6e:	43 e0       	ldi	r20, 0x03	; 3
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	81 e4       	ldi	r24, 0x41	; 65
    1b74:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1b78:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1b7a:	10 92 7a 01 	sts	0x017A, r1
    1b7e:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	90 93 77 01 	sts	0x0177, r25
    1b8a:	80 93 76 01 	sts	0x0176, r24
    1b8e:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    1b90:	24 e0       	ldi	r18, 0x04	; 4
    1b92:	43 e0       	ldi	r20, 0x03	; 3
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	85 e4       	ldi	r24, 0x45	; 69
    1b98:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1b9c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1b9e:	10 92 7a 01 	sts	0x017A, r1
    1ba2:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	90 93 77 01 	sts	0x0177, r25
    1bae:	80 93 76 01 	sts	0x0176, r24
    1bb2:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    1bb4:	22 e0       	ldi	r18, 0x02	; 2
    1bb6:	43 e0       	ldi	r20, 0x03	; 3
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	87 e4       	ldi	r24, 0x47	; 71
    1bbc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1bc0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1bc2:	10 92 7a 01 	sts	0x017A, r1
    1bc6:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	90 93 77 01 	sts	0x0177, r25
    1bd2:	80 93 76 01 	sts	0x0176, r24
    1bd6:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    1bd8:	25 e0       	ldi	r18, 0x05	; 5
    1bda:	44 e0       	ldi	r20, 0x04	; 4
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	83 e4       	ldi	r24, 0x43	; 67
    1be0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1be4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1be6:	10 92 7a 01 	sts	0x017A, r1
    1bea:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1bee:	84 e0       	ldi	r24, 0x04	; 4
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	90 93 77 01 	sts	0x0177, r25
    1bf6:	80 93 76 01 	sts	0x0176, r24
    1bfa:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    1bfc:	22 e0       	ldi	r18, 0x02	; 2
    1bfe:	43 e0       	ldi	r20, 0x03	; 3
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	82 e4       	ldi	r24, 0x42	; 66
    1c04:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    1c08:	22 e0       	ldi	r18, 0x02	; 2
    1c0a:	44 e0       	ldi	r20, 0x04	; 4
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	84 e4       	ldi	r24, 0x44	; 68
    1c10:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    1c14:	22 e0       	ldi	r18, 0x02	; 2
    1c16:	44 e0       	ldi	r20, 0x04	; 4
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	83 e4       	ldi	r24, 0x43	; 67
    1c1c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1c20:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1c22:	10 92 7a 01 	sts	0x017A, r1
    1c26:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	90 93 77 01 	sts	0x0177, r25
    1c32:	80 93 76 01 	sts	0x0176, r24
    1c36:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    1c38:	22 e0       	ldi	r18, 0x02	; 2
    1c3a:	44 e0       	ldi	r20, 0x04	; 4
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	85 e4       	ldi	r24, 0x45	; 69
    1c40:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1c44:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1c46:	10 92 7a 01 	sts	0x017A, r1
    1c4a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	90 93 77 01 	sts	0x0177, r25
    1c56:	80 93 76 01 	sts	0x0176, r24
    1c5a:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    1c5c:	22 e0       	ldi	r18, 0x02	; 2
    1c5e:	44 e0       	ldi	r20, 0x04	; 4
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	87 e4       	ldi	r24, 0x47	; 71
    1c64:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    1c68:	22 e0       	ldi	r18, 0x02	; 2
    1c6a:	44 e0       	ldi	r20, 0x04	; 4
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	86 e4       	ldi	r24, 0x46	; 70
    1c70:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    1c74:	24 e0       	ldi	r18, 0x04	; 4
    1c76:	44 e0       	ldi	r20, 0x04	; 4
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	81 e4       	ldi	r24, 0x41	; 65
    1c7c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    1c80:	22 e0       	ldi	r18, 0x02	; 2
    1c82:	44 e0       	ldi	r20, 0x04	; 4
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	87 e4       	ldi	r24, 0x47	; 71
    1c88:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1c8c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1c8e:	10 92 7a 01 	sts	0x017A, r1
    1c92:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	90 93 77 01 	sts	0x0177, r25
    1c9e:	80 93 76 01 	sts	0x0176, r24
    1ca2:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    1ca4:	22 e0       	ldi	r18, 0x02	; 2
    1ca6:	44 e0       	ldi	r20, 0x04	; 4
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	85 e4       	ldi	r24, 0x45	; 69
    1cac:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    1cb0:	23 e0       	ldi	r18, 0x03	; 3
    1cb2:	43 e0       	ldi	r20, 0x03	; 3
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	87 e4       	ldi	r24, 0x47	; 71
    1cb8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    1cbc:	24 e0       	ldi	r18, 0x04	; 4
    1cbe:	43 e0       	ldi	r20, 0x03	; 3
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	81 e4       	ldi	r24, 0x41	; 65
    1cc4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    1cc8:	22 e0       	ldi	r18, 0x02	; 2
    1cca:	43 e0       	ldi	r20, 0x03	; 3
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	82 e4       	ldi	r24, 0x42	; 66
    1cd0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1cd4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1cd6:	10 92 7a 01 	sts	0x017A, r1
    1cda:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	90 93 77 01 	sts	0x0177, r25
    1ce6:	80 93 76 01 	sts	0x0176, r24
    1cea:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    1cec:	22 e0       	ldi	r18, 0x02	; 2
    1cee:	43 e0       	ldi	r20, 0x03	; 3
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	82 e4       	ldi	r24, 0x42	; 66
    1cf4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1cf8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1cfa:	10 92 7a 01 	sts	0x017A, r1
    1cfe:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	90 93 77 01 	sts	0x0177, r25
    1d0a:	80 93 76 01 	sts	0x0176, r24
    1d0e:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    1d10:	22 e0       	ldi	r18, 0x02	; 2
    1d12:	43 e0       	ldi	r20, 0x03	; 3
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	81 e4       	ldi	r24, 0x41	; 65
    1d18:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d1c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1d1e:	10 92 7a 01 	sts	0x017A, r1
    1d22:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	90 93 77 01 	sts	0x0177, r25
    1d2e:	80 93 76 01 	sts	0x0176, r24
    1d32:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    1d34:	24 e0       	ldi	r18, 0x04	; 4
    1d36:	43 e0       	ldi	r20, 0x03	; 3
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	85 e4       	ldi	r24, 0x45	; 69
    1d3c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d40:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1d42:	10 92 7a 01 	sts	0x017A, r1
    1d46:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	90 93 77 01 	sts	0x0177, r25
    1d52:	80 93 76 01 	sts	0x0176, r24
    1d56:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    1d58:	22 e0       	ldi	r18, 0x02	; 2
    1d5a:	43 e0       	ldi	r20, 0x03	; 3
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	87 e4       	ldi	r24, 0x47	; 71
    1d60:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    1d64:	25 e0       	ldi	r18, 0x05	; 5
    1d66:	44 e0       	ldi	r20, 0x04	; 4
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	83 e4       	ldi	r24, 0x43	; 67
    1d6c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d70:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1d72:	10 92 7a 01 	sts	0x017A, r1
    1d76:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1d7a:	88 e0       	ldi	r24, 0x08	; 8
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	90 93 77 01 	sts	0x0177, r25
    1d82:	80 93 76 01 	sts	0x0176, r24
    1d86:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    1d88:	28 e0       	ldi	r18, 0x08	; 8
    1d8a:	42 e0       	ldi	r20, 0x02	; 2
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	87 e4       	ldi	r24, 0x47	; 71
    1d90:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    1d94:	28 e0       	ldi	r18, 0x08	; 8
    1d96:	44 e0       	ldi	r20, 0x04	; 4
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	87 e4       	ldi	r24, 0x47	; 71
    1d9c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    1da0:	24 e0       	ldi	r18, 0x04	; 4
    1da2:	44 e0       	ldi	r20, 0x04	; 4
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	85 e4       	ldi	r24, 0x45	; 69
    1da8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    1dac:	22 e0       	ldi	r18, 0x02	; 2
    1dae:	44 e0       	ldi	r20, 0x04	; 4
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	83 e4       	ldi	r24, 0x43	; 67
    1db4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1db8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1dba:	10 92 7a 01 	sts	0x017A, r1
    1dbe:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	90 93 77 01 	sts	0x0177, r25
    1dca:	80 93 76 01 	sts	0x0176, r24
    1dce:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    1dd0:	22 e0       	ldi	r18, 0x02	; 2
    1dd2:	44 e0       	ldi	r20, 0x04	; 4
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	85 e4       	ldi	r24, 0x45	; 69
    1dd8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1ddc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1dde:	10 92 7a 01 	sts	0x017A, r1
    1de2:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	90 93 77 01 	sts	0x0177, r25
    1dee:	80 93 76 01 	sts	0x0176, r24
    1df2:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    1df4:	23 e0       	ldi	r18, 0x03	; 3
    1df6:	44 e0       	ldi	r20, 0x04	; 4
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	85 e4       	ldi	r24, 0x45	; 69
    1dfc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e00:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1e02:	10 92 7a 01 	sts	0x017A, r1
    1e06:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	90 93 77 01 	sts	0x0177, r25
    1e12:	80 93 76 01 	sts	0x0176, r24
    1e16:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	44 e0       	ldi	r20, 0x04	; 4
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	85 e4       	ldi	r24, 0x45	; 69
    1e20:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e24:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1e26:	10 92 7a 01 	sts	0x017A, r1
    1e2a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1e2e:	88 e0       	ldi	r24, 0x08	; 8
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	90 93 77 01 	sts	0x0177, r25
    1e36:	80 93 76 01 	sts	0x0176, r24
    1e3a:	08 95       	ret

00001e3c <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    1e3c:	8f 31       	cpi	r24, 0x1F	; 31
    1e3e:	91 05       	cpc	r25, r1
    1e40:	20 f0       	brcs	.+8      	; 0x1e4a <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	80 93 74 01 	sts	0x0174, r24
    1e48:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e8 55       	subi	r30, 0x58	; 88
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e54:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1e56:	10 92 7a 01 	sts	0x017A, r1
    1e5a:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	90 93 77 01 	sts	0x0177, r25
    1e66:	80 93 76 01 	sts	0x0176, r24
    1e6a:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    1e6c:	24 e0       	ldi	r18, 0x04	; 4
    1e6e:	45 e0       	ldi	r20, 0x05	; 5
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	85 e4       	ldi	r24, 0x45	; 69
    1e74:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    1e78:	27 e0       	ldi	r18, 0x07	; 7
    1e7a:	44 e0       	ldi	r20, 0x04	; 4
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	85 e4       	ldi	r24, 0x45	; 69
    1e80:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    1e84:	27 e0       	ldi	r18, 0x07	; 7
    1e86:	44 e0       	ldi	r20, 0x04	; 4
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	85 e4       	ldi	r24, 0x45	; 69
    1e8c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e90:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1e92:	10 92 7a 01 	sts	0x017A, r1
    1e96:	10 92 79 01 	sts	0x0179, r1
  max_beat = duration;
    1e9a:	85 e0       	ldi	r24, 0x05	; 5
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	90 93 77 01 	sts	0x0177, r25
    1ea2:	80 93 76 01 	sts	0x0176, r24
    1ea6:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    1ea8:	28 e0       	ldi	r18, 0x08	; 8
    1eaa:	45 e0       	ldi	r20, 0x05	; 5
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	85 e4       	ldi	r24, 0x45	; 69
    1eb0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    1eb4:	23 e0       	ldi	r18, 0x03	; 3
    1eb6:	44 e0       	ldi	r20, 0x04	; 4
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	85 e4       	ldi	r24, 0x45	; 69
    1ebc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    1ec0:	23 e0       	ldi	r18, 0x03	; 3
    1ec2:	44 e0       	ldi	r20, 0x04	; 4
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	85 e4       	ldi	r24, 0x45	; 69
    1ec8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    1ecc:	28 e0       	ldi	r18, 0x08	; 8
    1ece:	45 e0       	ldi	r20, 0x05	; 5
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	87 e4       	ldi	r24, 0x47	; 71
    1ed4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    1ed8:	24 e0       	ldi	r18, 0x04	; 4
    1eda:	45 e0       	ldi	r20, 0x05	; 5
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	85 e4       	ldi	r24, 0x45	; 69
    1ee0:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    1ee4:	23 e0       	ldi	r18, 0x03	; 3
    1ee6:	45 e0       	ldi	r20, 0x05	; 5
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	85 e4       	ldi	r24, 0x45	; 69
    1eec:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    1ef0:	24 e0       	ldi	r18, 0x04	; 4
    1ef2:	45 e0       	ldi	r20, 0x05	; 5
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	87 e4       	ldi	r24, 0x47	; 71
    1ef8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    1efc:	28 e0       	ldi	r18, 0x08	; 8
    1efe:	45 e0       	ldi	r20, 0x05	; 5
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	87 e4       	ldi	r24, 0x47	; 71
    1f04:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <play_note>

00001f08 <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	89 f0       	breq	.+34     	; 0x1f2e <play_song+0x26>
    1f0c:	60 f0       	brcs	.+24     	; 0x1f26 <play_song+0x1e>
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	31 f0       	breq	.+12     	; 0x1f1e <play_song+0x16>
    1f12:	83 30       	cpi	r24, 0x03	; 3
    1f14:	41 f4       	brne	.+16     	; 0x1f26 <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    1f16:	86 2f       	mov	r24, r22
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    1f1e:	86 2f       	mov	r24, r22
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    1f26:	86 2f       	mov	r24, r22
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    1f2e:	86 2f       	mov	r24, r22
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <song1>

00001f36 <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1f36:	10 92 74 01 	sts	0x0174, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1f3a:	8e b5       	in	r24, 0x2e	; 46
    1f3c:	8c 7f       	andi	r24, 0xFC	; 252
    1f3e:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    1f40:	92 9a       	sbi	0x12, 2	; 18
    1f42:	08 95       	ret

00001f44 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    1f44:	10 92 74 01 	sts	0x0174, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    1f48:	8e b5       	in	r24, 0x2e	; 46
    1f4a:	83 60       	ori	r24, 0x03	; 3
    1f4c:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    1f4e:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    1f50:	60 91 74 01 	lds	r22, 0x0174
    1f54:	80 91 75 01 	lds	r24, 0x0175
    1f58:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <play_song>

00001f5c <music_init>:
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    1f5c:	87 b7       	in	r24, 0x37	; 55
    1f5e:	80 61       	ori	r24, 0x10	; 16
    1f60:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
    1f62:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    1f64:	8e b5       	in	r24, 0x2e	; 46
    1f66:	88 60       	ori	r24, 0x08	; 8
    1f68:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
    1f6a:	10 92 7a 00 	sts	0x007A, r1
  OCR1A = 0x0031;        //(use to vary alarm frequency)
    1f6e:	81 e3       	ldi	r24, 0x31	; 49
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9b bd       	out	0x2b, r25	; 43
    1f74:	8a bd       	out	0x2a, r24	; 42
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1f76:	10 92 74 01 	sts	0x0174, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1f7a:	8e b5       	in	r24, 0x2e	; 46
    1f7c:	8c 7f       	andi	r24, 0xFC	; 252
    1f7e:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    1f80:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
    1f82:	10 92 7a 01 	sts	0x017A, r1
    1f86:	10 92 79 01 	sts	0x0179, r1
  max_beat = 0;
    1f8a:	10 92 77 01 	sts	0x0177, r1
    1f8e:	10 92 76 01 	sts	0x0176, r1
  notes = 0;
    1f92:	10 92 74 01 	sts	0x0174, r1
  song = 0;              //beaver fight song
    1f96:	10 92 75 01 	sts	0x0175, r1
    1f9a:	08 95       	ret

00001f9c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	01 c0       	rjmp	.+2      	; 0x1fa4 <send_lcd+0x8>
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1fa6:	77 9b       	sbis	0x0e, 7	; 14
    1fa8:	fe cf       	rjmp	.-4      	; 0x1fa6 <send_lcd+0xa>
  SPDR = byte;                        //send payload
    1faa:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1fac:	77 9b       	sbis	0x0e, 7	; 14
    1fae:	fe cf       	rjmp	.-4      	; 0x1fac <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1fb0:	80 91 62 00 	lds	r24, 0x0062
    1fb4:	88 60       	ori	r24, 0x08	; 8
    1fb6:	80 93 62 00 	sts	0x0062, r24
    1fba:	80 91 62 00 	lds	r24, 0x0062
    1fbe:	87 7f       	andi	r24, 0xF7	; 247
    1fc0:	80 93 62 00 	sts	0x0062, r24
    1fc4:	08 95       	ret

00001fc6 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
    1fc6:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    1fc8:	c0 91 60 01 	lds	r28, 0x0160
    1fcc:	8c 0f       	add	r24, r28
    1fce:	91 1d       	adc	r25, r1
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	60 81       	ld	r22, Z
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
 i++;   //increment to next character
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	8c 0f       	add	r24, r28
    1fde:	80 93 60 01 	sts	0x0160, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    1fe2:	80 31       	cpi	r24, 0x10	; 16
    1fe4:	89 f0       	breq	.+34     	; 0x2008 <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1fe6:	80 32       	cpi	r24, 0x20	; 32
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <refresh_lcd+0x28>

 return i;
}//refresh_lcd
    1fea:	cf 91       	pop	r28
    1fec:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fee:	85 ed       	ldi	r24, 0xD5	; 213
    1ff0:	8a 95       	dec	r24
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <refresh_lcd+0x2a>
    1ff4:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1ff6:	60 e8       	ldi	r22, 0x80	; 128
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1ffe:	10 92 60 01 	sts	0x0160, r1
    2002:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret
    2008:	f5 ed       	ldi	r31, 0xD5	; 213
    200a:	fa 95       	dec	r31
    200c:	f1 f7       	brne	.-4      	; 0x200a <refresh_lcd+0x44>
    200e:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    2010:	60 ec       	ldi	r22, 0xC0	; 192
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2018:	80 91 60 01 	lds	r24, 0x0160
    201c:	e4 cf       	rjmp	.-56     	; 0x1fe6 <refresh_lcd+0x20>

0000201e <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	1f 92       	push	r1
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    2032:	66 0f       	add	r22, r22
    2034:	66 0f       	add	r22, r22
    2036:	66 0f       	add	r22, r22
    2038:	60 5c       	subi	r22, 0xC0	; 192
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	99 83       	std	Y+1, r25	; 0x01
    203e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2042:	85 ed       	ldi	r24, 0xD5	; 213
    2044:	8a 95       	dec	r24
    2046:	f1 f7       	brne	.-4      	; 0x2044 <set_custom_character+0x26>
    2048:	00 00       	nop
    204a:	e1 2e       	mov	r14, r17
    204c:	99 81       	ldd	r25, Y+1	; 0x01
    204e:	f9 2e       	mov	r15, r25
    2050:	87 01       	movw	r16, r14
    2052:	08 5f       	subi	r16, 0xF8	; 248
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    2056:	f7 01       	movw	r30, r14
    2058:	61 91       	ld	r22, Z+
    205a:	7f 01       	movw	r14, r30
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2062:	f5 ed       	ldi	r31, 0xD5	; 213
    2064:	fa 95       	dec	r31
    2066:	f1 f7       	brne	.-4      	; 0x2064 <set_custom_character+0x46>
    2068:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    206a:	e0 16       	cp	r14, r16
    206c:	f1 06       	cpc	r15, r17
    206e:	99 f7       	brne	.-26     	; 0x2056 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    2070:	0f 90       	pop	r0
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	08 95       	ret

00002080 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    2080:	90 e4       	ldi	r25, 0x40	; 64
    2082:	89 9f       	mul	r24, r25
    2084:	60 0d       	add	r22, r0
    2086:	11 24       	eor	r1, r1
    2088:	60 5c       	subi	r22, 0xC0	; 192
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

00002090 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    2090:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    2092:	88 23       	and	r24, r24
    2094:	b9 f1       	breq	.+110    	; 0x2104 <uint2lcd+0x74>
    2096:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    2098:	84 36       	cpi	r24, 0x64	; 100
    209a:	98 f4       	brcc	.+38     	; 0x20c2 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    209c:	8a 30       	cpi	r24, 0x0A	; 10
    209e:	d8 f4       	brcc	.+54     	; 0x20d6 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    20a0:	8d ec       	ldi	r24, 0xCD	; 205
    20a2:	c8 9f       	mul	r28, r24
    20a4:	81 2d       	mov	r24, r1
    20a6:	11 24       	eor	r1, r1
    20a8:	86 95       	lsr	r24
    20aa:	86 95       	lsr	r24
    20ac:	86 95       	lsr	r24
    20ae:	6c 2f       	mov	r22, r28
    20b0:	2a e0       	ldi	r18, 0x0A	; 10
    20b2:	82 9f       	mul	r24, r18
    20b4:	60 19       	sub	r22, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	60 5d       	subi	r22, 0xD0	; 208
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    20bc:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    20be:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    20c2:	69 e2       	ldi	r22, 0x29	; 41
    20c4:	86 9f       	mul	r24, r22
    20c6:	61 2d       	mov	r22, r1
    20c8:	11 24       	eor	r1, r1
    20ca:	62 95       	swap	r22
    20cc:	6f 70       	andi	r22, 0x0F	; 15
    20ce:	60 5d       	subi	r22, 0xD0	; 208
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    20d6:	89 e2       	ldi	r24, 0x29	; 41
    20d8:	c8 9f       	mul	r28, r24
    20da:	81 2d       	mov	r24, r1
    20dc:	11 24       	eor	r1, r1
    20de:	82 95       	swap	r24
    20e0:	8f 70       	andi	r24, 0x0F	; 15
    20e2:	9c 2f       	mov	r25, r28
    20e4:	24 e6       	ldi	r18, 0x64	; 100
    20e6:	82 9f       	mul	r24, r18
    20e8:	90 19       	sub	r25, r0
    20ea:	11 24       	eor	r1, r1
    20ec:	6d ec       	ldi	r22, 0xCD	; 205
    20ee:	96 9f       	mul	r25, r22
    20f0:	61 2d       	mov	r22, r1
    20f2:	11 24       	eor	r1, r1
    20f4:	66 95       	lsr	r22
    20f6:	66 95       	lsr	r22
    20f8:	66 95       	lsr	r22
    20fa:	60 5d       	subi	r22, 0xD0	; 208
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2102:	ce cf       	rjmp	.-100    	; 0x20a0 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    2104:	60 e3       	ldi	r22, 0x30	; 48
    2106:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    2108:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    210a:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

0000210e <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    210e:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    2110:	87 fd       	sbrc	r24, 7
    2112:	03 c0       	rjmp	.+6      	; 0x211a <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    2114:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    2116:	0c 94 48 10 	jmp	0x2090	; 0x2090 <uint2lcd>
    211a:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    211c:	6d e2       	ldi	r22, 0x2D	; 45
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2124:	85 ed       	ldi	r24, 0xD5	; 213
    2126:	8a 95       	dec	r24
    2128:	f1 f7       	brne	.-4      	; 0x2126 <int2lcd+0x18>
    212a:	00 00       	nop
    212c:	8c 2f       	mov	r24, r28
    212e:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    2130:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    2132:	0c 94 48 10 	jmp	0x2090	; 0x2090 <uint2lcd>

00002136 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    2136:	6e e0       	ldi	r22, 0x0E	; 14
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

0000213e <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    213e:	6c e0       	ldi	r22, 0x0C	; 12
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

00002146 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    2146:	6e e1       	ldi	r22, 0x1E	; 30
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

0000214e <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    214e:	68 e1       	ldi	r22, 0x18	; 24
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

00002156 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    2156:	e2 e6       	ldi	r30, 0x62	; 98
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 60       	ori	r24, 0x08	; 8
    215e:	80 83       	st	Z, r24
    2160:	80 81       	ld	r24, Z
    2162:	87 7f       	andi	r24, 0xF7	; 247
    2164:	80 83       	st	Z, r24
    2166:	08 95       	ret

00002168 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2170:	8f e1       	ldi	r24, 0x1F	; 31
    2172:	9c e1       	ldi	r25, 0x1C	; 28
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <clear_display+0xc>
    2178:	00 c0       	rjmp	.+0      	; 0x217a <clear_display+0x12>
    217a:	00 00       	nop
    217c:	08 95       	ret

0000217e <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2186:	8f e6       	ldi	r24, 0x6F	; 111
    2188:	97 e1       	ldi	r25, 0x17	; 23
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <cursor_home+0xc>
    218e:	00 c0       	rjmp	.+0      	; 0x2190 <cursor_home+0x12>
    2190:	00 00       	nop
    2192:	08 95       	ret

00002194 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    2194:	60 ec       	ldi	r22, 0xC0	; 192
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

0000219c <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    219c:	60 e8       	ldi	r22, 0x80	; 128
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

000021a4 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    21a4:	cf 93       	push	r28
    21a6:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    21a8:	60 e2       	ldi	r22, 0x20	; 32
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    21b0:	85 ed       	ldi	r24, 0xD5	; 213
    21b2:	8a 95       	dec	r24
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <fill_spaces+0xe>
    21b6:	00 00       	nop
    21b8:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    21ba:	b1 f7       	brne	.-20     	; 0x21a8 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    21c0:	68 2f       	mov	r22, r24
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <send_lcd>

000021c8 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	c0 e0       	ldi	r28, 0x00	; 0
    21d6:	f8 01       	movw	r30, r16
    21d8:	e4 0f       	add	r30, r20
    21da:	f5 1f       	adc	r31, r21
    21dc:	60 81       	ld	r22, Z
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    21e4:	85 ed       	ldi	r24, 0xD5	; 213
    21e6:	8a 95       	dec	r24
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <string2lcd+0x1e>
    21ea:	00 00       	nop
    21ec:	cf 5f       	subi	r28, 0xFF	; 255
    21ee:	4c 2f       	mov	r20, r28
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	f8 01       	movw	r30, r16
    21f4:	01 90       	ld	r0, Z+
    21f6:	00 20       	and	r0, r0
    21f8:	e9 f7       	brne	.-6      	; 0x21f4 <string2lcd+0x2c>
    21fa:	9f 01       	movw	r18, r30
    21fc:	20 1b       	sub	r18, r16
    21fe:	31 0b       	sbc	r19, r17
    2200:	22 50       	subi	r18, 0x02	; 2
    2202:	31 09       	sbc	r19, r1
    2204:	24 17       	cp	r18, r20
    2206:	35 07       	cpc	r19, r21
    2208:	30 f7       	brcc	.-52     	; 0x21d6 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	08 95       	ret

00002212 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	99 ef       	ldi	r25, 0xF9	; 249
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <lcd_init+0x4>
    221a:	00 c0       	rjmp	.+0      	; 0x221c <lcd_init+0xa>
    221c:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    2224:	60 e3       	ldi	r22, 0x30	; 48
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    222c:	8f e5       	ldi	r24, 0x5F	; 95
    222e:	9d e6       	ldi	r25, 0x6D	; 109
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <lcd_init+0x1e>
    2234:	00 c0       	rjmp	.+0      	; 0x2236 <lcd_init+0x24>
    2236:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    2238:	60 e3       	ldi	r22, 0x30	; 48
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2240:	8f e5       	ldi	r24, 0x5F	; 95
    2242:	9d e6       	ldi	r25, 0x6D	; 109
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <lcd_init+0x32>
    2248:	00 c0       	rjmp	.+0      	; 0x224a <lcd_init+0x38>
    224a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    224c:	60 e3       	ldi	r22, 0x30	; 48
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2254:	8f e5       	ldi	r24, 0x5F	; 95
    2256:	9d e6       	ldi	r25, 0x6D	; 109
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <lcd_init+0x46>
    225c:	00 c0       	rjmp	.+0      	; 0x225e <lcd_init+0x4c>
    225e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    2260:	68 e3       	ldi	r22, 0x38	; 56
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2268:	8f e1       	ldi	r24, 0x1F	; 31
    226a:	9e e4       	ldi	r25, 0x4E	; 78
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <lcd_init+0x5a>
    2270:	00 c0       	rjmp	.+0      	; 0x2272 <lcd_init+0x60>
    2272:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    2274:	68 e0       	ldi	r22, 0x08	; 8
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    227c:	8f e1       	ldi	r24, 0x1F	; 31
    227e:	9e e4       	ldi	r25, 0x4E	; 78
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <lcd_init+0x6e>
    2284:	00 c0       	rjmp	.+0      	; 0x2286 <lcd_init+0x74>
    2286:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2290:	8f e1       	ldi	r24, 0x1F	; 31
    2292:	9e e4       	ldi	r25, 0x4E	; 78
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <lcd_init+0x82>
    2298:	00 c0       	rjmp	.+0      	; 0x229a <lcd_init+0x88>
    229a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    229c:	66 e0       	ldi	r22, 0x06	; 6
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    22a4:	8f e1       	ldi	r24, 0x1F	; 31
    22a6:	9e e4       	ldi	r25, 0x4E	; 78
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <lcd_init+0x96>
    22ac:	00 c0       	rjmp	.+0      	; 0x22ae <lcd_init+0x9c>
    22ae:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    22b0:	6c e0       	ldi	r22, 0x0C	; 12
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    22b8:	8f e1       	ldi	r24, 0x1F	; 31
    22ba:	9e e4       	ldi	r25, 0x4E	; 78
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <lcd_init+0xaa>
    22c0:	00 c0       	rjmp	.+0      	; 0x22c2 <lcd_init+0xb0>
    22c2:	00 00       	nop
    22c4:	08 95       	ret

000022c6 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	69 97       	sbiw	r28, 0x19	; 25
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	f4 2e       	mov	r15, r20
    22f0:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    22f2:	00 23       	and	r16, r16
    22f4:	59 f0       	breq	.+22     	; 0x230c <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    22f6:	4b 01       	movw	r8, r22
    22f8:	5c 01       	movw	r10, r24
    22fa:	88 24       	eor	r8, r8
    22fc:	b7 fc       	sbrc	r11, 7
    22fe:	83 94       	inc	r8
    2300:	99 24       	eor	r9, r9
    2302:	aa 24       	eor	r10, r10
    2304:	bb 24       	eor	r11, r11
    2306:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    2308:	97 fd       	sbrc	r25, 7
    230a:	8f c0       	rjmp	.+286    	; 0x242a <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    230c:	11 23       	and	r17, r17
    230e:	09 f4       	brne	.+2      	; 0x2312 <lcd_int32+0x4c>
    2310:	84 c0       	rjmp	.+264    	; 0x241a <lcd_int32+0x154>
    2312:	9e 01       	movw	r18, r28
    2314:	2f 5f       	subi	r18, 0xFF	; 255
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	69 01       	movw	r12, r18
    231a:	59 01       	movw	r10, r18
    231c:	88 24       	eor	r8, r8
    231e:	8a 94       	dec	r8
    2320:	81 0e       	add	r8, r17
    2322:	91 2c       	mov	r9, r1
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	83 1a       	sub	r8, r19
    2328:	93 0a       	sbc	r9, r19
    232a:	8c 0c       	add	r8, r12
    232c:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    232e:	2a e0       	ldi	r18, 0x0A	; 10
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	0e 94 a2 13 	call	0x2744	; 0x2744 <__divmodsi4>
    233a:	e6 2f       	mov	r30, r22
    233c:	2a 8b       	std	Y+18, r18	; 0x12
    233e:	3b 8b       	std	Y+19, r19	; 0x13
    2340:	4c 8b       	std	Y+20, r20	; 0x14
    2342:	5d 8b       	std	Y+21, r21	; 0x15
    2344:	6a 89       	ldd	r22, Y+18	; 0x12
    2346:	7b 89       	ldd	r23, Y+19	; 0x13
    2348:	8c 89       	ldd	r24, Y+20	; 0x14
    234a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    234c:	20 e3       	ldi	r18, 0x30	; 48
    234e:	2e 0f       	add	r18, r30
    2350:	f5 01       	movw	r30, r10
    2352:	21 93       	st	Z+, r18
    2354:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    2356:	e8 15       	cp	r30, r8
    2358:	f9 05       	cpc	r31, r9
    235a:	49 f7       	brne	.-46     	; 0x232e <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    235c:	bb 24       	eor	r11, r11
    235e:	b3 94       	inc	r11
    2360:	b1 0e       	add	r11, r17
    2362:	f6 01       	movw	r30, r12
    2364:	e1 0f       	add	r30, r17
    2366:	f1 1d       	adc	r31, r1
    2368:	2e e2       	ldi	r18, 0x2E	; 46
    236a:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    236c:	2a e0       	ldi	r18, 0x0A	; 10
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	0e 94 a2 13 	call	0x2744	; 0x2744 <__divmodsi4>
    2378:	e6 2f       	mov	r30, r22
    237a:	2a 8b       	std	Y+18, r18	; 0x12
    237c:	3b 8b       	std	Y+19, r19	; 0x13
    237e:	4c 8b       	std	Y+20, r20	; 0x14
    2380:	5d 8b       	std	Y+21, r21	; 0x15
    2382:	6e 8b       	std	Y+22, r22	; 0x16
    2384:	7f 8b       	std	Y+23, r23	; 0x17
    2386:	88 8f       	std	Y+24, r24	; 0x18
    2388:	99 8f       	std	Y+25, r25	; 0x19
    238a:	6a 89       	ldd	r22, Y+18	; 0x12
    238c:	7b 89       	ldd	r23, Y+19	; 0x13
    238e:	8c 89       	ldd	r24, Y+20	; 0x14
    2390:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    2392:	11 e0       	ldi	r17, 0x01	; 1
    2394:	1b 0d       	add	r17, r11
    2396:	d6 01       	movw	r26, r12
    2398:	ab 0d       	add	r26, r11
    239a:	b1 1d       	adc	r27, r1
    239c:	e0 5d       	subi	r30, 0xD0	; 208
    239e:	ec 93       	st	X, r30
    23a0:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    23a2:	61 15       	cp	r22, r1
    23a4:	71 05       	cpc	r23, r1
    23a6:	81 05       	cpc	r24, r1
    23a8:	91 05       	cpc	r25, r1
    23aa:	01 f7       	brne	.-64     	; 0x236c <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    23ac:	ff 20       	and	r15, r15
    23ae:	61 f0       	breq	.+24     	; 0x23c8 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    23b0:	e1 10       	cpse	r14, r1
    23b2:	39 c0       	rjmp	.+114    	; 0x2426 <lcd_int32+0x160>
    23b4:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    23b6:	1f 15       	cp	r17, r15
    23b8:	38 f4       	brcc	.+14     	; 0x23c8 <lcd_int32+0x102>
    23ba:	f6 01       	movw	r30, r12
    23bc:	e1 0f       	add	r30, r17
    23be:	f1 1d       	adc	r31, r1
    23c0:	80 83       	st	Z, r24
    23c2:	1f 5f       	subi	r17, 0xFF	; 255
    23c4:	1f 11       	cpse	r17, r15
    23c6:	f9 cf       	rjmp	.-14     	; 0x23ba <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    23c8:	00 23       	and	r16, r16
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <lcd_int32+0x112>
    23cc:	f6 01       	movw	r30, r12
    23ce:	e1 0f       	add	r30, r17
    23d0:	f1 1d       	adc	r31, r1
    23d2:	8d e2       	ldi	r24, 0x2D	; 45
    23d4:	80 83       	st	Z, r24
    23d6:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    23d8:	11 50       	subi	r17, 0x01	; 1
    23da:	f6 01       	movw	r30, r12
    23dc:	e1 0f       	add	r30, r17
    23de:	f1 1d       	adc	r31, r1
    23e0:	60 81       	ld	r22, Z
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23e8:	35 ed       	ldi	r19, 0xD5	; 213
    23ea:	3a 95       	dec	r19
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <lcd_int32+0x124>
    23ee:	00 00       	nop
    23f0:	11 11       	cpse	r17, r1
    23f2:	f2 cf       	rjmp	.-28     	; 0x23d8 <lcd_int32+0x112>

}
    23f4:	69 96       	adiw	r28, 0x19	; 25
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	9f 90       	pop	r9
    2416:	8f 90       	pop	r8
    2418:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    241a:	b1 2c       	mov	r11, r1
    241c:	9e 01       	movw	r18, r28
    241e:	2f 5f       	subi	r18, 0xFF	; 255
    2420:	3f 4f       	sbci	r19, 0xFF	; 255
    2422:	69 01       	movw	r12, r18
    2424:	a3 cf       	rjmp	.-186    	; 0x236c <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    2426:	80 e3       	ldi	r24, 0x30	; 48
    2428:	c6 cf       	rjmp	.-116    	; 0x23b6 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    242a:	90 95       	com	r25
    242c:	80 95       	com	r24
    242e:	70 95       	com	r23
    2430:	61 95       	neg	r22
    2432:	7f 4f       	sbci	r23, 0xFF	; 255
    2434:	8f 4f       	sbci	r24, 0xFF	; 255
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	69 cf       	rjmp	.-302    	; 0x230c <lcd_int32+0x46>

0000243a <lcd_int16>:
    243a:	5f 92       	push	r5
    243c:	6f 92       	push	r6
    243e:	7f 92       	push	r7
    2440:	8f 92       	push	r8
    2442:	9f 92       	push	r9
    2444:	af 92       	push	r10
    2446:	bf 92       	push	r11
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	61 97       	sbiw	r28, 0x11	; 17
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	a6 2e       	mov	r10, r22
    246a:	54 2e       	mov	r5, r20
    246c:	62 2e       	mov	r6, r18
    246e:	79 2e       	mov	r7, r25
    2470:	77 1c       	adc	r7, r7
    2472:	77 24       	eor	r7, r7
    2474:	77 1c       	adc	r7, r7
    2476:	b7 2c       	mov	r11, r7
    2478:	c7 2c       	mov	r12, r7
    247a:	d1 2c       	mov	r13, r1
    247c:	ee 27       	eor	r30, r30
    247e:	ff 27       	eor	r31, r31
    2480:	ec 19       	sub	r30, r12
    2482:	fd 09       	sbc	r31, r13
    2484:	8e 27       	eor	r24, r30
    2486:	9f 27       	eor	r25, r31
    2488:	fc 01       	movw	r30, r24
    248a:	ec 0d       	add	r30, r12
    248c:	fd 1d       	adc	r31, r13
    248e:	44 23       	and	r20, r20
    2490:	09 f4       	brne	.+2      	; 0x2494 <lcd_int16+0x5a>
    2492:	8e c0       	rjmp	.+284    	; 0x25b0 <lcd_int16+0x176>
    2494:	ce 01       	movw	r24, r28
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	7c 01       	movw	r14, r24
    249a:	8c 01       	movw	r16, r24
    249c:	88 24       	eor	r8, r8
    249e:	8a 94       	dec	r8
    24a0:	84 0e       	add	r8, r20
    24a2:	91 2c       	mov	r9, r1
    24a4:	9f ef       	ldi	r25, 0xFF	; 255
    24a6:	89 1a       	sub	r8, r25
    24a8:	99 0a       	sbc	r9, r25
    24aa:	8e 0c       	add	r8, r14
    24ac:	9f 1c       	adc	r9, r15
    24ae:	6a e0       	ldi	r22, 0x0A	; 10
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	cf 01       	movw	r24, r30
    24b4:	0e 94 8e 13 	call	0x271c	; 0x271c <__divmodhi4>
    24b8:	26 2f       	mov	r18, r22
    24ba:	e2 2f       	mov	r30, r18
    24bc:	f7 2f       	mov	r31, r23
    24be:	80 5d       	subi	r24, 0xD0	; 208
    24c0:	d8 01       	movw	r26, r16
    24c2:	8d 93       	st	X+, r24
    24c4:	8d 01       	movw	r16, r26
    24c6:	a8 15       	cp	r26, r8
    24c8:	b9 05       	cpc	r27, r9
    24ca:	89 f7       	brne	.-30     	; 0x24ae <lcd_int16+0x74>
    24cc:	01 e0       	ldi	r16, 0x01	; 1
    24ce:	05 0d       	add	r16, r5
    24d0:	d7 01       	movw	r26, r14
    24d2:	a5 0d       	add	r26, r5
    24d4:	b1 1d       	adc	r27, r1
    24d6:	8e e2       	ldi	r24, 0x2E	; 46
    24d8:	8c 93       	st	X, r24
    24da:	6a e0       	ldi	r22, 0x0A	; 10
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	cf 01       	movw	r24, r30
    24e0:	0e 94 8e 13 	call	0x271c	; 0x271c <__divmodhi4>
    24e4:	26 2f       	mov	r18, r22
    24e6:	e2 2f       	mov	r30, r18
    24e8:	f7 2f       	mov	r31, r23
    24ea:	11 e0       	ldi	r17, 0x01	; 1
    24ec:	10 0f       	add	r17, r16
    24ee:	d7 01       	movw	r26, r14
    24f0:	a0 0f       	add	r26, r16
    24f2:	b1 1d       	adc	r27, r1
    24f4:	80 5d       	subi	r24, 0xD0	; 208
    24f6:	8c 93       	st	X, r24
    24f8:	01 2f       	mov	r16, r17
    24fa:	30 97       	sbiw	r30, 0x00	; 0
    24fc:	71 f7       	brne	.-36     	; 0x24da <lcd_int16+0xa0>
    24fe:	61 10       	cpse	r6, r1
    2500:	15 c0       	rjmp	.+42     	; 0x252c <lcd_int16+0xf2>
    2502:	77 20       	and	r7, r7
    2504:	39 f0       	breq	.+14     	; 0x2514 <lcd_int16+0xda>
    2506:	11 e0       	ldi	r17, 0x01	; 1
    2508:	10 0f       	add	r17, r16
    250a:	f7 01       	movw	r30, r14
    250c:	e0 0f       	add	r30, r16
    250e:	f1 1d       	adc	r31, r1
    2510:	8d e2       	ldi	r24, 0x2D	; 45
    2512:	80 83       	st	Z, r24
    2514:	aa 20       	and	r10, r10
    2516:	41 f1       	breq	.+80     	; 0x2568 <lcd_int16+0x12e>
    2518:	81 2f       	mov	r24, r17
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	2a 2d       	mov	r18, r10
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	82 17       	cp	r24, r18
    2522:	93 07       	cpc	r25, r19
    2524:	0c f5       	brge	.+66     	; 0x2568 <lcd_int16+0x12e>
    2526:	b1 2c       	mov	r11, r1
    2528:	40 e2       	ldi	r20, 0x20	; 32
    252a:	0c c0       	rjmp	.+24     	; 0x2544 <lcd_int16+0x10a>
    252c:	aa 20       	and	r10, r10
    252e:	a1 f0       	breq	.+40     	; 0x2558 <lcd_int16+0x11e>
    2530:	81 2f       	mov	r24, r17
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	2a 2d       	mov	r18, r10
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	2c 19       	sub	r18, r12
    253a:	3d 09       	sbc	r19, r13
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	5c f4       	brge	.+22     	; 0x2558 <lcd_int16+0x11e>
    2542:	40 e3       	ldi	r20, 0x30	; 48
    2544:	1f 5f       	subi	r17, 0xFF	; 255
    2546:	f7 01       	movw	r30, r14
    2548:	e8 0f       	add	r30, r24
    254a:	f9 1f       	adc	r31, r25
    254c:	40 83       	st	Z, r20
    254e:	81 2f       	mov	r24, r17
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	82 17       	cp	r24, r18
    2554:	93 07       	cpc	r25, r19
    2556:	b4 f3       	brlt	.-20     	; 0x2544 <lcd_int16+0x10a>
    2558:	bb 20       	and	r11, r11
    255a:	31 f0       	breq	.+12     	; 0x2568 <lcd_int16+0x12e>
    255c:	f7 01       	movw	r30, r14
    255e:	e1 0f       	add	r30, r17
    2560:	f1 1d       	adc	r31, r1
    2562:	8d e2       	ldi	r24, 0x2D	; 45
    2564:	80 83       	st	Z, r24
    2566:	1f 5f       	subi	r17, 0xFF	; 255
    2568:	11 50       	subi	r17, 0x01	; 1
    256a:	f7 01       	movw	r30, r14
    256c:	e1 0f       	add	r30, r17
    256e:	f1 1d       	adc	r31, r1
    2570:	60 81       	ld	r22, Z
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_lcd>
    2578:	95 ed       	ldi	r25, 0xD5	; 213
    257a:	9a 95       	dec	r25
    257c:	f1 f7       	brne	.-4      	; 0x257a <lcd_int16+0x140>
    257e:	00 00       	nop
    2580:	11 11       	cpse	r17, r1
    2582:	f2 cf       	rjmp	.-28     	; 0x2568 <lcd_int16+0x12e>
    2584:	61 96       	adiw	r28, 0x11	; 17
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	ff 90       	pop	r15
    259a:	ef 90       	pop	r14
    259c:	df 90       	pop	r13
    259e:	cf 90       	pop	r12
    25a0:	bf 90       	pop	r11
    25a2:	af 90       	pop	r10
    25a4:	9f 90       	pop	r9
    25a6:	8f 90       	pop	r8
    25a8:	7f 90       	pop	r7
    25aa:	6f 90       	pop	r6
    25ac:	5f 90       	pop	r5
    25ae:	08 95       	ret
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	ce 01       	movw	r24, r28
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	7c 01       	movw	r14, r24
    25b8:	90 cf       	rjmp	.-224    	; 0x24da <lcd_int16+0xa0>

000025ba <main>:

int main()
{

/************set up ports *******/
  DDRA = 0xFF; 
    25ba:	cf ef       	ldi	r28, 0xFF	; 255
    25bc:	ca bb       	out	0x1a, r28	; 26
  DDRB =0xF7;  //enabling the bits from 0 to 2 as well as the upper nibble  
    25be:	87 ef       	ldi	r24, 0xF7	; 247
    25c0:	87 bb       	out	0x17, r24	; 23
  DDRE = 0xC0;  // enabling bit 6 and 7
    25c2:	80 ec       	ldi	r24, 0xC0	; 192
    25c4:	82 b9       	out	0x02, r24	; 2
  PORTE= 0x40;  //  bit 6 as high for the SPDR and graph
    25c6:	90 e4       	ldi	r25, 0x40	; 64
    25c8:	93 b9       	out	0x03, r25	; 3
/******************/
/*******TIMER 0 *********/
TIMSK |= (1<<TOIE0); 
    25ca:	87 b7       	in	r24, 0x37	; 55
    25cc:	81 60       	ori	r24, 0x01	; 1
    25ce:	87 bf       	out	0x37, r24	; 55
/*TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);*/  //Normal mode but not 128
TCCR0 |= (1<<CS00);
    25d0:	83 b7       	in	r24, 0x33	; 51
    25d2:	81 60       	ori	r24, 0x01	; 1
    25d4:	83 bf       	out	0x33, r24	; 51
ASSR  |= (1 <<AS0);
    25d6:	80 b7       	in	r24, 0x30	; 48
    25d8:	88 60       	ori	r24, 0x08	; 8
    25da:	80 bf       	out	0x30, r24	; 48

 /*while(bit_is_set(ASSR, TCN0UB));
  while(bit_is_set(ASSR, OCR0UB));
  while(bit_is_set(ASSR, TCR0UB));*/
/***********************************TIMER2*****************/
TCCR2|= (1<<WGM21) |(1<< WGM20) | (1<<COM21) |(1<<CS21) |(1<<CS20);
    25dc:	85 b5       	in	r24, 0x25	; 37
    25de:	8b 66       	ori	r24, 0x6B	; 107
    25e0:	85 bd       	out	0x25, r24	; 37

/******ADC Configures****************/

DDRF|=0x01;  //using pin 1 in the portf
    25e2:	80 91 61 00 	lds	r24, 0x0061
    25e6:	81 60       	ori	r24, 0x01	; 1
    25e8:	80 93 61 00 	sts	0x0061, r24
PORTF=0x01;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	80 93 62 00 	sts	0x0062, r24

ADMUX= (1<<REFS0); //with external cappacitor, the light sensor one. 
    25f2:	97 b9       	out	0x07, r25	; 7

ADCSRA= (1<< ADEN) | (1 <<ADIE) | (1<<ADPS0) | (1<<ADPS1)|(1<<ADPS2); //|(1 <<ADSC);
    25f4:	8f e8       	ldi	r24, 0x8F	; 143
    25f6:	86 b9       	out	0x06, r24	; 6

/******************THE SPDR and BARGRAPH******************************************/
SPCR = (1 << SPE) | (1 << MSTR) ;
    25f8:	80 e5       	ldi	r24, 0x50	; 80
    25fa:	8d b9       	out	0x0d, r24	; 13
/**********************************AUDIO PORT and TIMER1***************************************/
DDRD=0xff;
    25fc:	c1 bb       	out	0x11, r28	; 17
TCCR1C |=0x00;
//OCR1A   =20000;
TIMSK |= (1<<OCIE1A);
*/

music_init();
    25fe:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <music_init>
//OCR1A   =30000;
/**************************TIMER 3 VOlume ********************/
DDRE|=0x08;
    2602:	13 9a       	sbi	0x02, 3	; 2

TCCR3A |= (1<< COM3A1) |(1<<WGM31);
    2604:	80 91 8b 00 	lds	r24, 0x008B
    2608:	82 68       	ori	r24, 0x82	; 130
    260a:	80 93 8b 00 	sts	0x008B, r24
TCCR3B |= (1 <<WGM32) | (1 <<CS31);
    260e:	80 91 8a 00 	lds	r24, 0x008A
    2612:	8a 60       	ori	r24, 0x0A	; 10
    2614:	80 93 8a 00 	sts	0x008A, r24
TCCR3C|=0x00;
    2618:	80 91 8c 00 	lds	r24, 0x008C
    261c:	80 93 8c 00 	sts	0x008C, r24

OCR3A=1000;
    2620:	88 ee       	ldi	r24, 0xE8	; 232
    2622:	93 e0       	ldi	r25, 0x03	; 3
    2624:	90 93 87 00 	sts	0x0087, r25
    2628:	80 93 86 00 	sts	0x0086, r24

//vol_n=1000;
/***********************************************************/
	lcd_init();
    262c:	0e 94 09 11 	call	0x2212	; 0x2212 <lcd_init>

	clear_display();
    2630:	0e 94 b4 10 	call	0x2168	; 0x2168 <clear_display>
	string2lcd("Mohammed");
    2634:	89 e2       	ldi	r24, 0x29	; 41
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <string2lcd>
	//_delay_ms(1000);	
	sei(); 
    263c:	78 94       	sei
 	DDRA = 0xFF; 
    263e:	ca bb       	out	0x1a, r28	; 26
	PORTB =0x70;
    2640:	80 e7       	ldi	r24, 0x70	; 112
    2642:	88 bb       	out	0x18, r24	; 24
		//OCR1A= 10000;
		}
	}
	else{
		display_digits();
		strcpy(lcd_now,"           ");
    2644:	8c e0       	ldi	r24, 0x0C	; 12
    2646:	f8 2e       	mov	r15, r24
		
	}

	else if(alarmON){
		display_digits();
		strcpy(lcd_now,"Wake UP");
    2648:	08 e0       	ldi	r16, 0x08	; 8
		vol_n=700;
    264a:	cc eb       	ldi	r28, 0xBC	; 188
    264c:	d2 e0       	ldi	r29, 0x02	; 2
		if(fix==0){
		music_on();
		fix=1;		
    264e:	dd 24       	eor	r13, r13
    2650:	d3 94       	inc	r13
/*******displying part*********/

	
	if (alarm){
		display_alarm();
		strcpy(lcd_now,"set alarm");	
    2652:	9a e0       	ldi	r25, 0x0A	; 10
    2654:	e9 2e       	mov	r14, r25
	adcr=ADC;
	//itoa(adcr,lcd_now,10);
	if(adcr <150){
		OCR2=0;
	}
	else{OCR2=210;}
    2656:	12 ed       	ldi	r17, 0xD2	; 210
    2658:	0d c0       	rjmp	.+26     	; 0x2674 <main+0xba>

/******************************/
	adcr=ADC;
	//itoa(adcr,lcd_now,10);
	if(adcr <150){
		OCR2=0;
    265a:	13 bc       	out	0x23, r1	; 35
	else{OCR2=210;}
	

	
 	//OCR1A   =40000;
	lcd_control();
    265c:	0e 94 4d 04 	call	0x89a	; 0x89a <lcd_control>

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
    2660:	90 91 25 01 	lds	r25, 0x0125
    2664:	80 91 24 01 	lds	r24, 0x0124
    2668:	98 17       	cp	r25, r24
    266a:	71 f1       	breq	.+92     	; 0x26c8 <main+0x10e>
	alarmON=1;
}

else{

	alarmON=0;
    266c:	10 92 55 01 	sts	0x0155, r1
	
 	//OCR1A   =40000;
	lcd_control();

	alarm_check();
	checker();
    2670:	0e 94 0a 04 	call	0x814	; 0x814 <checker>
	//OCR2=250;
	//music_on();
/*******displying part*********/

	
	if (alarm){
    2674:	80 91 78 01 	lds	r24, 0x0178
    2678:	81 11       	cpse	r24, r1
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <main+0x140>
		strcpy(lcd_now,"set alarm");	
		
		
	}

	else if(alarmON){
    267c:	80 91 55 01 	lds	r24, 0x0155
    2680:	88 23       	and	r24, r24
    2682:	59 f1       	breq	.+86     	; 0x26da <main+0x120>
		display_digits();
    2684:	0e 94 a1 02 	call	0x542	; 0x542 <display_digits>
		strcpy(lcd_now,"Wake UP");
    2688:	ec e3       	ldi	r30, 0x3C	; 60
    268a:	f1 e0       	ldi	r31, 0x01	; 1
    268c:	a1 e6       	ldi	r26, 0x61	; 97
    268e:	b1 e0       	ldi	r27, 0x01	; 1
    2690:	80 2f       	mov	r24, r16
    2692:	01 90       	ld	r0, Z+
    2694:	0d 92       	st	X+, r0
    2696:	8a 95       	dec	r24
    2698:	e1 f7       	brne	.-8      	; 0x2692 <main+0xd8>
		vol_n=700;
    269a:	d0 93 21 01 	sts	0x0121, r29
    269e:	c0 93 20 01 	sts	0x0120, r28
		if(fix==0){
    26a2:	80 91 50 01 	lds	r24, 0x0150
    26a6:	88 23       	and	r24, r24
    26a8:	a1 f1       	breq	.+104    	; 0x2712 <main+0x158>
		fix=0;
	}	
	

/******************************/
	adcr=ADC;
    26aa:	84 b1       	in	r24, 0x04	; 4
    26ac:	95 b1       	in	r25, 0x05	; 5
    26ae:	80 93 22 01 	sts	0x0122, r24
	//itoa(adcr,lcd_now,10);
	if(adcr <150){
    26b2:	86 39       	cpi	r24, 0x96	; 150
    26b4:	90 f2       	brcs	.-92     	; 0x265a <main+0xa0>
		OCR2=0;
	}
	else{OCR2=210;}
    26b6:	13 bd       	out	0x23, r17	; 35
	

	
 	//OCR1A   =40000;
	lcd_control();
    26b8:	0e 94 4d 04 	call	0x89a	; 0x89a <lcd_control>

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
    26bc:	90 91 25 01 	lds	r25, 0x0125
    26c0:	80 91 24 01 	lds	r24, 0x0124
    26c4:	98 13       	cpse	r25, r24
    26c6:	d2 cf       	rjmp	.-92     	; 0x266c <main+0xb2>
    26c8:	90 91 56 01 	lds	r25, 0x0156
    26cc:	80 91 23 01 	lds	r24, 0x0123
    26d0:	98 13       	cpse	r25, r24
    26d2:	cc cf       	rjmp	.-104    	; 0x266c <main+0xb2>

	alarmON=1;
    26d4:	d0 92 55 01 	sts	0x0155, r13
    26d8:	cb cf       	rjmp	.-106    	; 0x2670 <main+0xb6>
		fix=1;		
		//OCR1A= 10000;
		}
	}
	else{
		display_digits();
    26da:	0e 94 a1 02 	call	0x542	; 0x542 <display_digits>
		strcpy(lcd_now,"           ");
    26de:	e4 e4       	ldi	r30, 0x44	; 68
    26e0:	f1 e0       	ldi	r31, 0x01	; 1
    26e2:	a1 e6       	ldi	r26, 0x61	; 97
    26e4:	b1 e0       	ldi	r27, 0x01	; 1
    26e6:	8f 2d       	mov	r24, r15
    26e8:	01 90       	ld	r0, Z+
    26ea:	0d 92       	st	X+, r0
    26ec:	8a 95       	dec	r24
    26ee:	e1 f7       	brne	.-8      	; 0x26e8 <main+0x12e>
		//strcpy(lcd_now,adcr);
		//OCR1A=0;
		
		music_off();
    26f0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <music_off>
		fix=0;
    26f4:	10 92 50 01 	sts	0x0150, r1
    26f8:	d8 cf       	rjmp	.-80     	; 0x26aa <main+0xf0>
	//music_on();
/*******displying part*********/

	
	if (alarm){
		display_alarm();
    26fa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <display_alarm>
		strcpy(lcd_now,"set alarm");	
    26fe:	e2 e3       	ldi	r30, 0x32	; 50
    2700:	f1 e0       	ldi	r31, 0x01	; 1
    2702:	a1 e6       	ldi	r26, 0x61	; 97
    2704:	b1 e0       	ldi	r27, 0x01	; 1
    2706:	8e 2d       	mov	r24, r14
    2708:	01 90       	ld	r0, Z+
    270a:	0d 92       	st	X+, r0
    270c:	8a 95       	dec	r24
    270e:	e1 f7       	brne	.-8      	; 0x2708 <main+0x14e>
    2710:	cc cf       	rjmp	.-104    	; 0x26aa <main+0xf0>
	else if(alarmON){
		display_digits();
		strcpy(lcd_now,"Wake UP");
		vol_n=700;
		if(fix==0){
		music_on();
    2712:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <music_on>
		fix=1;		
    2716:	d0 92 50 01 	sts	0x0150, r13
    271a:	c7 cf       	rjmp	.-114    	; 0x26aa <main+0xf0>

0000271c <__divmodhi4>:
    271c:	97 fb       	bst	r25, 7
    271e:	07 2e       	mov	r0, r23
    2720:	16 f4       	brtc	.+4      	; 0x2726 <__divmodhi4+0xa>
    2722:	00 94       	com	r0
    2724:	07 d0       	rcall	.+14     	; 0x2734 <__divmodhi4_neg1>
    2726:	77 fd       	sbrc	r23, 7
    2728:	09 d0       	rcall	.+18     	; 0x273c <__divmodhi4_neg2>
    272a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__udivmodhi4>
    272e:	07 fc       	sbrc	r0, 7
    2730:	05 d0       	rcall	.+10     	; 0x273c <__divmodhi4_neg2>
    2732:	3e f4       	brtc	.+14     	; 0x2742 <__divmodhi4_exit>

00002734 <__divmodhi4_neg1>:
    2734:	90 95       	com	r25
    2736:	81 95       	neg	r24
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	08 95       	ret

0000273c <__divmodhi4_neg2>:
    273c:	70 95       	com	r23
    273e:	61 95       	neg	r22
    2740:	7f 4f       	sbci	r23, 0xFF	; 255

00002742 <__divmodhi4_exit>:
    2742:	08 95       	ret

00002744 <__divmodsi4>:
    2744:	05 2e       	mov	r0, r21
    2746:	97 fb       	bst	r25, 7
    2748:	1e f4       	brtc	.+6      	; 0x2750 <__divmodsi4+0xc>
    274a:	00 94       	com	r0
    274c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__negsi2>
    2750:	57 fd       	sbrc	r21, 7
    2752:	07 d0       	rcall	.+14     	; 0x2762 <__divmodsi4_neg2>
    2754:	0e 94 ed 13 	call	0x27da	; 0x27da <__udivmodsi4>
    2758:	07 fc       	sbrc	r0, 7
    275a:	03 d0       	rcall	.+6      	; 0x2762 <__divmodsi4_neg2>
    275c:	4e f4       	brtc	.+18     	; 0x2770 <__divmodsi4_exit>
    275e:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__negsi2>

00002762 <__divmodsi4_neg2>:
    2762:	50 95       	com	r21
    2764:	40 95       	com	r20
    2766:	30 95       	com	r19
    2768:	21 95       	neg	r18
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	4f 4f       	sbci	r20, 0xFF	; 255
    276e:	5f 4f       	sbci	r21, 0xFF	; 255

00002770 <__divmodsi4_exit>:
    2770:	08 95       	ret

00002772 <__negsi2>:
    2772:	90 95       	com	r25
    2774:	80 95       	com	r24
    2776:	70 95       	com	r23
    2778:	61 95       	neg	r22
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	8f 4f       	sbci	r24, 0xFF	; 255
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	08 95       	ret

00002782 <__tablejump2__>:
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	00 24       	eor	r0, r0
    2788:	00 1c       	adc	r0, r0
    278a:	0b be       	out	0x3b, r0	; 59
    278c:	07 90       	elpm	r0, Z+
    278e:	f6 91       	elpm	r31, Z
    2790:	e0 2d       	mov	r30, r0
    2792:	09 94       	ijmp

00002794 <__umulhisi3>:
    2794:	a2 9f       	mul	r26, r18
    2796:	b0 01       	movw	r22, r0
    2798:	b3 9f       	mul	r27, r19
    279a:	c0 01       	movw	r24, r0
    279c:	a3 9f       	mul	r26, r19
    279e:	70 0d       	add	r23, r0
    27a0:	81 1d       	adc	r24, r1
    27a2:	11 24       	eor	r1, r1
    27a4:	91 1d       	adc	r25, r1
    27a6:	b2 9f       	mul	r27, r18
    27a8:	70 0d       	add	r23, r0
    27aa:	81 1d       	adc	r24, r1
    27ac:	11 24       	eor	r1, r1
    27ae:	91 1d       	adc	r25, r1
    27b0:	08 95       	ret

000027b2 <__udivmodhi4>:
    27b2:	aa 1b       	sub	r26, r26
    27b4:	bb 1b       	sub	r27, r27
    27b6:	51 e1       	ldi	r21, 0x11	; 17
    27b8:	07 c0       	rjmp	.+14     	; 0x27c8 <__udivmodhi4_ep>

000027ba <__udivmodhi4_loop>:
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	a6 17       	cp	r26, r22
    27c0:	b7 07       	cpc	r27, r23
    27c2:	10 f0       	brcs	.+4      	; 0x27c8 <__udivmodhi4_ep>
    27c4:	a6 1b       	sub	r26, r22
    27c6:	b7 0b       	sbc	r27, r23

000027c8 <__udivmodhi4_ep>:
    27c8:	88 1f       	adc	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	5a 95       	dec	r21
    27ce:	a9 f7       	brne	.-22     	; 0x27ba <__udivmodhi4_loop>
    27d0:	80 95       	com	r24
    27d2:	90 95       	com	r25
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	08 95       	ret

000027da <__udivmodsi4>:
    27da:	a1 e2       	ldi	r26, 0x21	; 33
    27dc:	1a 2e       	mov	r1, r26
    27de:	aa 1b       	sub	r26, r26
    27e0:	bb 1b       	sub	r27, r27
    27e2:	fd 01       	movw	r30, r26
    27e4:	0d c0       	rjmp	.+26     	; 0x2800 <__udivmodsi4_ep>

000027e6 <__udivmodsi4_loop>:
    27e6:	aa 1f       	adc	r26, r26
    27e8:	bb 1f       	adc	r27, r27
    27ea:	ee 1f       	adc	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	a2 17       	cp	r26, r18
    27f0:	b3 07       	cpc	r27, r19
    27f2:	e4 07       	cpc	r30, r20
    27f4:	f5 07       	cpc	r31, r21
    27f6:	20 f0       	brcs	.+8      	; 0x2800 <__udivmodsi4_ep>
    27f8:	a2 1b       	sub	r26, r18
    27fa:	b3 0b       	sbc	r27, r19
    27fc:	e4 0b       	sbc	r30, r20
    27fe:	f5 0b       	sbc	r31, r21

00002800 <__udivmodsi4_ep>:
    2800:	66 1f       	adc	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	1a 94       	dec	r1
    280a:	69 f7       	brne	.-38     	; 0x27e6 <__udivmodsi4_loop>
    280c:	60 95       	com	r22
    280e:	70 95       	com	r23
    2810:	80 95       	com	r24
    2812:	90 95       	com	r25
    2814:	9b 01       	movw	r18, r22
    2816:	ac 01       	movw	r20, r24
    2818:	bd 01       	movw	r22, r26
    281a:	cf 01       	movw	r24, r30
    281c:	08 95       	ret

0000281e <strcmp>:
    281e:	fb 01       	movw	r30, r22
    2820:	dc 01       	movw	r26, r24
    2822:	8d 91       	ld	r24, X+
    2824:	01 90       	ld	r0, Z+
    2826:	80 19       	sub	r24, r0
    2828:	01 10       	cpse	r0, r1
    282a:	d9 f3       	breq	.-10     	; 0x2822 <strcmp+0x4>
    282c:	99 0b       	sbc	r25, r25
    282e:	08 95       	ret

00002830 <strcpy>:
    2830:	fb 01       	movw	r30, r22
    2832:	dc 01       	movw	r26, r24
    2834:	01 90       	ld	r0, Z+
    2836:	0d 92       	st	X+, r0
    2838:	00 20       	and	r0, r0
    283a:	e1 f7       	brne	.-8      	; 0x2834 <strcpy+0x4>
    283c:	08 95       	ret

0000283e <_exit>:
    283e:	f8 94       	cli

00002840 <__stop_program>:
    2840:	ff cf       	rjmp	.-2      	; 0x2840 <__stop_program>
