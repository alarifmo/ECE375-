
lab2_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800110  00800110  00000310  2**0
                  ALLOC
  3 .stab         000007d4  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf0  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 03 01 	call	0x206	; 0x206 <main>
  c6:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <debounce_switch_a>:
 * Return:		Debounced state of button
 * 			 - 0 if successful debounce
 * 			 - 1 if unsuccessful debounce
 *****************************************************************************************
 */
int8_t debounce_switch_a(uint8_t button) {
  ce:	48 2f       	mov	r20, r24
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	99 b3       	in	r25, 0x19	; 25
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e0 5f       	subi	r30, 0xF0	; 240
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	30 6e       	ori	r19, 0xE0	; 224
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <debounce_switch_a+0x24>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <debounce_switch_a+0x20>
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	99 27       	eor	r25, r25
  fa:	28 2b       	or	r18, r24
  fc:	39 2b       	or	r19, r25
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
  if (state[button] == 0xF000) return 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	21 15       	cp	r18, r1
 106:	30 4f       	sbci	r19, 0xF0	; 240
 108:	09 f0       	breq	.+2      	; 0x10c <debounce_switch_a+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
 10c:	08 95       	ret

0000010e <display_digits>:
 * Arguments:		None, number is global
 * Return:		None
 *****************************************************************************************
 */
void display_digits() 
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	uint16_t tmp = number; //tmp variable to modify number for display
 112:	40 91 20 01 	lds	r20, 0x0120
 116:	50 91 21 01 	lds	r21, 0x0121
	uint8_t cur_value; //current digit value to display
	uint8_t cur_digit = 0; //current digit to display on

	//Set Register A
	DDRA = 0xFF; //output
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
 11e:	8b bb       	out	0x1b, r24	; 27
 */
void display_digits() 
{
	uint16_t tmp = number; //tmp variable to modify number for display
	uint8_t cur_value; //current digit value to display
	uint8_t cur_digit = 0; //current digit to display on
 120:	c0 e0       	ldi	r28, 0x00	; 0
	 * is less than 1. */
	do {
		cur_value = tmp % 10; //get current digit to display
		CLEAR_DECODER_BITS(PORTB); //clear portb decoder bits
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
 122:	df ef       	ldi	r29, 0xFF	; 255
	/* Loop displays each base 10 digit one by one. Mods by 10 to get digit, displays
	 * encoded digit to 7-seg, divides by 10 to get next digit. Loops until cur_value
	 * is less than 1. */
	do {
		cur_value = tmp % 10; //get current digit to display
		CLEAR_DECODER_BITS(PORTB); //clear portb decoder bits
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8f 78       	andi	r24, 0x8F	; 143
 128:	88 bb       	out	0x18, r24	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
 12a:	98 b3       	in	r25, 0x18	; 24
 12c:	ec 2f       	mov	r30, r28
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 81       	ld	r24, Z
 136:	89 2b       	or	r24, r25
 138:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
 13a:	db bb       	out	0x1b, r29	; 27

	/* Loop displays each base 10 digit one by one. Mods by 10 to get digit, displays
	 * encoded digit to 7-seg, divides by 10 to get next digit. Loops until cur_value
	 * is less than 1. */
	do {
		cur_value = tmp % 10; //get current digit to display
 13c:	9a 01       	movw	r18, r20
 13e:	ad ec       	ldi	r26, 0xCD	; 205
 140:	bc ec       	ldi	r27, 0xCC	; 204
 142:	0e 94 25 01 	call	0x24a	; 0x24a <__umulhisi3>
 146:	96 95       	lsr	r25
 148:	87 95       	ror	r24
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	96 95       	lsr	r25
 150:	87 95       	ror	r24
 152:	bc 01       	movw	r22, r24
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	9c 01       	movw	r18, r24
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	26 0f       	add	r18, r22
 168:	37 1f       	adc	r19, r23
 16a:	42 1b       	sub	r20, r18
 16c:	53 0b       	sbc	r21, r19
		CLEAR_DECODER_BITS(PORTB); //clear portb decoder bits
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
		PORTA = sev_seg_digits[cur_value]; //display digit
 16e:	fa 01       	movw	r30, r20
 170:	ea 5f       	subi	r30, 0xFA	; 250
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	20 81       	ld	r18, Z
 176:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	e3 ec       	ldi	r30, 0xC3	; 195
 17a:	f9 e0       	ldi	r31, 0x09	; 9
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <display_digits+0x6e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <display_digits+0x74>
 182:	00 00       	nop
		_delay_ms(DELAY);
		cur_digit++; //next digit
 184:	cf 5f       	subi	r28, 0xFF	; 255
		tmp /= 10; //get next value
 186:	ac 01       	movw	r20, r24
	} while (tmp >= 1);
 188:	89 2b       	or	r24, r25
 18a:	61 f6       	brne	.-104    	; 0x124 <display_digits+0x16>

	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	88 bb       	out	0x18, r24	; 24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <read_buttons>:
 * Return:		None
 *****************************************************************************************
 */
void read_buttons(uint8_t button)
{
	PORTB = 0b01110000; //activate hi-z
 196:	90 e7       	ldi	r25, 0x70	; 112
 198:	98 bb       	out	0x18, r25	; 24
	DDRA = 0x00; //inputs
 19a:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; //pullups
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	9b bb       	out	0x1b, r25	; 27
 * 			 - 0 if successful debounce
 * 			 - 1 if unsuccessful debounce
 *****************************************************************************************
 */
int8_t debounce_switch_a(uint8_t button) {
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 1a0:	e8 2f       	mov	r30, r24
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	99 b3       	in	r25, 0x19	; 25
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e0 5f       	subi	r30, 0xF0	; 240
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	20 81       	ld	r18, Z
 1b0:	31 81       	ldd	r19, Z+1	; 0x01
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	a9 01       	movw	r20, r18
 1b8:	50 6e       	ori	r21, 0xE0	; 224
 1ba:	29 2f       	mov	r18, r25
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	08 2e       	mov	r0, r24
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <read_buttons+0x30>
 1c2:	35 95       	asr	r19
 1c4:	27 95       	ror	r18
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <read_buttons+0x2c>
 1ca:	21 70       	andi	r18, 0x01	; 1
 1cc:	33 27       	eor	r19, r19
 1ce:	24 2b       	or	r18, r20
 1d0:	35 2b       	or	r19, r21
 1d2:	31 83       	std	Z+1, r19	; 0x01
 1d4:	20 83       	st	Z, r18
  if (state[button] == 0xF000) return 1;
 1d6:	21 15       	cp	r18, r1
 1d8:	30 4f       	sbci	r19, 0xF0	; 240
 1da:	09 f0       	breq	.+2      	; 0x1de <read_buttons+0x48>
 1dc:	08 95       	ret
	PORTB = 0b01110000; //activate hi-z
	DDRA = 0x00; //inputs
	PORTA = 0xFF; //pullups

	if (debounce_switch_a(button))
		number += (1 << button);
 1de:	20 91 20 01 	lds	r18, 0x0120
 1e2:	30 91 21 01 	lds	r19, 0x0121
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	ba 01       	movw	r22, r20
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <read_buttons+0x5c>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <read_buttons+0x58>
 1f6:	cb 01       	movw	r24, r22
 1f8:	82 0f       	add	r24, r18
 1fa:	93 1f       	adc	r25, r19
 1fc:	90 93 21 01 	sts	0x0121, r25
 200:	80 93 20 01 	sts	0x0120, r24
 204:	08 95       	ret

00000206 <main>:
 *****************************************************************************************
 */
int main()
{
	uint8_t ii; //loop counter
	number = 0; //initialize number
 206:	10 92 21 01 	sts	0x0121, r1
 20a:	10 92 20 01 	sts	0x0120, r1
	
	/* Initialization */
	DDRA = 0xFF; //outputs
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xF0; //outputs on high nibble
 212:	90 ef       	ldi	r25, 0xF0	; 240
 214:	97 bb       	out	0x17, r25	; 23
	PORTA = 0xFF; //pullups
 216:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x70; //PWM low, tristate in hi-z
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	88 bb       	out	0x18, r24	; 24
			read_buttons(ii);
		}

		//Reset number if need be
		if (number > COUNT_MAX)
			number = 1;
 21c:	01 e0       	ldi	r16, 0x01	; 1
 21e:	10 e0       	ldi	r17, 0x00	; 0
	PORTA = 0xFF; //pullups
	PORTB = 0x70; //PWM low, tristate in hi-z

	while (1) {

		display_digits();
 220:	0e 94 87 00 	call	0x10e	; 0x10e <display_digits>

		//Read all 8 buttons
		for (ii = 0; ii < 8; ii++) {
 224:	c0 e0       	ldi	r28, 0x00	; 0
			read_buttons(ii);
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 cb 00 	call	0x196	; 0x196 <read_buttons>
	while (1) {

		display_digits();

		//Read all 8 buttons
		for (ii = 0; ii < 8; ii++) {
 22c:	cf 5f       	subi	r28, 0xFF	; 255
 22e:	c8 30       	cpi	r28, 0x08	; 8
 230:	d1 f7       	brne	.-12     	; 0x226 <main+0x20>
			read_buttons(ii);
		}

		//Reset number if need be
		if (number > COUNT_MAX)
 232:	80 91 20 01 	lds	r24, 0x0120
 236:	90 91 21 01 	lds	r25, 0x0121
 23a:	81 15       	cp	r24, r1
 23c:	94 40       	sbci	r25, 0x04	; 4
 23e:	80 f3       	brcs	.-32     	; 0x220 <main+0x1a>
			number = 1;
 240:	10 93 21 01 	sts	0x0121, r17
 244:	00 93 20 01 	sts	0x0120, r16
 248:	eb cf       	rjmp	.-42     	; 0x220 <main+0x1a>

0000024a <__umulhisi3>:
 24a:	a2 9f       	mul	r26, r18
 24c:	b0 01       	movw	r22, r0
 24e:	b3 9f       	mul	r27, r19
 250:	c0 01       	movw	r24, r0
 252:	a3 9f       	mul	r26, r19
 254:	70 0d       	add	r23, r0
 256:	81 1d       	adc	r24, r1
 258:	11 24       	eor	r1, r1
 25a:	91 1d       	adc	r25, r1
 25c:	b2 9f       	mul	r27, r18
 25e:	70 0d       	add	r23, r0
 260:	81 1d       	adc	r24, r1
 262:	11 24       	eor	r1, r1
 264:	91 1d       	adc	r25, r1
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
