
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00000a0e  00000aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  008001fe  008001fe  00000ba0  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001308  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004170  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004184  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_8>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_33>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	b5 03       	fmuls	r19, r21
  8e:	8c 03       	fmulsu	r16, r20
  90:	8c 03       	fmulsu	r16, r20
  92:	8c 03       	fmulsu	r16, r20
  94:	8c 03       	fmulsu	r16, r20
  96:	8c 03       	fmulsu	r16, r20
  98:	8c 03       	fmulsu	r16, r20
  9a:	8c 03       	fmulsu	r16, r20
  9c:	b5 03       	fmuls	r19, r21
  9e:	8c 03       	fmulsu	r16, r20
  a0:	8c 03       	fmulsu	r16, r20
  a2:	8c 03       	fmulsu	r16, r20
  a4:	8c 03       	fmulsu	r16, r20
  a6:	8c 03       	fmulsu	r16, r20
  a8:	8c 03       	fmulsu	r16, r20
  aa:	8c 03       	fmulsu	r16, r20
  ac:	bf 03       	fmulsu	r19, r23
  ae:	8c 03       	fmulsu	r16, r20
  b0:	8c 03       	fmulsu	r16, r20
  b2:	8c 03       	fmulsu	r16, r20
  b4:	8c 03       	fmulsu	r16, r20
  b6:	8c 03       	fmulsu	r16, r20
  b8:	8c 03       	fmulsu	r16, r20
  ba:	8c 03       	fmulsu	r16, r20
  bc:	8c 03       	fmulsu	r16, r20
  be:	8c 03       	fmulsu	r16, r20
  c0:	8c 03       	fmulsu	r16, r20
  c2:	8c 03       	fmulsu	r16, r20
  c4:	8c 03       	fmulsu	r16, r20
  c6:	8c 03       	fmulsu	r16, r20
  c8:	8c 03       	fmulsu	r16, r20
  ca:	8c 03       	fmulsu	r16, r20
  cc:	bf 03       	fmulsu	r19, r23
  ce:	8c 03       	fmulsu	r16, r20
  d0:	8c 03       	fmulsu	r16, r20
  d2:	8c 03       	fmulsu	r16, r20
  d4:	8c 03       	fmulsu	r16, r20
  d6:	8c 03       	fmulsu	r16, r20
  d8:	8c 03       	fmulsu	r16, r20
  da:	8c 03       	fmulsu	r16, r20
  dc:	8c 03       	fmulsu	r16, r20
  de:	8c 03       	fmulsu	r16, r20
  e0:	8c 03       	fmulsu	r16, r20
  e2:	8c 03       	fmulsu	r16, r20
  e4:	8c 03       	fmulsu	r16, r20
  e6:	8c 03       	fmulsu	r16, r20
  e8:	8c 03       	fmulsu	r16, r20
  ea:	8c 03       	fmulsu	r16, r20
  ec:	d6 03       	fmuls	r21, r22
  ee:	8c 03       	fmulsu	r16, r20
  f0:	8c 03       	fmulsu	r16, r20
  f2:	8c 03       	fmulsu	r16, r20
  f4:	8c 03       	fmulsu	r16, r20
  f6:	8c 03       	fmulsu	r16, r20
  f8:	8c 03       	fmulsu	r16, r20
  fa:	8c 03       	fmulsu	r16, r20
  fc:	da 03       	fmulsu	r21, r18
  fe:	8c 03       	fmulsu	r16, r20
 100:	8c 03       	fmulsu	r16, r20
 102:	8c 03       	fmulsu	r16, r20
 104:	8c 03       	fmulsu	r16, r20
 106:	8c 03       	fmulsu	r16, r20
 108:	8c 03       	fmulsu	r16, r20
 10a:	8c 03       	fmulsu	r16, r20
 10c:	8c 03       	fmulsu	r16, r20
 10e:	8c 03       	fmulsu	r16, r20
 110:	8c 03       	fmulsu	r16, r20
 112:	8c 03       	fmulsu	r16, r20
 114:	8c 03       	fmulsu	r16, r20
 116:	8c 03       	fmulsu	r16, r20
 118:	8c 03       	fmulsu	r16, r20
 11a:	8c 03       	fmulsu	r16, r20
 11c:	e8 03       	fmulsu	r22, r16
 11e:	8c 03       	fmulsu	r16, r20
 120:	8c 03       	fmulsu	r16, r20
 122:	8c 03       	fmulsu	r16, r20
 124:	8c 03       	fmulsu	r16, r20
 126:	8c 03       	fmulsu	r16, r20
 128:	8c 03       	fmulsu	r16, r20
 12a:	8c 03       	fmulsu	r16, r20
 12c:	a6 03       	fmuls	r18, r22

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	ee e0       	ldi	r30, 0x0E	; 14
 142:	fa e0       	ldi	r31, 0x0A	; 10
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	ae 3f       	cpi	r26, 0xFE	; 254
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	22 e0       	ldi	r18, 0x02	; 2
 156:	ae ef       	ldi	r26, 0xFE	; 254
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a5 39       	cpi	r26, 0x95	; 149
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 71 04 	call	0x8e2	; 0x8e2 <main>
 168:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <__vector_8>:
#include "twi_master.h"

extern uint16_t current_fm_freq;
volatile uint8_t STC_interrupt;  //flag bit to indicate tune or seek is done

ISR(INT7_vect){  STC_interrupt = TRUE;  }
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 02 	sts	0x0201, r24
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	80 93 2d 02 	sts	0x022D, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	6d e2       	ldi	r22, 0x2D	; 45
 198:	72 e0       	ldi	r23, 0x02	; 2
 19a:	82 e2       	ldi	r24, 0x22	; 34
 19c:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
 1a0:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 1a4:	81 11       	cpse	r24, r1
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <get_int_status+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f ea       	ldi	r24, 0xAF	; 175
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <get_int_status+0x1e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <get_int_status+0x24>
 1b2:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	61 e8       	ldi	r22, 0x81	; 129
 1b8:	72 e0       	ldi	r23, 0x02	; 2
 1ba:	82 e2       	ldi	r24, 0x22	; 34
 1bc:	0e 94 18 04 	call	0x830	; 0x830 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
 1c0:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 1c4:	81 11       	cpse	r24, r1
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
 1c8:	80 91 81 02 	lds	r24, 0x0281
 1cc:	08 95       	ret

000001ce <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	80 93 2d 02 	sts	0x022D, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
 1d4:	10 92 2e 02 	sts	0x022E, r1
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
 1d8:	80 91 53 02 	lds	r24, 0x0253
 1dc:	90 91 54 02 	lds	r25, 0x0254
 1e0:	90 93 2f 02 	sts	0x022F, r25
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
 1e4:	80 93 30 02 	sts	0x0230, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
 1e8:	10 92 31 02 	sts	0x0231, r1
  //send fm tune command
  STC_interrupt = FALSE;
 1ec:	10 92 01 02 	sts	0x0201, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
 1f0:	45 e0       	ldi	r20, 0x05	; 5
 1f2:	6d e2       	ldi	r22, 0x2D	; 45
 1f4:	72 e0       	ldi	r23, 0x02	; 2
 1f6:	82 e2       	ldi	r24, 0x22	; 34
 1f8:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
 1fc:	80 91 01 02 	lds	r24, 0x0201
 200:	88 23       	and	r24, r24
 202:	e1 f3       	breq	.-8      	; 0x1fc <fm_tune_freq+0x2e>
}
 204:	08 95       	ret

00000206 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	80 93 2d 02 	sts	0x022D, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
 20c:	10 92 2e 02 	sts	0x022E, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
 210:	80 91 51 02 	lds	r24, 0x0251
 214:	90 91 52 02 	lds	r25, 0x0252
 218:	90 93 2f 02 	sts	0x022F, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
 21c:	80 93 30 02 	sts	0x0230, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
 220:	10 92 31 02 	sts	0x0231, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
 224:	10 92 32 02 	sts	0x0232, r1
  //send am tune command
  STC_interrupt = FALSE;
 228:	10 92 01 02 	sts	0x0201, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 22c:	46 e0       	ldi	r20, 0x06	; 6
 22e:	6d e2       	ldi	r22, 0x2D	; 45
 230:	72 e0       	ldi	r23, 0x02	; 2
 232:	82 e2       	ldi	r24, 0x22	; 34
 234:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
 238:	80 91 01 02 	lds	r24, 0x0201
 23c:	88 23       	and	r24, r24
 23e:	e1 f3       	breq	.-8      	; 0x238 <am_tune_freq+0x32>
}
 240:	08 95       	ret

00000242 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
 242:	ed e2       	ldi	r30, 0x2D	; 45
 244:	f2 e0       	ldi	r31, 0x02	; 2
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
 24a:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
 24c:	80 91 55 02 	lds	r24, 0x0255
 250:	90 91 56 02 	lds	r25, 0x0256
 254:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
 256:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
 258:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 25e:	46 e0       	ldi	r20, 0x06	; 6
 260:	bf 01       	movw	r22, r30
 262:	82 e2       	ldi	r24, 0x22	; 34
 264:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	87 ee       	ldi	r24, 0xE7	; 231
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <sw_tune_freq+0x2c>
 276:	00 c0       	rjmp	.+0      	; 0x278 <sw_tune_freq+0x36>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
 27c:	80 91 fe 01 	lds	r24, 0x01FE
 280:	90 91 ff 01 	lds	r25, 0x01FF
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	91 05       	cpc	r25, r1
 288:	51 f1       	breq	.+84     	; 0x2de <radio_pwr_dwn+0x62>
 28a:	00 f1       	brcs	.+64     	; 0x2cc <radio_pwr_dwn+0x50>
 28c:	02 97       	sbiw	r24, 0x02	; 2
 28e:	41 f4       	brne	.+16     	; 0x2a0 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
 290:	60 91 55 02 	lds	r22, 0x0255
 294:	70 91 56 02 	lds	r23, 0x0256
 298:	8f e7       	ldi	r24, 0x7F	; 127
 29a:	92 e0       	ldi	r25, 0x02	; 2
 29c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
 2a0:	60 91 40 02 	lds	r22, 0x0240
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
 2ac:	81 e1       	ldi	r24, 0x11	; 17
 2ae:	80 93 2d 02 	sts	0x022D, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	6d e2       	ldi	r22, 0x2D	; 45
 2b6:	72 e0       	ldi	r23, 0x02	; 2
 2b8:	82 e2       	ldi	r24, 0x22	; 34
 2ba:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	87 ed       	ldi	r24, 0xD7	; 215
 2c0:	94 e0       	ldi	r25, 0x04	; 4
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <radio_pwr_dwn+0x46>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <radio_pwr_dwn+0x4c>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
 2cc:	60 91 53 02 	lds	r22, 0x0253
 2d0:	70 91 54 02 	lds	r23, 0x0254
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	92 e0       	ldi	r25, 0x02	; 2
 2d8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <eeprom_write_word>
 2dc:	e1 cf       	rjmp	.-62     	; 0x2a0 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
 2de:	60 91 51 02 	lds	r22, 0x0251
 2e2:	70 91 52 02 	lds	r23, 0x0252
 2e6:	8e e3       	ldi	r24, 0x3E	; 62
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <eeprom_write_word>
 2ee:	d8 cf       	rjmp	.-80     	; 0x2a0 <radio_pwr_dwn+0x24>

000002f0 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
 2f0:	83 e2       	ldi	r24, 0x23	; 35
 2f2:	80 93 2d 02 	sts	0x022D, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 2e 02 	sts	0x022E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 2fc:	42 e0       	ldi	r20, 0x02	; 2
 2fe:	6d e2       	ldi	r22, 0x2D	; 45
 300:	72 e0       	ldi	r23, 0x02	; 2
 302:	82 e2       	ldi	r24, 0x22	; 34
 304:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 308:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 30c:	81 11       	cpse	r24, r1
 30e:	fc cf       	rjmp	.-8      	; 0x308 <fm_rsq_status+0x18>
 310:	8f ea       	ldi	r24, 0xAF	; 175
 312:	94 e0       	ldi	r25, 0x04	; 4
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <fm_rsq_status+0x24>
 318:	00 c0       	rjmp	.+0      	; 0x31a <fm_rsq_status+0x2a>
 31a:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 31c:	48 e0       	ldi	r20, 0x08	; 8
 31e:	66 e3       	ldi	r22, 0x36	; 54
 320:	72 e0       	ldi	r23, 0x02	; 2
 322:	82 e2       	ldi	r24, 0x22	; 34
 324:	0e 94 18 04 	call	0x830	; 0x830 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 328:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 32c:	81 11       	cpse	r24, r1
 32e:	fc cf       	rjmp	.-8      	; 0x328 <fm_rsq_status+0x38>
}
 330:	08 95       	ret

00000332 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
 332:	82 e2       	ldi	r24, 0x22	; 34
 334:	80 93 2d 02 	sts	0x022D, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 2e 02 	sts	0x022E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 33e:	42 e0       	ldi	r20, 0x02	; 2
 340:	6d e2       	ldi	r22, 0x2D	; 45
 342:	72 e0       	ldi	r23, 0x02	; 2
 344:	82 e2       	ldi	r24, 0x22	; 34
 346:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 34a:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 34e:	81 11       	cpse	r24, r1
 350:	fc cf       	rjmp	.-8      	; 0x34a <fm_tune_status+0x18>
 352:	8f ea       	ldi	r24, 0xAF	; 175
 354:	94 e0       	ldi	r25, 0x04	; 4
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <fm_tune_status+0x24>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <fm_tune_status+0x2a>
 35c:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 35e:	48 e0       	ldi	r20, 0x08	; 8
 360:	66 e3       	ldi	r22, 0x36	; 54
 362:	72 e0       	ldi	r23, 0x02	; 2
 364:	82 e2       	ldi	r24, 0x22	; 34
 366:	0e 94 18 04 	call	0x830	; 0x830 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 36a:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 36e:	81 11       	cpse	r24, r1
 370:	fc cf       	rjmp	.-8      	; 0x36a <fm_tune_status+0x38>
}
 372:	08 95       	ret

00000374 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
 374:	82 e4       	ldi	r24, 0x42	; 66
 376:	80 93 2d 02 	sts	0x022D, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 2e 02 	sts	0x022E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 380:	42 e0       	ldi	r20, 0x02	; 2
 382:	6d e2       	ldi	r22, 0x2D	; 45
 384:	72 e0       	ldi	r23, 0x02	; 2
 386:	82 e2       	ldi	r24, 0x22	; 34
 388:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 38c:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 390:	81 11       	cpse	r24, r1
 392:	fc cf       	rjmp	.-8      	; 0x38c <am_tune_status+0x18>
 394:	8f ea       	ldi	r24, 0xAF	; 175
 396:	94 e0       	ldi	r25, 0x04	; 4
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <am_tune_status+0x24>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <am_tune_status+0x2a>
 39e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 3a0:	48 e0       	ldi	r20, 0x08	; 8
 3a2:	66 e3       	ldi	r22, 0x36	; 54
 3a4:	72 e0       	ldi	r23, 0x02	; 2
 3a6:	82 e2       	ldi	r24, 0x22	; 34
 3a8:	0c 94 18 04 	jmp	0x830	; 0x830 <twi_start_rd>

000003ac <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
 3ac:	83 e4       	ldi	r24, 0x43	; 67
 3ae:	80 93 2d 02 	sts	0x022D, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 2e 02 	sts	0x022E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 3b8:	42 e0       	ldi	r20, 0x02	; 2
 3ba:	6d e2       	ldi	r22, 0x2D	; 45
 3bc:	72 e0       	ldi	r23, 0x02	; 2
 3be:	82 e2       	ldi	r24, 0x22	; 34
 3c0:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 3c4:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 3c8:	81 11       	cpse	r24, r1
 3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <am_rsq_status+0x18>
 3cc:	8f ea       	ldi	r24, 0xAF	; 175
 3ce:	94 e0       	ldi	r25, 0x04	; 4
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <am_rsq_status+0x24>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <am_rsq_status+0x2a>
 3d6:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 3d8:	48 e0       	ldi	r20, 0x08	; 8
 3da:	66 e3       	ldi	r22, 0x36	; 54
 3dc:	72 e0       	ldi	r23, 0x02	; 2
 3de:	82 e2       	ldi	r24, 0x22	; 34
 3e0:	0c 94 18 04 	jmp	0x830	; 0x830 <twi_start_rd>

000003e4 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
 3e4:	ed e2       	ldi	r30, 0x2D	; 45
 3e6:	f2 e0       	ldi	r31, 0x02	; 2
 3e8:	22 e1       	ldi	r18, 0x12	; 18
 3ea:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
 3ec:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
 3ee:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
 3f0:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
 3f2:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
 3f4:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 3f6:	46 e0       	ldi	r20, 0x06	; 6
 3f8:	bf 01       	movw	r22, r30
 3fa:	82 e2       	ldi	r24, 0x22	; 34
 3fc:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	8f e3       	ldi	r24, 0x3F	; 63
 402:	9c e9       	ldi	r25, 0x9C	; 156
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <set_property+0x20>
 408:	00 c0       	rjmp	.+0      	; 0x40a <set_property+0x26>
 40a:	00 00       	nop
 40c:	08 95       	ret

0000040e <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	0e 94 dd 04 	call	0x9ba	; 0x9ba <eeprom_read_word>
 416:	90 93 54 02 	sts	0x0254, r25
 41a:	80 93 53 02 	sts	0x0253, r24
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	92 e0       	ldi	r25, 0x02	; 2
 422:	0e 94 d5 04 	call	0x9aa	; 0x9aa <eeprom_read_byte>
 426:	80 93 40 02 	sts	0x0240, r24

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
 42a:	ed e2       	ldi	r30, 0x2D	; 45
 42c:	f2 e0       	ldi	r31, 0x02	; 2
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
 432:	80 e5       	ldi	r24, 0x50	; 80
 434:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
 436:	85 e0       	ldi	r24, 0x05	; 5
 438:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 43a:	43 e0       	ldi	r20, 0x03	; 3
 43c:	bf 01       	movw	r22, r30
 43e:	82 e2       	ldi	r24, 0x22	; 34
 440:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	8b ed       	ldi	r24, 0xDB	; 219
 448:	95 e0       	ldi	r25, 0x05	; 5
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <fm_pwr_up+0x3c>
 452:	00 c0       	rjmp	.+0      	; 0x454 <fm_pwr_up+0x46>
 454:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <set_property>

00000462 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
 462:	8e e3       	ldi	r24, 0x3E	; 62
 464:	92 e0       	ldi	r25, 0x02	; 2
 466:	0e 94 dd 04 	call	0x9ba	; 0x9ba <eeprom_read_word>
 46a:	90 93 52 02 	sts	0x0252, r25
 46e:	80 93 51 02 	sts	0x0251, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 d5 04 	call	0x9aa	; 0x9aa <eeprom_read_byte>
 47a:	80 93 40 02 	sts	0x0240, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
 47e:	ed e2       	ldi	r30, 0x2D	; 45
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
 486:	81 e5       	ldi	r24, 0x51	; 81
 488:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
 48a:	85 e0       	ldi	r24, 0x05	; 5
 48c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 48e:	43 e0       	ldi	r20, 0x03	; 3
 490:	bf 01       	movw	r22, r30
 492:	82 e2       	ldi	r24, 0x22	; 34
 494:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	8b ed       	ldi	r24, 0xDB	; 219
 49c:	95 e0       	ldi	r25, 0x05	; 5
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <am_pwr_up+0x3c>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <am_pwr_up+0x46>
 4a8:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <set_property>

000004b6 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
 4b6:	8f e7       	ldi	r24, 0x7F	; 127
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	0e 94 dd 04 	call	0x9ba	; 0x9ba <eeprom_read_word>
 4be:	90 93 56 02 	sts	0x0256, r25
 4c2:	80 93 55 02 	sts	0x0255, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	92 e0       	ldi	r25, 0x02	; 2
 4ca:	0e 94 d5 04 	call	0x9aa	; 0x9aa <eeprom_read_byte>
 4ce:	80 93 40 02 	sts	0x0240, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
 4d2:	ed e2       	ldi	r30, 0x2D	; 45
 4d4:	f2 e0       	ldi	r31, 0x02	; 2
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
 4da:	81 e5       	ldi	r24, 0x51	; 81
 4dc:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
 4de:	85 e0       	ldi	r24, 0x05	; 5
 4e0:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 4e2:	43 e0       	ldi	r20, 0x03	; 3
 4e4:	bf 01       	movw	r22, r30
 4e6:	82 e2       	ldi	r24, 0x22	; 34
 4e8:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	8b ed       	ldi	r24, 0xDB	; 219
 4f0:	95 e0       	ldi	r25, 0x05	; 5
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <sw_pwr_up+0x3c>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <sw_pwr_up+0x46>
 4fc:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	93 e3       	ldi	r25, 0x33	; 51
 506:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	71 e0       	ldi	r23, 0x01	; 1
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	91 e3       	ldi	r25, 0x31	; 49
 512:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <set_property>

00000522 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart. uart be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
 522:	80 e1       	ldi	r24, 0x10	; 16
 524:	80 93 2d 02 	sts	0x022D, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	6d e2       	ldi	r22, 0x2D	; 45
 52c:	72 e0       	ldi	r23, 0x02	; 2
 52e:	82 e2       	ldi	r24, 0x22	; 34
 530:	0e 94 07 04 	call	0x80e	; 0x80e <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 534:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 538:	81 11       	cpse	r24, r1
 53a:	fc cf       	rjmp	.-8      	; 0x534 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53c:	8f ea       	ldi	r24, 0xAF	; 175
 53e:	94 e0       	ldi	r25, 0x04	; 4
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <get_rev+0x1e>
 544:	00 c0       	rjmp	.+0      	; 0x546 <get_rev+0x24>
 546:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
 548:	48 e0       	ldi	r20, 0x08	; 8
 54a:	61 e4       	ldi	r22, 0x41	; 65
 54c:	72 e0       	ldi	r23, 0x02	; 2
 54e:	82 e2       	ldi	r24, 0x22	; 34
 550:	0e 94 18 04 	call	0x830	; 0x830 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 554:	0e 94 03 04 	call	0x806	; 0x806 <twi_busy>
 558:	81 11       	cpse	r24, r1
 55a:	fc cf       	rjmp	.-8      	; 0x554 <get_rev+0x32>
//use TABs instead?
    uart_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
    uart_puts("             -------------------------   --------     \n\r");
 564:	89 e3       	ldi	r24, 0x39	; 57
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
    uart_puts("                          "); itoa((int)si4734_revision_buf[1], uart_tx_buf, 10); uart_puts(uart_tx_buf); 
 56c:	82 e7       	ldi	r24, 0x72	; 114
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 574:	80 91 42 02 	lds	r24, 0x0242
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 578:	4a e0       	ldi	r20, 0x0A	; 10
 57a:	65 e0       	ldi	r22, 0x05	; 5
 57c:	72 e0       	ldi	r23, 0x02	; 2
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 584:	85 e0       	ldi	r24, 0x05	; 5
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
    uart_puts("             "); itoa((int)si4734_revision_buf[2], uart_tx_buf, 10); uart_puts(uart_tx_buf); uart_puts("\n\r");
 58c:	8f e7       	ldi	r24, 0x7F	; 127
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 594:	80 91 43 02 	lds	r24, 0x0243
 598:	4a e0       	ldi	r20, 0x0A	; 10
 59a:	65 e0       	ldi	r22, 0x05	; 5
 59c:	72 e0       	ldi	r23, 0x02	; 2
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 5a4:	85 e0       	ldi	r24, 0x05	; 5
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 5ac:	8f e6       	ldi	r24, 0x6F	; 111
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	0c 94 38 04 	jmp	0x870	; 0x870 <uart_puts>

000005b4 <get_fm_rsq_status>:
// TODO: UNTESTED!
//Report the fm rsq status via uart. Requires that uart be setup and connected to 
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status(){
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	a8 97       	sbiw	r28, 0x28	; 40
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
  uint8_t disp_freq;  //temp holding variable
  char    str[40];    //temp for building strings

  uart_puts("FM_RSQ_STATUS: ");
 5ce:	8d e8       	ldi	r24, 0x8D	; 141
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
  uart_puts("status byte   :");   itoa((int)si4734_tune_status_buf[0], uart_tx_buf, 16);   uart_puts(uart_tx_buf); uart_puts("\n\r");
 5d6:	8d e9       	ldi	r24, 0x9D	; 157
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 5de:	06 e3       	ldi	r16, 0x36	; 54
 5e0:	12 e0       	ldi	r17, 0x02	; 2
 5e2:	f8 01       	movw	r30, r16
 5e4:	80 81       	ld	r24, Z
 5e6:	40 e1       	ldi	r20, 0x10	; 16
 5e8:	65 e0       	ldi	r22, 0x05	; 5
 5ea:	72 e0       	ldi	r23, 0x02	; 2
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 5f2:	85 e0       	ldi	r24, 0x05	; 5
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 5fa:	8f e6       	ldi	r24, 0x6F	; 111
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
  uart_puts("resp1         :");   itoa((int)si4734_tune_status_buf[1], uart_tx_buf, 10);   uart_puts(uart_tx_buf); uart_puts("\n\r");
 602:	8d ea       	ldi	r24, 0xAD	; 173
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 60a:	f8 01       	movw	r30, r16
 60c:	81 81       	ldd	r24, Z+1	; 0x01
 60e:	4a e0       	ldi	r20, 0x0A	; 10
 610:	65 e0       	ldi	r22, 0x05	; 5
 612:	72 e0       	ldi	r23, 0x02	; 2
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 61a:	85 e0       	ldi	r24, 0x05	; 5
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 622:	8f e6       	ldi	r24, 0x6F	; 111
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
  disp_freq = si4734_tune_status_buf[2];      //load high frequency byte
  disp_freq = (disp_freq << 8); //shift upper byte to upper 8 bits
  disp_freq |= si4734_tune_status_buf[3];     //load low high frequency byte
 62a:	f8 01       	movw	r30, r16
 62c:	f3 80       	ldd	r15, Z+3	; 0x03
  uart_puts("freq          :");   itoa(disp_freq, uart_tx_buf, 10);   uart_puts(uart_tx_buf); uart_puts("\n\r");
 62e:	8d eb       	ldi	r24, 0xBD	; 189
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 636:	4a e0       	ldi	r20, 0x0A	; 10
 638:	65 e0       	ldi	r22, 0x05	; 5
 63a:	72 e0       	ldi	r23, 0x02	; 2
 63c:	8f 2d       	mov	r24, r15
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 644:	85 e0       	ldi	r24, 0x05	; 5
 646:	92 e0       	ldi	r25, 0x02	; 2
 648:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 64c:	8f e6       	ldi	r24, 0x6F	; 111
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
  uart_puts("freq high     :");   itoa((int)si4734_tune_status_buf[2], str, 16);   uart_puts(str); uart_puts("\n\r");
 654:	8d ec       	ldi	r24, 0xCD	; 205
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 65c:	f8 01       	movw	r30, r16
 65e:	82 81       	ldd	r24, Z+2	; 0x02
 660:	40 e1       	ldi	r20, 0x10	; 16
 662:	be 01       	movw	r22, r28
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 676:	8f e6       	ldi	r24, 0x6F	; 111
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
  uart_puts("freq low      :");   itoa((int)si4734_tune_status_buf[3], str, 16);   uart_puts(str); uart_puts("\n\r");
 67e:	8d ed       	ldi	r24, 0xDD	; 221
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 686:	f8 01       	movw	r30, r16
 688:	83 81       	ldd	r24, Z+3	; 0x03
 68a:	40 e1       	ldi	r20, 0x10	; 16
 68c:	be 01       	movw	r22, r28
 68e:	6f 5f       	subi	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 6a0:	8f e6       	ldi	r24, 0x6F	; 111
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
  uart_puts("rssi          :");   itoa((int)si4734_tune_status_buf[4], uart_tx_buf, 16);   uart_puts(uart_tx_buf); uart_puts("\n\r");
 6a8:	8d ee       	ldi	r24, 0xED	; 237
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 6b0:	f8 01       	movw	r30, r16
 6b2:	84 81       	ldd	r24, Z+4	; 0x04
 6b4:	40 e1       	ldi	r20, 0x10	; 16
 6b6:	65 e0       	ldi	r22, 0x05	; 5
 6b8:	72 e0       	ldi	r23, 0x02	; 2
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 a0 04 	call	0x940	; 0x940 <__itoa_ncheck>
 6c0:	85 e0       	ldi	r24, 0x05	; 5
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
 6c8:	8f e6       	ldi	r24, 0x6F	; 111
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 38 04 	call	0x870	; 0x870 <uart_puts>
}
 6d0:	a8 96       	adiw	r28, 0x28	; 40
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	08 95       	ret

000006e8 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	0b b6       	in	r0, 0x3b	; 59
 6f4:	0f 92       	push	r0
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 706:	e0 91 71 00 	lds	r30, 0x0071
 70a:	8e 2f       	mov	r24, r30
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	fc 01       	movw	r30, r24
 710:	38 97       	sbiw	r30, 0x08	; 8
 712:	e1 35       	cpi	r30, 0x51	; 81
 714:	f1 05       	cpc	r31, r1
 716:	b0 f0       	brcs	.+44     	; 0x744 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 718:	80 91 71 00 	lds	r24, 0x0071
 71c:	80 93 90 02 	sts	0x0290, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 720:	84 e0       	ldi	r24, 0x04	; 4
 722:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0b be       	out	0x3b, r0	; 59
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 744:	ea 5b       	subi	r30, 0xBA	; 186
 746:	ff 4f       	sbci	r31, 0xFF	; 255
 748:	0c 94 97 04 	jmp	0x92e	; 0x92e <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 74c:	80 91 00 02 	lds	r24, 0x0200
 750:	e0 91 91 02 	lds	r30, 0x0291
 754:	f0 91 92 02 	lds	r31, 0x0292
 758:	e8 0f       	add	r30, r24
 75a:	f1 1d       	adc	r31, r1
 75c:	80 91 73 00 	lds	r24, 0x0073
 760:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 762:	84 e9       	ldi	r24, 0x94	; 148
 764:	80 93 74 00 	sts	0x0074, r24
      break;      
 768:	de cf       	rjmp	.-68     	; 0x726 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 76a:	80 91 93 02 	lds	r24, 0x0293
 76e:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 772:	10 92 00 02 	sts	0x0200, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 776:	85 e8       	ldi	r24, 0x85	; 133
 778:	80 93 74 00 	sts	0x0074, r24
      break;
 77c:	d4 cf       	rjmp	.-88     	; 0x726 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 77e:	80 91 00 02 	lds	r24, 0x0200
 782:	90 91 94 02 	lds	r25, 0x0294
 786:	89 17       	cp	r24, r25
 788:	60 f7       	brcc	.-40     	; 0x762 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 78a:	e0 91 91 02 	lds	r30, 0x0291
 78e:	f0 91 92 02 	lds	r31, 0x0292
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	98 0f       	add	r25, r24
 796:	90 93 00 02 	sts	0x0200, r25
 79a:	e8 0f       	add	r30, r24
 79c:	f1 1d       	adc	r31, r1
 79e:	80 81       	ld	r24, Z
 7a0:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
 7a4:	85 e8       	ldi	r24, 0x85	; 133
 7a6:	80 93 74 00 	sts	0x0074, r24
 7aa:	bd cf       	rjmp	.-134    	; 0x726 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 7ac:	85 ea       	ldi	r24, 0xA5	; 165
 7ae:	80 93 74 00 	sts	0x0074, r24
      break;
 7b2:	b9 cf       	rjmp	.-142    	; 0x726 <__vector_33+0x3e>
 7b4:	20 91 00 02 	lds	r18, 0x0200
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 7b8:	80 91 94 02 	lds	r24, 0x0294
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	28 17       	cp	r18, r24
 7c4:	39 07       	cpc	r19, r25
 7c6:	dc f4       	brge	.+54     	; 0x7fe <__vector_33+0x116>
 7c8:	85 ec       	ldi	r24, 0xC5	; 197
 7ca:	80 93 74 00 	sts	0x0074, r24
 7ce:	ab cf       	rjmp	.-170    	; 0x726 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 7d0:	e0 91 91 02 	lds	r30, 0x0291
 7d4:	f0 91 92 02 	lds	r31, 0x0292
 7d8:	80 91 00 02 	lds	r24, 0x0200
 7dc:	21 e0       	ldi	r18, 0x01	; 1
 7de:	28 0f       	add	r18, r24
 7e0:	20 93 00 02 	sts	0x0200, r18
 7e4:	e8 0f       	add	r30, r24
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 91 73 00 	lds	r24, 0x0073
 7ec:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 7ee:	80 91 94 02 	lds	r24, 0x0294
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	28 17       	cp	r18, r24
 7fa:	39 07       	cpc	r19, r25
 7fc:	2c f3       	brlt	.-54     	; 0x7c8 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 7fe:	85 e8       	ldi	r24, 0x85	; 133
 800:	80 93 74 00 	sts	0x0074, r24
 804:	90 cf       	rjmp	.-224    	; 0x726 <__vector_33+0x3e>

00000806 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 806:	80 91 74 00 	lds	r24, 0x0074
}
 80a:	81 70       	andi	r24, 0x01	; 1
 80c:	08 95       	ret

0000080e <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 80e:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 812:	90 fd       	sbrc	r25, 0
 814:	fc cf       	rjmp	.-8      	; 0x80e <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 816:	8e 7f       	andi	r24, 0xFE	; 254
 818:	80 93 93 02 	sts	0x0293, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 81c:	70 93 92 02 	sts	0x0292, r23
 820:	60 93 91 02 	sts	0x0291, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 824:	40 93 94 02 	sts	0x0294, r20
  TWCR = TWCR_START;                    //initiate START
 828:	85 ea       	ldi	r24, 0xA5	; 165
 82a:	80 93 74 00 	sts	0x0074, r24
 82e:	08 95       	ret

00000830 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 830:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 834:	90 fd       	sbrc	r25, 0
 836:	fc cf       	rjmp	.-8      	; 0x830 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	80 93 93 02 	sts	0x0293, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 83e:	70 93 92 02 	sts	0x0292, r23
 842:	60 93 91 02 	sts	0x0291, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 846:	40 93 94 02 	sts	0x0294, r20
  TWCR = TWCR_START;                   //initiate START
 84a:	85 ea       	ldi	r24, 0xA5	; 165
 84c:	80 93 74 00 	sts	0x0074, r24
 850:	08 95       	ret

00000852 <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
 858:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 85c:	8c e0       	ldi	r24, 0x0C	; 12
 85e:	80 93 70 00 	sts	0x0070, r24
 862:	08 95       	ret

00000864 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 864:	5d 9b       	sbis	0x0b, 5	; 11
 866:	fe cf       	rjmp	.-4      	; 0x864 <uart_putc>
    UDR0 = data;    // Send data byte
 868:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 86a:	5d 9b       	sbis	0x0b, 5	; 11
 86c:	fe cf       	rjmp	.-4      	; 0x86a <uart_putc+0x6>
}
 86e:	08 95       	ret

00000870 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 870:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 872:	90 81       	ld	r25, Z
 874:	99 23       	and	r25, r25
 876:	49 f0       	breq	.+18     	; 0x88a <uart_puts+0x1a>
 878:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 87a:	5d 9b       	sbis	0x0b, 5	; 11
 87c:	fe cf       	rjmp	.-4      	; 0x87a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 87e:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 880:	5d 9b       	sbis	0x0b, 5	; 11
 882:	fe cf       	rjmp	.-4      	; 0x880 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 884:	91 91       	ld	r25, Z+
 886:	91 11       	cpse	r25, r1
 888:	f8 cf       	rjmp	.-16     	; 0x87a <uart_puts+0xa>
 88a:	08 95       	ret

0000088c <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 88c:	9c 01       	movw	r18, r24
 88e:	fc 01       	movw	r30, r24
 890:	44 91       	lpm	r20, Z
 892:	44 23       	and	r20, r20
 894:	69 f0       	breq	.+26     	; 0x8b0 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	f9 01       	movw	r30, r18
 89a:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 89c:	5d 9b       	sbis	0x0b, 5	; 11
 89e:	fe cf       	rjmp	.-4      	; 0x89c <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 8a0:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 8a2:	5d 9b       	sbis	0x0b, 5	; 11
 8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 8a6:	9c 01       	movw	r18, r24
 8a8:	fc 01       	movw	r30, r24
 8aa:	44 91       	lpm	r20, Z
 8ac:	41 11       	cpse	r20, r1
 8ae:	f3 cf       	rjmp	.-26     	; 0x896 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 8b0:	08 95       	ret

000008b2 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 8b2:	8a b1       	in	r24, 0x0a	; 10
 8b4:	88 69       	ori	r24, 0x98	; 152
 8b6:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 8b8:	e5 e9       	ldi	r30, 0x95	; 149
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	86 60       	ori	r24, 0x06	; 6
 8c0:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 8c2:	10 92 90 00 	sts	0x0090, r1
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 8c6:	87 e6       	ldi	r24, 0x67	; 103
 8c8:	89 b9       	out	0x09, r24	; 9
 8ca:	08 95       	ret

000008cc <uart_getc>:
 8cc:	80 e8       	ldi	r24, 0x80	; 128
 8ce:	9e e3       	ldi	r25, 0x3E	; 62
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <uart_getc+0xa>
 8d2:	01 97       	sbiw	r24, 0x01	; 1
 8d4:	21 f0       	breq	.+8      	; 0x8de <uart_getc+0x12>
 8d6:	5f 9b       	sbis	0x0b, 7	; 11
 8d8:	fc cf       	rjmp	.-8      	; 0x8d2 <uart_getc+0x6>
 8da:	8c b1       	in	r24, 0x0c	; 12
 8dc:	08 95       	ret
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	08 95       	ret

000008e2 <main>:


int main(){

    init_twi();
 8e2:	0e 94 29 04 	call	0x852	; 0x852 <init_twi>

    DDRE  |= 0x08;
 8e6:	13 9a       	sbi	0x02, 3	; 2
    PORTE |= 0x08;
 8e8:	1b 9a       	sbi	0x03, 3	; 3
    
    DDRE  |= 0x04; //Port E bit 2 is active high reset for radio
 8ea:	12 9a       	sbi	0x02, 2	; 2
    PORTE |= 0x04; //radio reset is on at powerup (active high)
 8ec:	1a 9a       	sbi	0x03, 2	; 3
    
    EICRB |= (1<<ISC71) | (1<ISC70);
 8ee:	8a b7       	in	r24, 0x3a	; 58
 8f0:	81 68       	ori	r24, 0x81	; 129
 8f2:	8a bf       	out	0x3a, r24	; 58
    EIMSK |= (1<<INT7);
 8f4:	89 b7       	in	r24, 0x39	; 57
 8f6:	80 68       	ori	r24, 0x80	; 128
 8f8:	89 bf       	out	0x39, r24	; 57
    
    //hardware reset of Si4734
    PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
 8fa:	1f 98       	cbi	0x03, 7	; 3
    DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
 8fc:	17 9a       	sbi	0x02, 7	; 2
    PORTE |=  (1<<PE2); //hardware reset Si4734
 8fe:	1a 9a       	sbi	0x03, 2	; 3
 900:	8f e1       	ldi	r24, 0x1F	; 31
 902:	93 e0       	ldi	r25, 0x03	; 3
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <main+0x22>
 908:	00 c0       	rjmp	.+0      	; 0x90a <main+0x28>
 90a:	00 00       	nop
    _delay_us(200);     //hold for 200us, 100us by spec
    PORTE &= ~(1<<PE2); //release reset
 90c:	1a 98       	cbi	0x03, 2	; 3
 90e:	90 ea       	ldi	r25, 0xA0	; 160
 910:	9a 95       	dec	r25
 912:	f1 f7       	brne	.-4      	; 0x910 <main+0x2e>
    _delay_us(30);      //5us required because of my slow I2C translators I suspect
    //Si code in "low" has 30us delay...no explaination
    DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
 914:	17 98       	cbi	0x02, 7	; 2
    
    sei();
 916:	78 94       	sei

    fm_pwr_up(); //powerup the radio as appropriate
 918:	0e 94 07 02 	call	0x40e	; 0x40e <fm_pwr_up>
    current_fm_freq = 9990;
 91c:	86 e0       	ldi	r24, 0x06	; 6
 91e:	97 e2       	ldi	r25, 0x27	; 39
 920:	90 93 54 02 	sts	0x0254, r25
 924:	80 93 53 02 	sts	0x0253, r24
    fm_tune_freq();
 928:	0e 94 e7 00 	call	0x1ce	; 0x1ce <fm_tune_freq>
    
    while(1){
    }//while
 92c:	ff cf       	rjmp	.-2      	; 0x92c <main+0x4a>

0000092e <__tablejump2__>:
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	00 24       	eor	r0, r0
 934:	00 1c       	adc	r0, r0
 936:	0b be       	out	0x3b, r0	; 59
 938:	07 90       	elpm	r0, Z+
 93a:	f6 91       	elpm	r31, Z
 93c:	e0 2d       	mov	r30, r0
 93e:	09 94       	ijmp

00000940 <__itoa_ncheck>:
 940:	bb 27       	eor	r27, r27
 942:	4a 30       	cpi	r20, 0x0A	; 10
 944:	31 f4       	brne	.+12     	; 0x952 <__itoa_ncheck+0x12>
 946:	99 23       	and	r25, r25
 948:	22 f4       	brpl	.+8      	; 0x952 <__itoa_ncheck+0x12>
 94a:	bd e2       	ldi	r27, 0x2D	; 45
 94c:	90 95       	com	r25
 94e:	81 95       	neg	r24
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	0c 94 ac 04 	jmp	0x958	; 0x958 <__utoa_common>

00000956 <__utoa_ncheck>:
 956:	bb 27       	eor	r27, r27

00000958 <__utoa_common>:
 958:	fb 01       	movw	r30, r22
 95a:	55 27       	eor	r21, r21
 95c:	aa 27       	eor	r26, r26
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	aa 1f       	adc	r26, r26
 964:	a4 17       	cp	r26, r20
 966:	10 f0       	brcs	.+4      	; 0x96c <__utoa_common+0x14>
 968:	a4 1b       	sub	r26, r20
 96a:	83 95       	inc	r24
 96c:	50 51       	subi	r21, 0x10	; 16
 96e:	b9 f7       	brne	.-18     	; 0x95e <__utoa_common+0x6>
 970:	a0 5d       	subi	r26, 0xD0	; 208
 972:	aa 33       	cpi	r26, 0x3A	; 58
 974:	08 f0       	brcs	.+2      	; 0x978 <__utoa_common+0x20>
 976:	a9 5d       	subi	r26, 0xD9	; 217
 978:	a1 93       	st	Z+, r26
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	79 f7       	brne	.-34     	; 0x95c <__utoa_common+0x4>
 97e:	b1 11       	cpse	r27, r1
 980:	b1 93       	st	Z+, r27
 982:	11 92       	st	Z+, r1
 984:	cb 01       	movw	r24, r22
 986:	0c 94 c5 04 	jmp	0x98a	; 0x98a <strrev>

0000098a <strrev>:
 98a:	dc 01       	movw	r26, r24
 98c:	fc 01       	movw	r30, r24
 98e:	67 2f       	mov	r22, r23
 990:	71 91       	ld	r23, Z+
 992:	77 23       	and	r23, r23
 994:	e1 f7       	brne	.-8      	; 0x98e <strrev+0x4>
 996:	32 97       	sbiw	r30, 0x02	; 2
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <strrev+0x18>
 99a:	7c 91       	ld	r23, X
 99c:	6d 93       	st	X+, r22
 99e:	70 83       	st	Z, r23
 9a0:	62 91       	ld	r22, -Z
 9a2:	ae 17       	cp	r26, r30
 9a4:	bf 07       	cpc	r27, r31
 9a6:	c8 f3       	brcs	.-14     	; 0x99a <strrev+0x10>
 9a8:	08 95       	ret

000009aa <eeprom_read_byte>:
 9aa:	e1 99       	sbic	0x1c, 1	; 28
 9ac:	fe cf       	rjmp	.-4      	; 0x9aa <eeprom_read_byte>
 9ae:	9f bb       	out	0x1f, r25	; 31
 9b0:	8e bb       	out	0x1e, r24	; 30
 9b2:	e0 9a       	sbi	0x1c, 0	; 28
 9b4:	99 27       	eor	r25, r25
 9b6:	8d b3       	in	r24, 0x1d	; 29
 9b8:	08 95       	ret

000009ba <eeprom_read_word>:
 9ba:	a8 e1       	ldi	r26, 0x18	; 24
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	42 e0       	ldi	r20, 0x02	; 2
 9c0:	50 e0       	ldi	r21, 0x00	; 0
 9c2:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <eeprom_read_blraw>

000009c6 <eeprom_write_byte>:
 9c6:	26 2f       	mov	r18, r22

000009c8 <eeprom_write_r18>:
 9c8:	e1 99       	sbic	0x1c, 1	; 28
 9ca:	fe cf       	rjmp	.-4      	; 0x9c8 <eeprom_write_r18>
 9cc:	9f bb       	out	0x1f, r25	; 31
 9ce:	8e bb       	out	0x1e, r24	; 30
 9d0:	2d bb       	out	0x1d, r18	; 29
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	f8 94       	cli
 9d6:	e2 9a       	sbi	0x1c, 2	; 28
 9d8:	e1 9a       	sbi	0x1c, 1	; 28
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	08 95       	ret

000009e0 <eeprom_write_word>:
 9e0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <eeprom_write_byte>
 9e4:	27 2f       	mov	r18, r23
 9e6:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <eeprom_write_r18>

000009ea <eeprom_read_block>:
 9ea:	dc 01       	movw	r26, r24
 9ec:	cb 01       	movw	r24, r22

000009ee <eeprom_read_blraw>:
 9ee:	fc 01       	movw	r30, r24
 9f0:	e1 99       	sbic	0x1c, 1	; 28
 9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <eeprom_read_blraw+0x2>
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <eeprom_read_blraw+0x14>
 9f6:	ff bb       	out	0x1f, r31	; 31
 9f8:	ee bb       	out	0x1e, r30	; 30
 9fa:	e0 9a       	sbi	0x1c, 0	; 28
 9fc:	31 96       	adiw	r30, 0x01	; 1
 9fe:	0d b2       	in	r0, 0x1d	; 29
 a00:	0d 92       	st	X+, r0
 a02:	41 50       	subi	r20, 0x01	; 1
 a04:	50 40       	sbci	r21, 0x00	; 0
 a06:	b8 f7       	brcc	.-18     	; 0x9f6 <eeprom_read_blraw+0x8>
 a08:	08 95       	ret

00000a0a <_exit>:
 a0a:	f8 94       	cli

00000a0c <__stop_program>:
 a0c:	ff cf       	rjmp	.-2      	; 0xa0c <__stop_program>
