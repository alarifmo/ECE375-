
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800104  00800104  000002aa  2**0
                  ALLOC
  3 .stab         00000cc0  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e9c  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e1       	ldi	r30, 0x12	; 18
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ab 35       	cpi	r26, 0x5B	; 91
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	6c d0       	rcall	.+216    	; 0x140 <main>
  68:	d2 c0       	rjmp	.+420    	; 0x20e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <spi_init>:
//char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	84 b9       	out	0x04, r24	; 4
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  72:	8c b5       	in	r24, 0x2c	; 44
  74:	80 65       	ori	r24, 0x50	; 80
  76:	8c bd       	out	0x2c, r24	; 44
  SPSR  |= (1<<SPI2X);            //run at double speed 
  78:	8d b5       	in	r24, 0x2d	; 45
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	8d bd       	out	0x2d, r24	; 45
  7e:	08 95       	ret

00000080 <USART0_RX_vect>:

//**************  end tx portion ***************
  }//while
}//main

ISR(USART0_RX_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
    //lcd_str_array[--i]  = (' ');     //clear the count field
    //lcd_str_array[i+1]  = (' ');
    //lcd_str_array[i+2]  = (' ');
    //i=0;  
  //}
}
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
  94:	90 91 c0 00 	lds	r25, 0x00C0
  98:	95 ff       	sbrs	r25, 5
  9a:	fc cf       	rjmp	.-8      	; 0x94 <uart_putc>
    UDR0 = data;    // Send data byte
  9c:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
  a0:	80 91 c0 00 	lds	r24, 0x00C0
  a4:	85 ff       	sbrs	r24, 5
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <uart_putc+0xc>
}
  a8:	08 95       	ret

000000aa <uart_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
  aa:	fc 01       	movw	r30, r24
  ac:	20 81       	ld	r18, Z
  ae:	22 23       	and	r18, r18
  b0:	71 f0       	breq	.+28     	; 0xce <uart_puts+0x24>
  b2:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
  b4:	90 91 c0 00 	lds	r25, 0x00C0
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
  bc:	20 93 c6 00 	sts	0x00C6, r18
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
  c0:	90 91 c0 00 	lds	r25, 0x00C0
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <uart_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
  c8:	21 91       	ld	r18, Z+
  ca:	21 11       	cpse	r18, r1
  cc:	f3 cf       	rjmp	.-26     	; 0xb4 <uart_puts+0xa>
  ce:	08 95       	ret

000000d0 <uart_puts_p>:

//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
  d0:	9c 01       	movw	r18, r24
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
  d2:	c9 01       	movw	r24, r18
  d4:	f9 01       	movw	r30, r18
  d6:	44 91       	lpm	r20, Z
  d8:	44 23       	and	r20, r20
  da:	99 f0       	breq	.+38     	; 0x102 <uart_puts_p+0x32>
        uart_putc(pgm_read_byte(str++));
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	84 91       	lpm	r24, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
  e4:	90 91 c0 00 	lds	r25, 0x00C0
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <uart_puts_p+0x14>
    UDR0 = data;    // Send data byte
  ec:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
  f0:	90 91 c0 00 	lds	r25, 0x00C0
  f4:	95 ff       	sbrs	r25, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <uart_puts_p+0x20>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
  f8:	c9 01       	movw	r24, r18
  fa:	f9 01       	movw	r30, r18
  fc:	44 91       	lpm	r20, Z
  fe:	41 11       	cpse	r20, r1
 100:	ed cf       	rjmp	.-38     	; 0xdc <uart_puts_p+0xc>
        uart_putc(pgm_read_byte(str++));
    }
}
 102:	08 95       	ret

00000104 <uart_init>:
//TXD is PORT D bit 1

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED
 104:	e1 ec       	ldi	r30, 0xC1	; 193
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 10e:	e2 ec       	ldi	r30, 0xC2	; 194
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	86 60       	ori	r24, 0x06	; 6
 116:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 118:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 11c:	83 e3       	ldi	r24, 0x33	; 51
 11e:	80 93 c4 00 	sts	0x00C4, r24
 122:	08 95       	ret

00000124 <uart_getc>:
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	9e e3       	ldi	r25, 0x3E	; 62
 128:	02 c0       	rjmp	.+4      	; 0x12e <uart_getc+0xa>
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	39 f0       	breq	.+14     	; 0x13c <uart_getc+0x18>
 12e:	20 91 c0 00 	lds	r18, 0x00C0
 132:	27 ff       	sbrs	r18, 7
 134:	fa cf       	rjmp	.-12     	; 0x12a <uart_getc+0x6>
 136:	80 91 c6 00 	lds	r24, 0x00C6
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret

00000140 <main>:
  SPSR  |= (1<<SPI2X);            //run at double speed 
}//spi_init    

int main(){
  //DDRF |= 0x08; //lcd strobe bit
  uart_init();  
 140:	e1 df       	rcall	.-62     	; 0x104 <uart_init>
//char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 142:	84 b1       	in	r24, 0x04	; 4
 144:	87 60       	ori	r24, 0x07	; 7
 146:	84 b9       	out	0x04, r24	; 4
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 148:	8c b5       	in	r24, 0x2c	; 44
 14a:	80 65       	ori	r24, 0x50	; 80
 14c:	8c bd       	out	0x2c, r24	; 44
  SPSR  |= (1<<SPI2X);            //run at double speed 
 14e:	8d b5       	in	r24, 0x2d	; 45
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8d bd       	out	0x2d, r24	; 45
  spi_init();
  //lcd_init();
  //clear_display();
  //cursor_home();

  sei();
 154:	78 94       	sei
  while(1){
//**************  start rcv portion ***************
      if(rcv_rdy==1){
 156:	80 91 05 01 	lds	r24, 0x0105
//**************  start tx portion ***************



  
 uart_puts("10");
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	a5 df       	rcall	.-182    	; 0xaa <uart_puts>
    itoa(send_seq,lcd_string,10);
 160:	80 91 04 01 	lds	r24, 0x0104
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 164:	4a e0       	ldi	r20, 0x0A	; 10
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	71 e0       	ldi	r23, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	1d d0       	rcall	.+58     	; 0x1a8 <__itoa_ncheck>
    uart_puts(lcd_string);
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	9b df       	rcall	.-202    	; 0xaa <uart_puts>
    uart_putc('\0');
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	8e df       	rcall	.-228    	; 0x94 <uart_putc>
    for(i=0;i<=10;i++){_delay_ms(100);}
 178:	10 92 06 01 	sts	0x0106, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	80 e7       	ldi	r24, 0x70	; 112
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x42>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x4c>
 18c:	00 00       	nop
 18e:	80 91 06 01 	lds	r24, 0x0106
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 06 01 	sts	0x0106, r24
 198:	8b 30       	cpi	r24, 0x0B	; 11
 19a:	80 f3       	brcs	.-32     	; 0x17c <main+0x3c>
    send_seq++;
 19c:	80 91 04 01 	lds	r24, 0x0104
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 04 01 	sts	0x0104, r24
    send_seq=(send_seq);



//**************  end tx portion ***************
  }//while
 1a6:	d7 cf       	rjmp	.-82     	; 0x156 <main+0x16>

000001a8 <__itoa_ncheck>:
 1a8:	bb 27       	eor	r27, r27
 1aa:	4a 30       	cpi	r20, 0x0A	; 10
 1ac:	31 f4       	brne	.+12     	; 0x1ba <__itoa_ncheck+0x12>
 1ae:	99 23       	and	r25, r25
 1b0:	22 f4       	brpl	.+8      	; 0x1ba <__itoa_ncheck+0x12>
 1b2:	bd e2       	ldi	r27, 0x2D	; 45
 1b4:	90 95       	com	r25
 1b6:	81 95       	neg	r24
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <__utoa_common>

000001bc <__utoa_ncheck>:
 1bc:	bb 27       	eor	r27, r27

000001be <__utoa_common>:
 1be:	fb 01       	movw	r30, r22
 1c0:	55 27       	eor	r21, r21
 1c2:	aa 27       	eor	r26, r26
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	aa 1f       	adc	r26, r26
 1ca:	a4 17       	cp	r26, r20
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <__utoa_common+0x14>
 1ce:	a4 1b       	sub	r26, r20
 1d0:	83 95       	inc	r24
 1d2:	50 51       	subi	r21, 0x10	; 16
 1d4:	b9 f7       	brne	.-18     	; 0x1c4 <__utoa_common+0x6>
 1d6:	a0 5d       	subi	r26, 0xD0	; 208
 1d8:	aa 33       	cpi	r26, 0x3A	; 58
 1da:	08 f0       	brcs	.+2      	; 0x1de <__utoa_common+0x20>
 1dc:	a9 5d       	subi	r26, 0xD9	; 217
 1de:	a1 93       	st	Z+, r26
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	79 f7       	brne	.-34     	; 0x1c2 <__utoa_common+0x4>
 1e4:	b1 11       	cpse	r27, r1
 1e6:	b1 93       	st	Z+, r27
 1e8:	11 92       	st	Z+, r1
 1ea:	cb 01       	movw	r24, r22
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <strrev>

000001ee <strrev>:
 1ee:	dc 01       	movw	r26, r24
 1f0:	fc 01       	movw	r30, r24
 1f2:	67 2f       	mov	r22, r23
 1f4:	71 91       	ld	r23, Z+
 1f6:	77 23       	and	r23, r23
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <strrev+0x4>
 1fa:	32 97       	sbiw	r30, 0x02	; 2
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <strrev+0x18>
 1fe:	7c 91       	ld	r23, X
 200:	6d 93       	st	X+, r22
 202:	70 83       	st	Z, r23
 204:	62 91       	ld	r22, -Z
 206:	ae 17       	cp	r26, r30
 208:	bf 07       	cpc	r27, r31
 20a:	c8 f3       	brcs	.-14     	; 0x1fe <strrev+0x10>
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
