
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00002dd2  00002e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013c  00800152  00800152  00002eb8  2**0
                  ALLOC
  3 .stab         00005ca0  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019f7  00000000  00000000  00008b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a54f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000a560  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 02 	jmp	0x430	; 0x430 <__ctors_end>
       4:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
       8:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
       c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      10:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      14:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      18:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      20:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      24:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      28:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_10>
      2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      30:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_12>
      34:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      38:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      3c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_16>
      44:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      48:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_18>
      4c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      50:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      54:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_21>
      58:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      5c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      60:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      64:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      68:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      6c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      70:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      74:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      78:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      7c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      80:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      84:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_33>
      88:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      8c:	7d 0a       	sbc	r7, r29
      8e:	54 0a       	sbc	r5, r20
      90:	54 0a       	sbc	r5, r20
      92:	54 0a       	sbc	r5, r20
      94:	54 0a       	sbc	r5, r20
      96:	54 0a       	sbc	r5, r20
      98:	54 0a       	sbc	r5, r20
      9a:	54 0a       	sbc	r5, r20
      9c:	7d 0a       	sbc	r7, r29
      9e:	54 0a       	sbc	r5, r20
      a0:	54 0a       	sbc	r5, r20
      a2:	54 0a       	sbc	r5, r20
      a4:	54 0a       	sbc	r5, r20
      a6:	54 0a       	sbc	r5, r20
      a8:	54 0a       	sbc	r5, r20
      aa:	54 0a       	sbc	r5, r20
      ac:	87 0a       	sbc	r8, r23
      ae:	54 0a       	sbc	r5, r20
      b0:	54 0a       	sbc	r5, r20
      b2:	54 0a       	sbc	r5, r20
      b4:	54 0a       	sbc	r5, r20
      b6:	54 0a       	sbc	r5, r20
      b8:	54 0a       	sbc	r5, r20
      ba:	54 0a       	sbc	r5, r20
      bc:	54 0a       	sbc	r5, r20
      be:	54 0a       	sbc	r5, r20
      c0:	54 0a       	sbc	r5, r20
      c2:	54 0a       	sbc	r5, r20
      c4:	54 0a       	sbc	r5, r20
      c6:	54 0a       	sbc	r5, r20
      c8:	54 0a       	sbc	r5, r20
      ca:	54 0a       	sbc	r5, r20
      cc:	87 0a       	sbc	r8, r23
      ce:	54 0a       	sbc	r5, r20
      d0:	54 0a       	sbc	r5, r20
      d2:	54 0a       	sbc	r5, r20
      d4:	54 0a       	sbc	r5, r20
      d6:	54 0a       	sbc	r5, r20
      d8:	54 0a       	sbc	r5, r20
      da:	54 0a       	sbc	r5, r20
      dc:	54 0a       	sbc	r5, r20
      de:	54 0a       	sbc	r5, r20
      e0:	54 0a       	sbc	r5, r20
      e2:	54 0a       	sbc	r5, r20
      e4:	54 0a       	sbc	r5, r20
      e6:	54 0a       	sbc	r5, r20
      e8:	54 0a       	sbc	r5, r20
      ea:	54 0a       	sbc	r5, r20
      ec:	9e 0a       	sbc	r9, r30
      ee:	54 0a       	sbc	r5, r20
      f0:	54 0a       	sbc	r5, r20
      f2:	54 0a       	sbc	r5, r20
      f4:	54 0a       	sbc	r5, r20
      f6:	54 0a       	sbc	r5, r20
      f8:	54 0a       	sbc	r5, r20
      fa:	54 0a       	sbc	r5, r20
      fc:	a2 0a       	sbc	r10, r18
      fe:	54 0a       	sbc	r5, r20
     100:	54 0a       	sbc	r5, r20
     102:	54 0a       	sbc	r5, r20
     104:	54 0a       	sbc	r5, r20
     106:	54 0a       	sbc	r5, r20
     108:	54 0a       	sbc	r5, r20
     10a:	54 0a       	sbc	r5, r20
     10c:	54 0a       	sbc	r5, r20
     10e:	54 0a       	sbc	r5, r20
     110:	54 0a       	sbc	r5, r20
     112:	54 0a       	sbc	r5, r20
     114:	54 0a       	sbc	r5, r20
     116:	54 0a       	sbc	r5, r20
     118:	54 0a       	sbc	r5, r20
     11a:	54 0a       	sbc	r5, r20
     11c:	b0 0a       	sbc	r11, r16
     11e:	54 0a       	sbc	r5, r20
     120:	54 0a       	sbc	r5, r20
     122:	54 0a       	sbc	r5, r20
     124:	54 0a       	sbc	r5, r20
     126:	54 0a       	sbc	r5, r20
     128:	54 0a       	sbc	r5, r20
     12a:	54 0a       	sbc	r5, r20
     12c:	6e 0a       	sbc	r6, r30
     12e:	36 0b       	sbc	r19, r22
     130:	40 0b       	sbc	r20, r16
     132:	4a 0b       	sbc	r20, r26
     134:	54 0b       	sbc	r21, r20
     136:	5f 0b       	sbc	r21, r31
     138:	6a 0b       	sbc	r22, r26
     13a:	75 0b       	sbc	r23, r21
     13c:	22 0b       	sbc	r18, r18
     13e:	2c 0b       	sbc	r18, r28
     140:	cb 0c       	add	r12, r11
     142:	c3 0c       	add	r12, r3
     144:	be 0c       	add	r11, r14
     146:	e8 0c       	add	r14, r8
     148:	db 0c       	add	r13, r11
     14a:	e3 0c       	add	r14, r3
     14c:	d3 0c       	add	r13, r3
     14e:	9c 0c       	add	r9, r12
     150:	94 0c       	add	r9, r4
     152:	8f 0c       	add	r8, r15
     154:	87 0c       	add	r8, r7
     156:	f0 0c       	add	r15, r0
     158:	a4 0c       	add	r10, r4
     15a:	7a 0c       	add	r7, r10
     15c:	62 0c       	add	r6, r2
     15e:	10 0d       	add	r17, r0
     160:	b9 0c       	add	r11, r9
     162:	b1 0c       	add	r11, r1
     164:	a9 0c       	add	r10, r9
     166:	30 0d       	add	r19, r0
     168:	6a 0c       	add	r6, r10
     16a:	20 0d       	add	r18, r0
     16c:	72 0c       	add	r7, r2
     16e:	3d 0d       	add	r19, r13
     170:	08 0d       	add	r16, r8
     172:	28 0d       	add	r18, r8
     174:	82 0c       	add	r8, r2
     176:	00 0d       	add	r16, r0
     178:	f8 0c       	add	r15, r8
     17a:	18 0d       	add	r17, r8
     17c:	5d 0c       	add	r5, r13
     17e:	2b 0c       	add	r2, r11
     180:	23 0c       	add	r2, r3
     182:	33 0c       	add	r3, r3
     184:	35 0d       	add	r19, r5
     186:	16 0c       	add	r1, r6
     188:	0e 0c       	add	r0, r14
     18a:	38 0c       	add	r3, r8
     18c:	f1 0b       	sbc	r31, r17
     18e:	55 0c       	add	r5, r5
     190:	1e 0c       	add	r1, r14
     192:	01 0c       	add	r0, r1
     194:	f9 0b       	sbc	r31, r25
     196:	45 0c       	add	r4, r5
     198:	09 0c       	add	r0, r9
     19a:	3d 0c       	add	r3, r13
     19c:	e9 0b       	sbc	r30, r25
     19e:	cf 0b       	sbc	r28, r31
     1a0:	4d 0c       	add	r4, r13
     1a2:	bf 0b       	sbc	r27, r31
     1a4:	b7 0b       	sbc	r27, r23
     1a6:	dc 0b       	sbc	r29, r28
     1a8:	d4 0b       	sbc	r29, r20
     1aa:	e1 0b       	sbc	r30, r17
     1ac:	b2 0b       	sbc	r27, r18
     1ae:	c7 0b       	sbc	r28, r23
     1b0:	9a 0b       	sbc	r25, r26
     1b2:	aa 0b       	sbc	r26, r26
     1b4:	95 0b       	sbc	r25, r21
     1b6:	8d 0b       	sbc	r24, r29
     1b8:	85 0b       	sbc	r24, r21
     1ba:	80 0b       	sbc	r24, r16
     1bc:	a2 0b       	sbc	r26, r18
     1be:	47 0e       	add	r4, r23
     1c0:	65 0e       	add	r6, r21
     1c2:	41 0e       	add	r4, r17
     1c4:	53 0e       	add	r5, r19
     1c6:	35 0e       	add	r3, r21
     1c8:	3b 0e       	add	r3, r27
     1ca:	35 0e       	add	r3, r21
     1cc:	3b 0e       	add	r3, r27
     1ce:	6b 0e       	add	r6, r27
     1d0:	47 0e       	add	r4, r23
     1d2:	65 0e       	add	r6, r21
     1d4:	41 0e       	add	r4, r17
     1d6:	53 0e       	add	r5, r19
     1d8:	4d 0e       	add	r4, r29
     1da:	2f 0e       	add	r2, r31
     1dc:	4d 0e       	add	r4, r29
     1de:	2f 0e       	add	r2, r31
     1e0:	95 0e       	add	r9, r21
     1e2:	d1 0e       	add	r13, r17
     1e4:	89 0e       	add	r8, r25
     1e6:	01 0f       	add	r16, r17
     1e8:	89 0e       	add	r8, r25
     1ea:	c5 0e       	add	r12, r21
     1ec:	bf 0e       	add	r11, r31
     1ee:	2f 0e       	add	r2, r31
     1f0:	9b 0e       	add	r9, r27
     1f2:	2f 0e       	add	r2, r31
     1f4:	ad 0e       	add	r10, r29
     1f6:	59 0e       	add	r5, r25
     1f8:	ef 0e       	add	r14, r31
     1fa:	35 0e       	add	r3, r21
     1fc:	e3 0e       	add	r14, r19
     1fe:	71 0e       	add	r7, r17
     200:	e9 0e       	add	r14, r25
     202:	77 0e       	add	r7, r23
     204:	f5 0e       	add	r15, r21
     206:	b9 0e       	add	r11, r25
     208:	5f 0e       	add	r5, r31
     20a:	59 0e       	add	r5, r25
     20c:	a1 0e       	add	r10, r17
     20e:	7d 0e       	add	r7, r29
     210:	47 0e       	add	r4, r23
     212:	65 0e       	add	r6, r21
     214:	41 0e       	add	r4, r17
     216:	53 0e       	add	r5, r19
     218:	35 0e       	add	r3, r21
     21a:	3b 0e       	add	r3, r27
     21c:	35 0e       	add	r3, r21
     21e:	3b 0e       	add	r3, r27
     220:	6b 0e       	add	r6, r27
     222:	47 0e       	add	r4, r23
     224:	cb 0e       	add	r12, r27
     226:	5f 0e       	add	r5, r31
     228:	41 0e       	add	r4, r17
     22a:	4d 0e       	add	r4, r29
     22c:	2f 0e       	add	r2, r31
     22e:	4d 0e       	add	r4, r29
     230:	2f 0e       	add	r2, r31
     232:	95 0e       	add	r9, r21
     234:	d7 0e       	add	r13, r23
     236:	a7 0e       	add	r10, r23
     238:	6b 0e       	add	r6, r27
     23a:	dd 0e       	add	r13, r29
     23c:	9b 0e       	add	r9, r27
     23e:	71 0e       	add	r7, r17
     240:	77 0e       	add	r7, r23
     242:	59 0e       	add	r5, r25
     244:	5f 0e       	add	r5, r31
     246:	fb 0e       	add	r15, r27
     248:	7d 0e       	add	r7, r29
     24a:	19 0f       	add	r17, r25
     24c:	3d 0f       	add	r19, r29
     24e:	13 0f       	add	r17, r19
     250:	37 0f       	add	r19, r23
     252:	bb 0f       	add	r27, r27
     254:	b5 0f       	add	r27, r21
     256:	13 0f       	add	r17, r19
     258:	3d 0f       	add	r19, r29
     25a:	43 0f       	add	r20, r19
     25c:	1f 0f       	add	r17, r31
     25e:	c7 0f       	add	r28, r23
     260:	13 0f       	add	r17, r19
     262:	19 0f       	add	r17, r25
     264:	37 0f       	add	r19, r23
     266:	13 0f       	add	r17, r19
     268:	7f 0f       	add	r23, r31
     26a:	13 0f       	add	r17, r19
     26c:	2b 0f       	add	r18, r27
     26e:	19 0f       	add	r17, r25
     270:	5b 0f       	add	r21, r27
     272:	43 0f       	add	r20, r19
     274:	1f 0f       	add	r17, r31
     276:	55 0f       	add	r21, r21
     278:	d9 0f       	add	r29, r25
     27a:	2b 0f       	add	r18, r27
     27c:	49 0f       	add	r20, r25
     27e:	e5 0f       	add	r30, r21
     280:	97 0f       	add	r25, r23
     282:	49 0f       	add	r20, r25
     284:	af 0f       	add	r26, r31
     286:	13 0f       	add	r17, r19
     288:	19 0f       	add	r17, r25
     28a:	37 0f       	add	r19, r23
     28c:	13 0f       	add	r17, r19
     28e:	79 0f       	add	r23, r25
     290:	1f 0f       	add	r17, r31
     292:	3d 0f       	add	r19, r29
     294:	13 0f       	add	r17, r19
     296:	2b 0f       	add	r18, r27
     298:	19 0f       	add	r17, r25
     29a:	5b 0f       	add	r21, r27
     29c:	43 0f       	add	r20, r19
     29e:	1f 0f       	add	r17, r31
     2a0:	d3 0f       	add	r29, r19
     2a2:	6d 0f       	add	r22, r29
     2a4:	67 0f       	add	r22, r23
     2a6:	31 0f       	add	r19, r17
     2a8:	61 0f       	add	r22, r17
     2aa:	4f 0f       	add	r20, r31
     2ac:	31 0f       	add	r19, r17
     2ae:	a3 0f       	add	r26, r19
     2b0:	a9 0f       	add	r26, r25
     2b2:	9d 0f       	add	r25, r29
     2b4:	6d 0f       	add	r22, r29
     2b6:	67 0f       	add	r22, r23
     2b8:	31 0f       	add	r19, r17
     2ba:	61 0f       	add	r22, r17
     2bc:	4f 0f       	add	r20, r31
     2be:	c1 0f       	add	r28, r17
     2c0:	cd 0f       	add	r28, r29
     2c2:	55 0f       	add	r21, r21
     2c4:	85 0f       	add	r24, r21
     2c6:	8b 0f       	add	r24, r27
     2c8:	95 14       	cp	r9, r5
     2ca:	89 14       	cp	r8, r9
     2cc:	83 14       	cp	r8, r3
     2ce:	77 14       	cp	r7, r7
     2d0:	71 14       	cp	r7, r1
     2d2:	65 14       	cp	r6, r5
     2d4:	5f 14       	cp	r5, r15
     2d6:	59 14       	cp	r5, r9
     2d8:	53 14       	cp	r5, r3
     2da:	4d 14       	cp	r4, r13
     2dc:	41 14       	cp	r4, r1
     2de:	3b 14       	cp	r3, r11
     2e0:	35 14       	cp	r3, r5
     2e2:	29 14       	cp	r2, r9
     2e4:	23 14       	cp	r2, r3
     2e6:	17 14       	cp	r1, r7
     2e8:	11 14       	cp	r1, r1
     2ea:	05 14       	cp	r0, r5
     2ec:	ff 13       	cpse	r31, r31
     2ee:	f3 13       	cpse	r31, r19
     2f0:	ed 13       	cpse	r30, r29
     2f2:	e7 13       	cpse	r30, r23
     2f4:	e1 13       	cpse	r30, r17
     2f6:	db 13       	cpse	r29, r27
     2f8:	cf 13       	cpse	r28, r31
     2fa:	c9 13       	cpse	r28, r25
     2fc:	c3 13       	cpse	r28, r19
     2fe:	bd 13       	cpse	r27, r29
     300:	b7 13       	cpse	r27, r23
     302:	ab 13       	cpse	r26, r27
     304:	a5 13       	cpse	r26, r21
     306:	99 13       	cpse	r25, r25
     308:	93 13       	cpse	r25, r19
     30a:	8d 13       	cpse	r24, r29
     30c:	87 13       	cpse	r24, r23
     30e:	7b 13       	cpse	r23, r27
     310:	75 13       	cpse	r23, r21
     312:	69 13       	cpse	r22, r25
     314:	63 13       	cpse	r22, r19
     316:	57 13       	cpse	r21, r23
     318:	51 13       	cpse	r21, r17
     31a:	45 13       	cpse	r20, r21
     31c:	3f 13       	cpse	r19, r31
     31e:	33 13       	cpse	r19, r19
     320:	2d 13       	cpse	r18, r29
     322:	21 13       	cpse	r18, r17
     324:	1b 13       	cpse	r17, r27
     326:	15 13       	cpse	r17, r21
     328:	0f 13       	cpse	r16, r31
     32a:	09 13       	cpse	r16, r25
     32c:	fd 12       	cpse	r15, r29
     32e:	f7 12       	cpse	r15, r23
     330:	f1 12       	cpse	r15, r17
     332:	eb 12       	cpse	r14, r27
     334:	e5 12       	cpse	r14, r21
     336:	d9 12       	cpse	r13, r25
     338:	d3 12       	cpse	r13, r19
     33a:	c7 12       	cpse	r12, r23
     33c:	c1 12       	cpse	r12, r17
     33e:	bb 12       	cpse	r11, r27
     340:	b5 12       	cpse	r11, r21
     342:	a9 12       	cpse	r10, r25
     344:	a3 12       	cpse	r10, r19
     346:	9d 12       	cpse	r9, r29
     348:	97 12       	cpse	r9, r23
     34a:	91 12       	cpse	r9, r17
     34c:	85 12       	cpse	r8, r21
     34e:	7f 12       	cpse	r7, r31
     350:	73 12       	cpse	r7, r19
     352:	6d 12       	cpse	r6, r29
     354:	67 12       	cpse	r6, r23
     356:	61 12       	cpse	r6, r17
     358:	55 12       	cpse	r5, r21
     35a:	4f 12       	cpse	r4, r31
     35c:	49 12       	cpse	r4, r25
     35e:	43 12       	cpse	r4, r19
     360:	37 12       	cpse	r3, r23
     362:	31 12       	cpse	r3, r17
     364:	2b 12       	cpse	r2, r27
     366:	25 12       	cpse	r2, r21
     368:	1f 12       	cpse	r1, r31
     36a:	13 12       	cpse	r1, r19
     36c:	0d 12       	cpse	r0, r29
     36e:	01 12       	cpse	r0, r17
     370:	fb 11       	cpse	r31, r11
     372:	ef 11       	cpse	r30, r15
     374:	e9 11       	cpse	r30, r9
     376:	dd 11       	cpse	r29, r13
     378:	d7 11       	cpse	r29, r7
     37a:	cb 11       	cpse	r28, r11
     37c:	c5 11       	cpse	r28, r5
     37e:	bf 11       	cpse	r27, r15
     380:	b9 11       	cpse	r27, r9
     382:	b3 11       	cpse	r27, r3
     384:	a7 11       	cpse	r26, r7
     386:	a1 11       	cpse	r26, r1
     388:	95 11       	cpse	r25, r5
     38a:	8f 11       	cpse	r24, r15
     38c:	89 11       	cpse	r24, r9
     38e:	83 11       	cpse	r24, r3
     390:	77 11       	cpse	r23, r7
     392:	71 11       	cpse	r23, r1
     394:	6b 11       	cpse	r22, r11
     396:	65 11       	cpse	r22, r5
     398:	59 11       	cpse	r21, r9
     39a:	53 11       	cpse	r21, r3
     39c:	47 11       	cpse	r20, r7
     39e:	41 11       	cpse	r20, r1
     3a0:	35 11       	cpse	r19, r5
     3a2:	2f 11       	cpse	r18, r15
     3a4:	23 11       	cpse	r18, r3
     3a6:	1d 11       	cpse	r17, r13
     3a8:	11 11       	cpse	r17, r1
     3aa:	0b 11       	cpse	r16, r11
     3ac:	ff 10       	cpse	r15, r15
     3ae:	f9 10       	cpse	r15, r9
     3b0:	ed 10       	cpse	r14, r13
     3b2:	e7 10       	cpse	r14, r7
     3b4:	e1 10       	cpse	r14, r1
     3b6:	db 10       	cpse	r13, r11
     3b8:	d5 10       	cpse	r13, r5
     3ba:	c9 10       	cpse	r12, r9
     3bc:	c3 10       	cpse	r12, r3
     3be:	bd 10       	cpse	r11, r13
     3c0:	b1 10       	cpse	r11, r1
     3c2:	ab 10       	cpse	r10, r11
     3c4:	9f 10       	cpse	r9, r15
     3c6:	99 10       	cpse	r9, r9
     3c8:	8d 10       	cpse	r8, r13
     3ca:	87 10       	cpse	r8, r7
     3cc:	7b 10       	cpse	r7, r11
     3ce:	75 10       	cpse	r7, r5
     3d0:	6f 10       	cpse	r6, r15
     3d2:	69 10       	cpse	r6, r9
     3d4:	5d 10       	cpse	r5, r13
     3d6:	57 10       	cpse	r5, r7
     3d8:	4b 10       	cpse	r4, r11
     3da:	45 10       	cpse	r4, r5
     3dc:	39 10       	cpse	r3, r9
     3de:	33 10       	cpse	r3, r3
     3e0:	27 10       	cpse	r2, r7
     3e2:	21 10       	cpse	r2, r1
     3e4:	1b 10       	cpse	r1, r11
     3e6:	15 10       	cpse	r1, r5
     3e8:	0f 10       	cpse	r0, r15
     3ea:	03 10       	cpse	r0, r3
     3ec:	fd 0f       	add	r31, r29
     3ee:	f7 0f       	add	r31, r23
     3f0:	9b 14       	cp	r9, r11
     3f2:	c5 14       	cp	r12, r5
     3f4:	b3 14       	cp	r11, r3
     3f6:	c5 14       	cp	r12, r5
     3f8:	b3 14       	cp	r11, r3
     3fa:	c5 14       	cp	r12, r5
     3fc:	b3 14       	cp	r11, r3
     3fe:	e9 14       	cp	r14, r9
     400:	b3 14       	cp	r11, r3
     402:	e9 14       	cp	r14, r9
     404:	d1 14       	cp	r13, r1
     406:	bf 14       	cp	r11, r15
     408:	01 15       	cp	r16, r1
     40a:	bf 14       	cp	r11, r15
     40c:	ef 14       	cp	r14, r15
     40e:	dd 14       	cp	r13, r13
     410:	cb 14       	cp	r12, r11
     412:	b3 14       	cp	r11, r3
     414:	cb 14       	cp	r12, r11
     416:	b3 14       	cp	r11, r3
     418:	cb 14       	cp	r12, r11
     41a:	b3 14       	cp	r11, r3
     41c:	e3 14       	cp	r14, r3
     41e:	b3 14       	cp	r11, r3
     420:	e3 14       	cp	r14, r3
     422:	d1 14       	cp	r13, r1
     424:	f5 14       	cp	r15, r5
     426:	fb 14       	cp	r15, r11
     428:	b3 14       	cp	r11, r3
     42a:	bf 14       	cp	r11, r15
     42c:	07 15       	cp	r16, r7
     42e:	dd 14       	cp	r13, r13

00000430 <__ctors_end>:
     430:	11 24       	eor	r1, r1
     432:	1f be       	out	0x3f, r1	; 63
     434:	cf ef       	ldi	r28, 0xFF	; 255
     436:	d0 e1       	ldi	r29, 0x10	; 16
     438:	de bf       	out	0x3e, r29	; 62
     43a:	cd bf       	out	0x3d, r28	; 61

0000043c <__do_copy_data>:
     43c:	11 e0       	ldi	r17, 0x01	; 1
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	b1 e0       	ldi	r27, 0x01	; 1
     442:	e2 ed       	ldi	r30, 0xD2	; 210
     444:	fd e2       	ldi	r31, 0x2D	; 45
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	0b bf       	out	0x3b, r16	; 59
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__do_copy_data+0x14>
     44c:	07 90       	elpm	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	a2 35       	cpi	r26, 0x52	; 82
     452:	b1 07       	cpc	r27, r17
     454:	d9 f7       	brne	.-10     	; 0x44c <__do_copy_data+0x10>

00000456 <__do_clear_bss>:
     456:	22 e0       	ldi	r18, 0x02	; 2
     458:	a2 e5       	ldi	r26, 0x52	; 82
     45a:	b1 e0       	ldi	r27, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <.do_clear_bss_start>

0000045e <.do_clear_bss_loop>:
     45e:	1d 92       	st	X+, r1

00000460 <.do_clear_bss_start>:
     460:	ae 38       	cpi	r26, 0x8E	; 142
     462:	b2 07       	cpc	r27, r18
     464:	e1 f7       	brne	.-8      	; 0x45e <.do_clear_bss_loop>
     466:	0e 94 57 15 	call	0x2aae	; 0x2aae <main>
     46a:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <_exit>

0000046e <__bad_interrupt>:
     46e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000472 <spi_init>:
extern uint8_t lm73_wr_buf[2]; 
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
     472:	87 b3       	in	r24, 0x17	; 23
     474:	87 60       	ori	r24, 0x07	; 7
     476:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
     478:	8d b1       	in	r24, 0x0d	; 13
     47a:	80 65       	ori	r24, 0x50	; 80
     47c:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
     47e:	70 9a       	sbi	0x0e, 0	; 14
     480:	08 95       	ret

00000482 <get_48>:
}//spi_init    

/*************************Test function**********************/
double get_48(){

clear_display();
     482:	0e 94 13 08 	call	0x1026	; 0x1026 <clear_display>
	 
	string2lcd("a");	
     486:	89 e2       	ldi	r24, 0x29	; 41
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 43 08 	call	0x1086	; 0x1086 <string2lcd>
	string2lcd(lcd_str_array);	  
     48e:	80 e9       	ldi	r24, 0x90	; 144
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 43 08 	call	0x1086	; 0x1086 <string2lcd>
        rcv_rdy=0;
     496:	10 92 7b 01 	sts	0x017B, r1
        //cursor_home();



}
     49a:	08 95       	ret

0000049c <get_128>:
/*******************************/
double get_128(){

//_delay_ms(50); //tenth second wait                  //wipe the display
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);//read temperature data from LM73 (2 bytes) 
     49c:	42 e0       	ldi	r20, 0x02	; 2
     49e:	67 e8       	ldi	r22, 0x87	; 135
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	80 e9       	ldi	r24, 0x90	; 144
     4a4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <twi_start_rd>
  //_delay_ms(2);    //wait for it to finish
  lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
     4a8:	e7 e8       	ldi	r30, 0x87	; 135
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	80 81       	ld	r24, Z
     4ae:	90 e0       	ldi	r25, 0x00	; 0
  lm73_temp = lm73_temp << 8; //shift it into upper byte 
     4b0:	98 2f       	mov	r25, r24
     4b2:	88 27       	eor	r24, r24
  lm73_temp |= lm73_rd_buf[1];  //"OR" in the low temp byte to lm73_temp 
     4b4:	21 81       	ldd	r18, Z+1	; 0x01
     4b6:	82 2b       	or	r24, r18
     4b8:	90 93 7f 01 	sts	0x017F, r25
     4bc:	80 93 7e 01 	sts	0x017E, r24
  //lm73_temp =
  //itoa(lm73_temp, lcd_string_array, 10); //convert to string in array with itoa() from avr-libc                           
  //string2lcd(lcd_string_array); //send the string to LCD (lcd_functions)
  fp_adc_result = div(lm73_temp, 128);              //do division by 205 (204.8 to be exact)
     4c0:	60 e8       	ldi	r22, 0x80	; 128
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__divmodhi4>
     4c8:	9b 01       	movw	r18, r22
     4ca:	60 93 b1 01 	sts	0x01B1, r22
     4ce:	70 93 b2 01 	sts	0x01B2, r23
     4d2:	80 93 b3 01 	sts	0x01B3, r24
     4d6:	90 93 b4 01 	sts	0x01B4, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	6a e9       	ldi	r22, 0x9A	; 154
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	c9 01       	movw	r24, r18
     4e2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__itoa_ncheck>
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 128); //get the decimal fraction into non-fractional form 
     4e6:	80 91 b3 01 	lds	r24, 0x01B3
     4ea:	90 91 b4 01 	lds	r25, 0x01B4
     4ee:	60 e8       	ldi	r22, 0x80	; 128
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	24 e6       	ldi	r18, 0x64	; 100
     4f4:	ac 01       	movw	r20, r24
     4f6:	24 9f       	mul	r18, r20
     4f8:	c0 01       	movw	r24, r0
     4fa:	25 9f       	mul	r18, r21
     4fc:	90 0d       	add	r25, r0
     4fe:	11 24       	eor	r1, r1
     500:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__divmodhi4>
     504:	9b 01       	movw	r18, r22
     506:	60 93 95 01 	sts	0x0195, r22
     50a:	70 93 96 01 	sts	0x0196, r23
     50e:	80 93 97 01 	sts	0x0197, r24
     512:	90 93 98 01 	sts	0x0198, r25
     516:	4a e0       	ldi	r20, 0x0A	; 10
     518:	63 e8       	ldi	r22, 0x83	; 131
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	c9 01       	movw	r24, r18
     51e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__itoa_ncheck>
  itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string



}
     522:	08 95       	ret

00000524 <display_alarm>:
	0b01000000, //thousands place
	0b00100000, //center colon
	0b01110000  //hi-Z mode
};
/****************/
void display_alarm(){
     524:	cf 93       	push	r28
cur_digit=0;
     526:	10 92 59 01 	sts	0x0159, r1

	//Set Register A
	DDRA = 0xFF; //output
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     52e:	8b bb       	out	0x1b, r24	; 27

tmp=alarm_minutes;
     530:	e0 91 23 01 	lds	r30, 0x0123
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	f0 93 79 01 	sts	0x0179, r31
     53a:	e0 93 78 01 	sts	0x0178, r30
for(i=0; i<2 ; i++){
     53e:	10 92 8a 01 	sts	0x018A, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     542:	cf ef       	ldi	r28, 0xFF	; 255
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     544:	9f 01       	movw	r18, r30
     546:	ad ec       	ldi	r26, 0xCD	; 205
     548:	bc ec       	ldi	r27, 0xCC	; 204
     54a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     54e:	ac 01       	movw	r20, r24
     550:	56 95       	lsr	r21
     552:	47 95       	ror	r20
     554:	56 95       	lsr	r21
     556:	47 95       	ror	r20
     558:	56 95       	lsr	r21
     55a:	47 95       	ror	r20
     55c:	ca 01       	movw	r24, r20
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	44 0f       	add	r20, r20
     564:	55 1f       	adc	r21, r21
     566:	44 0f       	add	r20, r20
     568:	55 1f       	adc	r21, r21
     56a:	44 0f       	add	r20, r20
     56c:	55 1f       	adc	r21, r21
     56e:	48 0f       	add	r20, r24
     570:	59 1f       	adc	r21, r25
     572:	e4 1b       	sub	r30, r20
     574:	f5 0b       	sbc	r31, r21
     576:	e0 93 99 01 	sts	0x0199, r30
		PORTB=0x00;
     57a:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     57c:	98 b3       	in	r25, 0x18	; 24
     57e:	e0 91 59 01 	lds	r30, 0x0159
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	e0 50       	subi	r30, 0x00	; 0
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 81       	ld	r24, Z
     58a:	89 2b       	or	r24, r25
     58c:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     58e:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     590:	e0 91 99 01 	lds	r30, 0x0199
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ea 5e       	subi	r30, 0xEA	; 234
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	80 81       	ld	r24, Z
     59c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59e:	81 ee       	ldi	r24, 0xE1	; 225
     5a0:	94 e0       	ldi	r25, 0x04	; 4
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <display_alarm+0x7e>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <display_alarm+0x84>
     5a8:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     5aa:	80 91 59 01 	lds	r24, 0x0159
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	80 93 59 01 	sts	0x0159, r24
		tmp /= 10; //get next value
     5b4:	20 91 78 01 	lds	r18, 0x0178
     5b8:	30 91 79 01 	lds	r19, 0x0179
     5bc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     5c0:	fc 01       	movw	r30, r24
     5c2:	f6 95       	lsr	r31
     5c4:	e7 95       	ror	r30
     5c6:	f6 95       	lsr	r31
     5c8:	e7 95       	ror	r30
     5ca:	f6 95       	lsr	r31
     5cc:	e7 95       	ror	r30
     5ce:	f0 93 79 01 	sts	0x0179, r31
     5d2:	e0 93 78 01 	sts	0x0178, r30
	//Set Register A
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
     5d6:	80 91 8a 01 	lds	r24, 0x018A
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	80 93 8a 01 	sts	0x018A, r24
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	08 f4       	brcc	.+2      	; 0x5e6 <display_alarm+0xc2>
     5e4:	af cf       	rjmp	.-162    	; 0x544 <display_alarm+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=alarm_hours;
     5e6:	40 91 24 01 	lds	r20, 0x0124
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	50 93 79 01 	sts	0x0179, r21
     5f0:	40 93 78 01 	sts	0x0178, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     5f4:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=alarm_hours;
do {
		cur_value = tmp % 10; //get current digit to display
     5f6:	9a 01       	movw	r18, r20
     5f8:	ad ec       	ldi	r26, 0xCD	; 205
     5fa:	bc ec       	ldi	r27, 0xCC	; 204
     5fc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     600:	96 95       	lsr	r25
     602:	87 95       	ror	r24
     604:	96 95       	lsr	r25
     606:	87 95       	ror	r24
     608:	96 95       	lsr	r25
     60a:	87 95       	ror	r24
     60c:	9c 01       	movw	r18, r24
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	82 0f       	add	r24, r18
     620:	93 1f       	adc	r25, r19
     622:	48 1b       	sub	r20, r24
     624:	59 0b       	sbc	r21, r25
     626:	40 93 99 01 	sts	0x0199, r20
		PORTB=0x00;
     62a:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     62c:	98 b3       	in	r25, 0x18	; 24
     62e:	e0 91 59 01 	lds	r30, 0x0159
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	e0 50       	subi	r30, 0x00	; 0
     636:	ff 4f       	sbci	r31, 0xFF	; 255
     638:	80 81       	ld	r24, Z
     63a:	89 2b       	or	r24, r25
     63c:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     63e:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     640:	e0 91 99 01 	lds	r30, 0x0199
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	ea 5e       	subi	r30, 0xEA	; 234
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	80 81       	ld	r24, Z
     64c:	8b bb       	out	0x1b, r24	; 27
     64e:	81 ee       	ldi	r24, 0xE1	; 225
     650:	94 e0       	ldi	r25, 0x04	; 4
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <display_alarm+0x12e>
     656:	00 c0       	rjmp	.+0      	; 0x658 <display_alarm+0x134>
     658:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     65a:	80 91 59 01 	lds	r24, 0x0159
     65e:	8f 5f       	subi	r24, 0xFF	; 255
     660:	80 93 59 01 	sts	0x0159, r24
		tmp /= 10; //get next value
     664:	20 91 78 01 	lds	r18, 0x0178
     668:	30 91 79 01 	lds	r19, 0x0179
     66c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     670:	ac 01       	movw	r20, r24
     672:	56 95       	lsr	r21
     674:	47 95       	ror	r20
     676:	56 95       	lsr	r21
     678:	47 95       	ror	r20
     67a:	56 95       	lsr	r21
     67c:	47 95       	ror	r20
     67e:	50 93 79 01 	sts	0x0179, r21
     682:	40 93 78 01 	sts	0x0178, r20
	} while (tmp >= 1);
     686:	41 15       	cp	r20, r1
     688:	51 05       	cpc	r21, r1
     68a:	09 f0       	breq	.+2      	; 0x68e <display_alarm+0x16a>
     68c:	b4 cf       	rjmp	.-152    	; 0x5f6 <display_alarm+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     68e:	80 e6       	ldi	r24, 0x60	; 96
     690:	88 bb       	out	0x18, r24	; 24





}
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <display_digits>:

/*******************************/
void display_digits() 
{
     696:	cf 93       	push	r28
	cur_digit=0;
     698:	10 92 59 01 	sts	0x0159, r1

	//Set Register A
	DDRA = 0xFF; //output
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     6a0:	8b bb       	out	0x1b, r24	; 27
PORTB=0x00;
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
     6a2:	e0 91 5b 01 	lds	r30, 0x015B
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	f0 93 79 01 	sts	0x0179, r31
     6ac:	e0 93 78 01 	sts	0x0178, r30
for(i=0; i<2 ; i++){
     6b0:	10 92 8a 01 	sts	0x018A, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     6b4:	cf ef       	ldi	r28, 0xFF	; 255
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     6b6:	9f 01       	movw	r18, r30
     6b8:	ad ec       	ldi	r26, 0xCD	; 205
     6ba:	bc ec       	ldi	r27, 0xCC	; 204
     6bc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     6c0:	ac 01       	movw	r20, r24
     6c2:	56 95       	lsr	r21
     6c4:	47 95       	ror	r20
     6c6:	56 95       	lsr	r21
     6c8:	47 95       	ror	r20
     6ca:	56 95       	lsr	r21
     6cc:	47 95       	ror	r20
     6ce:	ca 01       	movw	r24, r20
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	44 0f       	add	r20, r20
     6d6:	55 1f       	adc	r21, r21
     6d8:	44 0f       	add	r20, r20
     6da:	55 1f       	adc	r21, r21
     6dc:	44 0f       	add	r20, r20
     6de:	55 1f       	adc	r21, r21
     6e0:	48 0f       	add	r20, r24
     6e2:	59 1f       	adc	r21, r25
     6e4:	e4 1b       	sub	r30, r20
     6e6:	f5 0b       	sbc	r31, r21
     6e8:	e0 93 99 01 	sts	0x0199, r30
		PORTB=0x00;
     6ec:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     6ee:	98 b3       	in	r25, 0x18	; 24
     6f0:	e0 91 59 01 	lds	r30, 0x0159
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	e0 50       	subi	r30, 0x00	; 0
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	80 81       	ld	r24, Z
     6fc:	89 2b       	or	r24, r25
     6fe:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     700:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     702:	e0 91 99 01 	lds	r30, 0x0199
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	ea 5e       	subi	r30, 0xEA	; 234
     70a:	fe 4f       	sbci	r31, 0xFE	; 254
     70c:	80 81       	ld	r24, Z
     70e:	8b bb       	out	0x1b, r24	; 27
     710:	81 ee       	ldi	r24, 0xE1	; 225
     712:	94 e0       	ldi	r25, 0x04	; 4
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <display_digits+0x7e>
     718:	00 c0       	rjmp	.+0      	; 0x71a <display_digits+0x84>
     71a:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     71c:	80 91 59 01 	lds	r24, 0x0159
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	80 93 59 01 	sts	0x0159, r24
		tmp /= 10; //get next value
     726:	20 91 78 01 	lds	r18, 0x0178
     72a:	30 91 79 01 	lds	r19, 0x0179
     72e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     732:	fc 01       	movw	r30, r24
     734:	f6 95       	lsr	r31
     736:	e7 95       	ror	r30
     738:	f6 95       	lsr	r31
     73a:	e7 95       	ror	r30
     73c:	f6 95       	lsr	r31
     73e:	e7 95       	ror	r30
     740:	f0 93 79 01 	sts	0x0179, r31
     744:	e0 93 78 01 	sts	0x0178, r30
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
     748:	80 91 8a 01 	lds	r24, 0x018A
     74c:	8f 5f       	subi	r24, 0xFF	; 255
     74e:	80 93 8a 01 	sts	0x018A, r24
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	08 f4       	brcc	.+2      	; 0x758 <display_digits+0xc2>
     756:	af cf       	rjmp	.-162    	; 0x6b6 <display_digits+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=hours;
     758:	40 91 25 01 	lds	r20, 0x0125
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	50 93 79 01 	sts	0x0179, r21
     762:	40 93 78 01 	sts	0x0178, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     766:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=hours;
do {
		cur_value = tmp % 10; //get current digit to display
     768:	9a 01       	movw	r18, r20
     76a:	ad ec       	ldi	r26, 0xCD	; 205
     76c:	bc ec       	ldi	r27, 0xCC	; 204
     76e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     772:	96 95       	lsr	r25
     774:	87 95       	ror	r24
     776:	96 95       	lsr	r25
     778:	87 95       	ror	r24
     77a:	96 95       	lsr	r25
     77c:	87 95       	ror	r24
     77e:	9c 01       	movw	r18, r24
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	82 0f       	add	r24, r18
     792:	93 1f       	adc	r25, r19
     794:	48 1b       	sub	r20, r24
     796:	59 0b       	sbc	r21, r25
     798:	40 93 99 01 	sts	0x0199, r20
		PORTB=0x00;
     79c:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     79e:	98 b3       	in	r25, 0x18	; 24
     7a0:	e0 91 59 01 	lds	r30, 0x0159
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	e0 50       	subi	r30, 0x00	; 0
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	80 81       	ld	r24, Z
     7ac:	89 2b       	or	r24, r25
     7ae:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     7b0:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     7b2:	e0 91 99 01 	lds	r30, 0x0199
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ea 5e       	subi	r30, 0xEA	; 234
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	80 81       	ld	r24, Z
     7be:	8b bb       	out	0x1b, r24	; 27
     7c0:	81 ee       	ldi	r24, 0xE1	; 225
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <display_digits+0x12e>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <display_digits+0x134>
     7ca:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     7cc:	80 91 59 01 	lds	r24, 0x0159
     7d0:	8f 5f       	subi	r24, 0xFF	; 255
     7d2:	80 93 59 01 	sts	0x0159, r24
		tmp /= 10; //get next value
     7d6:	20 91 78 01 	lds	r18, 0x0178
     7da:	30 91 79 01 	lds	r19, 0x0179
     7de:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__umulhisi3>
     7e2:	ac 01       	movw	r20, r24
     7e4:	56 95       	lsr	r21
     7e6:	47 95       	ror	r20
     7e8:	56 95       	lsr	r21
     7ea:	47 95       	ror	r20
     7ec:	56 95       	lsr	r21
     7ee:	47 95       	ror	r20
     7f0:	50 93 79 01 	sts	0x0179, r21
     7f4:	40 93 78 01 	sts	0x0178, r20
	} while (tmp >= 1);
     7f8:	41 15       	cp	r20, r1
     7fa:	51 05       	cpc	r21, r1
     7fc:	09 f0       	breq	.+2      	; 0x800 <display_digits+0x16a>
     7fe:	b4 cf       	rjmp	.-152    	; 0x768 <display_digits+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     800:	80 e6       	ldi	r24, 0x60	; 96
     802:	88 bb       	out	0x18, r24	; 24
}
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <Button>:
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
     808:	99 b3       	in	r25, 0x19	; 25
     80a:	80 91 27 01 	lds	r24, 0x0127
     80e:	89 1b       	sub	r24, r25
 switch(checker){
     810:	84 30       	cpi	r24, 0x04	; 4
     812:	89 f1       	breq	.+98     	; 0x876 <Button+0x6e>
     814:	40 f0       	brcs	.+16     	; 0x826 <Button+0x1e>
     816:	80 31       	cpi	r24, 0x10	; 16
     818:	b1 f0       	breq	.+44     	; 0x846 <Button+0x3e>
     81a:	80 32       	cpi	r24, 0x20	; 32
     81c:	09 f4       	brne	.+2      	; 0x820 <Button+0x18>
     81e:	42 c0       	rjmp	.+132    	; 0x8a4 <Button+0x9c>
     820:	88 30       	cpi	r24, 0x08	; 8
     822:	e9 f0       	breq	.+58     	; 0x85e <Button+0x56>
     824:	08 95       	ret
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 f1       	breq	.+100    	; 0x88e <Button+0x86>
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	19 f5       	brne	.+70     	; 0x874 <Button+0x6c>
		edit_hour ^=0x01;
		BARAGRAPH ^=( 1 << 0 );
		break;
    
	case 0x02:
    		edit_minutes ^=0x01;
     82e:	20 91 7a 01 	lds	r18, 0x017A
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	92 27       	eor	r25, r18
     836:	90 93 7a 01 	sts	0x017A, r25
		BARAGRAPH ^= ( 1 << 1);
     83a:	90 91 61 01 	lds	r25, 0x0161
     83e:	89 27       	eor	r24, r25
     840:	80 93 61 01 	sts	0x0161, r24
	

		break;
     844:	08 95       	ret
		alarm_minutes= alarm_minutes+5;
		BARAGRAPH ^= (1<<3);
		break;

	case 0x10:
		temp ^=0x01;
     846:	20 91 54 01 	lds	r18, 0x0154
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	92 27       	eor	r25, r18
     84e:	90 93 54 01 	sts	0x0154, r25
		BARAGRAPH ^= (1<<4);
     852:	90 91 61 01 	lds	r25, 0x0161
     856:	89 27       	eor	r24, r25
     858:	80 93 61 01 	sts	0x0161, r24
		break;
     85c:	08 95       	ret
		BARAGRAPH ^= ( 1 <<2);
	
		break;

	case 0x08:
		alarm_minutes= alarm_minutes+5;
     85e:	90 91 23 01 	lds	r25, 0x0123
     862:	9b 5f       	subi	r25, 0xFB	; 251
     864:	90 93 23 01 	sts	0x0123, r25
		BARAGRAPH ^= (1<<3);
     868:	90 91 61 01 	lds	r25, 0x0161
     86c:	89 27       	eor	r24, r25
     86e:	80 93 61 01 	sts	0x0161, r24
		break;
     872:	08 95       	ret
     874:	08 95       	ret
	

		break;

	case 0x04:
		alarm ^=0x01;
     876:	20 91 82 01 	lds	r18, 0x0182
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	92 27       	eor	r25, r18
     87e:	90 93 82 01 	sts	0x0182, r25
		BARAGRAPH ^= ( 1 <<2);
     882:	90 91 61 01 	lds	r25, 0x0161
     886:	89 27       	eor	r24, r25
     888:	80 93 61 01 	sts	0x0161, r24
	
		break;
     88c:	08 95       	ret
void Button(){
uint8_t checker =NotTouched-  PINA;
 switch(checker){

	case 0x01:
		edit_hour ^=0x01;
     88e:	90 91 af 01 	lds	r25, 0x01AF
     892:	98 27       	eor	r25, r24
     894:	90 93 af 01 	sts	0x01AF, r25
		BARAGRAPH ^=( 1 << 0 );
     898:	90 91 61 01 	lds	r25, 0x0161
     89c:	89 27       	eor	r24, r25
     89e:	80 93 61 01 	sts	0x0161, r24
		break;
     8a2:	08 95       	ret
		break;



	case 0x20:
		temp2 ^=0x01;
     8a4:	20 91 53 01 	lds	r18, 0x0153
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	92 27       	eor	r25, r18
     8ac:	90 93 53 01 	sts	0x0153, r25
		BARAGRAPH ^= (1<<5);
     8b0:	90 91 61 01 	lds	r25, 0x0161
     8b4:	89 27       	eor	r24, r25
     8b6:	80 93 61 01 	sts	0x0161, r24
     8ba:	08 95       	ret

000008bc <encoder>:
}
/******************************************encoder************************/
void encoder(){


 OE1 = encoder1;
     8bc:	30 91 5e 01 	lds	r19, 0x015E
     8c0:	30 93 60 01 	sts	0x0160, r19
  OE2 = encoder2;
     8c4:	20 91 5d 01 	lds	r18, 0x015D
     8c8:	20 93 5f 01 	sts	0x015F, r18

  

  encoder1 =  (spdr_to_encoder & 0x03);
     8cc:	80 91 8e 01 	lds	r24, 0x018E
     8d0:	90 91 8f 01 	lds	r25, 0x018F
     8d4:	48 2f       	mov	r20, r24
     8d6:	43 70       	andi	r20, 0x03	; 3
     8d8:	40 93 5e 01 	sts	0x015E, r20
  encoder2 = ((spdr_to_encoder& 0x0C) >> 2);
     8dc:	8c 70       	andi	r24, 0x0C	; 12
     8de:	99 27       	eor	r25, r25
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	98 2f       	mov	r25, r24
     8ea:	80 93 5d 01 	sts	0x015D, r24



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
     8ee:	34 17       	cp	r19, r20
     8f0:	21 f0       	breq	.+8      	; 0x8fa <encoder+0x3e>
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     8f2:	31 30       	cpi	r19, 0x01	; 1
     8f4:	41 f1       	breq	.+80     	; 0x946 <encoder+0x8a>
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     8f6:	32 30       	cpi	r19, 0x02	; 2
     8f8:	49 f0       	breq	.+18     	; 0x90c <encoder+0x50>
    	

	}
  }
/********************************************************/
  if(encoder2 != OE2){
     8fa:	29 17       	cp	r18, r25
     8fc:	31 f0       	breq	.+12     	; 0x90a <encoder+0x4e>
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     8fe:	21 30       	cpi	r18, 0x01	; 1
     900:	b1 f0       	breq	.+44     	; 0x92e <encoder+0x72>
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
     902:	22 30       	cpi	r18, 0x02	; 2
     904:	11 f4       	brne	.+4      	; 0x90a <encoder+0x4e>
     906:	93 30       	cpi	r25, 0x03	; 3
     908:	79 f1       	breq	.+94     	; 0x968 <encoder+0xac>
     90a:	08 95       	ret
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     90c:	43 30       	cpi	r20, 0x03	; 3
     90e:	a9 f7       	brne	.-22     	; 0x8fa <encoder+0x3e>
		if(edit_hour & edit_minutes){    	
     910:	80 91 af 01 	lds	r24, 0x01AF
     914:	30 91 7a 01 	lds	r19, 0x017A
     918:	43 2f       	mov	r20, r19
     91a:	48 23       	and	r20, r24
     91c:	71 f7       	brne	.-36     	; 0x8fa <encoder+0x3e>
		}
	  	else if (edit_hour){
     91e:	88 23       	and	r24, r24
     920:	69 f1       	breq	.+90     	; 0x97c <encoder+0xc0>
	    	hours=hours-1;
     922:	80 91 25 01 	lds	r24, 0x0125
     926:	81 50       	subi	r24, 0x01	; 1
     928:	80 93 25 01 	sts	0x0125, r24
     92c:	e6 cf       	rjmp	.-52     	; 0x8fa <encoder+0x3e>

	}
  }
/********************************************************/
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     92e:	93 30       	cpi	r25, 0x03	; 3
     930:	61 f7       	brne	.-40     	; 0x90a <encoder+0x4e>
	OCR3A=OCR3A+50;
     932:	80 91 86 00 	lds	r24, 0x0086
     936:	90 91 87 00 	lds	r25, 0x0087
     93a:	c2 96       	adiw	r24, 0x32	; 50
     93c:	90 93 87 00 	sts	0x0087, r25
     940:	80 93 86 00 	sts	0x0086, r24
     944:	08 95       	ret



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     946:	43 30       	cpi	r20, 0x03	; 3
     948:	c1 f6       	brne	.-80     	; 0x8fa <encoder+0x3e>
  
	if(edit_hour & edit_minutes){    	
     94a:	80 91 af 01 	lds	r24, 0x01AF
     94e:	30 91 7a 01 	lds	r19, 0x017A
     952:	43 2f       	mov	r20, r19
     954:	48 23       	and	r20, r24
     956:	89 f6       	brne	.-94     	; 0x8fa <encoder+0x3e>
	}
	  	else if (edit_hour){
     958:	88 23       	and	r24, r24
     95a:	c9 f0       	breq	.+50     	; 0x98e <encoder+0xd2>
	    	hours=hours+1;
     95c:	80 91 25 01 	lds	r24, 0x0125
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 25 01 	sts	0x0125, r24
     966:	c9 cf       	rjmp	.-110    	; 0x8fa <encoder+0x3e>
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
	OCR3A=OCR3A-50;
     968:	80 91 86 00 	lds	r24, 0x0086
     96c:	90 91 87 00 	lds	r25, 0x0087
     970:	c2 97       	sbiw	r24, 0x32	; 50
     972:	90 93 87 00 	sts	0x0087, r25
     976:	80 93 86 00 	sts	0x0086, r24
     97a:	08 95       	ret
		if(edit_hour & edit_minutes){    	
		}
	  	else if (edit_hour){
	    	hours=hours-1;
		}
	  	else if (edit_minutes){
     97c:	33 23       	and	r19, r19
     97e:	09 f4       	brne	.+2      	; 0x982 <encoder+0xc6>
     980:	bc cf       	rjmp	.-136    	; 0x8fa <encoder+0x3e>
	    	minutes=minutes-1;
     982:	80 91 5b 01 	lds	r24, 0x015B
     986:	81 50       	subi	r24, 0x01	; 1
     988:	80 93 5b 01 	sts	0x015B, r24
     98c:	b6 cf       	rjmp	.-148    	; 0x8fa <encoder+0x3e>
	if(edit_hour & edit_minutes){    	
	}
	  	else if (edit_hour){
	    	hours=hours+1;
		}
	  	else if (edit_minutes){
     98e:	33 23       	and	r19, r19
     990:	09 f4       	brne	.+2      	; 0x994 <encoder+0xd8>
     992:	b3 cf       	rjmp	.-154    	; 0x8fa <encoder+0x3e>
	    	minutes=minutes+1;
     994:	80 91 5b 01 	lds	r24, 0x015B
     998:	8f 5f       	subi	r24, 0xFF	; 255
     99a:	80 93 5b 01 	sts	0x015B, r24
     99e:	ad cf       	rjmp	.-166    	; 0x8fa <encoder+0x3e>

000009a0 <checker>:


}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
     9a0:	80 91 5c 01 	lds	r24, 0x015C
     9a4:	8c 33       	cpi	r24, 0x3C	; 60
     9a6:	b1 f0       	breq	.+44     	; 0x9d4 <checker+0x34>
     9a8:	80 91 5b 01 	lds	r24, 0x015B
	sec=0;
	minutes++;

}

if(minutes==60){
     9ac:	8c 33       	cpi	r24, 0x3C	; 60
     9ae:	d9 f0       	breq	.+54     	; 0x9e6 <checker+0x46>
     9b0:	80 91 25 01 	lds	r24, 0x0125
	minutes=0;
	hours++;

}

if(hours==13){
     9b4:	8d 30       	cpi	r24, 0x0D	; 13
     9b6:	01 f1       	breq	.+64     	; 0x9f8 <checker+0x58>

if(vol_n <0){
vol_n=0;
}

if( vol_n >2000){
     9b8:	80 91 20 01 	lds	r24, 0x0120
     9bc:	90 91 21 01 	lds	r25, 0x0121
     9c0:	81 3d       	cpi	r24, 0xD1	; 209
     9c2:	97 40       	sbci	r25, 0x07	; 7
     9c4:	30 f0       	brcs	.+12     	; 0x9d2 <checker+0x32>
vol_n=2000;
     9c6:	80 ed       	ldi	r24, 0xD0	; 208
     9c8:	97 e0       	ldi	r25, 0x07	; 7
     9ca:	90 93 21 01 	sts	0x0121, r25
     9ce:	80 93 20 01 	sts	0x0120, r24
     9d2:	08 95       	ret

}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
	sec=0;
     9d4:	10 92 5c 01 	sts	0x015C, r1
	minutes++;
     9d8:	80 91 5b 01 	lds	r24, 0x015B
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 5b 01 	sts	0x015B, r24

}

if(minutes==60){
     9e2:	8c 33       	cpi	r24, 0x3C	; 60
     9e4:	29 f7       	brne	.-54     	; 0x9b0 <checker+0x10>

	minutes=0;
     9e6:	10 92 5b 01 	sts	0x015B, r1
	hours++;
     9ea:	80 91 25 01 	lds	r24, 0x0125
     9ee:	8f 5f       	subi	r24, 0xFF	; 255
     9f0:	80 93 25 01 	sts	0x0125, r24

}

if(hours==13){
     9f4:	8d 30       	cpi	r24, 0x0D	; 13
     9f6:	01 f7       	brne	.-64     	; 0x9b8 <checker+0x18>
	hours=1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 25 01 	sts	0x0125, r24
     9fe:	dc cf       	rjmp	.-72     	; 0x9b8 <checker+0x18>

00000a00 <alarm_check>:

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     a00:	90 91 25 01 	lds	r25, 0x0125
     a04:	80 91 24 01 	lds	r24, 0x0124
     a08:	98 17       	cp	r25, r24
     a0a:	19 f0       	breq	.+6      	; 0xa12 <alarm_check+0x12>
	alarmON=1;
}

else{

	alarmON=0;
     a0c:	10 92 5a 01 	sts	0x015A, r1
     a10:	08 95       	ret

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     a12:	90 91 5b 01 	lds	r25, 0x015B
     a16:	80 91 23 01 	lds	r24, 0x0123
     a1a:	98 13       	cpse	r25, r24
     a1c:	f7 cf       	rjmp	.-18     	; 0xa0c <alarm_check+0xc>

	alarmON=1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 5a 01 	sts	0x015A, r24
     a24:	08 95       	ret

00000a26 <lcd_control>:


}
/**************************LCD control***********************/
void lcd_control(){
if (temp==0){
     a26:	80 91 54 01 	lds	r24, 0x0154
     a2a:	81 11       	cpse	r24, r1
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <lcd_control+0x1a>
if(strcmp(lcd_now,lcd_old)){
     a2e:	6f e9       	ldi	r22, 0x9F	; 159
     a30:	71 e0       	ldi	r23, 0x01	; 1
     a32:	88 e6       	ldi	r24, 0x68	; 104
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <strcmp>
     a3a:	89 2b       	or	r24, r25
     a3c:	d9 f5       	brne	.+118    	; 0xab4 <lcd_control+0x8e>
     a3e:	08 95       	ret

}
}

	else{
		if(temp2==0){
     a40:	80 91 53 01 	lds	r24, 0x0153
     a44:	88 23       	and	r24, r24
     a46:	a9 f0       	breq	.+42     	; 0xa72 <lcd_control+0x4c>
		}



		else{
			if(rcv_rdy==1){
     a48:	80 91 7b 01 	lds	r24, 0x017B
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	b9 f7       	brne	.-18     	; 0xa3e <lcd_control+0x18>
				
					strcpy(lcd_now,lcd_str_array);
     a50:	60 e9       	ldi	r22, 0x90	; 144
     a52:	71 e0       	ldi	r23, 0x01	; 1
     a54:	88 e6       	ldi	r24, 0x68	; 104
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <strcpy>
					if (strcmp(lcd_now,lcd_old)){
     a5c:	6f e9       	ldi	r22, 0x9F	; 159
     a5e:	71 e0       	ldi	r23, 0x01	; 1
     a60:	88 e6       	ldi	r24, 0x68	; 104
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <strcmp>
     a68:	89 2b       	or	r24, r25
     a6a:	81 f5       	brne	.+96     	; 0xacc <lcd_control+0xa6>
						clear_display();
						string2lcd(lcd_now);
					}
					
					  
			rcv_rdy=0;
     a6c:	10 92 7b 01 	sts	0x017B, r1
     a70:	08 95       	ret

	else{
		if(temp2==0){


			strcpy(lcd_now,lcd_str_h);
     a72:	6a e9       	ldi	r22, 0x9A	; 154
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	88 e6       	ldi	r24, 0x68	; 104
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <strcpy>
			if (strcmp(lcd_now,lcd_old)){
     a7e:	6f e9       	ldi	r22, 0x9F	; 159
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	88 e6       	ldi	r24, 0x68	; 104
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <strcmp>
     a8a:	89 2b       	or	r24, r25
     a8c:	c1 f2       	breq	.-80     	; 0xa3e <lcd_control+0x18>
				strcpy(lcd_old,lcd_now);
     a8e:	68 e6       	ldi	r22, 0x68	; 104
     a90:	71 e0       	ldi	r23, 0x01	; 1
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <strcpy>
				clear_display();
     a9a:	0e 94 13 08 	call	0x1026	; 0x1026 <clear_display>
				string2lcd(lcd_now);
     a9e:	88 e6       	ldi	r24, 0x68	; 104
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 43 08 	call	0x1086	; 0x1086 <string2lcd>
				char2lcd('.');
     aa6:	8e e2       	ldi	r24, 0x2E	; 46
     aa8:	0e 94 3f 08 	call	0x107e	; 0x107e <char2lcd>
				string2lcd(lcd_str_l);
     aac:	83 e8       	ldi	r24, 0x83	; 131
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0c 94 43 08 	jmp	0x1086	; 0x1086 <string2lcd>
}
/**************************LCD control***********************/
void lcd_control(){
if (temp==0){
if(strcmp(lcd_now,lcd_old)){
	strcpy(lcd_old,lcd_now);
     ab4:	68 e6       	ldi	r22, 0x68	; 104
     ab6:	71 e0       	ldi	r23, 0x01	; 1
     ab8:	8f e9       	ldi	r24, 0x9F	; 159
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <strcpy>
	clear_display();
     ac0:	0e 94 13 08 	call	0x1026	; 0x1026 <clear_display>
	string2lcd(lcd_now);
     ac4:	88 e6       	ldi	r24, 0x68	; 104
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <string2lcd>
		else{
			if(rcv_rdy==1){
				
					strcpy(lcd_now,lcd_str_array);
					if (strcmp(lcd_now,lcd_old)){
						strcpy(lcd_old,lcd_now);
     acc:	68 e6       	ldi	r22, 0x68	; 104
     ace:	71 e0       	ldi	r23, 0x01	; 1
     ad0:	8f e9       	ldi	r24, 0x9F	; 159
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <strcpy>
						clear_display();
     ad8:	0e 94 13 08 	call	0x1026	; 0x1026 <clear_display>
						string2lcd(lcd_now);
     adc:	88 e6       	ldi	r24, 0x68	; 104
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 43 08 	call	0x1086	; 0x1086 <string2lcd>
     ae4:	c3 cf       	rjmp	.-122    	; 0xa6c <lcd_control+0x46>

00000ae6 <__vector_10>:

	}

}
/*************************************************************TIMER 2**********************/
ISR(TIMER2_OVF_vect){
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1

}
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_18>:
/****************lab 5*****************/
ISR(USART0_RX_vect){
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	0b b6       	in	r0, 0x3b	; 59
     b06:	0f 92       	push	r0
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
     b10:	8c b1       	in	r24, 0x0c	; 12
     b12:	80 93 b0 01 	sts	0x01B0, r24
  lcd_str_array[i++]=rx_char;  //store in array 
     b16:	e0 91 65 01 	lds	r30, 0x0165
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	9e 0f       	add	r25, r30
     b1e:	90 93 65 01 	sts	0x0165, r25
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e0 57       	subi	r30, 0x70	; 112
     b26:	fe 4f       	sbci	r31, 0xFE	; 254
     b28:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
     b2a:	81 11       	cpse	r24, r1
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__vector_18+0x46>
    rcv_rdy=1; 
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 7b 01 	sts	0x017B, r24
    lcd_str_array[--i]  = (' ');     //clear the count field
     b34:	80 e2       	ldi	r24, 0x20	; 32
     b36:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
     b38:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
     b3a:	82 83       	std	Z+2, r24	; 0x02
    i=0;  
     b3c:	10 92 65 01 	sts	0x0165, r1
  }

}
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	0f 90       	pop	r0
     b4a:	0b be       	out	0x3b, r0	; 59
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <__vector_21>:
/************************************ADC***********************/
ISR(ADC_vect){
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25

adcr=ADC;
     b64:	84 b1       	in	r24, 0x04	; 4
     b66:	95 b1       	in	r25, 0x05	; 5
     b68:	80 93 22 01 	sts	0x0122, r24
}
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_12>:

/***********************************TIMER 1 **********************/
ISR(TIMER1_COMPA_vect){
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	0b b6       	in	r0, 0x3b	; 59
     b86:	0f 92       	push	r0
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31

PORTD ^=ALARM_PIN;
     ba0:	82 b3       	in	r24, 0x12	; 18
     ba2:	80 58       	subi	r24, 0x80	; 128
     ba4:	82 bb       	out	0x12, r24	; 18
if(beat >= max_beat) {   //if we've played the note long enough
     ba6:	20 91 88 01 	lds	r18, 0x0188
     baa:	30 91 89 01 	lds	r19, 0x0189
     bae:	80 91 80 01 	lds	r24, 0x0180
     bb2:	90 91 81 01 	lds	r25, 0x0181
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	58 f0       	brcs	.+22     	; 0xbd2 <__vector_12+0x58>
    notes++;               //move on to the next note
     bbc:	80 91 7c 01 	lds	r24, 0x017C
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 7c 01 	sts	0x017C, r24
    play_song(song, notes);//and play it
     bc6:	60 91 7c 01 	lds	r22, 0x017C
     bca:	80 91 7d 01 	lds	r24, 0x017D
     bce:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <play_song>
  }

}
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0b be       	out	0x3b, r0	; 59
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_16>:
/**********************************************************TIMER 0 *************************************/
ISR(TIMER0_OVF_vect){
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	0b b6       	in	r0, 0x3b	; 59
     c04:	0f 92       	push	r0
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31




/**********************************seconds*******************************/
counter++;
     c1e:	80 91 64 01 	lds	r24, 0x0164
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 64 01 	sts	0x0164, r24
if(counter % 8 == 0) {
     c28:	98 2f       	mov	r25, r24
     c2a:	97 70       	andi	r25, 0x07	; 7
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__vector_16+0x4a>
    //for note duration (64th notes) 
    beat++;
     c2e:	20 91 88 01 	lds	r18, 0x0188
     c32:	30 91 89 01 	lds	r19, 0x0189
     c36:	2f 5f       	subi	r18, 0xFF	; 255
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	30 93 89 01 	sts	0x0189, r19
     c3e:	20 93 88 01 	sts	0x0188, r18
  }  

if((counter %128)==0) { 
     c42:	98 2f       	mov	r25, r24
     c44:	9f 77       	andi	r25, 0x7F	; 127
     c46:	09 f4       	brne	.+2      	; 0xc4a <__vector_16+0x52>
     c48:	6f c0       	rjmp	.+222    	; 0xd28 <__vector_16+0x130>
sec++;
//ADCSRA |= (1<<ADSC);

}

if((counter %132)==0){
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	84 38       	cpi	r24, 0x84	; 132
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <__vector_16+0x5a>
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	2c e7       	ldi	r18, 0x7C	; 124
     c54:	92 9f       	mul	r25, r18
     c56:	80 0d       	add	r24, r0
     c58:	11 24       	eor	r1, r1
     c5a:	81 11       	cpse	r24, r1
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <__vector_16+0x68>
ADCSRA |= (1<<ADSC);
     c5e:	36 9a       	sbi	0x06, 6	; 6

}
/******************************************************************BUTTONS*****************************************************************************/
 /*enabling button to read */
  DDRA = 0x00; //make PORTA as an input
     c60:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF; // pull ups
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	8b bb       	out	0x1b, r24	; 27
  PORTB=0x70;
     c66:	80 e7       	ldi	r24, 0x70	; 112
     c68:	88 bb       	out	0x18, r24	; 24
     c6a:	89 ef       	ldi	r24, 0xF9	; 249
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <__vector_16+0x76>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <__vector_16+0x7c>
     c74:	00 00       	nop

  _delay_ms(1); 

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
     c76:	89 b3       	in	r24, 0x19	; 25
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	20 91 27 01 	lds	r18, 0x0127
     c7e:	30 91 28 01 	lds	r19, 0x0128
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	09 f4       	brne	.+2      	; 0xc8a <__vector_16+0x92>
     c88:	64 c0       	rjmp	.+200    	; 0xd52 <__vector_16+0x15a>
    if(nothing){
     c8a:	80 91 26 01 	lds	r24, 0x0126
     c8e:	81 11       	cpse	r24, r1
     c90:	64 c0       	rjmp	.+200    	; 0xd5a <__vector_16+0x162>
        
	Button();
        nothing = 0; 
    }
    else if(PINA == SavedPORTA_Value){ //do nothing
     c92:	89 b3       	in	r24, 0x19	; 25
     c94:	20 91 62 01 	lds	r18, 0x0162
     c98:	30 91 63 01 	lds	r19, 0x0163
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	82 17       	cp	r24, r18
     ca0:	93 07       	cpc	r25, r19
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <__vector_16+0xba>
      
    }
    else if(PINA != SavedPORTA_Value){
     ca4:	89 b3       	in	r24, 0x19	; 25
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	28 17       	cp	r18, r24
     caa:	39 07       	cpc	r19, r25
     cac:	11 f0       	breq	.+4      	; 0xcb2 <__vector_16+0xba>
   Button();
     cae:	0e 94 04 04 	call	0x808	; 0x808 <Button>
      
	
    }

    SavedPORTA_Value = PINA;
     cb2:	89 b3       	in	r24, 0x19	; 25
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	90 93 63 01 	sts	0x0163, r25
     cba:	80 93 62 01 	sts	0x0162, r24
  }
  else {
    nothing = 1;  
  }
 
	DDRA = 0xFF; 
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	8a bb       	out	0x1a, r24	; 26
	PORTB =0x70;  
     cc2:	80 e7       	ldi	r24, 0x70	; 112
     cc4:	88 bb       	out	0x18, r24	; 24

/******************************************start the ISP part, where seding data to SPDR*************************************************************/

	

	PORTE =0x00;
     cc6:	13 b8       	out	0x03, r1	; 3
	PORTE =0x80;  
     cc8:	80 e8       	ldi	r24, 0x80	; 128
     cca:	83 b9       	out	0x03, r24	; 3
     ccc:	83 ef       	ldi	r24, 0xF3	; 243
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <__vector_16+0xd8>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <__vector_16+0xde>
     cd6:	00 00       	nop
 
	_delay_ms(2);


  SPDR = BARAGRAPH;		//SPDR SEND Data so it can receive, and vice versa 
     cd8:	80 91 61 01 	lds	r24, 0x0161
     cdc:	8f b9       	out	0x0f, r24	; 15
  spdr_to_encoder = SPDR;
     cde:	8f b1       	in	r24, 0x0f	; 15
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	90 93 8f 01 	sts	0x018F, r25
     ce6:	80 93 8e 01 	sts	0x018E, r24

  
  while (bit_is_clear(SPSR, SPIF)){};
     cea:	77 9b       	sbis	0x0e, 7	; 14
     cec:	fe cf       	rjmp	.-4      	; 0xcea <__vector_16+0xf2>


			//low high
  PORTE =   0xC0 ;
     cee:	80 ec       	ldi	r24, 0xC0	; 192
     cf0:	83 b9       	out	0x03, r24	; 3
  PORTE =   0x40;
     cf2:	80 e4       	ldi	r24, 0x40	; 64
     cf4:	83 b9       	out	0x03, r24	; 3

 
  PORTB =  0x71;
     cf6:	81 e7       	ldi	r24, 0x71	; 113
     cf8:	88 bb       	out	0x18, r24	; 24
  PORTB = 0x70;
     cfa:	80 e7       	ldi	r24, 0x70	; 112
     cfc:	88 bb       	out	0x18, r24	; 24

/**************************************************END The ISP Part*********************************************************************************/
  
/****************************************************** ENCODER************************************************************/
  encoder();
     cfe:	0e 94 5e 04 	call	0x8bc	; 0x8bc <encoder>




}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti
    beat++;
  }  

if((counter %128)==0) { 
//OCR3A=vol_n;
get_128();
     d28:	0e 94 4e 02 	call	0x49c	; 0x49c <get_128>

PORTB=decoder_select[4];
     d2c:	80 91 04 01 	lds	r24, 0x0104
     d30:	88 bb       	out	0x18, r24	; 24
PORTA=0xFC;
     d32:	8c ef       	ldi	r24, 0xFC	; 252
     d34:	8b bb       	out	0x1b, r24	; 27
     d36:	87 ea       	ldi	r24, 0xA7	; 167
     d38:	91 e6       	ldi	r25, 0x61	; 97
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <__vector_16+0x142>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <__vector_16+0x148>
     d40:	00 00       	nop
_delay_ms(100);
sec++;
     d42:	80 91 5c 01 	lds	r24, 0x015C
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	80 93 5c 01 	sts	0x015C, r24
     d4c:	80 91 64 01 	lds	r24, 0x0164
     d50:	7c cf       	rjmp	.-264    	; 0xc4a <__vector_16+0x52>
    }

    SavedPORTA_Value = PINA;
  }
  else {
    nothing = 1;  
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 26 01 	sts	0x0126, r24
     d58:	b2 cf       	rjmp	.-156    	; 0xcbe <__vector_16+0xc6>

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
    if(nothing){
        
	Button();
     d5a:	0e 94 04 04 	call	0x808	; 0x808 <Button>
        nothing = 0; 
     d5e:	10 92 26 01 	sts	0x0126, r1
     d62:	a7 cf       	rjmp	.-178    	; 0xcb2 <__vector_16+0xba>

00000d64 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d64:	5d 9b       	sbis	0x0b, 5	; 11
     d66:	fe cf       	rjmp	.-4      	; 0xd64 <uart_putc>
    UDR0 = data;    // Send data byte
     d68:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d6a:	5d 9b       	sbis	0x0b, 5	; 11
     d6c:	fe cf       	rjmp	.-4      	; 0xd6a <uart_putc+0x6>
}
     d6e:	08 95       	ret

00000d70 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d70:	90 91 9b 00 	lds	r25, 0x009B
     d74:	95 ff       	sbrs	r25, 5
     d76:	fc cf       	rjmp	.-8      	; 0xd70 <uart1_putc>
    UDR1 = data;    // Send data byte
     d78:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d7c:	80 91 9b 00 	lds	r24, 0x009B
     d80:	85 ff       	sbrs	r24, 5
     d82:	fc cf       	rjmp	.-8      	; 0xd7c <uart1_putc+0xc>
}
     d84:	08 95       	ret

00000d86 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
     d86:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d88:	90 81       	ld	r25, Z
     d8a:	99 23       	and	r25, r25
     d8c:	49 f0       	breq	.+18     	; 0xda0 <uart_puts+0x1a>
     d8e:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d90:	5d 9b       	sbis	0x0b, 5	; 11
     d92:	fe cf       	rjmp	.-4      	; 0xd90 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
     d94:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d96:	5d 9b       	sbis	0x0b, 5	; 11
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d9a:	91 91       	ld	r25, Z+
     d9c:	91 11       	cpse	r25, r1
     d9e:	f8 cf       	rjmp	.-16     	; 0xd90 <uart_puts+0xa>
     da0:	08 95       	ret

00000da2 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     da2:	fc 01       	movw	r30, r24
     da4:	20 81       	ld	r18, Z
     da6:	22 23       	and	r18, r18
     da8:	71 f0       	breq	.+28     	; 0xdc6 <uart1_puts+0x24>
     daa:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     dac:	90 91 9b 00 	lds	r25, 0x009B
     db0:	95 ff       	sbrs	r25, 5
     db2:	fc cf       	rjmp	.-8      	; 0xdac <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
     db4:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     db8:	90 91 9b 00 	lds	r25, 0x009B
     dbc:	95 ff       	sbrs	r25, 5
     dbe:	fc cf       	rjmp	.-8      	; 0xdb8 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     dc0:	21 91       	ld	r18, Z+
     dc2:	21 11       	cpse	r18, r1
     dc4:	f3 cf       	rjmp	.-26     	; 0xdac <uart1_puts+0xa>
     dc6:	08 95       	ret

00000dc8 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
     dc8:	9c 01       	movw	r18, r24
     dca:	fc 01       	movw	r30, r24
     dcc:	44 91       	lpm	r20, Z
     dce:	44 23       	and	r20, r20
     dd0:	69 f0       	breq	.+26     	; 0xdec <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	f9 01       	movw	r30, r18
     dd6:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     dd8:	5d 9b       	sbis	0x0b, 5	; 11
     dda:	fe cf       	rjmp	.-4      	; 0xdd8 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
     ddc:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     dde:	5d 9b       	sbis	0x0b, 5	; 11
     de0:	fe cf       	rjmp	.-4      	; 0xdde <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
     de2:	9c 01       	movw	r18, r24
     de4:	fc 01       	movw	r30, r24
     de6:	44 91       	lpm	r20, Z
     de8:	41 11       	cpse	r20, r1
     dea:	f3 cf       	rjmp	.-26     	; 0xdd2 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
     dec:	08 95       	ret

00000dee <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
     dee:	8a b1       	in	r24, 0x0a	; 10
     df0:	88 69       	ori	r24, 0x98	; 152
     df2:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     df4:	e5 e9       	ldi	r30, 0x95	; 149
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	86 60       	ori	r24, 0x06	; 6
     dfc:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
     dfe:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
     e02:	87 e6       	ldi	r24, 0x67	; 103
     e04:	89 b9       	out	0x09, r24	; 9
     e06:	08 95       	ret

00000e08 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
     e08:	ea e9       	ldi	r30, 0x9A	; 154
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 61       	ori	r24, 0x18	; 24
     e10:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
     e12:	ed e9       	ldi	r30, 0x9D	; 157
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	86 60       	ori	r24, 0x06	; 6
     e1a:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
     e1c:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
     e20:	87 e6       	ldi	r24, 0x67	; 103
     e22:	80 93 99 00 	sts	0x0099, r24
     e26:	08 95       	ret

00000e28 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     e28:	80 e8       	ldi	r24, 0x80	; 128
     e2a:	9e e3       	ldi	r25, 0x3E	; 62
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <uart_getc+0xa>
     e2e:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     e30:	21 f0       	breq	.+8      	; 0xe3a <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     e32:	5f 9b       	sbis	0x0b, 7	; 11
     e34:	fc cf       	rjmp	.-8      	; 0xe2e <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
     e36:	8c b1       	in	r24, 0x0c	; 12
     e38:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
     e3a:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
     e3c:	08 95       	ret

00000e3e <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	9e e3       	ldi	r25, 0x3E	; 62
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <uart1_getc+0xa>
     e44:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     e46:	39 f0       	breq	.+14     	; 0xe56 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
     e48:	20 91 9b 00 	lds	r18, 0x009B
     e4c:	27 ff       	sbrs	r18, 7
     e4e:	fa cf       	rjmp	.-12     	; 0xe44 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
     e50:	80 91 9c 00 	lds	r24, 0x009C
     e54:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
     e56:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
     e58:	08 95       	ret

00000e5a <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	81 11       	cpse	r24, r1
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <send_lcd+0x8>
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e64:	77 9b       	sbis	0x0e, 7	; 14
     e66:	fe cf       	rjmp	.-4      	; 0xe64 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     e68:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e6a:	77 9b       	sbis	0x0e, 7	; 14
     e6c:	fe cf       	rjmp	.-4      	; 0xe6a <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e6e:	80 91 62 00 	lds	r24, 0x0062
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	80 93 62 00 	sts	0x0062, r24
     e78:	80 91 62 00 	lds	r24, 0x0062
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	80 93 62 00 	sts	0x0062, r24
     e82:	08 95       	ret

00000e84 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
     e84:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     e86:	c0 91 66 01 	lds	r28, 0x0166
     e8a:	8c 0f       	add	r24, r28
     e8c:	91 1d       	adc	r25, r1
     e8e:	fc 01       	movw	r30, r24
     e90:	60 81       	ld	r22, Z
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
 i++;   //increment to next character
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	8c 0f       	add	r24, r28
     e9c:	80 93 66 01 	sts	0x0166, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     ea0:	80 31       	cpi	r24, 0x10	; 16
     ea2:	89 f0       	breq	.+34     	; 0xec6 <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     ea4:	80 32       	cpi	r24, 0x20	; 32
     ea6:	11 f0       	breq	.+4      	; 0xeac <refresh_lcd+0x28>

 return i;
}//refresh_lcd
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eac:	85 ed       	ldi	r24, 0xD5	; 213
     eae:	8a 95       	dec	r24
     eb0:	f1 f7       	brne	.-4      	; 0xeae <refresh_lcd+0x2a>
     eb2:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     eb4:	60 e8       	ldi	r22, 0x80	; 128
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     ebc:	10 92 66 01 	sts	0x0166, r1
     ec0:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret
     ec6:	f5 ed       	ldi	r31, 0xD5	; 213
     ec8:	fa 95       	dec	r31
     eca:	f1 f7       	brne	.-4      	; 0xec8 <refresh_lcd+0x44>
     ecc:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     ece:	60 ec       	ldi	r22, 0xC0	; 192
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
     ed6:	80 91 66 01 	lds	r24, 0x0166
     eda:	e4 cf       	rjmp	.-56     	; 0xea4 <refresh_lcd+0x20>

00000edc <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	1f 92       	push	r1
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     ef0:	66 0f       	add	r22, r22
     ef2:	66 0f       	add	r22, r22
     ef4:	66 0f       	add	r22, r22
     ef6:	60 5c       	subi	r22, 0xC0	; 192
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	99 83       	std	Y+1, r25	; 0x01
     efc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
     f00:	85 ed       	ldi	r24, 0xD5	; 213
     f02:	8a 95       	dec	r24
     f04:	f1 f7       	brne	.-4      	; 0xf02 <set_custom_character+0x26>
     f06:	00 00       	nop
     f08:	e1 2e       	mov	r14, r17
     f0a:	99 81       	ldd	r25, Y+1	; 0x01
     f0c:	f9 2e       	mov	r15, r25
     f0e:	87 01       	movw	r16, r14
     f10:	08 5f       	subi	r16, 0xF8	; 248
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     f14:	f7 01       	movw	r30, r14
     f16:	61 91       	ld	r22, Z+
     f18:	7f 01       	movw	r14, r30
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
     f20:	f5 ed       	ldi	r31, 0xD5	; 213
     f22:	fa 95       	dec	r31
     f24:	f1 f7       	brne	.-4      	; 0xf22 <set_custom_character+0x46>
     f26:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     f28:	e0 16       	cp	r14, r16
     f2a:	f1 06       	cpc	r15, r17
     f2c:	99 f7       	brne	.-26     	; 0xf14 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     f2e:	0f 90       	pop	r0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     f3e:	90 e4       	ldi	r25, 0x40	; 64
     f40:	89 9f       	mul	r24, r25
     f42:	60 0d       	add	r22, r0
     f44:	11 24       	eor	r1, r1
     f46:	60 5c       	subi	r22, 0xC0	; 192
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00000f4e <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     f4e:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     f50:	88 23       	and	r24, r24
     f52:	b9 f1       	breq	.+110    	; 0xfc2 <uint2lcd+0x74>
     f54:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     f56:	84 36       	cpi	r24, 0x64	; 100
     f58:	98 f4       	brcc	.+38     	; 0xf80 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     f5a:	8a 30       	cpi	r24, 0x0A	; 10
     f5c:	d8 f4       	brcc	.+54     	; 0xf94 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     f5e:	8d ec       	ldi	r24, 0xCD	; 205
     f60:	c8 9f       	mul	r28, r24
     f62:	81 2d       	mov	r24, r1
     f64:	11 24       	eor	r1, r1
     f66:	86 95       	lsr	r24
     f68:	86 95       	lsr	r24
     f6a:	86 95       	lsr	r24
     f6c:	6c 2f       	mov	r22, r28
     f6e:	2a e0       	ldi	r18, 0x0A	; 10
     f70:	82 9f       	mul	r24, r18
     f72:	60 19       	sub	r22, r0
     f74:	11 24       	eor	r1, r1
     f76:	60 5d       	subi	r22, 0xD0	; 208
     f78:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     f7a:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     f7c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     f80:	69 e2       	ldi	r22, 0x29	; 41
     f82:	86 9f       	mul	r24, r22
     f84:	61 2d       	mov	r22, r1
     f86:	11 24       	eor	r1, r1
     f88:	62 95       	swap	r22
     f8a:	6f 70       	andi	r22, 0x0F	; 15
     f8c:	60 5d       	subi	r22, 0xD0	; 208
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     f94:	89 e2       	ldi	r24, 0x29	; 41
     f96:	c8 9f       	mul	r28, r24
     f98:	81 2d       	mov	r24, r1
     f9a:	11 24       	eor	r1, r1
     f9c:	82 95       	swap	r24
     f9e:	8f 70       	andi	r24, 0x0F	; 15
     fa0:	9c 2f       	mov	r25, r28
     fa2:	24 e6       	ldi	r18, 0x64	; 100
     fa4:	82 9f       	mul	r24, r18
     fa6:	90 19       	sub	r25, r0
     fa8:	11 24       	eor	r1, r1
     faa:	6d ec       	ldi	r22, 0xCD	; 205
     fac:	96 9f       	mul	r25, r22
     fae:	61 2d       	mov	r22, r1
     fb0:	11 24       	eor	r1, r1
     fb2:	66 95       	lsr	r22
     fb4:	66 95       	lsr	r22
     fb6:	66 95       	lsr	r22
     fb8:	60 5d       	subi	r22, 0xD0	; 208
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
     fc0:	ce cf       	rjmp	.-100    	; 0xf5e <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     fc2:	60 e3       	ldi	r22, 0x30	; 48
     fc4:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     fc6:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     fc8:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00000fcc <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     fcc:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     fce:	87 fd       	sbrc	r24, 7
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     fd2:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     fd4:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <uint2lcd>
     fd8:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     fda:	6d e2       	ldi	r22, 0x2D	; 45
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
     fe2:	85 ed       	ldi	r24, 0xD5	; 213
     fe4:	8a 95       	dec	r24
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <int2lcd+0x18>
     fe8:	00 00       	nop
     fea:	8c 2f       	mov	r24, r28
     fec:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     fee:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     ff0:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <uint2lcd>

00000ff4 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     ff4:	6e e0       	ldi	r22, 0x0E	; 14
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00000ffc <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     ffc:	6c e0       	ldi	r22, 0x0C	; 12
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00001004 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    1004:	6e e1       	ldi	r22, 0x1E	; 30
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

0000100c <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    100c:	68 e1       	ldi	r22, 0x18	; 24
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00001014 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1014:	e2 e6       	ldi	r30, 0x62	; 98
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 60       	ori	r24, 0x08	; 8
    101c:	80 83       	st	Z, r24
    101e:	80 81       	ld	r24, Z
    1020:	87 7f       	andi	r24, 0xF7	; 247
    1022:	80 83       	st	Z, r24
    1024:	08 95       	ret

00001026 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    102e:	8f e1       	ldi	r24, 0x1F	; 31
    1030:	9c e1       	ldi	r25, 0x1C	; 28
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <clear_display+0xc>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <clear_display+0x12>
    1038:	00 00       	nop
    103a:	08 95       	ret

0000103c <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    103c:	62 e0       	ldi	r22, 0x02	; 2
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    1044:	8f e6       	ldi	r24, 0x6F	; 111
    1046:	97 e1       	ldi	r25, 0x17	; 23
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <cursor_home+0xc>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <cursor_home+0x12>
    104e:	00 00       	nop
    1050:	08 95       	ret

00001052 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1052:	60 ec       	ldi	r22, 0xC0	; 192
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

0000105a <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    105a:	60 e8       	ldi	r22, 0x80	; 128
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00001062 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1062:	cf 93       	push	r28
    1064:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    1066:	60 e2       	ldi	r22, 0x20	; 32
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    106e:	85 ed       	ldi	r24, 0xD5	; 213
    1070:	8a 95       	dec	r24
    1072:	f1 f7       	brne	.-4      	; 0x1070 <fill_spaces+0xe>
    1074:	00 00       	nop
    1076:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1078:	b1 f7       	brne	.-20     	; 0x1066 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    107e:	68 2f       	mov	r22, r24
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <send_lcd>

00001086 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	c0 e0       	ldi	r28, 0x00	; 0
    1094:	f8 01       	movw	r30, r16
    1096:	e4 0f       	add	r30, r20
    1098:	f5 1f       	adc	r31, r21
    109a:	60 81       	ld	r22, Z
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    10a2:	85 ed       	ldi	r24, 0xD5	; 213
    10a4:	8a 95       	dec	r24
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <string2lcd+0x1e>
    10a8:	00 00       	nop
    10aa:	cf 5f       	subi	r28, 0xFF	; 255
    10ac:	4c 2f       	mov	r20, r28
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	f8 01       	movw	r30, r16
    10b2:	01 90       	ld	r0, Z+
    10b4:	00 20       	and	r0, r0
    10b6:	e9 f7       	brne	.-6      	; 0x10b2 <string2lcd+0x2c>
    10b8:	9f 01       	movw	r18, r30
    10ba:	20 1b       	sub	r18, r16
    10bc:	31 0b       	sbc	r19, r17
    10be:	22 50       	subi	r18, 0x02	; 2
    10c0:	31 09       	sbc	r19, r1
    10c2:	24 17       	cp	r18, r20
    10c4:	35 07       	cpc	r19, r21
    10c6:	30 f7       	brcc	.-52     	; 0x1094 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	99 ef       	ldi	r25, 0xF9	; 249
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <lcd_init+0x4>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <lcd_init+0xa>
    10da:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    10dc:	88 e0       	ldi	r24, 0x08	; 8
    10de:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    10e2:	60 e3       	ldi	r22, 0x30	; 48
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    10ea:	8f e5       	ldi	r24, 0x5F	; 95
    10ec:	9d e6       	ldi	r25, 0x6D	; 109
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <lcd_init+0x1e>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <lcd_init+0x24>
    10f4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    10f6:	60 e3       	ldi	r22, 0x30	; 48
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    10fe:	8f e5       	ldi	r24, 0x5F	; 95
    1100:	9d e6       	ldi	r25, 0x6D	; 109
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <__stack+0x3>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <__stack+0x9>
    1108:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    110a:	60 e3       	ldi	r22, 0x30	; 48
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    1112:	8f e5       	ldi	r24, 0x5F	; 95
    1114:	9d e6       	ldi	r25, 0x6D	; 109
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <__stack+0x17>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <__stack+0x1d>
    111c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    111e:	68 e3       	ldi	r22, 0x38	; 56
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    1126:	8f e1       	ldi	r24, 0x1F	; 31
    1128:	9e e4       	ldi	r25, 0x4E	; 78
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <__stack+0x2b>
    112e:	00 c0       	rjmp	.+0      	; 0x1130 <__stack+0x31>
    1130:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    1132:	68 e0       	ldi	r22, 0x08	; 8
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    113a:	8f e1       	ldi	r24, 0x1F	; 31
    113c:	9e e4       	ldi	r25, 0x4E	; 78
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <__stack+0x3f>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <__stack+0x45>
    1144:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    114e:	8f e1       	ldi	r24, 0x1F	; 31
    1150:	9e e4       	ldi	r25, 0x4E	; 78
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <__stack+0x53>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <__stack+0x59>
    1158:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    115a:	66 e0       	ldi	r22, 0x06	; 6
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    1162:	8f e1       	ldi	r24, 0x1F	; 31
    1164:	9e e4       	ldi	r25, 0x4E	; 78
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <__stack+0x67>
    116a:	00 c0       	rjmp	.+0      	; 0x116c <__stack+0x6d>
    116c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    116e:	6c e0       	ldi	r22, 0x0C	; 12
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    1176:	8f e1       	ldi	r24, 0x1F	; 31
    1178:	9e e4       	ldi	r25, 0x4E	; 78
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <__stack+0x7b>
    117e:	00 c0       	rjmp	.+0      	; 0x1180 <__stack+0x81>
    1180:	00 00       	nop
    1182:	08 95       	ret

00001184 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1184:	8f 92       	push	r8
    1186:	9f 92       	push	r9
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	69 97       	sbiw	r28, 0x19	; 25
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	f4 2e       	mov	r15, r20
    11ae:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    11b0:	00 23       	and	r16, r16
    11b2:	59 f0       	breq	.+22     	; 0x11ca <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    11b4:	4b 01       	movw	r8, r22
    11b6:	5c 01       	movw	r10, r24
    11b8:	88 24       	eor	r8, r8
    11ba:	b7 fc       	sbrc	r11, 7
    11bc:	83 94       	inc	r8
    11be:	99 24       	eor	r9, r9
    11c0:	aa 24       	eor	r10, r10
    11c2:	bb 24       	eor	r11, r11
    11c4:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    11c6:	97 fd       	sbrc	r25, 7
    11c8:	8f c0       	rjmp	.+286    	; 0x12e8 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    11ca:	11 23       	and	r17, r17
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <lcd_int32+0x4c>
    11ce:	84 c0       	rjmp	.+264    	; 0x12d8 <lcd_int32+0x154>
    11d0:	9e 01       	movw	r18, r28
    11d2:	2f 5f       	subi	r18, 0xFF	; 255
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	69 01       	movw	r12, r18
    11d8:	59 01       	movw	r10, r18
    11da:	88 24       	eor	r8, r8
    11dc:	8a 94       	dec	r8
    11de:	81 0e       	add	r8, r17
    11e0:	91 2c       	mov	r9, r1
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	83 1a       	sub	r8, r19
    11e6:	93 0a       	sbc	r9, r19
    11e8:	8c 0c       	add	r8, r12
    11ea:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    11ec:	2a e0       	ldi	r18, 0x0A	; 10
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__divmodsi4>
    11f8:	e6 2f       	mov	r30, r22
    11fa:	2a 8b       	std	Y+18, r18	; 0x12
    11fc:	3b 8b       	std	Y+19, r19	; 0x13
    11fe:	4c 8b       	std	Y+20, r20	; 0x14
    1200:	5d 8b       	std	Y+21, r21	; 0x15
    1202:	6a 89       	ldd	r22, Y+18	; 0x12
    1204:	7b 89       	ldd	r23, Y+19	; 0x13
    1206:	8c 89       	ldd	r24, Y+20	; 0x14
    1208:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    120a:	20 e3       	ldi	r18, 0x30	; 48
    120c:	2e 0f       	add	r18, r30
    120e:	f5 01       	movw	r30, r10
    1210:	21 93       	st	Z+, r18
    1212:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1214:	e8 15       	cp	r30, r8
    1216:	f9 05       	cpc	r31, r9
    1218:	49 f7       	brne	.-46     	; 0x11ec <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    121a:	bb 24       	eor	r11, r11
    121c:	b3 94       	inc	r11
    121e:	b1 0e       	add	r11, r17
    1220:	f6 01       	movw	r30, r12
    1222:	e1 0f       	add	r30, r17
    1224:	f1 1d       	adc	r31, r1
    1226:	2e e2       	ldi	r18, 0x2E	; 46
    1228:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    122a:	2a e0       	ldi	r18, 0x0A	; 10
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__divmodsi4>
    1236:	e6 2f       	mov	r30, r22
    1238:	2a 8b       	std	Y+18, r18	; 0x12
    123a:	3b 8b       	std	Y+19, r19	; 0x13
    123c:	4c 8b       	std	Y+20, r20	; 0x14
    123e:	5d 8b       	std	Y+21, r21	; 0x15
    1240:	6e 8b       	std	Y+22, r22	; 0x16
    1242:	7f 8b       	std	Y+23, r23	; 0x17
    1244:	88 8f       	std	Y+24, r24	; 0x18
    1246:	99 8f       	std	Y+25, r25	; 0x19
    1248:	6a 89       	ldd	r22, Y+18	; 0x12
    124a:	7b 89       	ldd	r23, Y+19	; 0x13
    124c:	8c 89       	ldd	r24, Y+20	; 0x14
    124e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1250:	11 e0       	ldi	r17, 0x01	; 1
    1252:	1b 0d       	add	r17, r11
    1254:	d6 01       	movw	r26, r12
    1256:	ab 0d       	add	r26, r11
    1258:	b1 1d       	adc	r27, r1
    125a:	e0 5d       	subi	r30, 0xD0	; 208
    125c:	ec 93       	st	X, r30
    125e:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1260:	61 15       	cp	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	81 05       	cpc	r24, r1
    1266:	91 05       	cpc	r25, r1
    1268:	01 f7       	brne	.-64     	; 0x122a <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    126a:	ff 20       	and	r15, r15
    126c:	61 f0       	breq	.+24     	; 0x1286 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    126e:	e1 10       	cpse	r14, r1
    1270:	39 c0       	rjmp	.+114    	; 0x12e4 <lcd_int32+0x160>
    1272:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1274:	1f 15       	cp	r17, r15
    1276:	38 f4       	brcc	.+14     	; 0x1286 <lcd_int32+0x102>
    1278:	f6 01       	movw	r30, r12
    127a:	e1 0f       	add	r30, r17
    127c:	f1 1d       	adc	r31, r1
    127e:	80 83       	st	Z, r24
    1280:	1f 5f       	subi	r17, 0xFF	; 255
    1282:	1f 11       	cpse	r17, r15
    1284:	f9 cf       	rjmp	.-14     	; 0x1278 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1286:	00 23       	and	r16, r16
    1288:	31 f0       	breq	.+12     	; 0x1296 <lcd_int32+0x112>
    128a:	f6 01       	movw	r30, r12
    128c:	e1 0f       	add	r30, r17
    128e:	f1 1d       	adc	r31, r1
    1290:	8d e2       	ldi	r24, 0x2D	; 45
    1292:	80 83       	st	Z, r24
    1294:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1296:	11 50       	subi	r17, 0x01	; 1
    1298:	f6 01       	movw	r30, r12
    129a:	e1 0f       	add	r30, r17
    129c:	f1 1d       	adc	r31, r1
    129e:	60 81       	ld	r22, Z
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a6:	35 ed       	ldi	r19, 0xD5	; 213
    12a8:	3a 95       	dec	r19
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <lcd_int32+0x124>
    12ac:	00 00       	nop
    12ae:	11 11       	cpse	r17, r1
    12b0:	f2 cf       	rjmp	.-28     	; 0x1296 <lcd_int32+0x112>

}
    12b2:	69 96       	adiw	r28, 0x19	; 25
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	bf 90       	pop	r11
    12d0:	af 90       	pop	r10
    12d2:	9f 90       	pop	r9
    12d4:	8f 90       	pop	r8
    12d6:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    12d8:	b1 2c       	mov	r11, r1
    12da:	9e 01       	movw	r18, r28
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	69 01       	movw	r12, r18
    12e2:	a3 cf       	rjmp	.-186    	; 0x122a <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    12e4:	80 e3       	ldi	r24, 0x30	; 48
    12e6:	c6 cf       	rjmp	.-116    	; 0x1274 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    12e8:	90 95       	com	r25
    12ea:	80 95       	com	r24
    12ec:	70 95       	com	r23
    12ee:	61 95       	neg	r22
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	69 cf       	rjmp	.-302    	; 0x11ca <lcd_int32+0x46>

000012f8 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    12f8:	5f 92       	push	r5
    12fa:	6f 92       	push	r6
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	61 97       	sbiw	r28, 0x11	; 17
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	a6 2e       	mov	r10, r22
    1328:	54 2e       	mov	r5, r20
    132a:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    132c:	79 2e       	mov	r7, r25
    132e:	77 1c       	adc	r7, r7
    1330:	77 24       	eor	r7, r7
    1332:	77 1c       	adc	r7, r7
    1334:	b7 2c       	mov	r11, r7
    1336:	c7 2c       	mov	r12, r7
    1338:	d1 2c       	mov	r13, r1
    133a:	ee 27       	eor	r30, r30
    133c:	ff 27       	eor	r31, r31
    133e:	ec 19       	sub	r30, r12
    1340:	fd 09       	sbc	r31, r13
    1342:	8e 27       	eor	r24, r30
    1344:	9f 27       	eor	r25, r31
    1346:	fc 01       	movw	r30, r24
    1348:	ec 0d       	add	r30, r12
    134a:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    134c:	44 23       	and	r20, r20
    134e:	09 f4       	brne	.+2      	; 0x1352 <lcd_int16+0x5a>
    1350:	8e c0       	rjmp	.+284    	; 0x146e <lcd_int16+0x176>
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	7c 01       	movw	r14, r24
    1358:	8c 01       	movw	r16, r24
    135a:	88 24       	eor	r8, r8
    135c:	8a 94       	dec	r8
    135e:	84 0e       	add	r8, r20
    1360:	91 2c       	mov	r9, r1
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	89 1a       	sub	r8, r25
    1366:	99 0a       	sbc	r9, r25
    1368:	8e 0c       	add	r8, r14
    136a:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    136c:	6a e0       	ldi	r22, 0x0A	; 10
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	cf 01       	movw	r24, r30
    1372:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__divmodhi4>
    1376:	26 2f       	mov	r18, r22
    1378:	e2 2f       	mov	r30, r18
    137a:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    137c:	80 5d       	subi	r24, 0xD0	; 208
    137e:	d8 01       	movw	r26, r16
    1380:	8d 93       	st	X+, r24
    1382:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1384:	a8 15       	cp	r26, r8
    1386:	b9 05       	cpc	r27, r9
    1388:	89 f7       	brne	.-30     	; 0x136c <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    138a:	01 e0       	ldi	r16, 0x01	; 1
    138c:	05 0d       	add	r16, r5
    138e:	d7 01       	movw	r26, r14
    1390:	a5 0d       	add	r26, r5
    1392:	b1 1d       	adc	r27, r1
    1394:	8e e2       	ldi	r24, 0x2E	; 46
    1396:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	cf 01       	movw	r24, r30
    139e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__divmodhi4>
    13a2:	26 2f       	mov	r18, r22
    13a4:	e2 2f       	mov	r30, r18
    13a6:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    13a8:	11 e0       	ldi	r17, 0x01	; 1
    13aa:	10 0f       	add	r17, r16
    13ac:	d7 01       	movw	r26, r14
    13ae:	a0 0f       	add	r26, r16
    13b0:	b1 1d       	adc	r27, r1
    13b2:	80 5d       	subi	r24, 0xD0	; 208
    13b4:	8c 93       	st	X, r24
    13b6:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    13b8:	30 97       	sbiw	r30, 0x00	; 0
    13ba:	71 f7       	brne	.-36     	; 0x1398 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    13bc:	61 10       	cpse	r6, r1
    13be:	15 c0       	rjmp	.+42     	; 0x13ea <lcd_int16+0xf2>
    13c0:	77 20       	and	r7, r7
    13c2:	39 f0       	breq	.+14     	; 0x13d2 <lcd_int16+0xda>
        {
                sline[i++] = '-';
    13c4:	11 e0       	ldi	r17, 0x01	; 1
    13c6:	10 0f       	add	r17, r16
    13c8:	f7 01       	movw	r30, r14
    13ca:	e0 0f       	add	r30, r16
    13cc:	f1 1d       	adc	r31, r1
    13ce:	8d e2       	ldi	r24, 0x2D	; 45
    13d0:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    13d2:	aa 20       	and	r10, r10
    13d4:	41 f1       	breq	.+80     	; 0x1426 <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    13d6:	81 2f       	mov	r24, r17
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	2a 2d       	mov	r18, r10
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	82 17       	cp	r24, r18
    13e0:	93 07       	cpc	r25, r19
    13e2:	0c f5       	brge	.+66     	; 0x1426 <lcd_int16+0x12e>
    13e4:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	0c c0       	rjmp	.+24     	; 0x1402 <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    13ea:	aa 20       	and	r10, r10
    13ec:	a1 f0       	breq	.+40     	; 0x1416 <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    13ee:	81 2f       	mov	r24, r17
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	2a 2d       	mov	r18, r10
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	2c 19       	sub	r18, r12
    13f8:	3d 09       	sbc	r19, r13
    13fa:	82 17       	cp	r24, r18
    13fc:	93 07       	cpc	r25, r19
    13fe:	5c f4       	brge	.+22     	; 0x1416 <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1400:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1402:	1f 5f       	subi	r17, 0xFF	; 255
    1404:	f7 01       	movw	r30, r14
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	40 83       	st	Z, r20
    140c:	81 2f       	mov	r24, r17
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	82 17       	cp	r24, r18
    1412:	93 07       	cpc	r25, r19
    1414:	b4 f3       	brlt	.-20     	; 0x1402 <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    1416:	bb 20       	and	r11, r11
    1418:	31 f0       	breq	.+12     	; 0x1426 <lcd_int16+0x12e>
    141a:	f7 01       	movw	r30, r14
    141c:	e1 0f       	add	r30, r17
    141e:	f1 1d       	adc	r31, r1
    1420:	8d e2       	ldi	r24, 0x2D	; 45
    1422:	80 83       	st	Z, r24
    1424:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1426:	11 50       	subi	r17, 0x01	; 1
    1428:	f7 01       	movw	r30, r14
    142a:	e1 0f       	add	r30, r17
    142c:	f1 1d       	adc	r31, r1
    142e:	60 81       	ld	r22, Z
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 2d 07 	call	0xe5a	; 0xe5a <send_lcd>
    1436:	95 ed       	ldi	r25, 0xD5	; 213
    1438:	9a 95       	dec	r25
    143a:	f1 f7       	brne	.-4      	; 0x1438 <lcd_int16+0x140>
    143c:	00 00       	nop
    143e:	11 11       	cpse	r17, r1
    1440:	f2 cf       	rjmp	.-28     	; 0x1426 <lcd_int16+0x12e>
}
    1442:	61 96       	adiw	r28, 0x11	; 17
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	7c 01       	movw	r14, r24
    1476:	90 cf       	rjmp	.-224    	; 0x1398 <lcd_int16+0xa0>

00001478 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1496:	e0 91 71 00 	lds	r30, 0x0071
    149a:	8e 2f       	mov	r24, r30
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	fc 01       	movw	r30, r24
    14a0:	38 97       	sbiw	r30, 0x08	; 8
    14a2:	e1 35       	cpi	r30, 0x51	; 81
    14a4:	f1 05       	cpc	r31, r1
    14a6:	b0 f0       	brcs	.+44     	; 0x14d4 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    14a8:	80 91 71 00 	lds	r24, 0x0071
    14ac:	80 93 89 02 	sts	0x0289, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	3f 91       	pop	r19
    14c4:	2f 91       	pop	r18
    14c6:	0f 90       	pop	r0
    14c8:	0b be       	out	0x3b, r0	; 59
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    14d4:	ea 5b       	subi	r30, 0xBA	; 186
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    14dc:	80 91 67 01 	lds	r24, 0x0167
    14e0:	e0 91 8a 02 	lds	r30, 0x028A
    14e4:	f0 91 8b 02 	lds	r31, 0x028B
    14e8:	e8 0f       	add	r30, r24
    14ea:	f1 1d       	adc	r31, r1
    14ec:	80 91 73 00 	lds	r24, 0x0073
    14f0:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    14f2:	84 e9       	ldi	r24, 0x94	; 148
    14f4:	80 93 74 00 	sts	0x0074, r24
      break;      
    14f8:	de cf       	rjmp	.-68     	; 0x14b6 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    14fa:	80 91 8c 02 	lds	r24, 0x028C
    14fe:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1502:	10 92 67 01 	sts	0x0167, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1506:	85 e8       	ldi	r24, 0x85	; 133
    1508:	80 93 74 00 	sts	0x0074, r24
      break;
    150c:	d4 cf       	rjmp	.-88     	; 0x14b6 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    150e:	80 91 67 01 	lds	r24, 0x0167
    1512:	90 91 8d 02 	lds	r25, 0x028D
    1516:	89 17       	cp	r24, r25
    1518:	60 f7       	brcc	.-40     	; 0x14f2 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    151a:	e0 91 8a 02 	lds	r30, 0x028A
    151e:	f0 91 8b 02 	lds	r31, 0x028B
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	98 0f       	add	r25, r24
    1526:	90 93 67 01 	sts	0x0167, r25
    152a:	e8 0f       	add	r30, r24
    152c:	f1 1d       	adc	r31, r1
    152e:	80 81       	ld	r24, Z
    1530:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    1534:	85 e8       	ldi	r24, 0x85	; 133
    1536:	80 93 74 00 	sts	0x0074, r24
    153a:	bd cf       	rjmp	.-134    	; 0x14b6 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    153c:	85 ea       	ldi	r24, 0xA5	; 165
    153e:	80 93 74 00 	sts	0x0074, r24
      break;
    1542:	b9 cf       	rjmp	.-142    	; 0x14b6 <__vector_33+0x3e>
    1544:	20 91 67 01 	lds	r18, 0x0167
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1548:	80 91 8d 02 	lds	r24, 0x028D
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	28 17       	cp	r18, r24
    1554:	39 07       	cpc	r19, r25
    1556:	dc f4       	brge	.+54     	; 0x158e <__vector_33+0x116>
    1558:	85 ec       	ldi	r24, 0xC5	; 197
    155a:	80 93 74 00 	sts	0x0074, r24
    155e:	ab cf       	rjmp	.-170    	; 0x14b6 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1560:	e0 91 8a 02 	lds	r30, 0x028A
    1564:	f0 91 8b 02 	lds	r31, 0x028B
    1568:	80 91 67 01 	lds	r24, 0x0167
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	28 0f       	add	r18, r24
    1570:	20 93 67 01 	sts	0x0167, r18
    1574:	e8 0f       	add	r30, r24
    1576:	f1 1d       	adc	r31, r1
    1578:	80 91 73 00 	lds	r24, 0x0073
    157c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    157e:	80 91 8d 02 	lds	r24, 0x028D
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	28 17       	cp	r18, r24
    158a:	39 07       	cpc	r19, r25
    158c:	2c f3       	brlt	.-54     	; 0x1558 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    158e:	85 e8       	ldi	r24, 0x85	; 133
    1590:	80 93 74 00 	sts	0x0074, r24
    1594:	90 cf       	rjmp	.-224    	; 0x14b6 <__vector_33+0x3e>

00001596 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1596:	80 91 74 00 	lds	r24, 0x0074
}
    159a:	81 70       	andi	r24, 0x01	; 1
    159c:	08 95       	ret

0000159e <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    159e:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    15a2:	90 fd       	sbrc	r25, 0
    15a4:	fc cf       	rjmp	.-8      	; 0x159e <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    15a6:	8e 7f       	andi	r24, 0xFE	; 254
    15a8:	80 93 8c 02 	sts	0x028C, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    15ac:	70 93 8b 02 	sts	0x028B, r23
    15b0:	60 93 8a 02 	sts	0x028A, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    15b4:	40 93 8d 02 	sts	0x028D, r20
  TWCR = TWCR_START;                    //initiate START
    15b8:	85 ea       	ldi	r24, 0xA5	; 165
    15ba:	80 93 74 00 	sts	0x0074, r24
    15be:	08 95       	ret

000015c0 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    15c0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    15c4:	90 fd       	sbrc	r25, 0
    15c6:	fc cf       	rjmp	.-8      	; 0x15c0 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    15c8:	81 60       	ori	r24, 0x01	; 1
    15ca:	80 93 8c 02 	sts	0x028C, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    15ce:	70 93 8b 02 	sts	0x028B, r23
    15d2:	60 93 8a 02 	sts	0x028A, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    15d6:	40 93 8d 02 	sts	0x028D, r20
  TWCR = TWCR_START;                   //initiate START
    15da:	85 ea       	ldi	r24, 0xA5	; 165
    15dc:	80 93 74 00 	sts	0x0074, r24
    15e0:	08 95       	ret

000015e2 <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    15e8:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    15ec:	8c e0       	ldi	r24, 0x0C	; 12
    15ee:	80 93 70 00 	sts	0x0070, r24
    15f2:	08 95       	ret

000015f4 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15f4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15f6:	10 92 89 01 	sts	0x0189, r1
    15fa:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	90 93 81 01 	sts	0x0181, r25
    1604:	80 93 80 01 	sts	0x0180, r24
    1608:	08 95       	ret

0000160a <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
    160a:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
    160c:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
    160e:	10 92 89 01 	sts	0x0189, r1
    1612:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;  //set the max beat
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	30 93 81 01 	sts	0x0181, r19
    161c:	20 93 80 01 	sts	0x0180, r18
  switch (octave) {
    1620:	84 2f       	mov	r24, r20
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	89 30       	cpi	r24, 0x09	; 9
    1626:	91 05       	cpc	r25, r1
    1628:	18 f0       	brcs	.+6      	; 0x1630 <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
    162a:	1b bc       	out	0x2b, r1	; 43
    162c:	1a bc       	out	0x2a, r1	; 42
    162e:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    1630:	89 56       	subi	r24, 0x69	; 105
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1636:	85 2f       	mov	r24, r21
    1638:	55 0f       	add	r21, r21
    163a:	99 0b       	sbc	r25, r25
    163c:	aa 0b       	sbc	r26, r26
    163e:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    1640:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
    1644:	fc 01       	movw	r30, r24
    1646:	e1 54       	subi	r30, 0x41	; 65
    1648:	f1 09       	sbc	r31, r1
    164a:	e7 30       	cpi	r30, 0x07	; 7
    164c:	f1 05       	cpc	r31, r1
    164e:	78 f7       	brcc	.-34     	; 0x162e <play_note+0x24>
    1650:	e0 56       	subi	r30, 0x60	; 96
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1658:	fc 01       	movw	r30, r24
    165a:	e1 54       	subi	r30, 0x41	; 65
    165c:	f1 09       	sbc	r31, r1
    165e:	e7 30       	cpi	r30, 0x07	; 7
    1660:	f1 05       	cpc	r31, r1
    1662:	28 f7       	brcc	.-54     	; 0x162e <play_note+0x24>
    1664:	e9 55       	subi	r30, 0x59	; 89
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
    166c:	fc 01       	movw	r30, r24
    166e:	e1 54       	subi	r30, 0x41	; 65
    1670:	f1 09       	sbc	r31, r1
    1672:	e7 30       	cpi	r30, 0x07	; 7
    1674:	f1 05       	cpc	r31, r1
    1676:	d8 f6       	brcc	.-74     	; 0x162e <play_note+0x24>
    1678:	e2 55       	subi	r30, 0x52	; 82
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
    1680:	fc 01       	movw	r30, r24
    1682:	e1 54       	subi	r30, 0x41	; 65
    1684:	f1 09       	sbc	r31, r1
    1686:	e7 30       	cpi	r30, 0x07	; 7
    1688:	f1 05       	cpc	r31, r1
    168a:	88 f6       	brcc	.-94     	; 0x162e <play_note+0x24>
    168c:	eb 54       	subi	r30, 0x4B	; 75
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
    1694:	fc 01       	movw	r30, r24
    1696:	e1 54       	subi	r30, 0x41	; 65
    1698:	f1 09       	sbc	r31, r1
    169a:	e7 30       	cpi	r30, 0x07	; 7
    169c:	f1 05       	cpc	r31, r1
    169e:	38 f6       	brcc	.-114    	; 0x162e <play_note+0x24>
    16a0:	e4 54       	subi	r30, 0x44	; 68
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
    16a8:	fc 01       	movw	r30, r24
    16aa:	e1 54       	subi	r30, 0x41	; 65
    16ac:	f1 09       	sbc	r31, r1
    16ae:	e7 30       	cpi	r30, 0x07	; 7
    16b0:	f1 05       	cpc	r31, r1
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <play_note+0xac>
    16b4:	bc cf       	rjmp	.-136    	; 0x162e <play_note+0x24>
    16b6:	ed 53       	subi	r30, 0x3D	; 61
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
    16be:	fc 01       	movw	r30, r24
    16c0:	e1 54       	subi	r30, 0x41	; 65
    16c2:	f1 09       	sbc	r31, r1
    16c4:	e7 30       	cpi	r30, 0x07	; 7
    16c6:	f1 05       	cpc	r31, r1
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <play_note+0xc2>
    16ca:	b1 cf       	rjmp	.-158    	; 0x162e <play_note+0x24>
    16cc:	e6 53       	subi	r30, 0x36	; 54
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
    16d4:	fc 01       	movw	r30, r24
    16d6:	e1 54       	subi	r30, 0x41	; 65
    16d8:	f1 09       	sbc	r31, r1
    16da:	e7 30       	cpi	r30, 0x07	; 7
    16dc:	f1 05       	cpc	r31, r1
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <play_note+0xd8>
    16e0:	a6 cf       	rjmp	.-180    	; 0x162e <play_note+0x24>
    16e2:	ef 52       	subi	r30, 0x2F	; 47
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
    16ea:	fc 01       	movw	r30, r24
    16ec:	e1 54       	subi	r30, 0x41	; 65
    16ee:	f1 09       	sbc	r31, r1
    16f0:	e7 30       	cpi	r30, 0x07	; 7
    16f2:	f1 05       	cpc	r31, r1
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <play_note+0xee>
    16f6:	9b cf       	rjmp	.-202    	; 0x162e <play_note+0x24>
    16f8:	e8 52       	subi	r30, 0x28	; 40
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
    1700:	88 e5       	ldi	r24, 0x58	; 88
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9b bd       	out	0x2b, r25	; 43
    1706:	8a bd       	out	0x2a, r24	; 42
	break;
    1708:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
    170a:	66 23       	and	r22, r22
    170c:	09 f4       	brne	.+2      	; 0x1710 <play_note+0x106>
    170e:	0f c2       	rjmp	.+1054   	; 0x1b2e <play_note+0x524>
    1710:	83 e6       	ldi	r24, 0x63	; 99
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9b bd       	out	0x2b, r25	; 43
    1716:	8a bd       	out	0x2a, r24	; 42
    1718:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
    171a:	66 23       	and	r22, r22
    171c:	09 f4       	brne	.+2      	; 0x1720 <play_note+0x116>
    171e:	11 c2       	rjmp	.+1058   	; 0x1b42 <play_note+0x538>
    1720:	8f e6       	ldi	r24, 0x6F	; 111
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9b bd       	out	0x2b, r25	; 43
    1726:	8a bd       	out	0x2a, r24	; 42
    1728:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
    172a:	86 e7       	ldi	r24, 0x76	; 118
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9b bd       	out	0x2b, r25	; 43
    1730:	8a bd       	out	0x2a, r24	; 42
	break;
    1732:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
    1734:	66 23       	and	r22, r22
    1736:	09 f4       	brne	.+2      	; 0x173a <play_note+0x130>
    1738:	ff c1       	rjmp	.+1022   	; 0x1b38 <play_note+0x52e>
    173a:	8a e4       	ldi	r24, 0x4A	; 74
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9b bd       	out	0x2b, r25	; 43
    1740:	8a bd       	out	0x2a, r24	; 42
    1742:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
    1744:	66 23       	and	r22, r22
    1746:	09 f4       	brne	.+2      	; 0x174a <play_note+0x140>
    1748:	01 c2       	rjmp	.+1026   	; 0x1b4c <play_note+0x542>
    174a:	83 e5       	ldi	r24, 0x53	; 83
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9b bd       	out	0x2b, r25	; 43
    1750:	8a bd       	out	0x2a, r24	; 42
    1752:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
    1754:	66 23       	and	r22, r22
    1756:	09 f4       	brne	.+2      	; 0x175a <play_note+0x150>
    1758:	b8 c1       	rjmp	.+880    	; 0x1aca <play_note+0x4c0>
    175a:	82 e4       	ldi	r24, 0x42	; 66
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9b bd       	out	0x2b, r25	; 43
    1760:	8a bd       	out	0x2a, r24	; 42
    1762:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
    1764:	81 eb       	ldi	r24, 0xB1	; 177
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9b bd       	out	0x2b, r25	; 43
    176a:	8a bd       	out	0x2a, r24	; 42
	break;
    176c:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
    176e:	66 23       	and	r22, r22
    1770:	09 f4       	brne	.+2      	; 0x1774 <play_note+0x16a>
    1772:	d3 c1       	rjmp	.+934    	; 0x1b1a <play_note+0x510>
    1774:	85 e8       	ldi	r24, 0x85	; 133
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9b bd       	out	0x2b, r25	; 43
    177a:	8a bd       	out	0x2a, r24	; 42
    177c:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
    177e:	66 23       	and	r22, r22
    1780:	09 f4       	brne	.+2      	; 0x1784 <play_note+0x17a>
    1782:	c1 c1       	rjmp	.+898    	; 0x1b06 <play_note+0x4fc>
    1784:	85 e9       	ldi	r24, 0x95	; 149
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9b bd       	out	0x2b, r25	; 43
    178a:	8a bd       	out	0x2a, r24	; 42
    178c:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
    178e:	66 23       	and	r22, r22
    1790:	09 f4       	brne	.+2      	; 0x1794 <play_note+0x18a>
    1792:	be c1       	rjmp	.+892    	; 0x1b10 <play_note+0x506>
    1794:	87 ea       	ldi	r24, 0xA7	; 167
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9b bd       	out	0x2b, r25	; 43
    179a:	8a bd       	out	0x2a, r24	; 42
    179c:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
    179e:	84 e6       	ldi	r24, 0x64	; 100
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	9b bd       	out	0x2b, r25	; 43
    17a4:	8a bd       	out	0x2a, r24	; 42
	break;
    17a6:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
    17a8:	66 23       	and	r22, r22
    17aa:	09 f4       	brne	.+2      	; 0x17ae <play_note+0x1a4>
    17ac:	bb c1       	rjmp	.+886    	; 0x1b24 <play_note+0x51a>
    17ae:	80 ee       	ldi	r24, 0xE0	; 224
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9b bd       	out	0x2b, r25	; 43
    17b4:	8a bd       	out	0x2a, r24	; 42
    17b6:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
    17b8:	8d ee       	ldi	r24, 0xED	; 237
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9b bd       	out	0x2b, r25	; 43
    17be:	8a bd       	out	0x2a, r24	; 42
	break;
    17c0:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
    17c2:	66 23       	and	r22, r22
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <play_note+0x1be>
    17c6:	8b c1       	rjmp	.+790    	; 0x1ade <play_note+0x4d4>
    17c8:	87 ec       	ldi	r24, 0xC7	; 199
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9b bd       	out	0x2b, r25	; 43
    17ce:	8a bd       	out	0x2a, r24	; 42
    17d0:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
    17d2:	66 23       	and	r22, r22
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <play_note+0x1ce>
    17d6:	74 c1       	rjmp	.+744    	; 0x1ac0 <play_note+0x4b6>
    17d8:	80 e9       	ldi	r24, 0x90	; 144
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	9b bd       	out	0x2b, r25	; 43
    17de:	8a bd       	out	0x2a, r24	; 42
    17e0:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
    17e2:	66 23       	and	r22, r22
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <play_note+0x1de>
    17e6:	cb c1       	rjmp	.+918    	; 0x1b7e <play_note+0x574>
    17e8:	84 e8       	ldi	r24, 0x84	; 132
    17ea:	93 e0       	ldi	r25, 0x03	; 3
    17ec:	9b bd       	out	0x2b, r25	; 43
    17ee:	8a bd       	out	0x2a, r24	; 42
    17f0:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
    17f2:	66 23       	and	r22, r22
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <play_note+0x1ee>
    17f6:	af c1       	rjmp	.+862    	; 0x1b56 <play_note+0x54c>
    17f8:	8b e2       	ldi	r24, 0x2B	; 43
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	9b bd       	out	0x2b, r25	; 43
    17fe:	8a bd       	out	0x2a, r24	; 42
    1800:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
    1802:	66 23       	and	r22, r22
    1804:	09 f4       	brne	.+2      	; 0x1808 <play_note+0x1fe>
    1806:	b1 c1       	rjmp	.+866    	; 0x1b6a <play_note+0x560>
    1808:	82 ea       	ldi	r24, 0xA2	; 162
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	9b bd       	out	0x2b, r25	; 43
    180e:	8a bd       	out	0x2a, r24	; 42
    1810:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
    1812:	8c ed       	ldi	r24, 0xDC	; 220
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	9b bd       	out	0x2b, r25	; 43
    1818:	8a bd       	out	0x2a, r24	; 42
	break;
    181a:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
    181c:	66 23       	and	r22, r22
    181e:	09 f4       	brne	.+2      	; 0x1822 <play_note+0x218>
    1820:	59 c1       	rjmp	.+690    	; 0x1ad4 <play_note+0x4ca>
    1822:	87 e1       	ldi	r24, 0x17	; 23
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	9b bd       	out	0x2b, r25	; 43
    1828:	8a bd       	out	0x2a, r24	; 42
    182a:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
    182c:	66 23       	and	r22, r22
    182e:	09 f4       	brne	.+2      	; 0x1832 <play_note+0x228>
    1830:	b0 c1       	rjmp	.+864    	; 0x1b92 <play_note+0x588>
    1832:	88 e5       	ldi	r24, 0x58	; 88
    1834:	92 e0       	ldi	r25, 0x02	; 2
    1836:	9b bd       	out	0x2b, r25	; 43
    1838:	8a bd       	out	0x2a, r24	; 42
    183a:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
    183c:	8a ec       	ldi	r24, 0xCA	; 202
    183e:	92 e0       	ldi	r25, 0x02	; 2
    1840:	9b bd       	out	0x2b, r25	; 43
    1842:	8a bd       	out	0x2a, r24	; 42
	break;
    1844:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
    1846:	66 23       	and	r22, r22
    1848:	09 f4       	brne	.+2      	; 0x184c <play_note+0x242>
    184a:	35 c1       	rjmp	.+618    	; 0x1ab6 <play_note+0x4ac>
    184c:	86 e4       	ldi	r24, 0x46	; 70
    184e:	96 e0       	ldi	r25, 0x06	; 6
    1850:	9b bd       	out	0x2b, r25	; 43
    1852:	8a bd       	out	0x2a, r24	; 42
    1854:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
    1856:	66 23       	and	r22, r22
    1858:	09 f4       	brne	.+2      	; 0x185c <play_note+0x252>
    185a:	82 c1       	rjmp	.+772    	; 0x1b60 <play_note+0x556>
    185c:	8a e0       	ldi	r24, 0x0A	; 10
    185e:	97 e0       	ldi	r25, 0x07	; 7
    1860:	9b bd       	out	0x2b, r25	; 43
    1862:	8a bd       	out	0x2a, r24	; 42
    1864:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
    1866:	86 e9       	ldi	r24, 0x96	; 150
    1868:	95 e0       	ldi	r25, 0x05	; 5
    186a:	9b bd       	out	0x2b, r25	; 43
    186c:	8a bd       	out	0x2a, r24	; 42
	break;
    186e:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
    1870:	8a eb       	ldi	r24, 0xBA	; 186
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	9b bd       	out	0x2b, r25	; 43
    1876:	8a bd       	out	0x2a, r24	; 42
	break;
    1878:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
    187a:	66 23       	and	r22, r22
    187c:	09 f4       	brne	.+2      	; 0x1880 <play_note+0x276>
    187e:	7a c1       	rjmp	.+756    	; 0x1b74 <play_note+0x56a>
    1880:	81 ec       	ldi	r24, 0xC1	; 193
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	9b bd       	out	0x2b, r25	; 43
    1886:	8a bd       	out	0x2a, r24	; 42
    1888:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
    188a:	66 23       	and	r22, r22
    188c:	09 f4       	brne	.+2      	; 0x1890 <play_note+0x286>
    188e:	7c c1       	rjmp	.+760    	; 0x1b88 <play_note+0x57e>
    1890:	8b e0       	ldi	r24, 0x0B	; 11
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	9b bd       	out	0x2b, r25	; 43
    1896:	8a bd       	out	0x2a, r24	; 42
    1898:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
    189a:	66 23       	and	r22, r22
    189c:	09 f4       	brne	.+2      	; 0x18a0 <play_note+0x296>
    189e:	7e c1       	rjmp	.+764    	; 0x1b9c <play_note+0x592>
    18a0:	80 e5       	ldi	r24, 0x50	; 80
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	9b bd       	out	0x2b, r25	; 43
    18a6:	8a bd       	out	0x2a, r24	; 42
    18a8:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
    18aa:	66 23       	and	r22, r22
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <play_note+0x2a6>
    18ae:	ad c1       	rjmp	.+858    	; 0x1c0a <play_note+0x600>
    18b0:	82 e2       	ldi	r24, 0x22	; 34
    18b2:	93 e0       	ldi	r25, 0x03	; 3
    18b4:	9b bd       	out	0x2b, r25	; 43
    18b6:	8a bd       	out	0x2a, r24	; 42
    18b8:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
    18ba:	86 e7       	ldi	r24, 0x76	; 118
    18bc:	97 e0       	ldi	r25, 0x07	; 7
    18be:	9b bd       	out	0x2b, r25	; 43
    18c0:	8a bd       	out	0x2a, r24	; 42
	break;
    18c2:	08 95       	ret
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
    18c4:	66 23       	and	r22, r22
    18c6:	09 f4       	brne	.+2      	; 0x18ca <play_note+0x2c0>
    18c8:	0f c1       	rjmp	.+542    	; 0x1ae8 <play_note+0x4de>
    18ca:	8e ec       	ldi	r24, 0xCE	; 206
    18cc:	92 e1       	ldi	r25, 0x12	; 18
    18ce:	9b bd       	out	0x2b, r25	; 43
    18d0:	8a bd       	out	0x2a, r24	; 42
    18d2:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
    18d4:	66 23       	and	r22, r22
    18d6:	09 f4       	brne	.+2      	; 0x18da <play_note+0x2d0>
    18d8:	7a c1       	rjmp	.+756    	; 0x1bce <play_note+0x5c4>
    18da:	8d e1       	ldi	r24, 0x1D	; 29
    18dc:	95 e1       	ldi	r25, 0x15	; 21
    18de:	9b bd       	out	0x2b, r25	; 43
    18e0:	8a bd       	out	0x2a, r24	; 42
    18e2:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
    18e4:	66 23       	and	r22, r22
    18e6:	09 f4       	brne	.+2      	; 0x18ea <play_note+0x2e0>
    18e8:	dc c0       	rjmp	.+440    	; 0x1aa2 <play_note+0x498>
    18ea:	80 e6       	ldi	r24, 0x60	; 96
    18ec:	98 e0       	ldi	r25, 0x08	; 8
    18ee:	9b bd       	out	0x2b, r25	; 43
    18f0:	8a bd       	out	0x2a, r24	; 42
    18f2:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
    18f4:	66 23       	and	r22, r22
    18f6:	09 f4       	brne	.+2      	; 0x18fa <play_note+0x2f0>
    18f8:	92 c1       	rjmp	.+804    	; 0x1c1e <play_note+0x614>
    18fa:	80 e1       	ldi	r24, 0x10	; 16
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9b bd       	out	0x2b, r25	; 43
    1900:	8a bd       	out	0x2a, r24	; 42
    1902:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
    1904:	8e e2       	ldi	r24, 0x2E	; 46
    1906:	9b e0       	ldi	r25, 0x0B	; 11
    1908:	9b bd       	out	0x2b, r25	; 43
    190a:	8a bd       	out	0x2a, r24	; 42
	break;
    190c:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
    190e:	66 23       	and	r22, r22
    1910:	09 f4       	brne	.+2      	; 0x1914 <play_note+0x30a>
    1912:	49 c1       	rjmp	.+658    	; 0x1ba6 <play_note+0x59c>
    1914:	8b e1       	ldi	r24, 0x1B	; 27
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9b bd       	out	0x2b, r25	; 43
    191a:	8a bd       	out	0x2a, r24	; 42
    191c:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
    191e:	8c e1       	ldi	r24, 0x1C	; 28
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9b bd       	out	0x2b, r25	; 43
    1924:	8a bd       	out	0x2a, r24	; 42
	break;
    1926:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
    1928:	66 23       	and	r22, r22
    192a:	09 f4       	brne	.+2      	; 0x192e <play_note+0x324>
    192c:	41 c1       	rjmp	.+642    	; 0x1bb0 <play_note+0x5a6>
    192e:	87 e0       	ldi	r24, 0x07	; 7
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9b bd       	out	0x2b, r25	; 43
    1934:	8a bd       	out	0x2a, r24	; 42
    1936:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
    1938:	66 23       	and	r22, r22
    193a:	09 f4       	brne	.+2      	; 0x193e <play_note+0x334>
    193c:	da c0       	rjmp	.+436    	; 0x1af2 <play_note+0x4e8>
    193e:	8b e0       	ldi	r24, 0x0B	; 11
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9b bd       	out	0x2b, r25	; 43
    1944:	8a bd       	out	0x2a, r24	; 42
    1946:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
    1948:	82 e1       	ldi	r24, 0x12	; 18
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9b bd       	out	0x2b, r25	; 43
    194e:	8a bd       	out	0x2a, r24	; 42
	break;
    1950:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
    1952:	66 23       	and	r22, r22
    1954:	09 f4       	brne	.+2      	; 0x1958 <play_note+0x34e>
    1956:	9b c0       	rjmp	.+310    	; 0x1a8e <play_note+0x484>
    1958:	89 e1       	ldi	r24, 0x19	; 25
    195a:	99 e1       	ldi	r25, 0x19	; 25
    195c:	9b bd       	out	0x2b, r25	; 43
    195e:	8a bd       	out	0x2a, r24	; 42
    1960:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
    1962:	66 23       	and	r22, r22
    1964:	09 f4       	brne	.+2      	; 0x1968 <play_note+0x35e>
    1966:	29 c1       	rjmp	.+594    	; 0x1bba <play_note+0x5b0>
    1968:	80 e3       	ldi	r24, 0x30	; 48
    196a:	9c e1       	ldi	r25, 0x1C	; 28
    196c:	9b bd       	out	0x2b, r25	; 43
    196e:	8a bd       	out	0x2a, r24	; 42
    1970:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
    1972:	8c ed       	ldi	r24, 0xDC	; 220
    1974:	9d e1       	ldi	r25, 0x1D	; 29
    1976:	9b bd       	out	0x2b, r25	; 43
    1978:	8a bd       	out	0x2a, r24	; 42
	break;
    197a:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
    197c:	8a e3       	ldi	r24, 0x3A	; 58
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9b bd       	out	0x2b, r25	; 43
    1982:	8a bd       	out	0x2a, r24	; 42
	break;
    1984:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
    1986:	66 23       	and	r22, r22
    1988:	09 f4       	brne	.+2      	; 0x198c <play_note+0x382>
    198a:	35 c1       	rjmp	.+618    	; 0x1bf6 <play_note+0x5ec>
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9b bd       	out	0x2b, r25	; 43
    1992:	8a bd       	out	0x2a, r24	; 42
    1994:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
    1996:	66 23       	and	r22, r22
    1998:	09 f4       	brne	.+2      	; 0x199c <play_note+0x392>
    199a:	32 c1       	rjmp	.+612    	; 0x1c00 <play_note+0x5f6>
    199c:	84 e2       	ldi	r24, 0x24	; 36
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9b bd       	out	0x2b, r25	; 43
    19a2:	8a bd       	out	0x2a, r24	; 42
    19a4:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
    19a6:	66 23       	and	r22, r22
    19a8:	09 f4       	brne	.+2      	; 0x19ac <play_note+0x3a2>
    19aa:	76 c0       	rjmp	.+236    	; 0x1a98 <play_note+0x48e>
    19ac:	89 e2       	ldi	r24, 0x29	; 41
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9b bd       	out	0x2b, r25	; 43
    19b2:	8a bd       	out	0x2a, r24	; 42
    19b4:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
    19b6:	66 23       	and	r22, r22
    19b8:	09 f4       	brne	.+2      	; 0x19bc <play_note+0x3b2>
    19ba:	78 c0       	rjmp	.+240    	; 0x1aac <play_note+0x4a2>
    19bc:	81 e3       	ldi	r24, 0x31	; 49
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9b bd       	out	0x2b, r25	; 43
    19c2:	8a bd       	out	0x2a, r24	; 42
    19c4:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
    19c6:	8b e2       	ldi	r24, 0x2B	; 43
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9b bd       	out	0x2b, r25	; 43
    19cc:	8a bd       	out	0x2a, r24	; 42
	break;
    19ce:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
    19d0:	66 23       	and	r22, r22
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <play_note+0x3cc>
    19d4:	93 c0       	rjmp	.+294    	; 0x1afc <play_note+0x4f2>
    19d6:	87 e3       	ldi	r24, 0x37	; 55
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9b bd       	out	0x2b, r25	; 43
    19dc:	8a bd       	out	0x2a, r24	; 42
    19de:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
    19e0:	66 23       	and	r22, r22
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <play_note+0x3dc>
    19e4:	4f c0       	rjmp	.+158    	; 0x1a84 <play_note+0x47a>
    19e6:	88 e1       	ldi	r24, 0x18	; 24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9b bd       	out	0x2b, r25	; 43
    19ec:	8a bd       	out	0x2a, r24	; 42
    19ee:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
    19f0:	66 23       	and	r22, r22
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <play_note+0x3ec>
    19f4:	f6 c0       	rjmp	.+492    	; 0x1be2 <play_note+0x5d8>
    19f6:	82 eb       	ldi	r24, 0xB2	; 178
    19f8:	94 e0       	ldi	r25, 0x04	; 4
    19fa:	9b bd       	out	0x2b, r25	; 43
    19fc:	8a bd       	out	0x2a, r24	; 42
    19fe:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
    1a00:	66 23       	and	r22, r22
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <play_note+0x3fc>
    1a04:	16 c1       	rjmp	.+556    	; 0x1c32 <play_note+0x628>
    1a06:	8d e8       	ldi	r24, 0x8D	; 141
    1a08:	9a e0       	ldi	r25, 0x0A	; 10
    1a0a:	9b bd       	out	0x2b, r25	; 43
    1a0c:	8a bd       	out	0x2a, r24	; 42
    1a0e:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
    1a10:	66 23       	and	r22, r22
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <play_note+0x40c>
    1a14:	d7 c0       	rjmp	.+430    	; 0x1bc4 <play_note+0x5ba>
    1a16:	86 e1       	ldi	r24, 0x16	; 22
    1a18:	9e e0       	ldi	r25, 0x0E	; 14
    1a1a:	9b bd       	out	0x2b, r25	; 43
    1a1c:	8a bd       	out	0x2a, r24	; 42
    1a1e:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
    1a20:	66 23       	and	r22, r22
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <play_note+0x41c>
    1a24:	f7 c0       	rjmp	.+494    	; 0x1c14 <play_note+0x60a>
    1a26:	80 ec       	ldi	r24, 0xC0	; 192
    1a28:	90 e1       	ldi	r25, 0x10	; 16
    1a2a:	9b bd       	out	0x2b, r25	; 43
    1a2c:	8a bd       	out	0x2a, r24	; 42
    1a2e:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
    1a30:	66 23       	and	r22, r22
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <play_note+0x42c>
    1a34:	d1 c0       	rjmp	.+418    	; 0x1bd8 <play_note+0x5ce>
    1a36:	8f e2       	ldi	r24, 0x2F	; 47
    1a38:	94 e0       	ldi	r25, 0x04	; 4
    1a3a:	9b bd       	out	0x2b, r25	; 43
    1a3c:	8a bd       	out	0x2a, r24	; 42
    1a3e:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
    1a40:	66 23       	and	r22, r22
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <play_note+0x43c>
    1a44:	f1 c0       	rjmp	.+482    	; 0x1c28 <play_note+0x61e>
    1a46:	87 e6       	ldi	r24, 0x67	; 103
    1a48:	99 e0       	ldi	r25, 0x09	; 9
    1a4a:	9b bd       	out	0x2b, r25	; 43
    1a4c:	8a bd       	out	0x2a, r24	; 42
    1a4e:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
    1a50:	66 23       	and	r22, r22
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <play_note+0x44c>
    1a54:	cb c0       	rjmp	.+406    	; 0x1bec <play_note+0x5e2>
    1a56:	8d e8       	ldi	r24, 0x8D	; 141
    1a58:	9c e0       	ldi	r25, 0x0C	; 12
    1a5a:	9b bd       	out	0x2b, r25	; 43
    1a5c:	8a bd       	out	0x2a, r24	; 42
    1a5e:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
    1a60:	8d e5       	ldi	r24, 0x5D	; 93
    1a62:	96 e1       	ldi	r25, 0x16	; 22
    1a64:	9b bd       	out	0x2b, r25	; 43
    1a66:	8a bd       	out	0x2a, r24	; 42
	break;
    1a68:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
    1a6a:	66 23       	and	r22, r22
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <play_note+0x466>
    1a6e:	e6 c0       	rjmp	.+460    	; 0x1c3c <play_note+0x632>
    1a70:	86 e4       	ldi	r24, 0x46	; 70
    1a72:	95 e0       	ldi	r25, 0x05	; 5
    1a74:	9b bd       	out	0x2b, r25	; 43
    1a76:	8a bd       	out	0x2a, r24	; 42
    1a78:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
    1a7a:	8d ee       	ldi	r24, 0xED	; 237
    1a7c:	9e e0       	ldi	r25, 0x0E	; 14
    1a7e:	9b bd       	out	0x2b, r25	; 43
    1a80:	8a bd       	out	0x2a, r24	; 42
	break;
    1a82:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
    1a84:	85 e1       	ldi	r24, 0x15	; 21
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9b bd       	out	0x2b, r25	; 43
    1a8a:	8a bd       	out	0x2a, r24	; 42
    1a8c:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
    1a8e:	82 eb       	ldi	r24, 0xB2	; 178
    1a90:	97 e1       	ldi	r25, 0x17	; 23
    1a92:	9b bd       	out	0x2b, r25	; 43
    1a94:	8a bd       	out	0x2a, r24	; 42
    1a96:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
    1a98:	86 e2       	ldi	r24, 0x26	; 38
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9b bd       	out	0x2b, r25	; 43
    1a9e:	8a bd       	out	0x2a, r24	; 42
    1aa0:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
    1aa2:	87 ee       	ldi	r24, 0xE7	; 231
    1aa4:	97 e0       	ldi	r25, 0x07	; 7
    1aa6:	9b bd       	out	0x2b, r25	; 43
    1aa8:	8a bd       	out	0x2a, r24	; 42
    1aaa:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
    1aac:	8e e2       	ldi	r24, 0x2E	; 46
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9b bd       	out	0x2b, r25	; 43
    1ab2:	8a bd       	out	0x2a, r24	; 42
    1ab4:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
    1ab6:	8b ee       	ldi	r24, 0xEB	; 235
    1ab8:	95 e0       	ldi	r25, 0x05	; 5
    1aba:	9b bd       	out	0x2b, r25	; 43
    1abc:	8a bd       	out	0x2a, r24	; 42
    1abe:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
    1ac0:	8a e7       	ldi	r24, 0x7A	; 122
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	9b bd       	out	0x2b, r25	; 43
    1ac6:	8a bd       	out	0x2a, r24	; 42
    1ac8:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
    1aca:	8e e3       	ldi	r24, 0x3E	; 62
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9b bd       	out	0x2b, r25	; 43
    1ad0:	8a bd       	out	0x2a, r24	; 42
    1ad2:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
    1ad4:	89 ef       	ldi	r24, 0xF9	; 249
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	9b bd       	out	0x2b, r25	; 43
    1ada:	8a bd       	out	0x2a, r24	; 42
    1adc:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
    1ade:	8c eb       	ldi	r24, 0xBC	; 188
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9b bd       	out	0x2b, r25	; 43
    1ae4:	8a bd       	out	0x2a, r24	; 42
    1ae6:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
    1ae8:	80 ec       	ldi	r24, 0xC0	; 192
    1aea:	91 e1       	ldi	r25, 0x11	; 17
    1aec:	9b bd       	out	0x2b, r25	; 43
    1aee:	8a bd       	out	0x2a, r24	; 42
    1af0:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
    1af2:	89 e0       	ldi	r24, 0x09	; 9
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9b bd       	out	0x2b, r25	; 43
    1af8:	8a bd       	out	0x2a, r24	; 42
    1afa:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
    1afc:	84 e3       	ldi	r24, 0x34	; 52
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9b bd       	out	0x2b, r25	; 43
    1b02:	8a bd       	out	0x2a, r24	; 42
    1b04:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
    1b06:	8d e8       	ldi	r24, 0x8D	; 141
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9b bd       	out	0x2b, r25	; 43
    1b0c:	8a bd       	out	0x2a, r24	; 42
    1b0e:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
    1b10:	8e e9       	ldi	r24, 0x9E	; 158
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9b bd       	out	0x2b, r25	; 43
    1b16:	8a bd       	out	0x2a, r24	; 42
    1b18:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
    1b1a:	8d e7       	ldi	r24, 0x7D	; 125
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9b bd       	out	0x2b, r25	; 43
    1b20:	8a bd       	out	0x2a, r24	; 42
    1b22:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
    1b24:	83 ed       	ldi	r24, 0xD3	; 211
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9b bd       	out	0x2b, r25	; 43
    1b2a:	8a bd       	out	0x2a, r24	; 42
    1b2c:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
    1b2e:	8d e5       	ldi	r24, 0x5D	; 93
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9b bd       	out	0x2b, r25	; 43
    1b34:	8a bd       	out	0x2a, r24	; 42
    1b36:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
    1b38:	86 e4       	ldi	r24, 0x46	; 70
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9b bd       	out	0x2b, r25	; 43
    1b3e:	8a bd       	out	0x2a, r24	; 42
    1b40:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
    1b42:	89 e6       	ldi	r24, 0x69	; 105
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9b bd       	out	0x2b, r25	; 43
    1b48:	8a bd       	out	0x2a, r24	; 42
    1b4a:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
    1b4c:	8e e4       	ldi	r24, 0x4E	; 78
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9b bd       	out	0x2b, r25	; 43
    1b52:	8a bd       	out	0x2a, r24	; 42
    1b54:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
    1b56:	8b e1       	ldi	r24, 0x1B	; 27
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	9b bd       	out	0x2b, r25	; 43
    1b5c:	8a bd       	out	0x2a, r24	; 42
    1b5e:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
    1b60:	85 ea       	ldi	r24, 0xA5	; 165
    1b62:	96 e0       	ldi	r25, 0x06	; 6
    1b64:	9b bd       	out	0x2b, r25	; 43
    1b66:	8a bd       	out	0x2a, r24	; 42
    1b68:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
    1b6a:	8c e7       	ldi	r24, 0x7C	; 124
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	9b bd       	out	0x2b, r25	; 43
    1b70:	8a bd       	out	0x2a, r24	; 42
    1b72:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
    1b74:	88 ea       	ldi	r24, 0xA8	; 168
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9b bd       	out	0x2b, r25	; 43
    1b7a:	8a bd       	out	0x2a, r24	; 42
    1b7c:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
    1b7e:	82 e5       	ldi	r24, 0x52	; 82
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	9b bd       	out	0x2b, r25	; 43
    1b84:	8a bd       	out	0x2a, r24	; 42
    1b86:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
    1b88:	8c ef       	ldi	r24, 0xFC	; 252
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9b bd       	out	0x2b, r25	; 43
    1b8e:	8a bd       	out	0x2a, r24	; 42
    1b90:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
    1b92:	87 e3       	ldi	r24, 0x37	; 55
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	9b bd       	out	0x2b, r25	; 43
    1b98:	8a bd       	out	0x2a, r24	; 42
    1b9a:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
    1b9c:	8d e3       	ldi	r24, 0x3D	; 61
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	9b bd       	out	0x2b, r25	; 43
    1ba2:	8a bd       	out	0x2a, r24	; 42
    1ba4:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
    1ba6:	89 e1       	ldi	r24, 0x19	; 25
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9b bd       	out	0x2b, r25	; 43
    1bac:	8a bd       	out	0x2a, r24	; 42
    1bae:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
    1bb0:	85 e0       	ldi	r24, 0x05	; 5
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9b bd       	out	0x2b, r25	; 43
    1bb6:	8a bd       	out	0x2a, r24	; 42
    1bb8:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
    1bba:	8a e9       	ldi	r24, 0x9A	; 154
    1bbc:	9a e1       	ldi	r25, 0x1A	; 26
    1bbe:	9b bd       	out	0x2b, r25	; 43
    1bc0:	8a bd       	out	0x2a, r24	; 42
    1bc2:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
    1bc4:	8c e4       	ldi	r24, 0x4C	; 76
    1bc6:	9d e0       	ldi	r25, 0x0D	; 13
    1bc8:	9b bd       	out	0x2b, r25	; 43
    1bca:	8a bd       	out	0x2a, r24	; 42
    1bcc:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
    1bce:	8d ee       	ldi	r24, 0xED	; 237
    1bd0:	93 e1       	ldi	r25, 0x13	; 19
    1bd2:	9b bd       	out	0x2b, r25	; 43
    1bd4:	8a bd       	out	0x2a, r24	; 42
    1bd6:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
    1bd8:	83 ef       	ldi	r24, 0xF3	; 243
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	9b bd       	out	0x2b, r25	; 43
    1bde:	8a bd       	out	0x2a, r24	; 42
    1be0:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
    1be2:	8f e6       	ldi	r24, 0x6F	; 111
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	9b bd       	out	0x2b, r25	; 43
    1be8:	8a bd       	out	0x2a, r24	; 42
    1bea:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
    1bec:	88 ed       	ldi	r24, 0xD8	; 216
    1bee:	9b e0       	ldi	r25, 0x0B	; 11
    1bf0:	9b bd       	out	0x2b, r25	; 43
    1bf2:	8a bd       	out	0x2a, r24	; 42
    1bf4:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
    1bf6:	8e e1       	ldi	r24, 0x1E	; 30
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9b bd       	out	0x2b, r25	; 43
    1bfc:	8a bd       	out	0x2a, r24	; 42
    1bfe:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
    1c00:	82 e2       	ldi	r24, 0x22	; 34
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9b bd       	out	0x2b, r25	; 43
    1c06:	8a bd       	out	0x2a, r24	; 42
    1c08:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
    1c0a:	85 ef       	ldi	r24, 0xF5	; 245
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	9b bd       	out	0x2b, r25	; 43
    1c10:	8a bd       	out	0x2a, r24	; 42
    1c12:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
    1c14:	80 ed       	ldi	r24, 0xD0	; 208
    1c16:	9f e0       	ldi	r25, 0x0F	; 15
    1c18:	9b bd       	out	0x2b, r25	; 43
    1c1a:	8a bd       	out	0x2a, r24	; 42
    1c1c:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
    1c1e:	8d e0       	ldi	r24, 0x0D	; 13
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9b bd       	out	0x2b, r25	; 43
    1c24:	8a bd       	out	0x2a, r24	; 42
    1c26:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
    1c28:	8f ed       	ldi	r24, 0xDF	; 223
    1c2a:	98 e0       	ldi	r25, 0x08	; 8
    1c2c:	9b bd       	out	0x2b, r25	; 43
    1c2e:	8a bd       	out	0x2a, r24	; 42
    1c30:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
    1c32:	86 ef       	ldi	r24, 0xF6	; 246
    1c34:	99 e0       	ldi	r25, 0x09	; 9
    1c36:	9b bd       	out	0x2b, r25	; 43
    1c38:	8a bd       	out	0x2a, r24	; 42
    1c3a:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
    1c3c:	8a ef       	ldi	r24, 0xFA	; 250
    1c3e:	94 e0       	ldi	r25, 0x04	; 4
    1c40:	9b bd       	out	0x2b, r25	; 43
    1c42:	8a bd       	out	0x2a, r24	; 42
    1c44:	08 95       	ret

00001c46 <song0>:
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1c46:	86 34       	cpi	r24, 0x46	; 70
    1c48:	91 05       	cpc	r25, r1
    1c4a:	20 f0       	brcs	.+8      	; 0x1c54 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	80 93 7c 01 	sts	0x017C, r24
    1c52:	08 95       	ret
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1c54:	fc 01       	movw	r30, r24
    1c56:	e1 52       	subi	r30, 0x21	; 33
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
    1c5e:	22 e0       	ldi	r18, 0x02	; 2
    1c60:	44 e0       	ldi	r20, 0x04	; 4
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	81 e4       	ldi	r24, 0x41	; 65
    1c66:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
    1c6a:	26 e0       	ldi	r18, 0x06	; 6
    1c6c:	44 e0       	ldi	r20, 0x04	; 4
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	81 e4       	ldi	r24, 0x41	; 65
    1c72:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
    1c76:	22 e0       	ldi	r18, 0x02	; 2
    1c78:	44 e0       	ldi	r20, 0x04	; 4
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	81 e4       	ldi	r24, 0x41	; 65
    1c7e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
    1c82:	28 e0       	ldi	r18, 0x08	; 8
    1c84:	44 e0       	ldi	r20, 0x04	; 4
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	84 e4       	ldi	r24, 0x44	; 68
    1c8a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
    1c8e:	28 e0       	ldi	r18, 0x08	; 8
    1c90:	44 e0       	ldi	r20, 0x04	; 4
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	86 e4       	ldi	r24, 0x46	; 70
    1c96:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
    1c9a:	26 e0       	ldi	r18, 0x06	; 6
    1c9c:	44 e0       	ldi	r20, 0x04	; 4
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	82 e4       	ldi	r24, 0x42	; 66
    1ca2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
    1ca6:	28 e0       	ldi	r18, 0x08	; 8
    1ca8:	44 e0       	ldi	r20, 0x04	; 4
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	83 e4       	ldi	r24, 0x43	; 67
    1cae:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
    1cb2:	28 e0       	ldi	r18, 0x08	; 8
    1cb4:	44 e0       	ldi	r20, 0x04	; 4
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	81 e4       	ldi	r24, 0x41	; 65
    1cba:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
    1cbe:	28 e0       	ldi	r18, 0x08	; 8
    1cc0:	44 e0       	ldi	r20, 0x04	; 4
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	87 e4       	ldi	r24, 0x47	; 71
    1cc6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
    1cca:	28 e0       	ldi	r18, 0x08	; 8
    1ccc:	44 e0       	ldi	r20, 0x04	; 4
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	85 e4       	ldi	r24, 0x45	; 69
    1cd2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
    1cd6:	20 e1       	ldi	r18, 0x10	; 16
    1cd8:	44 e0       	ldi	r20, 0x04	; 4
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	81 e4       	ldi	r24, 0x41	; 65
    1cde:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
    1ce2:	24 e0       	ldi	r18, 0x04	; 4
    1ce4:	45 e0       	ldi	r20, 0x05	; 5
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	83 e4       	ldi	r24, 0x43	; 67
    1cea:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
    1cee:	24 e0       	ldi	r18, 0x04	; 4
    1cf0:	45 e0       	ldi	r20, 0x05	; 5
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	84 e4       	ldi	r24, 0x44	; 68
    1cf6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1cfa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1cfc:	10 92 89 01 	sts	0x0189, r1
    1d00:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1d04:	88 e0       	ldi	r24, 0x08	; 8
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	90 93 81 01 	sts	0x0181, r25
    1d0c:	80 93 80 01 	sts	0x0180, r24
    1d10:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d12:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1d14:	10 92 89 01 	sts	0x0189, r1
    1d18:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	90 93 81 01 	sts	0x0181, r25
    1d24:	80 93 80 01 	sts	0x0180, r24
    1d28:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
    1d2a:	20 e1       	ldi	r18, 0x10	; 16
    1d2c:	44 e0       	ldi	r20, 0x04	; 4
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	82 e4       	ldi	r24, 0x42	; 66
    1d32:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
    1d36:	28 e0       	ldi	r18, 0x08	; 8
    1d38:	44 e0       	ldi	r20, 0x04	; 4
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	82 e4       	ldi	r24, 0x42	; 66
    1d3e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
    1d42:	28 e1       	ldi	r18, 0x18	; 24
    1d44:	44 e0       	ldi	r20, 0x04	; 4
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	87 e4       	ldi	r24, 0x47	; 71
    1d4a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
    1d4e:	20 e1       	ldi	r18, 0x10	; 16
    1d50:	45 e0       	ldi	r20, 0x05	; 5
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	84 e4       	ldi	r24, 0x44	; 68
    1d56:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d5a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1d5c:	10 92 89 01 	sts	0x0189, r1
    1d60:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	90 93 81 01 	sts	0x0181, r25
    1d6c:	80 93 80 01 	sts	0x0180, r24
    1d70:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
    1d72:	24 e0       	ldi	r18, 0x04	; 4
    1d74:	44 e0       	ldi	r20, 0x04	; 4
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	81 e4       	ldi	r24, 0x41	; 65
    1d7a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
    1d7e:	26 e0       	ldi	r18, 0x06	; 6
    1d80:	44 e0       	ldi	r20, 0x04	; 4
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	87 e4       	ldi	r24, 0x47	; 71
    1d86:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
    1d8a:	24 e0       	ldi	r18, 0x04	; 4
    1d8c:	44 e0       	ldi	r20, 0x04	; 4
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	87 e4       	ldi	r24, 0x47	; 71
    1d92:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
    1d96:	28 e0       	ldi	r18, 0x08	; 8
    1d98:	44 e0       	ldi	r20, 0x04	; 4
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	87 e4       	ldi	r24, 0x47	; 71
    1d9e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
    1da2:	23 e0       	ldi	r18, 0x03	; 3
    1da4:	44 e0       	ldi	r20, 0x04	; 4
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	87 e4       	ldi	r24, 0x47	; 71
    1daa:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
    1dae:	20 e1       	ldi	r18, 0x10	; 16
    1db0:	44 e0       	ldi	r20, 0x04	; 4
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	84 e4       	ldi	r24, 0x44	; 68
    1db6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
    1dba:	20 e1       	ldi	r18, 0x10	; 16
    1dbc:	45 e0       	ldi	r20, 0x05	; 5
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	83 e4       	ldi	r24, 0x43	; 67
    1dc2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
    1dc6:	22 e0       	ldi	r18, 0x02	; 2
    1dc8:	44 e0       	ldi	r20, 0x04	; 4
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	82 e4       	ldi	r24, 0x42	; 66
    1dce:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
    1dd2:	24 e0       	ldi	r18, 0x04	; 4
    1dd4:	45 e0       	ldi	r20, 0x05	; 5
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	84 e4       	ldi	r24, 0x44	; 68
    1dda:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
    1dde:	24 e0       	ldi	r18, 0x04	; 4
    1de0:	44 e0       	ldi	r20, 0x04	; 4
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	81 e4       	ldi	r24, 0x41	; 65
    1de6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
    1dea:	28 e0       	ldi	r18, 0x08	; 8
    1dec:	44 e0       	ldi	r20, 0x04	; 4
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	82 e4       	ldi	r24, 0x42	; 66
    1df2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
    1df6:	28 e1       	ldi	r18, 0x18	; 24
    1df8:	44 e0       	ldi	r20, 0x04	; 4
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	86 e4       	ldi	r24, 0x46	; 70
    1dfe:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
    1e02:	27 e0       	ldi	r18, 0x07	; 7
    1e04:	44 e0       	ldi	r20, 0x04	; 4
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	87 e4       	ldi	r24, 0x47	; 71
    1e0a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>

00001e0e <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    1e0e:	8f 33       	cpi	r24, 0x3F	; 63
    1e10:	91 05       	cpc	r25, r1
    1e12:	20 f0       	brcs	.+8      	; 0x1e1c <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	80 93 7c 01 	sts	0x017C, r24
    1e1a:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	eb 5d       	subi	r30, 0xDB	; 219
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
    1e26:	24 e0       	ldi	r18, 0x04	; 4
    1e28:	44 e0       	ldi	r20, 0x04	; 4
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	83 e4       	ldi	r24, 0x43	; 67
    1e2e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
    1e32:	28 e0       	ldi	r18, 0x08	; 8
    1e34:	44 e0       	ldi	r20, 0x04	; 4
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	85 e4       	ldi	r24, 0x45	; 69
    1e3a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e3e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1e40:	10 92 89 01 	sts	0x0189, r1
    1e44:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	90 93 81 01 	sts	0x0181, r25
    1e50:	80 93 80 01 	sts	0x0180, r24
    1e54:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
    1e56:	28 e0       	ldi	r18, 0x08	; 8
    1e58:	44 e0       	ldi	r20, 0x04	; 4
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	84 e4       	ldi	r24, 0x44	; 68
    1e5e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
    1e62:	20 e1       	ldi	r18, 0x10	; 16
    1e64:	43 e0       	ldi	r20, 0x03	; 3
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	83 e4       	ldi	r24, 0x43	; 67
    1e6a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
    1e6e:	24 e0       	ldi	r18, 0x04	; 4
    1e70:	44 e0       	ldi	r20, 0x04	; 4
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	84 e4       	ldi	r24, 0x44	; 68
    1e76:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
    1e7a:	24 e0       	ldi	r18, 0x04	; 4
    1e7c:	43 e0       	ldi	r20, 0x03	; 3
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	82 e4       	ldi	r24, 0x42	; 66
    1e82:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
    1e86:	27 e0       	ldi	r18, 0x07	; 7
    1e88:	43 e0       	ldi	r20, 0x03	; 3
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	81 e4       	ldi	r24, 0x41	; 65
    1e8e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
    1e92:	24 e0       	ldi	r18, 0x04	; 4
    1e94:	44 e0       	ldi	r20, 0x04	; 4
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	86 e4       	ldi	r24, 0x46	; 70
    1e9a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
    1e9e:	20 e1       	ldi	r18, 0x10	; 16
    1ea0:	42 e0       	ldi	r20, 0x02	; 2
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	82 e4       	ldi	r24, 0x42	; 66
    1ea6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
    1eaa:	20 e1       	ldi	r18, 0x10	; 16
    1eac:	43 e0       	ldi	r20, 0x03	; 3
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	81 e4       	ldi	r24, 0x41	; 65
    1eb2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
    1eb6:	28 e0       	ldi	r18, 0x08	; 8
    1eb8:	44 e0       	ldi	r20, 0x04	; 4
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	83 e4       	ldi	r24, 0x43	; 67
    1ebe:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
    1ec2:	20 e1       	ldi	r18, 0x10	; 16
    1ec4:	43 e0       	ldi	r20, 0x03	; 3
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	84 e4       	ldi	r24, 0x44	; 68
    1eca:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
    1ece:	20 e1       	ldi	r18, 0x10	; 16
    1ed0:	43 e0       	ldi	r20, 0x03	; 3
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	85 e4       	ldi	r24, 0x45	; 69
    1ed6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1eda:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1edc:	10 92 89 01 	sts	0x0189, r1
    1ee0:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1ee4:	88 e0       	ldi	r24, 0x08	; 8
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	90 93 81 01 	sts	0x0181, r25
    1eec:	80 93 80 01 	sts	0x0180, r24
    1ef0:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
    1ef2:	27 e0       	ldi	r18, 0x07	; 7
    1ef4:	43 e0       	ldi	r20, 0x03	; 3
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	82 e4       	ldi	r24, 0x42	; 66
    1efa:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
    1efe:	2c e0       	ldi	r18, 0x0C	; 12
    1f00:	43 e0       	ldi	r20, 0x03	; 3
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	82 e4       	ldi	r24, 0x42	; 66
    1f06:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
    1f0a:	20 e1       	ldi	r18, 0x10	; 16
    1f0c:	43 e0       	ldi	r20, 0x03	; 3
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	81 e4       	ldi	r24, 0x41	; 65
    1f12:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1f16:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1f18:	10 92 89 01 	sts	0x0189, r1
    1f1c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1f20:	80 e1       	ldi	r24, 0x10	; 16
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	90 93 81 01 	sts	0x0181, r25
    1f28:	80 93 80 01 	sts	0x0180, r24
    1f2c:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
    1f2e:	24 e0       	ldi	r18, 0x04	; 4
    1f30:	44 e0       	ldi	r20, 0x04	; 4
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	87 e4       	ldi	r24, 0x47	; 71
    1f36:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
    1f3a:	28 e0       	ldi	r18, 0x08	; 8
    1f3c:	42 e0       	ldi	r20, 0x02	; 2
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	82 e4       	ldi	r24, 0x42	; 66
    1f42:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
    1f46:	20 e1       	ldi	r18, 0x10	; 16
    1f48:	42 e0       	ldi	r20, 0x02	; 2
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	81 e4       	ldi	r24, 0x41	; 65
    1f4e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
    1f52:	20 e1       	ldi	r18, 0x10	; 16
    1f54:	42 e0       	ldi	r20, 0x02	; 2
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	81 e4       	ldi	r24, 0x41	; 65
    1f5a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
    1f5e:	2c e0       	ldi	r18, 0x0C	; 12
    1f60:	44 e0       	ldi	r20, 0x04	; 4
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	85 e4       	ldi	r24, 0x45	; 69
    1f66:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
    1f6a:	22 e0       	ldi	r18, 0x02	; 2
    1f6c:	44 e0       	ldi	r20, 0x04	; 4
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	84 e4       	ldi	r24, 0x44	; 68
    1f72:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
    1f76:	22 e0       	ldi	r18, 0x02	; 2
    1f78:	44 e0       	ldi	r20, 0x04	; 4
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	85 e4       	ldi	r24, 0x45	; 69
    1f7e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
    1f82:	28 e0       	ldi	r18, 0x08	; 8
    1f84:	43 e0       	ldi	r20, 0x03	; 3
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	83 e4       	ldi	r24, 0x43	; 67
    1f8a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
    1f8e:	24 e0       	ldi	r18, 0x04	; 4
    1f90:	43 e0       	ldi	r20, 0x03	; 3
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	81 e4       	ldi	r24, 0x41	; 65
    1f96:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
    1f9a:	28 e0       	ldi	r18, 0x08	; 8
    1f9c:	43 e0       	ldi	r20, 0x03	; 3
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	85 e4       	ldi	r24, 0x45	; 69
    1fa2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
    1fa6:	28 e0       	ldi	r18, 0x08	; 8
    1fa8:	43 e0       	ldi	r20, 0x03	; 3
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	81 e4       	ldi	r24, 0x41	; 65
    1fae:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1fb2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1fb4:	10 92 89 01 	sts	0x0189, r1
    1fb8:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    1fbc:	84 e0       	ldi	r24, 0x04	; 4
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	90 93 81 01 	sts	0x0181, r25
    1fc4:	80 93 80 01 	sts	0x0180, r24
    1fc8:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
    1fca:	28 e0       	ldi	r18, 0x08	; 8
    1fcc:	44 e0       	ldi	r20, 0x04	; 4
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	81 e4       	ldi	r24, 0x41	; 65
    1fd2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>

00001fd6 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    1fd6:	85 39       	cpi	r24, 0x95	; 149
    1fd8:	91 05       	cpc	r25, r1
    1fda:	20 f0       	brcs	.+8      	; 0x1fe4 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	80 93 7c 01 	sts	0x017C, r24
    1fe2:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	ec 59       	subi	r30, 0x9C	; 156
    1fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fea:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
    1fee:	24 e0       	ldi	r18, 0x04	; 4
    1ff0:	43 e0       	ldi	r20, 0x03	; 3
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	87 e4       	ldi	r24, 0x47	; 71
    1ff6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
    1ffa:	22 e0       	ldi	r18, 0x02	; 2
    1ffc:	43 e0       	ldi	r20, 0x03	; 3
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	81 e4       	ldi	r24, 0x41	; 65
    2002:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2006:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2008:	10 92 89 01 	sts	0x0189, r1
    200c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	90 93 81 01 	sts	0x0181, r25
    2018:	80 93 80 01 	sts	0x0180, r24
    201c:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
    201e:	22 e0       	ldi	r18, 0x02	; 2
    2020:	44 e0       	ldi	r20, 0x04	; 4
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	83 e4       	ldi	r24, 0x43	; 67
    2026:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
    202a:	22 e0       	ldi	r18, 0x02	; 2
    202c:	44 e0       	ldi	r20, 0x04	; 4
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	85 e4       	ldi	r24, 0x45	; 69
    2032:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
    2036:	24 e0       	ldi	r18, 0x04	; 4
    2038:	44 e0       	ldi	r20, 0x04	; 4
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	84 e4       	ldi	r24, 0x44	; 68
    203e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
    2042:	22 e0       	ldi	r18, 0x02	; 2
    2044:	44 e0       	ldi	r20, 0x04	; 4
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	83 e4       	ldi	r24, 0x43	; 67
    204a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    204e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2050:	10 92 89 01 	sts	0x0189, r1
    2054:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	90 93 81 01 	sts	0x0181, r25
    2060:	80 93 80 01 	sts	0x0180, r24
    2064:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
    2066:	22 e0       	ldi	r18, 0x02	; 2
    2068:	44 e0       	ldi	r20, 0x04	; 4
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	83 e4       	ldi	r24, 0x43	; 67
    206e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2072:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2074:	10 92 89 01 	sts	0x0189, r1
    2078:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	90 93 81 01 	sts	0x0181, r25
    2084:	80 93 80 01 	sts	0x0180, r24
    2088:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
    208a:	22 e0       	ldi	r18, 0x02	; 2
    208c:	44 e0       	ldi	r20, 0x04	; 4
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	83 e4       	ldi	r24, 0x43	; 67
    2092:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2096:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2098:	10 92 89 01 	sts	0x0189, r1
    209c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	90 93 81 01 	sts	0x0181, r25
    20a8:	80 93 80 01 	sts	0x0180, r24
    20ac:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
    20ae:	22 e0       	ldi	r18, 0x02	; 2
    20b0:	44 e0       	ldi	r20, 0x04	; 4
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	83 e4       	ldi	r24, 0x43	; 67
    20b6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20ba:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    20bc:	10 92 89 01 	sts	0x0189, r1
    20c0:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    20c4:	80 e1       	ldi	r24, 0x10	; 16
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	90 93 81 01 	sts	0x0181, r25
    20cc:	80 93 80 01 	sts	0x0180, r24
    20d0:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
    20d2:	22 e0       	ldi	r18, 0x02	; 2
    20d4:	44 e0       	ldi	r20, 0x04	; 4
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	85 e4       	ldi	r24, 0x45	; 69
    20da:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
    20de:	22 e0       	ldi	r18, 0x02	; 2
    20e0:	44 e0       	ldi	r20, 0x04	; 4
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	84 e4       	ldi	r24, 0x44	; 68
    20e6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
    20ea:	22 e0       	ldi	r18, 0x02	; 2
    20ec:	44 e0       	ldi	r20, 0x04	; 4
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	83 e4       	ldi	r24, 0x43	; 67
    20f2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20f6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    20f8:	10 92 89 01 	sts	0x0189, r1
    20fc:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	90 93 81 01 	sts	0x0181, r25
    2108:	80 93 80 01 	sts	0x0180, r24
    210c:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
    210e:	22 e0       	ldi	r18, 0x02	; 2
    2110:	44 e0       	ldi	r20, 0x04	; 4
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	83 e4       	ldi	r24, 0x43	; 67
    2116:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    211a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    211c:	10 92 89 01 	sts	0x0189, r1
    2120:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	90 93 81 01 	sts	0x0181, r25
    212c:	80 93 80 01 	sts	0x0180, r24
    2130:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
    2132:	22 e0       	ldi	r18, 0x02	; 2
    2134:	44 e0       	ldi	r20, 0x04	; 4
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	83 e4       	ldi	r24, 0x43	; 67
    213a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    213e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2140:	10 92 89 01 	sts	0x0189, r1
    2144:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	90 93 81 01 	sts	0x0181, r25
    2150:	80 93 80 01 	sts	0x0180, r24
    2154:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
    2156:	22 e0       	ldi	r18, 0x02	; 2
    2158:	44 e0       	ldi	r20, 0x04	; 4
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	83 e4       	ldi	r24, 0x43	; 67
    215e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2162:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2164:	10 92 89 01 	sts	0x0189, r1
    2168:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    216c:	84 e0       	ldi	r24, 0x04	; 4
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	90 93 81 01 	sts	0x0181, r25
    2174:	80 93 80 01 	sts	0x0180, r24
    2178:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
    217a:	24 e0       	ldi	r18, 0x04	; 4
    217c:	43 e0       	ldi	r20, 0x03	; 3
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	87 e4       	ldi	r24, 0x47	; 71
    2182:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
    2186:	22 e0       	ldi	r18, 0x02	; 2
    2188:	43 e0       	ldi	r20, 0x03	; 3
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	81 e4       	ldi	r24, 0x41	; 65
    218e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2192:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2194:	10 92 89 01 	sts	0x0189, r1
    2198:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	90 93 81 01 	sts	0x0181, r25
    21a4:	80 93 80 01 	sts	0x0180, r24
    21a8:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
    21aa:	22 e0       	ldi	r18, 0x02	; 2
    21ac:	44 e0       	ldi	r20, 0x04	; 4
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	83 e4       	ldi	r24, 0x43	; 67
    21b2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
    21b6:	22 e0       	ldi	r18, 0x02	; 2
    21b8:	44 e0       	ldi	r20, 0x04	; 4
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	85 e4       	ldi	r24, 0x45	; 69
    21be:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
    21c2:	24 e0       	ldi	r18, 0x04	; 4
    21c4:	44 e0       	ldi	r20, 0x04	; 4
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	84 e4       	ldi	r24, 0x44	; 68
    21ca:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
    21ce:	22 e0       	ldi	r18, 0x02	; 2
    21d0:	44 e0       	ldi	r20, 0x04	; 4
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	83 e4       	ldi	r24, 0x43	; 67
    21d6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    21da:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    21dc:	10 92 89 01 	sts	0x0189, r1
    21e0:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	90 93 81 01 	sts	0x0181, r25
    21ec:	80 93 80 01 	sts	0x0180, r24
    21f0:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
    21f2:	22 e0       	ldi	r18, 0x02	; 2
    21f4:	44 e0       	ldi	r20, 0x04	; 4
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	83 e4       	ldi	r24, 0x43	; 67
    21fa:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    21fe:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2200:	10 92 89 01 	sts	0x0189, r1
    2204:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	90 93 81 01 	sts	0x0181, r25
    2210:	80 93 80 01 	sts	0x0180, r24
    2214:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
    2216:	22 e0       	ldi	r18, 0x02	; 2
    2218:	44 e0       	ldi	r20, 0x04	; 4
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	83 e4       	ldi	r24, 0x43	; 67
    221e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2222:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2224:	10 92 89 01 	sts	0x0189, r1
    2228:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	90 93 81 01 	sts	0x0181, r25
    2234:	80 93 80 01 	sts	0x0180, r24
    2238:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
    223a:	22 e0       	ldi	r18, 0x02	; 2
    223c:	44 e0       	ldi	r20, 0x04	; 4
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	83 e4       	ldi	r24, 0x43	; 67
    2242:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2246:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2248:	10 92 89 01 	sts	0x0189, r1
    224c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2250:	8a e0       	ldi	r24, 0x0A	; 10
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	90 93 81 01 	sts	0x0181, r25
    2258:	80 93 80 01 	sts	0x0180, r24
    225c:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    225e:	24 e0       	ldi	r18, 0x04	; 4
    2260:	44 e0       	ldi	r20, 0x04	; 4
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	83 e4       	ldi	r24, 0x43	; 67
    2266:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    226a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    226c:	10 92 89 01 	sts	0x0189, r1
    2270:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2274:	84 e0       	ldi	r24, 0x04	; 4
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	90 93 81 01 	sts	0x0181, r25
    227c:	80 93 80 01 	sts	0x0180, r24
    2280:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    2282:	22 e0       	ldi	r18, 0x02	; 2
    2284:	44 e0       	ldi	r20, 0x04	; 4
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	84 e4       	ldi	r24, 0x44	; 68
    228a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    228e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2290:	10 92 89 01 	sts	0x0189, r1
    2294:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	90 93 81 01 	sts	0x0181, r25
    22a0:	80 93 80 01 	sts	0x0180, r24
    22a4:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    22a6:	24 e0       	ldi	r18, 0x04	; 4
    22a8:	44 e0       	ldi	r20, 0x04	; 4
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	85 e4       	ldi	r24, 0x45	; 69
    22ae:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    22b2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    22b4:	10 92 89 01 	sts	0x0189, r1
    22b8:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	90 93 81 01 	sts	0x0181, r25
    22c4:	80 93 80 01 	sts	0x0180, r24
    22c8:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    22ca:	22 e0       	ldi	r18, 0x02	; 2
    22cc:	44 e0       	ldi	r20, 0x04	; 4
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	84 e4       	ldi	r24, 0x44	; 68
    22d2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    22d6:	22 e0       	ldi	r18, 0x02	; 2
    22d8:	44 e0       	ldi	r20, 0x04	; 4
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	83 e4       	ldi	r24, 0x43	; 67
    22de:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    22e2:	22 e0       	ldi	r18, 0x02	; 2
    22e4:	43 e0       	ldi	r20, 0x03	; 3
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	81 e4       	ldi	r24, 0x41	; 65
    22ea:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    22ee:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    22f0:	10 92 89 01 	sts	0x0189, r1
    22f4:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	90 93 81 01 	sts	0x0181, r25
    2300:	80 93 80 01 	sts	0x0180, r24
    2304:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    2306:	22 e0       	ldi	r18, 0x02	; 2
    2308:	44 e0       	ldi	r20, 0x04	; 4
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	83 e4       	ldi	r24, 0x43	; 67
    230e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    2312:	22 e0       	ldi	r18, 0x02	; 2
    2314:	43 e0       	ldi	r20, 0x03	; 3
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	81 e4       	ldi	r24, 0x41	; 65
    231a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    231e:	22 e0       	ldi	r18, 0x02	; 2
    2320:	43 e0       	ldi	r20, 0x03	; 3
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	81 e4       	ldi	r24, 0x41	; 65
    2326:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    232a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    232c:	10 92 89 01 	sts	0x0189, r1
    2330:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	90 93 81 01 	sts	0x0181, r25
    233c:	80 93 80 01 	sts	0x0180, r24
    2340:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    2342:	22 e0       	ldi	r18, 0x02	; 2
    2344:	44 e0       	ldi	r20, 0x04	; 4
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	85 e4       	ldi	r24, 0x45	; 69
    234a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    234e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2350:	10 92 89 01 	sts	0x0189, r1
    2354:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	90 93 81 01 	sts	0x0181, r25
    2360:	80 93 80 01 	sts	0x0180, r24
    2364:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    2366:	22 e0       	ldi	r18, 0x02	; 2
    2368:	44 e0       	ldi	r20, 0x04	; 4
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	85 e4       	ldi	r24, 0x45	; 69
    236e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    2372:	22 e0       	ldi	r18, 0x02	; 2
    2374:	44 e0       	ldi	r20, 0x04	; 4
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	86 e4       	ldi	r24, 0x46	; 70
    237a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    237e:	22 e0       	ldi	r18, 0x02	; 2
    2380:	44 e0       	ldi	r20, 0x04	; 4
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	87 e4       	ldi	r24, 0x47	; 71
    2386:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    238a:	22 e0       	ldi	r18, 0x02	; 2
    238c:	44 e0       	ldi	r20, 0x04	; 4
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	87 e4       	ldi	r24, 0x47	; 71
    2392:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2396:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2398:	10 92 89 01 	sts	0x0189, r1
    239c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    23a0:	88 e0       	ldi	r24, 0x08	; 8
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	90 93 81 01 	sts	0x0181, r25
    23a8:	80 93 80 01 	sts	0x0180, r24
    23ac:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    23ae:	24 e0       	ldi	r18, 0x04	; 4
    23b0:	44 e0       	ldi	r20, 0x04	; 4
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	87 e4       	ldi	r24, 0x47	; 71
    23b6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    23ba:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    23bc:	10 92 89 01 	sts	0x0189, r1
    23c0:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	90 93 81 01 	sts	0x0181, r25
    23cc:	80 93 80 01 	sts	0x0180, r24
    23d0:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    23d2:	21 e0       	ldi	r18, 0x01	; 1
    23d4:	44 e0       	ldi	r20, 0x04	; 4
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	87 e4       	ldi	r24, 0x47	; 71
    23da:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    23de:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    23e0:	10 92 89 01 	sts	0x0189, r1
    23e4:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	90 93 81 01 	sts	0x0181, r25
    23f0:	80 93 80 01 	sts	0x0180, r24
    23f4:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    23f6:	22 e0       	ldi	r18, 0x02	; 2
    23f8:	44 e0       	ldi	r20, 0x04	; 4
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	87 e4       	ldi	r24, 0x47	; 71
    23fe:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2402:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2404:	10 92 89 01 	sts	0x0189, r1
    2408:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	90 93 81 01 	sts	0x0181, r25
    2414:	80 93 80 01 	sts	0x0180, r24
    2418:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    241a:	22 e0       	ldi	r18, 0x02	; 2
    241c:	43 e0       	ldi	r20, 0x03	; 3
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	85 e4       	ldi	r24, 0x45	; 69
    2422:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2426:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2428:	10 92 89 01 	sts	0x0189, r1
    242c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	90 93 81 01 	sts	0x0181, r25
    2438:	80 93 80 01 	sts	0x0180, r24
    243c:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    243e:	22 e0       	ldi	r18, 0x02	; 2
    2440:	43 e0       	ldi	r20, 0x03	; 3
    2442:	61 e0       	ldi	r22, 0x01	; 1
    2444:	85 e4       	ldi	r24, 0x45	; 69
    2446:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    244a:	22 e0       	ldi	r18, 0x02	; 2
    244c:	43 e0       	ldi	r20, 0x03	; 3
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	86 e4       	ldi	r24, 0x46	; 70
    2452:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    2456:	22 e0       	ldi	r18, 0x02	; 2
    2458:	43 e0       	ldi	r20, 0x03	; 3
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	87 e4       	ldi	r24, 0x47	; 71
    245e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    2462:	22 e0       	ldi	r18, 0x02	; 2
    2464:	43 e0       	ldi	r20, 0x03	; 3
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	87 e4       	ldi	r24, 0x47	; 71
    246a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    246e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2470:	10 92 89 01 	sts	0x0189, r1
    2474:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2478:	84 e0       	ldi	r24, 0x04	; 4
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	90 93 81 01 	sts	0x0181, r25
    2480:	80 93 80 01 	sts	0x0180, r24
    2484:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    2486:	22 e0       	ldi	r18, 0x02	; 2
    2488:	44 e0       	ldi	r20, 0x04	; 4
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	84 e4       	ldi	r24, 0x44	; 68
    248e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    2492:	22 e0       	ldi	r18, 0x02	; 2
    2494:	44 e0       	ldi	r20, 0x04	; 4
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	83 e4       	ldi	r24, 0x43	; 67
    249a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    249e:	22 e0       	ldi	r18, 0x02	; 2
    24a0:	43 e0       	ldi	r20, 0x03	; 3
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	81 e4       	ldi	r24, 0x41	; 65
    24a6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    24aa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    24ac:	10 92 89 01 	sts	0x0189, r1
    24b0:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	90 93 81 01 	sts	0x0181, r25
    24bc:	80 93 80 01 	sts	0x0180, r24
    24c0:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    24c2:	22 e0       	ldi	r18, 0x02	; 2
    24c4:	44 e0       	ldi	r20, 0x04	; 4
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	83 e4       	ldi	r24, 0x43	; 67
    24ca:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    24ce:	22 e0       	ldi	r18, 0x02	; 2
    24d0:	43 e0       	ldi	r20, 0x03	; 3
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	81 e4       	ldi	r24, 0x41	; 65
    24d6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    24da:	22 e0       	ldi	r18, 0x02	; 2
    24dc:	43 e0       	ldi	r20, 0x03	; 3
    24de:	61 e0       	ldi	r22, 0x01	; 1
    24e0:	81 e4       	ldi	r24, 0x41	; 65
    24e2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    24e6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    24e8:	10 92 89 01 	sts	0x0189, r1
    24ec:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	90 93 81 01 	sts	0x0181, r25
    24f8:	80 93 80 01 	sts	0x0180, r24
    24fc:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    24fe:	22 e0       	ldi	r18, 0x02	; 2
    2500:	44 e0       	ldi	r20, 0x04	; 4
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	85 e4       	ldi	r24, 0x45	; 69
    2506:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    250a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    250c:	10 92 89 01 	sts	0x0189, r1
    2510:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	90 93 81 01 	sts	0x0181, r25
    251c:	80 93 80 01 	sts	0x0180, r24
    2520:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    2522:	22 e0       	ldi	r18, 0x02	; 2
    2524:	44 e0       	ldi	r20, 0x04	; 4
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	85 e4       	ldi	r24, 0x45	; 69
    252a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    252e:	22 e0       	ldi	r18, 0x02	; 2
    2530:	44 e0       	ldi	r20, 0x04	; 4
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	86 e4       	ldi	r24, 0x46	; 70
    2536:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    253a:	22 e0       	ldi	r18, 0x02	; 2
    253c:	44 e0       	ldi	r20, 0x04	; 4
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	87 e4       	ldi	r24, 0x47	; 71
    2542:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    2546:	22 e0       	ldi	r18, 0x02	; 2
    2548:	44 e0       	ldi	r20, 0x04	; 4
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	87 e4       	ldi	r24, 0x47	; 71
    254e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2552:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2554:	10 92 89 01 	sts	0x0189, r1
    2558:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    255c:	88 e0       	ldi	r24, 0x08	; 8
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	90 93 81 01 	sts	0x0181, r25
    2564:	80 93 80 01 	sts	0x0180, r24
    2568:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    256a:	22 e0       	ldi	r18, 0x02	; 2
    256c:	43 e0       	ldi	r20, 0x03	; 3
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	82 e4       	ldi	r24, 0x42	; 66
    2572:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    2576:	22 e0       	ldi	r18, 0x02	; 2
    2578:	44 e0       	ldi	r20, 0x04	; 4
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	84 e4       	ldi	r24, 0x44	; 68
    257e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    2582:	22 e0       	ldi	r18, 0x02	; 2
    2584:	44 e0       	ldi	r20, 0x04	; 4
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	83 e4       	ldi	r24, 0x43	; 67
    258a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    258e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2590:	10 92 89 01 	sts	0x0189, r1
    2594:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	90 93 81 01 	sts	0x0181, r25
    25a0:	80 93 80 01 	sts	0x0180, r24
    25a4:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    25a6:	22 e0       	ldi	r18, 0x02	; 2
    25a8:	44 e0       	ldi	r20, 0x04	; 4
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	85 e4       	ldi	r24, 0x45	; 69
    25ae:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25b2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    25b4:	10 92 89 01 	sts	0x0189, r1
    25b8:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	90 93 81 01 	sts	0x0181, r25
    25c4:	80 93 80 01 	sts	0x0180, r24
    25c8:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    25ca:	22 e0       	ldi	r18, 0x02	; 2
    25cc:	44 e0       	ldi	r20, 0x04	; 4
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	87 e4       	ldi	r24, 0x47	; 71
    25d2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    25d6:	22 e0       	ldi	r18, 0x02	; 2
    25d8:	44 e0       	ldi	r20, 0x04	; 4
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	86 e4       	ldi	r24, 0x46	; 70
    25de:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    25e2:	24 e0       	ldi	r18, 0x04	; 4
    25e4:	44 e0       	ldi	r20, 0x04	; 4
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	81 e4       	ldi	r24, 0x41	; 65
    25ea:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    25ee:	22 e0       	ldi	r18, 0x02	; 2
    25f0:	44 e0       	ldi	r20, 0x04	; 4
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	87 e4       	ldi	r24, 0x47	; 71
    25f6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25fa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    25fc:	10 92 89 01 	sts	0x0189, r1
    2600:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	90 93 81 01 	sts	0x0181, r25
    260c:	80 93 80 01 	sts	0x0180, r24
    2610:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    2612:	22 e0       	ldi	r18, 0x02	; 2
    2614:	44 e0       	ldi	r20, 0x04	; 4
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	85 e4       	ldi	r24, 0x45	; 69
    261a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    261e:	23 e0       	ldi	r18, 0x03	; 3
    2620:	43 e0       	ldi	r20, 0x03	; 3
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	87 e4       	ldi	r24, 0x47	; 71
    2626:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    262a:	24 e0       	ldi	r18, 0x04	; 4
    262c:	43 e0       	ldi	r20, 0x03	; 3
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	81 e4       	ldi	r24, 0x41	; 65
    2632:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    2636:	22 e0       	ldi	r18, 0x02	; 2
    2638:	43 e0       	ldi	r20, 0x03	; 3
    263a:	61 e0       	ldi	r22, 0x01	; 1
    263c:	82 e4       	ldi	r24, 0x42	; 66
    263e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2642:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2644:	10 92 89 01 	sts	0x0189, r1
    2648:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	90 93 81 01 	sts	0x0181, r25
    2654:	80 93 80 01 	sts	0x0180, r24
    2658:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    265a:	22 e0       	ldi	r18, 0x02	; 2
    265c:	43 e0       	ldi	r20, 0x03	; 3
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	82 e4       	ldi	r24, 0x42	; 66
    2662:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2666:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2668:	10 92 89 01 	sts	0x0189, r1
    266c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	90 93 81 01 	sts	0x0181, r25
    2678:	80 93 80 01 	sts	0x0180, r24
    267c:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    267e:	22 e0       	ldi	r18, 0x02	; 2
    2680:	43 e0       	ldi	r20, 0x03	; 3
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	81 e4       	ldi	r24, 0x41	; 65
    2686:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    268a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    268c:	10 92 89 01 	sts	0x0189, r1
    2690:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	90 93 81 01 	sts	0x0181, r25
    269c:	80 93 80 01 	sts	0x0180, r24
    26a0:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    26a2:	24 e0       	ldi	r18, 0x04	; 4
    26a4:	43 e0       	ldi	r20, 0x03	; 3
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	85 e4       	ldi	r24, 0x45	; 69
    26aa:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26ae:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26b0:	10 92 89 01 	sts	0x0189, r1
    26b4:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	90 93 81 01 	sts	0x0181, r25
    26c0:	80 93 80 01 	sts	0x0180, r24
    26c4:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    26c6:	22 e0       	ldi	r18, 0x02	; 2
    26c8:	43 e0       	ldi	r20, 0x03	; 3
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	87 e4       	ldi	r24, 0x47	; 71
    26ce:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26d2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26d4:	10 92 89 01 	sts	0x0189, r1
    26d8:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	90 93 81 01 	sts	0x0181, r25
    26e4:	80 93 80 01 	sts	0x0180, r24
    26e8:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    26ea:	25 e0       	ldi	r18, 0x05	; 5
    26ec:	44 e0       	ldi	r20, 0x04	; 4
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	83 e4       	ldi	r24, 0x43	; 67
    26f2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26f6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26f8:	10 92 89 01 	sts	0x0189, r1
    26fc:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2700:	84 e0       	ldi	r24, 0x04	; 4
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	90 93 81 01 	sts	0x0181, r25
    2708:	80 93 80 01 	sts	0x0180, r24
    270c:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    270e:	22 e0       	ldi	r18, 0x02	; 2
    2710:	43 e0       	ldi	r20, 0x03	; 3
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	82 e4       	ldi	r24, 0x42	; 66
    2716:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    271a:	22 e0       	ldi	r18, 0x02	; 2
    271c:	44 e0       	ldi	r20, 0x04	; 4
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	84 e4       	ldi	r24, 0x44	; 68
    2722:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    2726:	22 e0       	ldi	r18, 0x02	; 2
    2728:	44 e0       	ldi	r20, 0x04	; 4
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	83 e4       	ldi	r24, 0x43	; 67
    272e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2732:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2734:	10 92 89 01 	sts	0x0189, r1
    2738:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	90 93 81 01 	sts	0x0181, r25
    2744:	80 93 80 01 	sts	0x0180, r24
    2748:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    274a:	22 e0       	ldi	r18, 0x02	; 2
    274c:	44 e0       	ldi	r20, 0x04	; 4
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	85 e4       	ldi	r24, 0x45	; 69
    2752:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2756:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2758:	10 92 89 01 	sts	0x0189, r1
    275c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2760:	82 e0       	ldi	r24, 0x02	; 2
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	90 93 81 01 	sts	0x0181, r25
    2768:	80 93 80 01 	sts	0x0180, r24
    276c:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    276e:	22 e0       	ldi	r18, 0x02	; 2
    2770:	44 e0       	ldi	r20, 0x04	; 4
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	87 e4       	ldi	r24, 0x47	; 71
    2776:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    277a:	22 e0       	ldi	r18, 0x02	; 2
    277c:	44 e0       	ldi	r20, 0x04	; 4
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	86 e4       	ldi	r24, 0x46	; 70
    2782:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    2786:	24 e0       	ldi	r18, 0x04	; 4
    2788:	44 e0       	ldi	r20, 0x04	; 4
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	81 e4       	ldi	r24, 0x41	; 65
    278e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    2792:	22 e0       	ldi	r18, 0x02	; 2
    2794:	44 e0       	ldi	r20, 0x04	; 4
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	87 e4       	ldi	r24, 0x47	; 71
    279a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    279e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27a0:	10 92 89 01 	sts	0x0189, r1
    27a4:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	90 93 81 01 	sts	0x0181, r25
    27b0:	80 93 80 01 	sts	0x0180, r24
    27b4:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    27b6:	22 e0       	ldi	r18, 0x02	; 2
    27b8:	44 e0       	ldi	r20, 0x04	; 4
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	85 e4       	ldi	r24, 0x45	; 69
    27be:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    27c2:	23 e0       	ldi	r18, 0x03	; 3
    27c4:	43 e0       	ldi	r20, 0x03	; 3
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	87 e4       	ldi	r24, 0x47	; 71
    27ca:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    27ce:	24 e0       	ldi	r18, 0x04	; 4
    27d0:	43 e0       	ldi	r20, 0x03	; 3
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	81 e4       	ldi	r24, 0x41	; 65
    27d6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    27da:	22 e0       	ldi	r18, 0x02	; 2
    27dc:	43 e0       	ldi	r20, 0x03	; 3
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	82 e4       	ldi	r24, 0x42	; 66
    27e2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27e6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27e8:	10 92 89 01 	sts	0x0189, r1
    27ec:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	90 93 81 01 	sts	0x0181, r25
    27f8:	80 93 80 01 	sts	0x0180, r24
    27fc:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    27fe:	22 e0       	ldi	r18, 0x02	; 2
    2800:	43 e0       	ldi	r20, 0x03	; 3
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	82 e4       	ldi	r24, 0x42	; 66
    2806:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    280a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    280c:	10 92 89 01 	sts	0x0189, r1
    2810:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	90 93 81 01 	sts	0x0181, r25
    281c:	80 93 80 01 	sts	0x0180, r24
    2820:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    2822:	22 e0       	ldi	r18, 0x02	; 2
    2824:	43 e0       	ldi	r20, 0x03	; 3
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	81 e4       	ldi	r24, 0x41	; 65
    282a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    282e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2830:	10 92 89 01 	sts	0x0189, r1
    2834:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	90 93 81 01 	sts	0x0181, r25
    2840:	80 93 80 01 	sts	0x0180, r24
    2844:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    2846:	24 e0       	ldi	r18, 0x04	; 4
    2848:	43 e0       	ldi	r20, 0x03	; 3
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	85 e4       	ldi	r24, 0x45	; 69
    284e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2852:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2854:	10 92 89 01 	sts	0x0189, r1
    2858:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    285c:	84 e0       	ldi	r24, 0x04	; 4
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	90 93 81 01 	sts	0x0181, r25
    2864:	80 93 80 01 	sts	0x0180, r24
    2868:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    286a:	22 e0       	ldi	r18, 0x02	; 2
    286c:	43 e0       	ldi	r20, 0x03	; 3
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	87 e4       	ldi	r24, 0x47	; 71
    2872:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    2876:	25 e0       	ldi	r18, 0x05	; 5
    2878:	44 e0       	ldi	r20, 0x04	; 4
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	83 e4       	ldi	r24, 0x43	; 67
    287e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2882:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2884:	10 92 89 01 	sts	0x0189, r1
    2888:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    288c:	88 e0       	ldi	r24, 0x08	; 8
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	90 93 81 01 	sts	0x0181, r25
    2894:	80 93 80 01 	sts	0x0180, r24
    2898:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    289a:	28 e0       	ldi	r18, 0x08	; 8
    289c:	42 e0       	ldi	r20, 0x02	; 2
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	87 e4       	ldi	r24, 0x47	; 71
    28a2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    28a6:	28 e0       	ldi	r18, 0x08	; 8
    28a8:	44 e0       	ldi	r20, 0x04	; 4
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	87 e4       	ldi	r24, 0x47	; 71
    28ae:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    28b2:	24 e0       	ldi	r18, 0x04	; 4
    28b4:	44 e0       	ldi	r20, 0x04	; 4
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	85 e4       	ldi	r24, 0x45	; 69
    28ba:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    28be:	22 e0       	ldi	r18, 0x02	; 2
    28c0:	44 e0       	ldi	r20, 0x04	; 4
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	83 e4       	ldi	r24, 0x43	; 67
    28c6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28ca:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28cc:	10 92 89 01 	sts	0x0189, r1
    28d0:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	90 93 81 01 	sts	0x0181, r25
    28dc:	80 93 80 01 	sts	0x0180, r24
    28e0:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	44 e0       	ldi	r20, 0x04	; 4
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	85 e4       	ldi	r24, 0x45	; 69
    28ea:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28ee:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28f0:	10 92 89 01 	sts	0x0189, r1
    28f4:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	90 93 81 01 	sts	0x0181, r25
    2900:	80 93 80 01 	sts	0x0180, r24
    2904:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    2906:	23 e0       	ldi	r18, 0x03	; 3
    2908:	44 e0       	ldi	r20, 0x04	; 4
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	85 e4       	ldi	r24, 0x45	; 69
    290e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2912:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2914:	10 92 89 01 	sts	0x0189, r1
    2918:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	90 93 81 01 	sts	0x0181, r25
    2924:	80 93 80 01 	sts	0x0180, r24
    2928:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    292a:	21 e0       	ldi	r18, 0x01	; 1
    292c:	44 e0       	ldi	r20, 0x04	; 4
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	85 e4       	ldi	r24, 0x45	; 69
    2932:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2936:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2938:	10 92 89 01 	sts	0x0189, r1
    293c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2940:	88 e0       	ldi	r24, 0x08	; 8
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	90 93 81 01 	sts	0x0181, r25
    2948:	80 93 80 01 	sts	0x0180, r24
    294c:	08 95       	ret

0000294e <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    294e:	8f 31       	cpi	r24, 0x1F	; 31
    2950:	91 05       	cpc	r25, r1
    2952:	20 f0       	brcs	.+8      	; 0x295c <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	80 93 7c 01 	sts	0x017C, r24
    295a:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    295c:	fc 01       	movw	r30, r24
    295e:	e7 50       	subi	r30, 0x07	; 7
    2960:	fe 4f       	sbci	r31, 0xFE	; 254
    2962:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2966:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2968:	10 92 89 01 	sts	0x0189, r1
    296c:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	90 93 81 01 	sts	0x0181, r25
    2978:	80 93 80 01 	sts	0x0180, r24
    297c:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    297e:	24 e0       	ldi	r18, 0x04	; 4
    2980:	45 e0       	ldi	r20, 0x05	; 5
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	85 e4       	ldi	r24, 0x45	; 69
    2986:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    298a:	27 e0       	ldi	r18, 0x07	; 7
    298c:	44 e0       	ldi	r20, 0x04	; 4
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	85 e4       	ldi	r24, 0x45	; 69
    2992:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    2996:	27 e0       	ldi	r18, 0x07	; 7
    2998:	44 e0       	ldi	r20, 0x04	; 4
    299a:	61 e0       	ldi	r22, 0x01	; 1
    299c:	85 e4       	ldi	r24, 0x45	; 69
    299e:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    29a2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    29a4:	10 92 89 01 	sts	0x0189, r1
    29a8:	10 92 88 01 	sts	0x0188, r1
  max_beat = duration;
    29ac:	85 e0       	ldi	r24, 0x05	; 5
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	90 93 81 01 	sts	0x0181, r25
    29b4:	80 93 80 01 	sts	0x0180, r24
    29b8:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    29ba:	28 e0       	ldi	r18, 0x08	; 8
    29bc:	45 e0       	ldi	r20, 0x05	; 5
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	85 e4       	ldi	r24, 0x45	; 69
    29c2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    29c6:	23 e0       	ldi	r18, 0x03	; 3
    29c8:	44 e0       	ldi	r20, 0x04	; 4
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	85 e4       	ldi	r24, 0x45	; 69
    29ce:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    29d2:	23 e0       	ldi	r18, 0x03	; 3
    29d4:	44 e0       	ldi	r20, 0x04	; 4
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	85 e4       	ldi	r24, 0x45	; 69
    29da:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    29de:	28 e0       	ldi	r18, 0x08	; 8
    29e0:	45 e0       	ldi	r20, 0x05	; 5
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	87 e4       	ldi	r24, 0x47	; 71
    29e6:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    29ea:	24 e0       	ldi	r18, 0x04	; 4
    29ec:	45 e0       	ldi	r20, 0x05	; 5
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	85 e4       	ldi	r24, 0x45	; 69
    29f2:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    29f6:	23 e0       	ldi	r18, 0x03	; 3
    29f8:	45 e0       	ldi	r20, 0x05	; 5
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	85 e4       	ldi	r24, 0x45	; 69
    29fe:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    2a02:	24 e0       	ldi	r18, 0x04	; 4
    2a04:	45 e0       	ldi	r20, 0x05	; 5
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	87 e4       	ldi	r24, 0x47	; 71
    2a0a:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    2a0e:	28 e0       	ldi	r18, 0x08	; 8
    2a10:	45 e0       	ldi	r20, 0x05	; 5
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	87 e4       	ldi	r24, 0x47	; 71
    2a16:	0c 94 05 0b 	jmp	0x160a	; 0x160a <play_note>

00002a1a <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	89 f0       	breq	.+34     	; 0x2a40 <play_song+0x26>
    2a1e:	60 f0       	brcs	.+24     	; 0x2a38 <play_song+0x1e>
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	31 f0       	breq	.+12     	; 0x2a30 <play_song+0x16>
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	41 f4       	brne	.+16     	; 0x2a38 <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    2a28:	86 2f       	mov	r24, r22
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0c 94 a7 14 	jmp	0x294e	; 0x294e <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    2a30:	86 2f       	mov	r24, r22
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    2a38:	86 2f       	mov	r24, r22
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    2a40:	86 2f       	mov	r24, r22
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <song1>

00002a48 <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    2a48:	10 92 7c 01 	sts	0x017C, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2a4c:	8e b5       	in	r24, 0x2e	; 46
    2a4e:	8c 7f       	andi	r24, 0xFC	; 252
    2a50:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    2a52:	92 9a       	sbi	0x12, 2	; 18
    2a54:	08 95       	ret

00002a56 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    2a56:	10 92 7c 01 	sts	0x017C, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    2a5a:	8e b5       	in	r24, 0x2e	; 46
    2a5c:	83 60       	ori	r24, 0x03	; 3
    2a5e:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    2a60:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    2a62:	60 91 7c 01 	lds	r22, 0x017C
    2a66:	80 91 7d 01 	lds	r24, 0x017D
    2a6a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <play_song>

00002a6e <music_init>:
    2a6e:	87 b7       	in	r24, 0x37	; 55
    2a70:	80 61       	ori	r24, 0x10	; 16
    2a72:	87 bf       	out	0x37, r24	; 55
    2a74:	1f bc       	out	0x2f, r1	; 47
    2a76:	8e b5       	in	r24, 0x2e	; 46
    2a78:	88 60       	ori	r24, 0x08	; 8
    2a7a:	8e bd       	out	0x2e, r24	; 46
    2a7c:	10 92 7a 00 	sts	0x007A, r1
    2a80:	81 e3       	ldi	r24, 0x31	; 49
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9b bd       	out	0x2b, r25	; 43
    2a86:	8a bd       	out	0x2a, r24	; 42
    2a88:	10 92 7c 01 	sts	0x017C, r1
    2a8c:	8e b5       	in	r24, 0x2e	; 46
    2a8e:	8c 7f       	andi	r24, 0xFC	; 252
    2a90:	8e bd       	out	0x2e, r24	; 46
    2a92:	92 9a       	sbi	0x12, 2	; 18
    2a94:	10 92 89 01 	sts	0x0189, r1
    2a98:	10 92 88 01 	sts	0x0188, r1
    2a9c:	10 92 81 01 	sts	0x0181, r1
    2aa0:	10 92 80 01 	sts	0x0180, r1
    2aa4:	10 92 7c 01 	sts	0x017C, r1
    2aa8:	10 92 7d 01 	sts	0x017D, r1
    2aac:	08 95       	ret

00002aae <main>:
}

int main()
{
/*******************part 5 ******************/
 DDRF |= 0x08; //lcd strobe bit
    2aae:	80 91 61 00 	lds	r24, 0x0061
    2ab2:	88 60       	ori	r24, 0x08	; 8
    2ab4:	80 93 61 00 	sts	0x0061, r24
  uart_init();  
    2ab8:	0e 94 f7 06 	call	0xdee	; 0xdee <uart_init>
extern uint8_t lm73_wr_buf[2]; 
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
    2abc:	87 b3       	in	r24, 0x17	; 23
    2abe:	87 60       	ori	r24, 0x07	; 7
    2ac0:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
    2ac2:	8d b1       	in	r24, 0x0d	; 13
    2ac4:	80 65       	ori	r24, 0x50	; 80
    2ac6:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
    2ac8:	70 9a       	sbi	0x0e, 0	; 14
/*******************part 5 ******************/
 DDRF |= 0x08; //lcd strobe bit
  uart_init();  
  spi_init();
 // lcd_init();
  clear_display();
    2aca:	0e 94 13 08 	call	0x1026	; 0x1026 <clear_display>
  cursor_home();
    2ace:	0e 94 1e 08 	call	0x103c	; 0x103c <cursor_home>
  init_twi();
    2ad2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <init_twi>

 
 
lm73_wr_buf[0] = 0x90; //load lm73_wr_buf[0] with temperature pointer address
    2ad6:	80 e9       	ldi	r24, 0x90	; 144
    2ad8:	80 93 85 02 	sts	0x0285, r24
twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);//start the TWI write process
    2adc:	42 e0       	ldi	r20, 0x02	; 2
    2ade:	65 e8       	ldi	r22, 0x85	; 133
    2ae0:	72 e0       	ldi	r23, 0x02	; 2
    2ae2:	0e 94 cf 0a 	call	0x159e	; 0x159e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ae6:	83 ef       	ldi	r24, 0xF3	; 243
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <main+0x3c>
    2aee:	00 c0       	rjmp	.+0      	; 0x2af0 <main+0x42>
    2af0:	00 00       	nop
_delay_ms(2);    //wait for the xfer to finish
//clear_display(); //clean up the display

/************set up ports *******/
  DDRA = 0xFF; 
    2af2:	cf ef       	ldi	r28, 0xFF	; 255
    2af4:	ca bb       	out	0x1a, r28	; 26
  DDRB =0xF7;  //enabling the bits from 0 to 2 as well as the upper nibble  
    2af6:	87 ef       	ldi	r24, 0xF7	; 247
    2af8:	87 bb       	out	0x17, r24	; 23
  DDRE = 0xC0;  // enabling bit 6 and 7
    2afa:	80 ec       	ldi	r24, 0xC0	; 192
    2afc:	82 b9       	out	0x02, r24	; 2
  PORTE= 0x40;  //  bit 6 as high for the SPDR and graph
    2afe:	90 e4       	ldi	r25, 0x40	; 64
    2b00:	93 b9       	out	0x03, r25	; 3
/******************/
/*******TIMER 0 *********/
TIMSK |= (1<<TOIE0); 
    2b02:	87 b7       	in	r24, 0x37	; 55
    2b04:	81 60       	ori	r24, 0x01	; 1
    2b06:	87 bf       	out	0x37, r24	; 55
/*TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);*/  //Normal mode but not 128
TCCR0 |= (1<<CS00);
    2b08:	83 b7       	in	r24, 0x33	; 51
    2b0a:	81 60       	ori	r24, 0x01	; 1
    2b0c:	83 bf       	out	0x33, r24	; 51
ASSR  |= (1 <<AS0);
    2b0e:	80 b7       	in	r24, 0x30	; 48
    2b10:	88 60       	ori	r24, 0x08	; 8
    2b12:	80 bf       	out	0x30, r24	; 48

 /*while(bit_is_set(ASSR, TCN0UB));
  while(bit_is_set(ASSR, OCR0UB));
  while(bit_is_set(ASSR, TCR0UB));*/
/***********************************TIMER2*****************/
TCCR2|= (1<<WGM21) |(1<< WGM20) | (1<<COM21) |(1<<CS21) |(1<<CS20);
    2b14:	85 b5       	in	r24, 0x25	; 37
    2b16:	8b 66       	ori	r24, 0x6B	; 107
    2b18:	85 bd       	out	0x25, r24	; 37

/******ADC Configures****************/

DDRF|=0x01;  //using pin 1 in the portf
    2b1a:	80 91 61 00 	lds	r24, 0x0061
    2b1e:	81 60       	ori	r24, 0x01	; 1
    2b20:	80 93 61 00 	sts	0x0061, r24
PORTF=0x01;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	80 93 62 00 	sts	0x0062, r24

ADMUX= (1<<REFS0); //with external cappacitor, the light sensor one. 
    2b2a:	97 b9       	out	0x07, r25	; 7

ADCSRA= (1<< ADEN) | (1 <<ADIE) | (1<<ADPS0) | (1<<ADPS1)|(1<<ADPS2); //|(1 <<ADSC);
    2b2c:	8f e8       	ldi	r24, 0x8F	; 143
    2b2e:	86 b9       	out	0x06, r24	; 6

/******************THE SPDR and BARGRAPH******************************************/
SPCR = (1 << SPE) | (1 << MSTR) ;
    2b30:	80 e5       	ldi	r24, 0x50	; 80
    2b32:	8d b9       	out	0x0d, r24	; 13
/**********************************AUDIO PORT and TIMER1***************************************/
DDRD=0xff;
    2b34:	c1 bb       	out	0x11, r28	; 17
TCCR1C |=0x00;
//OCR1A   =20000;
TIMSK |= (1<<OCIE1A);
*/

music_init();
    2b36:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <music_init>
//OCR1A   =30000;
/**************************TIMER 3 VOlume ********************/
DDRE|=0x08;
    2b3a:	13 9a       	sbi	0x02, 3	; 2

TCCR3A |= (1<< COM3A1) |(1<<WGM31);
    2b3c:	80 91 8b 00 	lds	r24, 0x008B
    2b40:	82 68       	ori	r24, 0x82	; 130
    2b42:	80 93 8b 00 	sts	0x008B, r24
TCCR3B |= (1 <<WGM32) | (1 <<CS31);
    2b46:	80 91 8a 00 	lds	r24, 0x008A
    2b4a:	8a 60       	ori	r24, 0x0A	; 10
    2b4c:	80 93 8a 00 	sts	0x008A, r24
TCCR3C|=0x00;
    2b50:	80 91 8c 00 	lds	r24, 0x008C
    2b54:	80 93 8c 00 	sts	0x008C, r24

OCR3A=1000;
    2b58:	88 ee       	ldi	r24, 0xE8	; 232
    2b5a:	93 e0       	ldi	r25, 0x03	; 3
    2b5c:	90 93 87 00 	sts	0x0087, r25
    2b60:	80 93 86 00 	sts	0x0086, r24

//vol_n=1000;
/***********************************************************/
	lcd_init();
    2b64:	0e 94 68 08 	call	0x10d0	; 0x10d0 <lcd_init>

	clear_display();
    2b68:	0e 94 13 08 	call	0x1026	; 0x1026 <clear_display>
	string2lcd("Mohammed");
    2b6c:	8b e2       	ldi	r24, 0x2B	; 43
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	0e 94 43 08 	call	0x1086	; 0x1086 <string2lcd>
	//_delay_ms(1000);	
	sei(); 
    2b74:	78 94       	sei
 	DDRA = 0xFF; 
    2b76:	ca bb       	out	0x1a, r28	; 26
	PORTB =0x70;
    2b78:	80 e7       	ldi	r24, 0x70	; 112
    2b7a:	88 bb       	out	0x18, r24	; 24
//	music_on();
//	checker();
	 sei();
    2b7c:	78 94       	sei
		//OCR1A= 10000;
		}
	}
	else{
		display_digits();
		strcpy(lcd_now,"           ");
    2b7e:	0c e0       	ldi	r16, 0x0C	; 12
		
	}

	else if(alarmON){
		display_digits();
		strcpy(lcd_now,"Wake UP");
    2b80:	18 e0       	ldi	r17, 0x08	; 8
		vol_n=700;
    2b82:	cc eb       	ldi	r28, 0xBC	; 188
    2b84:	d2 e0       	ldi	r29, 0x02	; 2
		if(fix==0){
		music_on();
		fix=1;		
    2b86:	ee 24       	eor	r14, r14
    2b88:	e3 94       	inc	r14
/*******displying part*********/
	//get_128();
	
	if (alarm){
		display_alarm();
		strcpy(lcd_now,"set alarm");	
    2b8a:	8a e0       	ldi	r24, 0x0A	; 10
    2b8c:	f8 2e       	mov	r15, r24
    2b8e:	20 c0       	rjmp	.+64     	; 0x2bd0 <main+0x122>
		
		
	}

	else if(alarmON){
		display_digits();
    2b90:	0e 94 4b 03 	call	0x696	; 0x696 <display_digits>
		strcpy(lcd_now,"Wake UP");
    2b94:	ee e3       	ldi	r30, 0x3E	; 62
    2b96:	f1 e0       	ldi	r31, 0x01	; 1
    2b98:	a8 e6       	ldi	r26, 0x68	; 104
    2b9a:	b1 e0       	ldi	r27, 0x01	; 1
    2b9c:	81 2f       	mov	r24, r17
    2b9e:	01 90       	ld	r0, Z+
    2ba0:	0d 92       	st	X+, r0
    2ba2:	8a 95       	dec	r24
    2ba4:	e1 f7       	brne	.-8      	; 0x2b9e <main+0xf0>
		vol_n=700;
    2ba6:	d0 93 21 01 	sts	0x0121, r29
    2baa:	c0 93 20 01 	sts	0x0120, r28
		if(fix==0){
    2bae:	80 91 55 01 	lds	r24, 0x0155
    2bb2:	88 23       	and	r24, r24
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <main+0x10a>
    2bb6:	40 c0       	rjmp	.+128    	; 0x2c38 <main+0x18a>
	else{OCR2=210;}
	*/

	
 	//OCR1A   =40000;
	lcd_control();
    2bb8:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_control>

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
    2bbc:	90 91 25 01 	lds	r25, 0x0125
    2bc0:	80 91 24 01 	lds	r24, 0x0124
    2bc4:	98 17       	cp	r25, r24
    2bc6:	19 f1       	breq	.+70     	; 0x2c0e <main+0x160>
	alarmON=1;
}

else{

	alarmON=0;
    2bc8:	10 92 5a 01 	sts	0x015A, r1
	
 	//OCR1A   =40000;
	lcd_control();

	alarm_check();
	checker();
    2bcc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <checker>
	//OCR2=250;
	//music_on();
/*******displying part*********/
	//get_128();
	
	if (alarm){
    2bd0:	80 91 82 01 	lds	r24, 0x0182
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	24 c0       	rjmp	.+72     	; 0x2c20 <main+0x172>
		strcpy(lcd_now,"set alarm");	
		
		
	}

	else if(alarmON){
    2bd8:	80 91 5a 01 	lds	r24, 0x015A
    2bdc:	81 11       	cpse	r24, r1
    2bde:	d8 cf       	rjmp	.-80     	; 0x2b90 <main+0xe2>
		fix=1;		
		//OCR1A= 10000;
		}
	}
	else{
		display_digits();
    2be0:	0e 94 4b 03 	call	0x696	; 0x696 <display_digits>
		strcpy(lcd_now,"           ");
    2be4:	e6 e4       	ldi	r30, 0x46	; 70
    2be6:	f1 e0       	ldi	r31, 0x01	; 1
    2be8:	a8 e6       	ldi	r26, 0x68	; 104
    2bea:	b1 e0       	ldi	r27, 0x01	; 1
    2bec:	80 2f       	mov	r24, r16
    2bee:	01 90       	ld	r0, Z+
    2bf0:	0d 92       	st	X+, r0
    2bf2:	8a 95       	dec	r24
    2bf4:	e1 f7       	brne	.-8      	; 0x2bee <main+0x140>
		//strcpy(lcd_now,adcr);
		//OCR1A=0;
		
		music_off();
    2bf6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <music_off>
		fix=0;
    2bfa:	10 92 55 01 	sts	0x0155, r1
	else{OCR2=210;}
	*/

	
 	//OCR1A   =40000;
	lcd_control();
    2bfe:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_control>

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
    2c02:	90 91 25 01 	lds	r25, 0x0125
    2c06:	80 91 24 01 	lds	r24, 0x0124
    2c0a:	98 13       	cpse	r25, r24
    2c0c:	dd cf       	rjmp	.-70     	; 0x2bc8 <main+0x11a>
    2c0e:	90 91 5b 01 	lds	r25, 0x015B
    2c12:	80 91 23 01 	lds	r24, 0x0123
    2c16:	98 13       	cpse	r25, r24
    2c18:	d7 cf       	rjmp	.-82     	; 0x2bc8 <main+0x11a>

	alarmON=1;
    2c1a:	e0 92 5a 01 	sts	0x015A, r14
    2c1e:	d6 cf       	rjmp	.-84     	; 0x2bcc <main+0x11e>
	//music_on();
/*******displying part*********/
	//get_128();
	
	if (alarm){
		display_alarm();
    2c20:	0e 94 92 02 	call	0x524	; 0x524 <display_alarm>
		strcpy(lcd_now,"set alarm");	
    2c24:	e4 e3       	ldi	r30, 0x34	; 52
    2c26:	f1 e0       	ldi	r31, 0x01	; 1
    2c28:	a8 e6       	ldi	r26, 0x68	; 104
    2c2a:	b1 e0       	ldi	r27, 0x01	; 1
    2c2c:	8f 2d       	mov	r24, r15
    2c2e:	01 90       	ld	r0, Z+
    2c30:	0d 92       	st	X+, r0
    2c32:	8a 95       	dec	r24
    2c34:	e1 f7       	brne	.-8      	; 0x2c2e <main+0x180>
    2c36:	c0 cf       	rjmp	.-128    	; 0x2bb8 <main+0x10a>
	else if(alarmON){
		display_digits();
		strcpy(lcd_now,"Wake UP");
		vol_n=700;
		if(fix==0){
		music_on();
    2c38:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <music_on>
		fix=1;		
    2c3c:	e0 92 55 01 	sts	0x0155, r14
    2c40:	bb cf       	rjmp	.-138    	; 0x2bb8 <main+0x10a>

00002c42 <__divmodhi4>:
    2c42:	97 fb       	bst	r25, 7
    2c44:	07 2e       	mov	r0, r23
    2c46:	16 f4       	brtc	.+4      	; 0x2c4c <__divmodhi4+0xa>
    2c48:	00 94       	com	r0
    2c4a:	07 d0       	rcall	.+14     	; 0x2c5a <__divmodhi4_neg1>
    2c4c:	77 fd       	sbrc	r23, 7
    2c4e:	09 d0       	rcall	.+18     	; 0x2c62 <__divmodhi4_neg2>
    2c50:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__udivmodhi4>
    2c54:	07 fc       	sbrc	r0, 7
    2c56:	05 d0       	rcall	.+10     	; 0x2c62 <__divmodhi4_neg2>
    2c58:	3e f4       	brtc	.+14     	; 0x2c68 <__divmodhi4_exit>

00002c5a <__divmodhi4_neg1>:
    2c5a:	90 95       	com	r25
    2c5c:	81 95       	neg	r24
    2c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c60:	08 95       	ret

00002c62 <__divmodhi4_neg2>:
    2c62:	70 95       	com	r23
    2c64:	61 95       	neg	r22
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255

00002c68 <__divmodhi4_exit>:
    2c68:	08 95       	ret

00002c6a <__divmodsi4>:
    2c6a:	05 2e       	mov	r0, r21
    2c6c:	97 fb       	bst	r25, 7
    2c6e:	1e f4       	brtc	.+6      	; 0x2c76 <__divmodsi4+0xc>
    2c70:	00 94       	com	r0
    2c72:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__negsi2>
    2c76:	57 fd       	sbrc	r21, 7
    2c78:	07 d0       	rcall	.+14     	; 0x2c88 <__divmodsi4_neg2>
    2c7a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__udivmodsi4>
    2c7e:	07 fc       	sbrc	r0, 7
    2c80:	03 d0       	rcall	.+6      	; 0x2c88 <__divmodsi4_neg2>
    2c82:	4e f4       	brtc	.+18     	; 0x2c96 <__divmodsi4_exit>
    2c84:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__negsi2>

00002c88 <__divmodsi4_neg2>:
    2c88:	50 95       	com	r21
    2c8a:	40 95       	com	r20
    2c8c:	30 95       	com	r19
    2c8e:	21 95       	neg	r18
    2c90:	3f 4f       	sbci	r19, 0xFF	; 255
    2c92:	4f 4f       	sbci	r20, 0xFF	; 255
    2c94:	5f 4f       	sbci	r21, 0xFF	; 255

00002c96 <__divmodsi4_exit>:
    2c96:	08 95       	ret

00002c98 <__negsi2>:
    2c98:	90 95       	com	r25
    2c9a:	80 95       	com	r24
    2c9c:	70 95       	com	r23
    2c9e:	61 95       	neg	r22
    2ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca6:	08 95       	ret

00002ca8 <__tablejump2__>:
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	00 24       	eor	r0, r0
    2cae:	00 1c       	adc	r0, r0
    2cb0:	0b be       	out	0x3b, r0	; 59
    2cb2:	07 90       	elpm	r0, Z+
    2cb4:	f6 91       	elpm	r31, Z
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	09 94       	ijmp

00002cba <__umulhisi3>:
    2cba:	a2 9f       	mul	r26, r18
    2cbc:	b0 01       	movw	r22, r0
    2cbe:	b3 9f       	mul	r27, r19
    2cc0:	c0 01       	movw	r24, r0
    2cc2:	a3 9f       	mul	r26, r19
    2cc4:	70 0d       	add	r23, r0
    2cc6:	81 1d       	adc	r24, r1
    2cc8:	11 24       	eor	r1, r1
    2cca:	91 1d       	adc	r25, r1
    2ccc:	b2 9f       	mul	r27, r18
    2cce:	70 0d       	add	r23, r0
    2cd0:	81 1d       	adc	r24, r1
    2cd2:	11 24       	eor	r1, r1
    2cd4:	91 1d       	adc	r25, r1
    2cd6:	08 95       	ret

00002cd8 <__udivmodhi4>:
    2cd8:	aa 1b       	sub	r26, r26
    2cda:	bb 1b       	sub	r27, r27
    2cdc:	51 e1       	ldi	r21, 0x11	; 17
    2cde:	07 c0       	rjmp	.+14     	; 0x2cee <__udivmodhi4_ep>

00002ce0 <__udivmodhi4_loop>:
    2ce0:	aa 1f       	adc	r26, r26
    2ce2:	bb 1f       	adc	r27, r27
    2ce4:	a6 17       	cp	r26, r22
    2ce6:	b7 07       	cpc	r27, r23
    2ce8:	10 f0       	brcs	.+4      	; 0x2cee <__udivmodhi4_ep>
    2cea:	a6 1b       	sub	r26, r22
    2cec:	b7 0b       	sbc	r27, r23

00002cee <__udivmodhi4_ep>:
    2cee:	88 1f       	adc	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	5a 95       	dec	r21
    2cf4:	a9 f7       	brne	.-22     	; 0x2ce0 <__udivmodhi4_loop>
    2cf6:	80 95       	com	r24
    2cf8:	90 95       	com	r25
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	08 95       	ret

00002d00 <__udivmodsi4>:
    2d00:	a1 e2       	ldi	r26, 0x21	; 33
    2d02:	1a 2e       	mov	r1, r26
    2d04:	aa 1b       	sub	r26, r26
    2d06:	bb 1b       	sub	r27, r27
    2d08:	fd 01       	movw	r30, r26
    2d0a:	0d c0       	rjmp	.+26     	; 0x2d26 <__udivmodsi4_ep>

00002d0c <__udivmodsi4_loop>:
    2d0c:	aa 1f       	adc	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	ee 1f       	adc	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	a2 17       	cp	r26, r18
    2d16:	b3 07       	cpc	r27, r19
    2d18:	e4 07       	cpc	r30, r20
    2d1a:	f5 07       	cpc	r31, r21
    2d1c:	20 f0       	brcs	.+8      	; 0x2d26 <__udivmodsi4_ep>
    2d1e:	a2 1b       	sub	r26, r18
    2d20:	b3 0b       	sbc	r27, r19
    2d22:	e4 0b       	sbc	r30, r20
    2d24:	f5 0b       	sbc	r31, r21

00002d26 <__udivmodsi4_ep>:
    2d26:	66 1f       	adc	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	1a 94       	dec	r1
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <__udivmodsi4_loop>
    2d32:	60 95       	com	r22
    2d34:	70 95       	com	r23
    2d36:	80 95       	com	r24
    2d38:	90 95       	com	r25
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	bd 01       	movw	r22, r26
    2d40:	cf 01       	movw	r24, r30
    2d42:	08 95       	ret

00002d44 <strcmp>:
    2d44:	fb 01       	movw	r30, r22
    2d46:	dc 01       	movw	r26, r24
    2d48:	8d 91       	ld	r24, X+
    2d4a:	01 90       	ld	r0, Z+
    2d4c:	80 19       	sub	r24, r0
    2d4e:	01 10       	cpse	r0, r1
    2d50:	d9 f3       	breq	.-10     	; 0x2d48 <strcmp+0x4>
    2d52:	99 0b       	sbc	r25, r25
    2d54:	08 95       	ret

00002d56 <strcpy>:
    2d56:	fb 01       	movw	r30, r22
    2d58:	dc 01       	movw	r26, r24
    2d5a:	01 90       	ld	r0, Z+
    2d5c:	0d 92       	st	X+, r0
    2d5e:	00 20       	and	r0, r0
    2d60:	e1 f7       	brne	.-8      	; 0x2d5a <strcpy+0x4>
    2d62:	08 95       	ret

00002d64 <__itoa_ncheck>:
    2d64:	bb 27       	eor	r27, r27
    2d66:	4a 30       	cpi	r20, 0x0A	; 10
    2d68:	31 f4       	brne	.+12     	; 0x2d76 <__itoa_ncheck+0x12>
    2d6a:	99 23       	and	r25, r25
    2d6c:	22 f4       	brpl	.+8      	; 0x2d76 <__itoa_ncheck+0x12>
    2d6e:	bd e2       	ldi	r27, 0x2D	; 45
    2d70:	90 95       	com	r25
    2d72:	81 95       	neg	r24
    2d74:	9f 4f       	sbci	r25, 0xFF	; 255
    2d76:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__utoa_common>

00002d7a <__utoa_ncheck>:
    2d7a:	bb 27       	eor	r27, r27

00002d7c <__utoa_common>:
    2d7c:	fb 01       	movw	r30, r22
    2d7e:	55 27       	eor	r21, r21
    2d80:	aa 27       	eor	r26, r26
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	aa 1f       	adc	r26, r26
    2d88:	a4 17       	cp	r26, r20
    2d8a:	10 f0       	brcs	.+4      	; 0x2d90 <__utoa_common+0x14>
    2d8c:	a4 1b       	sub	r26, r20
    2d8e:	83 95       	inc	r24
    2d90:	50 51       	subi	r21, 0x10	; 16
    2d92:	b9 f7       	brne	.-18     	; 0x2d82 <__utoa_common+0x6>
    2d94:	a0 5d       	subi	r26, 0xD0	; 208
    2d96:	aa 33       	cpi	r26, 0x3A	; 58
    2d98:	08 f0       	brcs	.+2      	; 0x2d9c <__utoa_common+0x20>
    2d9a:	a9 5d       	subi	r26, 0xD9	; 217
    2d9c:	a1 93       	st	Z+, r26
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	79 f7       	brne	.-34     	; 0x2d80 <__utoa_common+0x4>
    2da2:	b1 11       	cpse	r27, r1
    2da4:	b1 93       	st	Z+, r27
    2da6:	11 92       	st	Z+, r1
    2da8:	cb 01       	movw	r24, r22
    2daa:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <strrev>

00002dae <strrev>:
    2dae:	dc 01       	movw	r26, r24
    2db0:	fc 01       	movw	r30, r24
    2db2:	67 2f       	mov	r22, r23
    2db4:	71 91       	ld	r23, Z+
    2db6:	77 23       	and	r23, r23
    2db8:	e1 f7       	brne	.-8      	; 0x2db2 <strrev+0x4>
    2dba:	32 97       	sbiw	r30, 0x02	; 2
    2dbc:	04 c0       	rjmp	.+8      	; 0x2dc6 <strrev+0x18>
    2dbe:	7c 91       	ld	r23, X
    2dc0:	6d 93       	st	X+, r22
    2dc2:	70 83       	st	Z, r23
    2dc4:	62 91       	ld	r22, -Z
    2dc6:	ae 17       	cp	r26, r30
    2dc8:	bf 07       	cpc	r27, r31
    2dca:	c8 f3       	brcs	.-14     	; 0x2dbe <strrev+0x10>
    2dcc:	08 95       	ret

00002dce <_exit>:
    2dce:	f8 94       	cli

00002dd0 <__stop_program>:
    2dd0:	ff cf       	rjmp	.-2      	; 0x2dd0 <__stop_program>
