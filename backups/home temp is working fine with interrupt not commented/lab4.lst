
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002d8e  00002e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013b  00800154  00800154  00002e76  2**0
                  ALLOC
  3 .stab         00005c64  00000000  00000000  00002e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019ea  00000000  00000000  00008adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a4c6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000a4d8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 02 	jmp	0x430	; 0x430 <__ctors_end>
       4:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
       8:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
       c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      10:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      14:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      18:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      20:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      24:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      28:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_10>
      2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      30:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_12>
      34:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      38:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      3c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      40:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_16>
      44:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      48:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_18>
      4c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      50:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      54:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_21>
      58:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      5c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      60:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      64:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      68:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      6c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      70:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      74:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      78:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      7c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      80:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      84:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_33>
      88:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      8c:	5b 0a       	sbc	r5, r27
      8e:	32 0a       	sbc	r3, r18
      90:	32 0a       	sbc	r3, r18
      92:	32 0a       	sbc	r3, r18
      94:	32 0a       	sbc	r3, r18
      96:	32 0a       	sbc	r3, r18
      98:	32 0a       	sbc	r3, r18
      9a:	32 0a       	sbc	r3, r18
      9c:	5b 0a       	sbc	r5, r27
      9e:	32 0a       	sbc	r3, r18
      a0:	32 0a       	sbc	r3, r18
      a2:	32 0a       	sbc	r3, r18
      a4:	32 0a       	sbc	r3, r18
      a6:	32 0a       	sbc	r3, r18
      a8:	32 0a       	sbc	r3, r18
      aa:	32 0a       	sbc	r3, r18
      ac:	65 0a       	sbc	r6, r21
      ae:	32 0a       	sbc	r3, r18
      b0:	32 0a       	sbc	r3, r18
      b2:	32 0a       	sbc	r3, r18
      b4:	32 0a       	sbc	r3, r18
      b6:	32 0a       	sbc	r3, r18
      b8:	32 0a       	sbc	r3, r18
      ba:	32 0a       	sbc	r3, r18
      bc:	32 0a       	sbc	r3, r18
      be:	32 0a       	sbc	r3, r18
      c0:	32 0a       	sbc	r3, r18
      c2:	32 0a       	sbc	r3, r18
      c4:	32 0a       	sbc	r3, r18
      c6:	32 0a       	sbc	r3, r18
      c8:	32 0a       	sbc	r3, r18
      ca:	32 0a       	sbc	r3, r18
      cc:	65 0a       	sbc	r6, r21
      ce:	32 0a       	sbc	r3, r18
      d0:	32 0a       	sbc	r3, r18
      d2:	32 0a       	sbc	r3, r18
      d4:	32 0a       	sbc	r3, r18
      d6:	32 0a       	sbc	r3, r18
      d8:	32 0a       	sbc	r3, r18
      da:	32 0a       	sbc	r3, r18
      dc:	32 0a       	sbc	r3, r18
      de:	32 0a       	sbc	r3, r18
      e0:	32 0a       	sbc	r3, r18
      e2:	32 0a       	sbc	r3, r18
      e4:	32 0a       	sbc	r3, r18
      e6:	32 0a       	sbc	r3, r18
      e8:	32 0a       	sbc	r3, r18
      ea:	32 0a       	sbc	r3, r18
      ec:	7c 0a       	sbc	r7, r28
      ee:	32 0a       	sbc	r3, r18
      f0:	32 0a       	sbc	r3, r18
      f2:	32 0a       	sbc	r3, r18
      f4:	32 0a       	sbc	r3, r18
      f6:	32 0a       	sbc	r3, r18
      f8:	32 0a       	sbc	r3, r18
      fa:	32 0a       	sbc	r3, r18
      fc:	80 0a       	sbc	r8, r16
      fe:	32 0a       	sbc	r3, r18
     100:	32 0a       	sbc	r3, r18
     102:	32 0a       	sbc	r3, r18
     104:	32 0a       	sbc	r3, r18
     106:	32 0a       	sbc	r3, r18
     108:	32 0a       	sbc	r3, r18
     10a:	32 0a       	sbc	r3, r18
     10c:	32 0a       	sbc	r3, r18
     10e:	32 0a       	sbc	r3, r18
     110:	32 0a       	sbc	r3, r18
     112:	32 0a       	sbc	r3, r18
     114:	32 0a       	sbc	r3, r18
     116:	32 0a       	sbc	r3, r18
     118:	32 0a       	sbc	r3, r18
     11a:	32 0a       	sbc	r3, r18
     11c:	8e 0a       	sbc	r8, r30
     11e:	32 0a       	sbc	r3, r18
     120:	32 0a       	sbc	r3, r18
     122:	32 0a       	sbc	r3, r18
     124:	32 0a       	sbc	r3, r18
     126:	32 0a       	sbc	r3, r18
     128:	32 0a       	sbc	r3, r18
     12a:	32 0a       	sbc	r3, r18
     12c:	4c 0a       	sbc	r4, r28
     12e:	14 0b       	sbc	r17, r20
     130:	1e 0b       	sbc	r17, r30
     132:	28 0b       	sbc	r18, r24
     134:	32 0b       	sbc	r19, r18
     136:	3d 0b       	sbc	r19, r29
     138:	48 0b       	sbc	r20, r24
     13a:	53 0b       	sbc	r21, r19
     13c:	00 0b       	sbc	r16, r16
     13e:	0a 0b       	sbc	r16, r26
     140:	a9 0c       	add	r10, r9
     142:	a1 0c       	add	r10, r1
     144:	9c 0c       	add	r9, r12
     146:	c6 0c       	add	r12, r6
     148:	b9 0c       	add	r11, r9
     14a:	c1 0c       	add	r12, r1
     14c:	b1 0c       	add	r11, r1
     14e:	7a 0c       	add	r7, r10
     150:	72 0c       	add	r7, r2
     152:	6d 0c       	add	r6, r13
     154:	65 0c       	add	r6, r5
     156:	ce 0c       	add	r12, r14
     158:	82 0c       	add	r8, r2
     15a:	58 0c       	add	r5, r8
     15c:	40 0c       	add	r4, r0
     15e:	ee 0c       	add	r14, r14
     160:	97 0c       	add	r9, r7
     162:	8f 0c       	add	r8, r15
     164:	87 0c       	add	r8, r7
     166:	0e 0d       	add	r16, r14
     168:	48 0c       	add	r4, r8
     16a:	fe 0c       	add	r15, r14
     16c:	50 0c       	add	r5, r0
     16e:	1b 0d       	add	r17, r11
     170:	e6 0c       	add	r14, r6
     172:	06 0d       	add	r16, r6
     174:	60 0c       	add	r6, r0
     176:	de 0c       	add	r13, r14
     178:	d6 0c       	add	r13, r6
     17a:	f6 0c       	add	r15, r6
     17c:	3b 0c       	add	r3, r11
     17e:	09 0c       	add	r0, r9
     180:	01 0c       	add	r0, r1
     182:	11 0c       	add	r1, r1
     184:	13 0d       	add	r17, r3
     186:	f4 0b       	sbc	r31, r20
     188:	ec 0b       	sbc	r30, r28
     18a:	16 0c       	add	r1, r6
     18c:	cf 0b       	sbc	r28, r31
     18e:	33 0c       	add	r3, r3
     190:	fc 0b       	sbc	r31, r28
     192:	df 0b       	sbc	r29, r31
     194:	d7 0b       	sbc	r29, r23
     196:	23 0c       	add	r2, r3
     198:	e7 0b       	sbc	r30, r23
     19a:	1b 0c       	add	r1, r11
     19c:	c7 0b       	sbc	r28, r23
     19e:	ad 0b       	sbc	r26, r29
     1a0:	2b 0c       	add	r2, r11
     1a2:	9d 0b       	sbc	r25, r29
     1a4:	95 0b       	sbc	r25, r21
     1a6:	ba 0b       	sbc	r27, r26
     1a8:	b2 0b       	sbc	r27, r18
     1aa:	bf 0b       	sbc	r27, r31
     1ac:	90 0b       	sbc	r25, r16
     1ae:	a5 0b       	sbc	r26, r21
     1b0:	78 0b       	sbc	r23, r24
     1b2:	88 0b       	sbc	r24, r24
     1b4:	73 0b       	sbc	r23, r19
     1b6:	6b 0b       	sbc	r22, r27
     1b8:	63 0b       	sbc	r22, r19
     1ba:	5e 0b       	sbc	r21, r30
     1bc:	80 0b       	sbc	r24, r16
     1be:	25 0e       	add	r2, r21
     1c0:	43 0e       	add	r4, r19
     1c2:	1f 0e       	add	r1, r31
     1c4:	31 0e       	add	r3, r17
     1c6:	13 0e       	add	r1, r19
     1c8:	19 0e       	add	r1, r25
     1ca:	13 0e       	add	r1, r19
     1cc:	19 0e       	add	r1, r25
     1ce:	49 0e       	add	r4, r25
     1d0:	25 0e       	add	r2, r21
     1d2:	43 0e       	add	r4, r19
     1d4:	1f 0e       	add	r1, r31
     1d6:	31 0e       	add	r3, r17
     1d8:	2b 0e       	add	r2, r27
     1da:	0d 0e       	add	r0, r29
     1dc:	2b 0e       	add	r2, r27
     1de:	0d 0e       	add	r0, r29
     1e0:	73 0e       	add	r7, r19
     1e2:	af 0e       	add	r10, r31
     1e4:	67 0e       	add	r6, r23
     1e6:	df 0e       	add	r13, r31
     1e8:	67 0e       	add	r6, r23
     1ea:	a3 0e       	add	r10, r19
     1ec:	9d 0e       	add	r9, r29
     1ee:	0d 0e       	add	r0, r29
     1f0:	79 0e       	add	r7, r25
     1f2:	0d 0e       	add	r0, r29
     1f4:	8b 0e       	add	r8, r27
     1f6:	37 0e       	add	r3, r23
     1f8:	cd 0e       	add	r12, r29
     1fa:	13 0e       	add	r1, r19
     1fc:	c1 0e       	add	r12, r17
     1fe:	4f 0e       	add	r4, r31
     200:	c7 0e       	add	r12, r23
     202:	55 0e       	add	r5, r21
     204:	d3 0e       	add	r13, r19
     206:	97 0e       	add	r9, r23
     208:	3d 0e       	add	r3, r29
     20a:	37 0e       	add	r3, r23
     20c:	7f 0e       	add	r7, r31
     20e:	5b 0e       	add	r5, r27
     210:	25 0e       	add	r2, r21
     212:	43 0e       	add	r4, r19
     214:	1f 0e       	add	r1, r31
     216:	31 0e       	add	r3, r17
     218:	13 0e       	add	r1, r19
     21a:	19 0e       	add	r1, r25
     21c:	13 0e       	add	r1, r19
     21e:	19 0e       	add	r1, r25
     220:	49 0e       	add	r4, r25
     222:	25 0e       	add	r2, r21
     224:	a9 0e       	add	r10, r25
     226:	3d 0e       	add	r3, r29
     228:	1f 0e       	add	r1, r31
     22a:	2b 0e       	add	r2, r27
     22c:	0d 0e       	add	r0, r29
     22e:	2b 0e       	add	r2, r27
     230:	0d 0e       	add	r0, r29
     232:	73 0e       	add	r7, r19
     234:	b5 0e       	add	r11, r21
     236:	85 0e       	add	r8, r21
     238:	49 0e       	add	r4, r25
     23a:	bb 0e       	add	r11, r27
     23c:	79 0e       	add	r7, r25
     23e:	4f 0e       	add	r4, r31
     240:	55 0e       	add	r5, r21
     242:	37 0e       	add	r3, r23
     244:	3d 0e       	add	r3, r29
     246:	d9 0e       	add	r13, r25
     248:	5b 0e       	add	r5, r27
     24a:	f7 0e       	add	r15, r23
     24c:	1b 0f       	add	r17, r27
     24e:	f1 0e       	add	r15, r17
     250:	15 0f       	add	r17, r21
     252:	99 0f       	add	r25, r25
     254:	93 0f       	add	r25, r19
     256:	f1 0e       	add	r15, r17
     258:	1b 0f       	add	r17, r27
     25a:	21 0f       	add	r18, r17
     25c:	fd 0e       	add	r15, r29
     25e:	a5 0f       	add	r26, r21
     260:	f1 0e       	add	r15, r17
     262:	f7 0e       	add	r15, r23
     264:	15 0f       	add	r17, r21
     266:	f1 0e       	add	r15, r17
     268:	5d 0f       	add	r21, r29
     26a:	f1 0e       	add	r15, r17
     26c:	09 0f       	add	r16, r25
     26e:	f7 0e       	add	r15, r23
     270:	39 0f       	add	r19, r25
     272:	21 0f       	add	r18, r17
     274:	fd 0e       	add	r15, r29
     276:	33 0f       	add	r19, r19
     278:	b7 0f       	add	r27, r23
     27a:	09 0f       	add	r16, r25
     27c:	27 0f       	add	r18, r23
     27e:	c3 0f       	add	r28, r19
     280:	75 0f       	add	r23, r21
     282:	27 0f       	add	r18, r23
     284:	8d 0f       	add	r24, r29
     286:	f1 0e       	add	r15, r17
     288:	f7 0e       	add	r15, r23
     28a:	15 0f       	add	r17, r21
     28c:	f1 0e       	add	r15, r17
     28e:	57 0f       	add	r21, r23
     290:	fd 0e       	add	r15, r29
     292:	1b 0f       	add	r17, r27
     294:	f1 0e       	add	r15, r17
     296:	09 0f       	add	r16, r25
     298:	f7 0e       	add	r15, r23
     29a:	39 0f       	add	r19, r25
     29c:	21 0f       	add	r18, r17
     29e:	fd 0e       	add	r15, r29
     2a0:	b1 0f       	add	r27, r17
     2a2:	4b 0f       	add	r20, r27
     2a4:	45 0f       	add	r20, r21
     2a6:	0f 0f       	add	r16, r31
     2a8:	3f 0f       	add	r19, r31
     2aa:	2d 0f       	add	r18, r29
     2ac:	0f 0f       	add	r16, r31
     2ae:	81 0f       	add	r24, r17
     2b0:	87 0f       	add	r24, r23
     2b2:	7b 0f       	add	r23, r27
     2b4:	4b 0f       	add	r20, r27
     2b6:	45 0f       	add	r20, r21
     2b8:	0f 0f       	add	r16, r31
     2ba:	3f 0f       	add	r19, r31
     2bc:	2d 0f       	add	r18, r29
     2be:	9f 0f       	add	r25, r31
     2c0:	ab 0f       	add	r26, r27
     2c2:	33 0f       	add	r19, r19
     2c4:	63 0f       	add	r22, r19
     2c6:	69 0f       	add	r22, r25
     2c8:	73 14       	cp	r7, r3
     2ca:	67 14       	cp	r6, r7
     2cc:	61 14       	cp	r6, r1
     2ce:	55 14       	cp	r5, r5
     2d0:	4f 14       	cp	r4, r15
     2d2:	43 14       	cp	r4, r3
     2d4:	3d 14       	cp	r3, r13
     2d6:	37 14       	cp	r3, r7
     2d8:	31 14       	cp	r3, r1
     2da:	2b 14       	cp	r2, r11
     2dc:	1f 14       	cp	r1, r15
     2de:	19 14       	cp	r1, r9
     2e0:	13 14       	cp	r1, r3
     2e2:	07 14       	cp	r0, r7
     2e4:	01 14       	cp	r0, r1
     2e6:	f5 13       	cpse	r31, r21
     2e8:	ef 13       	cpse	r30, r31
     2ea:	e3 13       	cpse	r30, r19
     2ec:	dd 13       	cpse	r29, r29
     2ee:	d1 13       	cpse	r29, r17
     2f0:	cb 13       	cpse	r28, r27
     2f2:	c5 13       	cpse	r28, r21
     2f4:	bf 13       	cpse	r27, r31
     2f6:	b9 13       	cpse	r27, r25
     2f8:	ad 13       	cpse	r26, r29
     2fa:	a7 13       	cpse	r26, r23
     2fc:	a1 13       	cpse	r26, r17
     2fe:	9b 13       	cpse	r25, r27
     300:	95 13       	cpse	r25, r21
     302:	89 13       	cpse	r24, r25
     304:	83 13       	cpse	r24, r19
     306:	77 13       	cpse	r23, r23
     308:	71 13       	cpse	r23, r17
     30a:	6b 13       	cpse	r22, r27
     30c:	65 13       	cpse	r22, r21
     30e:	59 13       	cpse	r21, r25
     310:	53 13       	cpse	r21, r19
     312:	47 13       	cpse	r20, r23
     314:	41 13       	cpse	r20, r17
     316:	35 13       	cpse	r19, r21
     318:	2f 13       	cpse	r18, r31
     31a:	23 13       	cpse	r18, r19
     31c:	1d 13       	cpse	r17, r29
     31e:	11 13       	cpse	r17, r17
     320:	0b 13       	cpse	r16, r27
     322:	ff 12       	cpse	r15, r31
     324:	f9 12       	cpse	r15, r25
     326:	f3 12       	cpse	r15, r19
     328:	ed 12       	cpse	r14, r29
     32a:	e7 12       	cpse	r14, r23
     32c:	db 12       	cpse	r13, r27
     32e:	d5 12       	cpse	r13, r21
     330:	cf 12       	cpse	r12, r31
     332:	c9 12       	cpse	r12, r25
     334:	c3 12       	cpse	r12, r19
     336:	b7 12       	cpse	r11, r23
     338:	b1 12       	cpse	r11, r17
     33a:	a5 12       	cpse	r10, r21
     33c:	9f 12       	cpse	r9, r31
     33e:	99 12       	cpse	r9, r25
     340:	93 12       	cpse	r9, r19
     342:	87 12       	cpse	r8, r23
     344:	81 12       	cpse	r8, r17
     346:	7b 12       	cpse	r7, r27
     348:	75 12       	cpse	r7, r21
     34a:	6f 12       	cpse	r6, r31
     34c:	63 12       	cpse	r6, r19
     34e:	5d 12       	cpse	r5, r29
     350:	51 12       	cpse	r5, r17
     352:	4b 12       	cpse	r4, r27
     354:	45 12       	cpse	r4, r21
     356:	3f 12       	cpse	r3, r31
     358:	33 12       	cpse	r3, r19
     35a:	2d 12       	cpse	r2, r29
     35c:	27 12       	cpse	r2, r23
     35e:	21 12       	cpse	r2, r17
     360:	15 12       	cpse	r1, r21
     362:	0f 12       	cpse	r0, r31
     364:	09 12       	cpse	r0, r25
     366:	03 12       	cpse	r0, r19
     368:	fd 11       	cpse	r31, r13
     36a:	f1 11       	cpse	r31, r1
     36c:	eb 11       	cpse	r30, r11
     36e:	df 11       	cpse	r29, r15
     370:	d9 11       	cpse	r29, r9
     372:	cd 11       	cpse	r28, r13
     374:	c7 11       	cpse	r28, r7
     376:	bb 11       	cpse	r27, r11
     378:	b5 11       	cpse	r27, r5
     37a:	a9 11       	cpse	r26, r9
     37c:	a3 11       	cpse	r26, r3
     37e:	9d 11       	cpse	r25, r13
     380:	97 11       	cpse	r25, r7
     382:	91 11       	cpse	r25, r1
     384:	85 11       	cpse	r24, r5
     386:	7f 11       	cpse	r23, r15
     388:	73 11       	cpse	r23, r3
     38a:	6d 11       	cpse	r22, r13
     38c:	67 11       	cpse	r22, r7
     38e:	61 11       	cpse	r22, r1
     390:	55 11       	cpse	r21, r5
     392:	4f 11       	cpse	r20, r15
     394:	49 11       	cpse	r20, r9
     396:	43 11       	cpse	r20, r3
     398:	37 11       	cpse	r19, r7
     39a:	31 11       	cpse	r19, r1
     39c:	25 11       	cpse	r18, r5
     39e:	1f 11       	cpse	r17, r15
     3a0:	13 11       	cpse	r17, r3
     3a2:	0d 11       	cpse	r16, r13
     3a4:	01 11       	cpse	r16, r1
     3a6:	fb 10       	cpse	r15, r11
     3a8:	ef 10       	cpse	r14, r15
     3aa:	e9 10       	cpse	r14, r9
     3ac:	dd 10       	cpse	r13, r13
     3ae:	d7 10       	cpse	r13, r7
     3b0:	cb 10       	cpse	r12, r11
     3b2:	c5 10       	cpse	r12, r5
     3b4:	bf 10       	cpse	r11, r15
     3b6:	b9 10       	cpse	r11, r9
     3b8:	b3 10       	cpse	r11, r3
     3ba:	a7 10       	cpse	r10, r7
     3bc:	a1 10       	cpse	r10, r1
     3be:	9b 10       	cpse	r9, r11
     3c0:	8f 10       	cpse	r8, r15
     3c2:	89 10       	cpse	r8, r9
     3c4:	7d 10       	cpse	r7, r13
     3c6:	77 10       	cpse	r7, r7
     3c8:	6b 10       	cpse	r6, r11
     3ca:	65 10       	cpse	r6, r5
     3cc:	59 10       	cpse	r5, r9
     3ce:	53 10       	cpse	r5, r3
     3d0:	4d 10       	cpse	r4, r13
     3d2:	47 10       	cpse	r4, r7
     3d4:	3b 10       	cpse	r3, r11
     3d6:	35 10       	cpse	r3, r5
     3d8:	29 10       	cpse	r2, r9
     3da:	23 10       	cpse	r2, r3
     3dc:	17 10       	cpse	r1, r7
     3de:	11 10       	cpse	r1, r1
     3e0:	05 10       	cpse	r0, r5
     3e2:	ff 0f       	add	r31, r31
     3e4:	f9 0f       	add	r31, r25
     3e6:	f3 0f       	add	r31, r19
     3e8:	ed 0f       	add	r30, r29
     3ea:	e1 0f       	add	r30, r17
     3ec:	db 0f       	add	r29, r27
     3ee:	d5 0f       	add	r29, r21
     3f0:	79 14       	cp	r7, r9
     3f2:	a3 14       	cp	r10, r3
     3f4:	91 14       	cp	r9, r1
     3f6:	a3 14       	cp	r10, r3
     3f8:	91 14       	cp	r9, r1
     3fa:	a3 14       	cp	r10, r3
     3fc:	91 14       	cp	r9, r1
     3fe:	c7 14       	cp	r12, r7
     400:	91 14       	cp	r9, r1
     402:	c7 14       	cp	r12, r7
     404:	af 14       	cp	r10, r15
     406:	9d 14       	cp	r9, r13
     408:	df 14       	cp	r13, r15
     40a:	9d 14       	cp	r9, r13
     40c:	cd 14       	cp	r12, r13
     40e:	bb 14       	cp	r11, r11
     410:	a9 14       	cp	r10, r9
     412:	91 14       	cp	r9, r1
     414:	a9 14       	cp	r10, r9
     416:	91 14       	cp	r9, r1
     418:	a9 14       	cp	r10, r9
     41a:	91 14       	cp	r9, r1
     41c:	c1 14       	cp	r12, r1
     41e:	91 14       	cp	r9, r1
     420:	c1 14       	cp	r12, r1
     422:	af 14       	cp	r10, r15
     424:	d3 14       	cp	r13, r3
     426:	d9 14       	cp	r13, r9
     428:	91 14       	cp	r9, r1
     42a:	9d 14       	cp	r9, r13
     42c:	e5 14       	cp	r14, r5
     42e:	bb 14       	cp	r11, r11

00000430 <__ctors_end>:
     430:	11 24       	eor	r1, r1
     432:	1f be       	out	0x3f, r1	; 63
     434:	cf ef       	ldi	r28, 0xFF	; 255
     436:	d0 e1       	ldi	r29, 0x10	; 16
     438:	de bf       	out	0x3e, r29	; 62
     43a:	cd bf       	out	0x3d, r28	; 61

0000043c <__do_copy_data>:
     43c:	11 e0       	ldi	r17, 0x01	; 1
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	b1 e0       	ldi	r27, 0x01	; 1
     442:	ee e8       	ldi	r30, 0x8E	; 142
     444:	fd e2       	ldi	r31, 0x2D	; 45
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	0b bf       	out	0x3b, r16	; 59
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__do_copy_data+0x14>
     44c:	07 90       	elpm	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	a4 35       	cpi	r26, 0x54	; 84
     452:	b1 07       	cpc	r27, r17
     454:	d9 f7       	brne	.-10     	; 0x44c <__do_copy_data+0x10>

00000456 <__do_clear_bss>:
     456:	22 e0       	ldi	r18, 0x02	; 2
     458:	a4 e5       	ldi	r26, 0x54	; 84
     45a:	b1 e0       	ldi	r27, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <.do_clear_bss_start>

0000045e <.do_clear_bss_loop>:
     45e:	1d 92       	st	X+, r1

00000460 <.do_clear_bss_start>:
     460:	af 38       	cpi	r26, 0x8F	; 143
     462:	b2 07       	cpc	r27, r18
     464:	e1 f7       	brne	.-8      	; 0x45e <.do_clear_bss_loop>
     466:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <main>
     46a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_exit>

0000046e <__bad_interrupt>:
     46e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000472 <spi_init>:
extern uint8_t lm73_wr_buf[2]; 
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
     472:	87 b3       	in	r24, 0x17	; 23
     474:	87 60       	ori	r24, 0x07	; 7
     476:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
     478:	8d b1       	in	r24, 0x0d	; 13
     47a:	80 65       	ori	r24, 0x50	; 80
     47c:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
     47e:	70 9a       	sbi	0x0e, 0	; 14
     480:	08 95       	ret

00000482 <get_48>:
}//spi_init    

/*************************Test function**********************/
double get_48(){

clear_display();
     482:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <clear_display>
	//strcpy(f,lcd_str_h);
	//strcpy(f,'.');
	//strcpy(f,lcd_str_l);
	//string2lcd(" wld al3m");
	//string2lcd(" almhay6y");
	string2lcd("a");	
     486:	89 e2       	ldi	r24, 0x29	; 41
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	string2lcd(lcd_str_array);
     48e:	81 e9       	ldi	r24, 0x91	; 145
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	line2_col1();  
     496:	0e 94 07 08 	call	0x100e	; 0x100e <line2_col1>
	//_delay_us(50);
	string2lcd("h");
     49a:	8b e2       	ldi	r24, 0x2B	; 43
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	string2lcd(lcd_str_h);
     4a2:	8b e9       	ldi	r24, 0x9B	; 155
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	char2lcd('.');          
     4aa:	8e e2       	ldi	r24, 0x2E	; 46
     4ac:	0e 94 1d 08 	call	0x103a	; 0x103a <char2lcd>
  	string2lcd(lcd_str_l);
     4b0:	84 e8       	ldi	r24, 0x84	; 132
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	_delay_ms(50); 
	string2lcd(lcd_str_h);  //write upper half
  	char2lcd('.');          //write decimal point
  	 //string2lcd(lcd_str_l);  //write lower half
	*/  
        rcv_rdy=0;
     4b8:	10 92 7c 01 	sts	0x017C, r1
        cursor_home();
     4bc:	0e 94 fc 07 	call	0xff8	; 0xff8 <cursor_home>



}
     4c0:	08 95       	ret

000004c2 <get_128>:
/*******************************/
double get_128(){

//_delay_ms(50); //tenth second wait                  //wipe the display
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);//read temperature data from LM73 (2 bytes) 
     4c2:	42 e0       	ldi	r20, 0x02	; 2
     4c4:	68 e8       	ldi	r22, 0x88	; 136
     4c6:	72 e0       	ldi	r23, 0x02	; 2
     4c8:	80 e9       	ldi	r24, 0x90	; 144
     4ca:	0e 94 be 0a 	call	0x157c	; 0x157c <twi_start_rd>
  //_delay_ms(2);    //wait for it to finish
  lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
     4ce:	e8 e8       	ldi	r30, 0x88	; 136
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	80 81       	ld	r24, Z
     4d4:	90 e0       	ldi	r25, 0x00	; 0
  lm73_temp = lm73_temp << 8; //shift it into upper byte 
     4d6:	98 2f       	mov	r25, r24
     4d8:	88 27       	eor	r24, r24
  lm73_temp |= lm73_rd_buf[1];  //"OR" in the low temp byte to lm73_temp 
     4da:	21 81       	ldd	r18, Z+1	; 0x01
     4dc:	82 2b       	or	r24, r18
     4de:	90 93 80 01 	sts	0x0180, r25
     4e2:	80 93 7f 01 	sts	0x017F, r24
  //lm73_temp =
  //itoa(lm73_temp, lcd_string_array, 10); //convert to string in array with itoa() from avr-libc                           
  //string2lcd(lcd_string_array); //send the string to LCD (lcd_functions)
  fp_adc_result = div(lm73_temp, 128);              //do division by 205 (204.8 to be exact)
     4e6:	60 e8       	ldi	r22, 0x80	; 128
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__divmodhi4>
     4ee:	9b 01       	movw	r18, r22
     4f0:	60 93 b2 01 	sts	0x01B2, r22
     4f4:	70 93 b3 01 	sts	0x01B3, r23
     4f8:	80 93 b4 01 	sts	0x01B4, r24
     4fc:	90 93 b5 01 	sts	0x01B5, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     500:	4a e0       	ldi	r20, 0x0A	; 10
     502:	6b e9       	ldi	r22, 0x9B	; 155
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	c9 01       	movw	r24, r18
     508:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__itoa_ncheck>
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 128); //get the decimal fraction into non-fractional form 
     50c:	80 91 b4 01 	lds	r24, 0x01B4
     510:	90 91 b5 01 	lds	r25, 0x01B5
     514:	60 e8       	ldi	r22, 0x80	; 128
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	24 e6       	ldi	r18, 0x64	; 100
     51a:	ac 01       	movw	r20, r24
     51c:	24 9f       	mul	r18, r20
     51e:	c0 01       	movw	r24, r0
     520:	25 9f       	mul	r18, r21
     522:	90 0d       	add	r25, r0
     524:	11 24       	eor	r1, r1
     526:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__divmodhi4>
     52a:	9b 01       	movw	r18, r22
     52c:	60 93 96 01 	sts	0x0196, r22
     530:	70 93 97 01 	sts	0x0197, r23
     534:	80 93 98 01 	sts	0x0198, r24
     538:	90 93 99 01 	sts	0x0199, r25
     53c:	4a e0       	ldi	r20, 0x0A	; 10
     53e:	64 e8       	ldi	r22, 0x84	; 132
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	c9 01       	movw	r24, r18
     544:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__itoa_ncheck>
  itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string



}
     548:	08 95       	ret

0000054a <display_alarm>:
	0b01000000, //thousands place
	0b00100000, //center colon
	0b01110000  //hi-Z mode
};
/****************/
void display_alarm(){
     54a:	cf 93       	push	r28
cur_digit=0;
     54c:	10 92 5a 01 	sts	0x015A, r1

	//Set Register A
	DDRA = 0xFF; //output
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     554:	8b bb       	out	0x1b, r24	; 27

tmp=alarm_minutes;
     556:	e0 91 23 01 	lds	r30, 0x0123
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	f0 93 7a 01 	sts	0x017A, r31
     560:	e0 93 79 01 	sts	0x0179, r30
for(i=0; i<2 ; i++){
     564:	10 92 8b 01 	sts	0x018B, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     568:	cf ef       	ldi	r28, 0xFF	; 255
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     56a:	9f 01       	movw	r18, r30
     56c:	ad ec       	ldi	r26, 0xCD	; 205
     56e:	bc ec       	ldi	r27, 0xCC	; 204
     570:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     574:	ac 01       	movw	r20, r24
     576:	56 95       	lsr	r21
     578:	47 95       	ror	r20
     57a:	56 95       	lsr	r21
     57c:	47 95       	ror	r20
     57e:	56 95       	lsr	r21
     580:	47 95       	ror	r20
     582:	ca 01       	movw	r24, r20
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	44 0f       	add	r20, r20
     58e:	55 1f       	adc	r21, r21
     590:	44 0f       	add	r20, r20
     592:	55 1f       	adc	r21, r21
     594:	48 0f       	add	r20, r24
     596:	59 1f       	adc	r21, r25
     598:	e4 1b       	sub	r30, r20
     59a:	f5 0b       	sbc	r31, r21
     59c:	e0 93 9a 01 	sts	0x019A, r30
		PORTB=0x00;
     5a0:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     5a2:	98 b3       	in	r25, 0x18	; 24
     5a4:	e0 91 5a 01 	lds	r30, 0x015A
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	e0 50       	subi	r30, 0x00	; 0
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	80 81       	ld	r24, Z
     5b0:	89 2b       	or	r24, r25
     5b2:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     5b4:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     5b6:	e0 91 9a 01 	lds	r30, 0x019A
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	ea 5e       	subi	r30, 0xEA	; 234
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	80 81       	ld	r24, Z
     5c2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c4:	81 ee       	ldi	r24, 0xE1	; 225
     5c6:	94 e0       	ldi	r25, 0x04	; 4
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <display_alarm+0x7e>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <display_alarm+0x84>
     5ce:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     5d0:	80 91 5a 01 	lds	r24, 0x015A
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	80 93 5a 01 	sts	0x015A, r24
		tmp /= 10; //get next value
     5da:	20 91 79 01 	lds	r18, 0x0179
     5de:	30 91 7a 01 	lds	r19, 0x017A
     5e2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     5e6:	fc 01       	movw	r30, r24
     5e8:	f6 95       	lsr	r31
     5ea:	e7 95       	ror	r30
     5ec:	f6 95       	lsr	r31
     5ee:	e7 95       	ror	r30
     5f0:	f6 95       	lsr	r31
     5f2:	e7 95       	ror	r30
     5f4:	f0 93 7a 01 	sts	0x017A, r31
     5f8:	e0 93 79 01 	sts	0x0179, r30
	//Set Register A
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
     5fc:	80 91 8b 01 	lds	r24, 0x018B
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	80 93 8b 01 	sts	0x018B, r24
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	08 f4       	brcc	.+2      	; 0x60c <display_alarm+0xc2>
     60a:	af cf       	rjmp	.-162    	; 0x56a <display_alarm+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=alarm_hours;
     60c:	40 91 24 01 	lds	r20, 0x0124
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	50 93 7a 01 	sts	0x017A, r21
     616:	40 93 79 01 	sts	0x0179, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     61a:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=alarm_hours;
do {
		cur_value = tmp % 10; //get current digit to display
     61c:	9a 01       	movw	r18, r20
     61e:	ad ec       	ldi	r26, 0xCD	; 205
     620:	bc ec       	ldi	r27, 0xCC	; 204
     622:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     626:	96 95       	lsr	r25
     628:	87 95       	ror	r24
     62a:	96 95       	lsr	r25
     62c:	87 95       	ror	r24
     62e:	96 95       	lsr	r25
     630:	87 95       	ror	r24
     632:	9c 01       	movw	r18, r24
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	48 1b       	sub	r20, r24
     64a:	59 0b       	sbc	r21, r25
     64c:	40 93 9a 01 	sts	0x019A, r20
		PORTB=0x00;
     650:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     652:	98 b3       	in	r25, 0x18	; 24
     654:	e0 91 5a 01 	lds	r30, 0x015A
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	e0 50       	subi	r30, 0x00	; 0
     65c:	ff 4f       	sbci	r31, 0xFF	; 255
     65e:	80 81       	ld	r24, Z
     660:	89 2b       	or	r24, r25
     662:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     664:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     666:	e0 91 9a 01 	lds	r30, 0x019A
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ea 5e       	subi	r30, 0xEA	; 234
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	80 81       	ld	r24, Z
     672:	8b bb       	out	0x1b, r24	; 27
     674:	81 ee       	ldi	r24, 0xE1	; 225
     676:	94 e0       	ldi	r25, 0x04	; 4
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <display_alarm+0x12e>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <display_alarm+0x134>
     67e:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     680:	80 91 5a 01 	lds	r24, 0x015A
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	80 93 5a 01 	sts	0x015A, r24
		tmp /= 10; //get next value
     68a:	20 91 79 01 	lds	r18, 0x0179
     68e:	30 91 7a 01 	lds	r19, 0x017A
     692:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     696:	ac 01       	movw	r20, r24
     698:	56 95       	lsr	r21
     69a:	47 95       	ror	r20
     69c:	56 95       	lsr	r21
     69e:	47 95       	ror	r20
     6a0:	56 95       	lsr	r21
     6a2:	47 95       	ror	r20
     6a4:	50 93 7a 01 	sts	0x017A, r21
     6a8:	40 93 79 01 	sts	0x0179, r20
	} while (tmp >= 1);
     6ac:	41 15       	cp	r20, r1
     6ae:	51 05       	cpc	r21, r1
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <display_alarm+0x16a>
     6b2:	b4 cf       	rjmp	.-152    	; 0x61c <display_alarm+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     6b4:	80 e6       	ldi	r24, 0x60	; 96
     6b6:	88 bb       	out	0x18, r24	; 24





}
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <display_digits>:

/*******************************/
void display_digits() 
{
     6bc:	cf 93       	push	r28
	cur_digit=0;
     6be:	10 92 5a 01 	sts	0x015A, r1

	//Set Register A
	DDRA = 0xFF; //output
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     6c6:	8b bb       	out	0x1b, r24	; 27
PORTB=0x00;
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
     6c8:	e0 91 5c 01 	lds	r30, 0x015C
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	f0 93 7a 01 	sts	0x017A, r31
     6d2:	e0 93 79 01 	sts	0x0179, r30
for(i=0; i<2 ; i++){
     6d6:	10 92 8b 01 	sts	0x018B, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     6da:	cf ef       	ldi	r28, 0xFF	; 255
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     6dc:	9f 01       	movw	r18, r30
     6de:	ad ec       	ldi	r26, 0xCD	; 205
     6e0:	bc ec       	ldi	r27, 0xCC	; 204
     6e2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     6e6:	ac 01       	movw	r20, r24
     6e8:	56 95       	lsr	r21
     6ea:	47 95       	ror	r20
     6ec:	56 95       	lsr	r21
     6ee:	47 95       	ror	r20
     6f0:	56 95       	lsr	r21
     6f2:	47 95       	ror	r20
     6f4:	ca 01       	movw	r24, r20
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	44 0f       	add	r20, r20
     6fc:	55 1f       	adc	r21, r21
     6fe:	44 0f       	add	r20, r20
     700:	55 1f       	adc	r21, r21
     702:	44 0f       	add	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	48 0f       	add	r20, r24
     708:	59 1f       	adc	r21, r25
     70a:	e4 1b       	sub	r30, r20
     70c:	f5 0b       	sbc	r31, r21
     70e:	e0 93 9a 01 	sts	0x019A, r30
		PORTB=0x00;
     712:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     714:	98 b3       	in	r25, 0x18	; 24
     716:	e0 91 5a 01 	lds	r30, 0x015A
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e0 50       	subi	r30, 0x00	; 0
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	80 81       	ld	r24, Z
     722:	89 2b       	or	r24, r25
     724:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     726:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     728:	e0 91 9a 01 	lds	r30, 0x019A
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ea 5e       	subi	r30, 0xEA	; 234
     730:	fe 4f       	sbci	r31, 0xFE	; 254
     732:	80 81       	ld	r24, Z
     734:	8b bb       	out	0x1b, r24	; 27
     736:	81 ee       	ldi	r24, 0xE1	; 225
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <display_digits+0x7e>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <display_digits+0x84>
     740:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     742:	80 91 5a 01 	lds	r24, 0x015A
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	80 93 5a 01 	sts	0x015A, r24
		tmp /= 10; //get next value
     74c:	20 91 79 01 	lds	r18, 0x0179
     750:	30 91 7a 01 	lds	r19, 0x017A
     754:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     758:	fc 01       	movw	r30, r24
     75a:	f6 95       	lsr	r31
     75c:	e7 95       	ror	r30
     75e:	f6 95       	lsr	r31
     760:	e7 95       	ror	r30
     762:	f6 95       	lsr	r31
     764:	e7 95       	ror	r30
     766:	f0 93 7a 01 	sts	0x017A, r31
     76a:	e0 93 79 01 	sts	0x0179, r30
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
     76e:	80 91 8b 01 	lds	r24, 0x018B
     772:	8f 5f       	subi	r24, 0xFF	; 255
     774:	80 93 8b 01 	sts	0x018B, r24
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	08 f4       	brcc	.+2      	; 0x77e <display_digits+0xc2>
     77c:	af cf       	rjmp	.-162    	; 0x6dc <display_digits+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=hours;
     77e:	40 91 25 01 	lds	r20, 0x0125
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	50 93 7a 01 	sts	0x017A, r21
     788:	40 93 79 01 	sts	0x0179, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     78c:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=hours;
do {
		cur_value = tmp % 10; //get current digit to display
     78e:	9a 01       	movw	r18, r20
     790:	ad ec       	ldi	r26, 0xCD	; 205
     792:	bc ec       	ldi	r27, 0xCC	; 204
     794:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	96 95       	lsr	r25
     79e:	87 95       	ror	r24
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	9c 01       	movw	r18, r24
     7a6:	22 0f       	add	r18, r18
     7a8:	33 1f       	adc	r19, r19
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	82 0f       	add	r24, r18
     7b8:	93 1f       	adc	r25, r19
     7ba:	48 1b       	sub	r20, r24
     7bc:	59 0b       	sbc	r21, r25
     7be:	40 93 9a 01 	sts	0x019A, r20
		PORTB=0x00;
     7c2:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     7c4:	98 b3       	in	r25, 0x18	; 24
     7c6:	e0 91 5a 01 	lds	r30, 0x015A
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e0 50       	subi	r30, 0x00	; 0
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	80 81       	ld	r24, Z
     7d2:	89 2b       	or	r24, r25
     7d4:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     7d6:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     7d8:	e0 91 9a 01 	lds	r30, 0x019A
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	ea 5e       	subi	r30, 0xEA	; 234
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	80 81       	ld	r24, Z
     7e4:	8b bb       	out	0x1b, r24	; 27
     7e6:	81 ee       	ldi	r24, 0xE1	; 225
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <display_digits+0x12e>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <display_digits+0x134>
     7f0:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     7f2:	80 91 5a 01 	lds	r24, 0x015A
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	80 93 5a 01 	sts	0x015A, r24
		tmp /= 10; //get next value
     7fc:	20 91 79 01 	lds	r18, 0x0179
     800:	30 91 7a 01 	lds	r19, 0x017A
     804:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__umulhisi3>
     808:	ac 01       	movw	r20, r24
     80a:	56 95       	lsr	r21
     80c:	47 95       	ror	r20
     80e:	56 95       	lsr	r21
     810:	47 95       	ror	r20
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	50 93 7a 01 	sts	0x017A, r21
     81a:	40 93 79 01 	sts	0x0179, r20
	} while (tmp >= 1);
     81e:	41 15       	cp	r20, r1
     820:	51 05       	cpc	r21, r1
     822:	09 f0       	breq	.+2      	; 0x826 <display_digits+0x16a>
     824:	b4 cf       	rjmp	.-152    	; 0x78e <display_digits+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     826:	80 e6       	ldi	r24, 0x60	; 96
     828:	88 bb       	out	0x18, r24	; 24
}
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <Button>:
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
     82e:	99 b3       	in	r25, 0x19	; 25
     830:	80 91 27 01 	lds	r24, 0x0127
     834:	89 1b       	sub	r24, r25
 switch(checker){
     836:	84 30       	cpi	r24, 0x04	; 4
     838:	c9 f1       	breq	.+114    	; 0x8ac <Button+0x7e>
     83a:	80 f4       	brcc	.+32     	; 0x85c <Button+0x2e>
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	59 f1       	breq	.+86     	; 0x896 <Button+0x68>
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	e9 f4       	brne	.+58     	; 0x87e <Button+0x50>
		edit_hour ^=0x01;
		BARAGRAPH ^=( 1 << 0 );
		break;
    
	case 0x02:
    		edit_minutes ^=0x01;
     844:	20 91 7b 01 	lds	r18, 0x017B
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	92 27       	eor	r25, r18
     84c:	90 93 7b 01 	sts	0x017B, r25
		BARAGRAPH ^= ( 1 << 1);
     850:	90 91 62 01 	lds	r25, 0x0162
     854:	89 27       	eor	r24, r25
     856:	80 93 62 01 	sts	0x0162, r24
	

		break;
     85a:	08 95       	ret
	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
}
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
 switch(checker){
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	81 f0       	breq	.+32     	; 0x880 <Button+0x52>
     860:	80 31       	cpi	r24, 0x10	; 16
     862:	61 f4       	brne	.+24     	; 0x87c <Button+0x4e>
		alarm_minutes= alarm_minutes+5;
		BARAGRAPH ^= (1<<3);
		break;

	case 0x10:
		temp ^=0x01;
     864:	20 91 55 01 	lds	r18, 0x0155
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	92 27       	eor	r25, r18
     86c:	90 93 55 01 	sts	0x0155, r25
		BARAGRAPH ^= (1<<4);
     870:	90 91 62 01 	lds	r25, 0x0162
     874:	89 27       	eor	r24, r25
     876:	80 93 62 01 	sts	0x0162, r24
     87a:	08 95       	ret
     87c:	08 95       	ret
     87e:	08 95       	ret
		BARAGRAPH ^= ( 1 <<2);
	
		break;

	case 0x08:
		alarm_minutes= alarm_minutes+5;
     880:	90 91 23 01 	lds	r25, 0x0123
     884:	9b 5f       	subi	r25, 0xFB	; 251
     886:	90 93 23 01 	sts	0x0123, r25
		BARAGRAPH ^= (1<<3);
     88a:	90 91 62 01 	lds	r25, 0x0162
     88e:	89 27       	eor	r24, r25
     890:	80 93 62 01 	sts	0x0162, r24
		break;
     894:	08 95       	ret
void Button(){
uint8_t checker =NotTouched-  PINA;
 switch(checker){

	case 0x01:
		edit_hour ^=0x01;
     896:	90 91 b0 01 	lds	r25, 0x01B0
     89a:	98 27       	eor	r25, r24
     89c:	90 93 b0 01 	sts	0x01B0, r25
		BARAGRAPH ^=( 1 << 0 );
     8a0:	90 91 62 01 	lds	r25, 0x0162
     8a4:	89 27       	eor	r24, r25
     8a6:	80 93 62 01 	sts	0x0162, r24
		break;
     8aa:	08 95       	ret
	

		break;

	case 0x04:
		alarm ^=0x01;
     8ac:	20 91 83 01 	lds	r18, 0x0183
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	92 27       	eor	r25, r18
     8b4:	90 93 83 01 	sts	0x0183, r25
		BARAGRAPH ^= ( 1 <<2);
     8b8:	90 91 62 01 	lds	r25, 0x0162
     8bc:	89 27       	eor	r24, r25
     8be:	80 93 62 01 	sts	0x0162, r24
	
		break;
     8c2:	08 95       	ret

000008c4 <encoder>:
}
/******************************************encoder************************/
void encoder(){


 OE1 = encoder1;
     8c4:	30 91 5f 01 	lds	r19, 0x015F
     8c8:	30 93 61 01 	sts	0x0161, r19
  OE2 = encoder2;
     8cc:	20 91 5e 01 	lds	r18, 0x015E
     8d0:	20 93 60 01 	sts	0x0160, r18

  

  encoder1 =  (spdr_to_encoder & 0x03);
     8d4:	80 91 8f 01 	lds	r24, 0x018F
     8d8:	90 91 90 01 	lds	r25, 0x0190
     8dc:	48 2f       	mov	r20, r24
     8de:	43 70       	andi	r20, 0x03	; 3
     8e0:	40 93 5f 01 	sts	0x015F, r20
  encoder2 = ((spdr_to_encoder& 0x0C) >> 2);
     8e4:	8c 70       	andi	r24, 0x0C	; 12
     8e6:	99 27       	eor	r25, r25
     8e8:	96 95       	lsr	r25
     8ea:	87 95       	ror	r24
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	98 2f       	mov	r25, r24
     8f2:	80 93 5e 01 	sts	0x015E, r24



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
     8f6:	34 17       	cp	r19, r20
     8f8:	21 f0       	breq	.+8      	; 0x902 <encoder+0x3e>
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     8fa:	31 30       	cpi	r19, 0x01	; 1
     8fc:	41 f1       	breq	.+80     	; 0x94e <encoder+0x8a>
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     8fe:	32 30       	cpi	r19, 0x02	; 2
     900:	49 f0       	breq	.+18     	; 0x914 <encoder+0x50>
    	

	}
  }
/********************************************************/
  if(encoder2 != OE2){
     902:	29 17       	cp	r18, r25
     904:	31 f0       	breq	.+12     	; 0x912 <encoder+0x4e>
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     906:	21 30       	cpi	r18, 0x01	; 1
     908:	b1 f0       	breq	.+44     	; 0x936 <encoder+0x72>
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
     90a:	22 30       	cpi	r18, 0x02	; 2
     90c:	11 f4       	brne	.+4      	; 0x912 <encoder+0x4e>
     90e:	93 30       	cpi	r25, 0x03	; 3
     910:	79 f1       	breq	.+94     	; 0x970 <encoder+0xac>
     912:	08 95       	ret
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     914:	43 30       	cpi	r20, 0x03	; 3
     916:	a9 f7       	brne	.-22     	; 0x902 <encoder+0x3e>
		if(edit_hour & edit_minutes){    	
     918:	80 91 b0 01 	lds	r24, 0x01B0
     91c:	30 91 7b 01 	lds	r19, 0x017B
     920:	43 2f       	mov	r20, r19
     922:	48 23       	and	r20, r24
     924:	71 f7       	brne	.-36     	; 0x902 <encoder+0x3e>
		}
	  	else if (edit_hour){
     926:	88 23       	and	r24, r24
     928:	69 f1       	breq	.+90     	; 0x984 <encoder+0xc0>
	    	hours=hours-1;
     92a:	80 91 25 01 	lds	r24, 0x0125
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	80 93 25 01 	sts	0x0125, r24
     934:	e6 cf       	rjmp	.-52     	; 0x902 <encoder+0x3e>

	}
  }
/********************************************************/
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     936:	93 30       	cpi	r25, 0x03	; 3
     938:	61 f7       	brne	.-40     	; 0x912 <encoder+0x4e>
	OCR3A=OCR3A+50;
     93a:	80 91 86 00 	lds	r24, 0x0086
     93e:	90 91 87 00 	lds	r25, 0x0087
     942:	c2 96       	adiw	r24, 0x32	; 50
     944:	90 93 87 00 	sts	0x0087, r25
     948:	80 93 86 00 	sts	0x0086, r24
     94c:	08 95       	ret



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     94e:	43 30       	cpi	r20, 0x03	; 3
     950:	c1 f6       	brne	.-80     	; 0x902 <encoder+0x3e>
  
	if(edit_hour & edit_minutes){    	
     952:	80 91 b0 01 	lds	r24, 0x01B0
     956:	30 91 7b 01 	lds	r19, 0x017B
     95a:	43 2f       	mov	r20, r19
     95c:	48 23       	and	r20, r24
     95e:	89 f6       	brne	.-94     	; 0x902 <encoder+0x3e>
	}
	  	else if (edit_hour){
     960:	88 23       	and	r24, r24
     962:	c9 f0       	breq	.+50     	; 0x996 <encoder+0xd2>
	    	hours=hours+1;
     964:	80 91 25 01 	lds	r24, 0x0125
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	80 93 25 01 	sts	0x0125, r24
     96e:	c9 cf       	rjmp	.-110    	; 0x902 <encoder+0x3e>
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
	OCR3A=OCR3A-50;
     970:	80 91 86 00 	lds	r24, 0x0086
     974:	90 91 87 00 	lds	r25, 0x0087
     978:	c2 97       	sbiw	r24, 0x32	; 50
     97a:	90 93 87 00 	sts	0x0087, r25
     97e:	80 93 86 00 	sts	0x0086, r24
     982:	08 95       	ret
		if(edit_hour & edit_minutes){    	
		}
	  	else if (edit_hour){
	    	hours=hours-1;
		}
	  	else if (edit_minutes){
     984:	33 23       	and	r19, r19
     986:	09 f4       	brne	.+2      	; 0x98a <encoder+0xc6>
     988:	bc cf       	rjmp	.-136    	; 0x902 <encoder+0x3e>
	    	minutes=minutes-1;
     98a:	80 91 5c 01 	lds	r24, 0x015C
     98e:	81 50       	subi	r24, 0x01	; 1
     990:	80 93 5c 01 	sts	0x015C, r24
     994:	b6 cf       	rjmp	.-148    	; 0x902 <encoder+0x3e>
	if(edit_hour & edit_minutes){    	
	}
	  	else if (edit_hour){
	    	hours=hours+1;
		}
	  	else if (edit_minutes){
     996:	33 23       	and	r19, r19
     998:	09 f4       	brne	.+2      	; 0x99c <encoder+0xd8>
     99a:	b3 cf       	rjmp	.-154    	; 0x902 <encoder+0x3e>
	    	minutes=minutes+1;
     99c:	80 91 5c 01 	lds	r24, 0x015C
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	80 93 5c 01 	sts	0x015C, r24
     9a6:	ad cf       	rjmp	.-166    	; 0x902 <encoder+0x3e>

000009a8 <checker>:


}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
     9a8:	80 91 5d 01 	lds	r24, 0x015D
     9ac:	8c 33       	cpi	r24, 0x3C	; 60
     9ae:	b1 f0       	breq	.+44     	; 0x9dc <checker+0x34>
     9b0:	80 91 5c 01 	lds	r24, 0x015C
	sec=0;
	minutes++;

}

if(minutes==60){
     9b4:	8c 33       	cpi	r24, 0x3C	; 60
     9b6:	d9 f0       	breq	.+54     	; 0x9ee <checker+0x46>
     9b8:	80 91 25 01 	lds	r24, 0x0125
	minutes=0;
	hours++;

}

if(hours==13){
     9bc:	8d 30       	cpi	r24, 0x0D	; 13
     9be:	01 f1       	breq	.+64     	; 0xa00 <checker+0x58>

if(vol_n <0){
vol_n=0;
}

if( vol_n >2000){
     9c0:	80 91 20 01 	lds	r24, 0x0120
     9c4:	90 91 21 01 	lds	r25, 0x0121
     9c8:	81 3d       	cpi	r24, 0xD1	; 209
     9ca:	97 40       	sbci	r25, 0x07	; 7
     9cc:	30 f0       	brcs	.+12     	; 0x9da <checker+0x32>
vol_n=2000;
     9ce:	80 ed       	ldi	r24, 0xD0	; 208
     9d0:	97 e0       	ldi	r25, 0x07	; 7
     9d2:	90 93 21 01 	sts	0x0121, r25
     9d6:	80 93 20 01 	sts	0x0120, r24
     9da:	08 95       	ret

}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
	sec=0;
     9dc:	10 92 5d 01 	sts	0x015D, r1
	minutes++;
     9e0:	80 91 5c 01 	lds	r24, 0x015C
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	80 93 5c 01 	sts	0x015C, r24

}

if(minutes==60){
     9ea:	8c 33       	cpi	r24, 0x3C	; 60
     9ec:	29 f7       	brne	.-54     	; 0x9b8 <checker+0x10>

	minutes=0;
     9ee:	10 92 5c 01 	sts	0x015C, r1
	hours++;
     9f2:	80 91 25 01 	lds	r24, 0x0125
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 25 01 	sts	0x0125, r24

}

if(hours==13){
     9fc:	8d 30       	cpi	r24, 0x0D	; 13
     9fe:	01 f7       	brne	.-64     	; 0x9c0 <checker+0x18>
	hours=1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 25 01 	sts	0x0125, r24
     a06:	dc cf       	rjmp	.-72     	; 0x9c0 <checker+0x18>

00000a08 <alarm_check>:

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     a08:	90 91 25 01 	lds	r25, 0x0125
     a0c:	80 91 24 01 	lds	r24, 0x0124
     a10:	98 17       	cp	r25, r24
     a12:	19 f0       	breq	.+6      	; 0xa1a <alarm_check+0x12>
	alarmON=1;
}

else{

	alarmON=0;
     a14:	10 92 5b 01 	sts	0x015B, r1
     a18:	08 95       	ret

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     a1a:	90 91 5c 01 	lds	r25, 0x015C
     a1e:	80 91 23 01 	lds	r24, 0x0123
     a22:	98 13       	cpse	r25, r24
     a24:	f7 cf       	rjmp	.-18     	; 0xa14 <alarm_check+0xc>

	alarmON=1;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 5b 01 	sts	0x015B, r24
     a2c:	08 95       	ret

00000a2e <lcd_control>:


}
/**************************LCD control***********************/
void lcd_control(){
if (temp==0){
     a2e:	80 91 55 01 	lds	r24, 0x0155
     a32:	81 11       	cpse	r24, r1
     a34:	15 c0       	rjmp	.+42     	; 0xa60 <lcd_control+0x32>
if(strcmp(lcd_now,lcd_old)){
     a36:	60 ea       	ldi	r22, 0xA0	; 160
     a38:	71 e0       	ldi	r23, 0x01	; 1
     a3a:	89 e6       	ldi	r24, 0x69	; 105
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strcmp>
     a42:	89 2b       	or	r24, r25
     a44:	09 f4       	brne	.+2      	; 0xa48 <lcd_control+0x1a>
     a46:	08 95       	ret
	strcpy(lcd_old,lcd_now);
     a48:	69 e6       	ldi	r22, 0x69	; 105
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	80 ea       	ldi	r24, 0xA0	; 160
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 89 16 	call	0x2d12	; 0x2d12 <strcpy>
	clear_display();
     a54:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <clear_display>
	string2lcd(lcd_now);
     a58:	89 e6       	ldi	r24, 0x69	; 105
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <string2lcd>
}

else{


strcpy(lcd_now,lcd_str_h);
     a60:	6b e9       	ldi	r22, 0x9B	; 155
     a62:	71 e0       	ldi	r23, 0x01	; 1
     a64:	89 e6       	ldi	r24, 0x69	; 105
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 89 16 	call	0x2d12	; 0x2d12 <strcpy>
if (strcmp(lcd_now,lcd_old)){
     a6c:	60 ea       	ldi	r22, 0xA0	; 160
     a6e:	71 e0       	ldi	r23, 0x01	; 1
     a70:	89 e6       	ldi	r24, 0x69	; 105
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strcmp>
     a78:	89 2b       	or	r24, r25
     a7a:	29 f3       	breq	.-54     	; 0xa46 <lcd_control+0x18>
	strcpy(lcd_old,lcd_now);
     a7c:	69 e6       	ldi	r22, 0x69	; 105
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	80 ea       	ldi	r24, 0xA0	; 160
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 89 16 	call	0x2d12	; 0x2d12 <strcpy>
	clear_display();
     a88:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <clear_display>
	string2lcd(lcd_now);
     a8c:	89 e6       	ldi	r24, 0x69	; 105
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	char2lcd('.');
     a94:	8e e2       	ldi	r24, 0x2E	; 46
     a96:	0e 94 1d 08 	call	0x103a	; 0x103a <char2lcd>
	string2lcd(lcd_str_l);
     a9a:	84 e8       	ldi	r24, 0x84	; 132
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0c 94 21 08 	jmp	0x1042	; 0x1042 <string2lcd>

00000aa2 <__vector_10>:

}

}
/*************************************************************TIMER 2**********************/
ISR(TIMER2_OVF_vect){
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1

}
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_18>:
/****************lab 5*****************/
ISR(USART0_RX_vect){
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	8f 93       	push	r24
     ac6:	9f 93       	push	r25
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
     acc:	8c b1       	in	r24, 0x0c	; 12
     ace:	80 93 b1 01 	sts	0x01B1, r24
  lcd_str_array[i++]=rx_char;  //store in array 
     ad2:	e0 91 66 01 	lds	r30, 0x0166
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	9e 0f       	add	r25, r30
     ada:	90 93 66 01 	sts	0x0166, r25
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ef 56       	subi	r30, 0x6F	; 111
     ae2:	fe 4f       	sbci	r31, 0xFE	; 254
     ae4:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
     ae6:	81 11       	cpse	r24, r1
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__vector_18+0x46>
    rcv_rdy=1; 
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 7c 01 	sts	0x017C, r24
    lcd_str_array[--i]  = (' ');     //clear the count field
     af0:	80 e2       	ldi	r24, 0x20	; 32
     af2:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
     af4:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
     af6:	82 83       	std	Z+2, r24	; 0x02
    i=0;  
     af8:	10 92 66 01 	sts	0x0166, r1
  }

}
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	0f 90       	pop	r0
     b06:	0b be       	out	0x3b, r0	; 59
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_21>:
/************************************ADC***********************/
ISR(ADC_vect){
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25

adcr=ADC;
     b20:	84 b1       	in	r24, 0x04	; 4
     b22:	95 b1       	in	r25, 0x05	; 5
     b24:	80 93 22 01 	sts	0x0122, r24
}
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_12>:

/***********************************TIMER 1 **********************/
ISR(TIMER1_COMPA_vect){
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	0b b6       	in	r0, 0x3b	; 59
     b42:	0f 92       	push	r0
     b44:	2f 93       	push	r18
     b46:	3f 93       	push	r19
     b48:	4f 93       	push	r20
     b4a:	5f 93       	push	r21
     b4c:	6f 93       	push	r22
     b4e:	7f 93       	push	r23
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	af 93       	push	r26
     b56:	bf 93       	push	r27
     b58:	ef 93       	push	r30
     b5a:	ff 93       	push	r31

PORTD ^=ALARM_PIN;
     b5c:	82 b3       	in	r24, 0x12	; 18
     b5e:	80 58       	subi	r24, 0x80	; 128
     b60:	82 bb       	out	0x12, r24	; 18
if(beat >= max_beat) {   //if we've played the note long enough
     b62:	20 91 89 01 	lds	r18, 0x0189
     b66:	30 91 8a 01 	lds	r19, 0x018A
     b6a:	80 91 81 01 	lds	r24, 0x0181
     b6e:	90 91 82 01 	lds	r25, 0x0182
     b72:	28 17       	cp	r18, r24
     b74:	39 07       	cpc	r19, r25
     b76:	58 f0       	brcs	.+22     	; 0xb8e <__vector_12+0x58>
    notes++;               //move on to the next note
     b78:	80 91 7d 01 	lds	r24, 0x017D
     b7c:	8f 5f       	subi	r24, 0xFF	; 255
     b7e:	80 93 7d 01 	sts	0x017D, r24
    play_song(song, notes);//and play it
     b82:	60 91 7d 01 	lds	r22, 0x017D
     b86:	80 91 7e 01 	lds	r24, 0x017E
     b8a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <play_song>
  }

}
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	0f 90       	pop	r0
     ba8:	0b be       	out	0x3b, r0	; 59
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_16>:
/**********************************************************TIMER 0 *************************************/
ISR(TIMER0_OVF_vect){
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	0b b6       	in	r0, 0x3b	; 59
     bc0:	0f 92       	push	r0
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31




/**********************************seconds*******************************/
counter++;
     bda:	80 91 65 01 	lds	r24, 0x0165
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	80 93 65 01 	sts	0x0165, r24
if(counter % 8 == 0) {
     be4:	98 2f       	mov	r25, r24
     be6:	97 70       	andi	r25, 0x07	; 7
     be8:	51 f4       	brne	.+20     	; 0xbfe <__vector_16+0x4a>
    //for note duration (64th notes) 
    beat++;
     bea:	20 91 89 01 	lds	r18, 0x0189
     bee:	30 91 8a 01 	lds	r19, 0x018A
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	30 93 8a 01 	sts	0x018A, r19
     bfa:	20 93 89 01 	sts	0x0189, r18
  }  

if((counter %128)==0) { 
     bfe:	98 2f       	mov	r25, r24
     c00:	9f 77       	andi	r25, 0x7F	; 127
     c02:	09 f4       	brne	.+2      	; 0xc06 <__vector_16+0x52>
     c04:	6f c0       	rjmp	.+222    	; 0xce4 <__vector_16+0x130>
sec++;
//ADCSRA |= (1<<ADSC);

}

if((counter %132)==0){
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	84 38       	cpi	r24, 0x84	; 132
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <__vector_16+0x5a>
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	2c e7       	ldi	r18, 0x7C	; 124
     c10:	92 9f       	mul	r25, r18
     c12:	80 0d       	add	r24, r0
     c14:	11 24       	eor	r1, r1
     c16:	81 11       	cpse	r24, r1
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__vector_16+0x68>
ADCSRA |= (1<<ADSC);
     c1a:	36 9a       	sbi	0x06, 6	; 6

}
/******************************************************************BUTTONS*****************************************************************************/
 /*enabling button to read */
  DDRA = 0x00; //make PORTA as an input
     c1c:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF; // pull ups
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	8b bb       	out	0x1b, r24	; 27
  PORTB=0x70;
     c22:	80 e7       	ldi	r24, 0x70	; 112
     c24:	88 bb       	out	0x18, r24	; 24
     c26:	89 ef       	ldi	r24, 0xF9	; 249
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <__vector_16+0x76>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <__vector_16+0x7c>
     c30:	00 00       	nop

  _delay_ms(1); 

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
     c32:	89 b3       	in	r24, 0x19	; 25
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	20 91 27 01 	lds	r18, 0x0127
     c3a:	30 91 28 01 	lds	r19, 0x0128
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	09 f4       	brne	.+2      	; 0xc46 <__vector_16+0x92>
     c44:	64 c0       	rjmp	.+200    	; 0xd0e <__vector_16+0x15a>
    if(nothing){
     c46:	80 91 26 01 	lds	r24, 0x0126
     c4a:	81 11       	cpse	r24, r1
     c4c:	64 c0       	rjmp	.+200    	; 0xd16 <__vector_16+0x162>
        
	Button();
        nothing = 0; 
    }
    else if(PINA == SavedPORTA_Value){ //do nothing
     c4e:	89 b3       	in	r24, 0x19	; 25
     c50:	20 91 63 01 	lds	r18, 0x0163
     c54:	30 91 64 01 	lds	r19, 0x0164
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	82 17       	cp	r24, r18
     c5c:	93 07       	cpc	r25, r19
     c5e:	39 f0       	breq	.+14     	; 0xc6e <__vector_16+0xba>
      
    }
    else if(PINA != SavedPORTA_Value){
     c60:	89 b3       	in	r24, 0x19	; 25
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	11 f0       	breq	.+4      	; 0xc6e <__vector_16+0xba>
   Button();
     c6a:	0e 94 17 04 	call	0x82e	; 0x82e <Button>
      
	
    }

    SavedPORTA_Value = PINA;
     c6e:	89 b3       	in	r24, 0x19	; 25
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 64 01 	sts	0x0164, r25
     c76:	80 93 63 01 	sts	0x0163, r24
  }
  else {
    nothing = 1;  
  }
 
	DDRA = 0xFF; 
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	8a bb       	out	0x1a, r24	; 26
	PORTB =0x70;  
     c7e:	80 e7       	ldi	r24, 0x70	; 112
     c80:	88 bb       	out	0x18, r24	; 24

/******************************************start the ISP part, where seding data to SPDR*************************************************************/

	

	PORTE =0x00;
     c82:	13 b8       	out	0x03, r1	; 3
	PORTE =0x80;  
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	83 b9       	out	0x03, r24	; 3
     c88:	83 ef       	ldi	r24, 0xF3	; 243
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <__vector_16+0xd8>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <__vector_16+0xde>
     c92:	00 00       	nop
 
	_delay_ms(2);


  SPDR = BARAGRAPH;		//SPDR SEND Data so it can receive, and vice versa 
     c94:	80 91 62 01 	lds	r24, 0x0162
     c98:	8f b9       	out	0x0f, r24	; 15
  spdr_to_encoder = SPDR;
     c9a:	8f b1       	in	r24, 0x0f	; 15
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 90 01 	sts	0x0190, r25
     ca2:	80 93 8f 01 	sts	0x018F, r24

  
  while (bit_is_clear(SPSR, SPIF)){};
     ca6:	77 9b       	sbis	0x0e, 7	; 14
     ca8:	fe cf       	rjmp	.-4      	; 0xca6 <__vector_16+0xf2>


			//low high
  PORTE =   0xC0 ;
     caa:	80 ec       	ldi	r24, 0xC0	; 192
     cac:	83 b9       	out	0x03, r24	; 3
  PORTE =   0x40;
     cae:	80 e4       	ldi	r24, 0x40	; 64
     cb0:	83 b9       	out	0x03, r24	; 3

 
  PORTB =  0x71;
     cb2:	81 e7       	ldi	r24, 0x71	; 113
     cb4:	88 bb       	out	0x18, r24	; 24
  PORTB = 0x70;
     cb6:	80 e7       	ldi	r24, 0x70	; 112
     cb8:	88 bb       	out	0x18, r24	; 24

/**************************************************END The ISP Part*********************************************************************************/
  
/****************************************************** ENCODER************************************************************/
  encoder();
     cba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <encoder>




}
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	7f 91       	pop	r23
     ccc:	6f 91       	pop	r22
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	0b be       	out	0x3b, r0	; 59
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti
    beat++;
  }  

if((counter %128)==0) { 
//OCR3A=vol_n;
get_128();
     ce4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <get_128>

PORTB=decoder_select[4];
     ce8:	80 91 04 01 	lds	r24, 0x0104
     cec:	88 bb       	out	0x18, r24	; 24
PORTA=0xFC;
     cee:	8c ef       	ldi	r24, 0xFC	; 252
     cf0:	8b bb       	out	0x1b, r24	; 27
     cf2:	87 ea       	ldi	r24, 0xA7	; 167
     cf4:	91 e6       	ldi	r25, 0x61	; 97
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <__vector_16+0x142>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <__vector_16+0x148>
     cfc:	00 00       	nop
_delay_ms(100);
sec++;
     cfe:	80 91 5d 01 	lds	r24, 0x015D
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	80 93 5d 01 	sts	0x015D, r24
     d08:	80 91 65 01 	lds	r24, 0x0165
     d0c:	7c cf       	rjmp	.-264    	; 0xc06 <__vector_16+0x52>
    }

    SavedPORTA_Value = PINA;
  }
  else {
    nothing = 1;  
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 26 01 	sts	0x0126, r24
     d14:	b2 cf       	rjmp	.-156    	; 0xc7a <__vector_16+0xc6>

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
    if(nothing){
        
	Button();
     d16:	0e 94 17 04 	call	0x82e	; 0x82e <Button>
        nothing = 0; 
     d1a:	10 92 26 01 	sts	0x0126, r1
     d1e:	a7 cf       	rjmp	.-178    	; 0xc6e <__vector_16+0xba>

00000d20 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d20:	5d 9b       	sbis	0x0b, 5	; 11
     d22:	fe cf       	rjmp	.-4      	; 0xd20 <uart_putc>
    UDR0 = data;    // Send data byte
     d24:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d26:	5d 9b       	sbis	0x0b, 5	; 11
     d28:	fe cf       	rjmp	.-4      	; 0xd26 <uart_putc+0x6>
}
     d2a:	08 95       	ret

00000d2c <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d2c:	90 91 9b 00 	lds	r25, 0x009B
     d30:	95 ff       	sbrs	r25, 5
     d32:	fc cf       	rjmp	.-8      	; 0xd2c <uart1_putc>
    UDR1 = data;    // Send data byte
     d34:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d38:	80 91 9b 00 	lds	r24, 0x009B
     d3c:	85 ff       	sbrs	r24, 5
     d3e:	fc cf       	rjmp	.-8      	; 0xd38 <uart1_putc+0xc>
}
     d40:	08 95       	ret

00000d42 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
     d42:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d44:	90 81       	ld	r25, Z
     d46:	99 23       	and	r25, r25
     d48:	49 f0       	breq	.+18     	; 0xd5c <uart_puts+0x1a>
     d4a:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d4c:	5d 9b       	sbis	0x0b, 5	; 11
     d4e:	fe cf       	rjmp	.-4      	; 0xd4c <uart_puts+0xa>
    UDR0 = data;    // Send data byte
     d50:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d52:	5d 9b       	sbis	0x0b, 5	; 11
     d54:	fe cf       	rjmp	.-4      	; 0xd52 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d56:	91 91       	ld	r25, Z+
     d58:	91 11       	cpse	r25, r1
     d5a:	f8 cf       	rjmp	.-16     	; 0xd4c <uart_puts+0xa>
     d5c:	08 95       	ret

00000d5e <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d5e:	fc 01       	movw	r30, r24
     d60:	20 81       	ld	r18, Z
     d62:	22 23       	and	r18, r18
     d64:	71 f0       	breq	.+28     	; 0xd82 <uart1_puts+0x24>
     d66:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d68:	90 91 9b 00 	lds	r25, 0x009B
     d6c:	95 ff       	sbrs	r25, 5
     d6e:	fc cf       	rjmp	.-8      	; 0xd68 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
     d70:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d74:	90 91 9b 00 	lds	r25, 0x009B
     d78:	95 ff       	sbrs	r25, 5
     d7a:	fc cf       	rjmp	.-8      	; 0xd74 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d7c:	21 91       	ld	r18, Z+
     d7e:	21 11       	cpse	r18, r1
     d80:	f3 cf       	rjmp	.-26     	; 0xd68 <uart1_puts+0xa>
     d82:	08 95       	ret

00000d84 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
     d84:	9c 01       	movw	r18, r24
     d86:	fc 01       	movw	r30, r24
     d88:	44 91       	lpm	r20, Z
     d8a:	44 23       	and	r20, r20
     d8c:	69 f0       	breq	.+26     	; 0xda8 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	f9 01       	movw	r30, r18
     d92:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d94:	5d 9b       	sbis	0x0b, 5	; 11
     d96:	fe cf       	rjmp	.-4      	; 0xd94 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
     d98:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d9a:	5d 9b       	sbis	0x0b, 5	; 11
     d9c:	fe cf       	rjmp	.-4      	; 0xd9a <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
     d9e:	9c 01       	movw	r18, r24
     da0:	fc 01       	movw	r30, r24
     da2:	44 91       	lpm	r20, Z
     da4:	41 11       	cpse	r20, r1
     da6:	f3 cf       	rjmp	.-26     	; 0xd8e <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
     da8:	08 95       	ret

00000daa <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
     daa:	8a b1       	in	r24, 0x0a	; 10
     dac:	88 69       	ori	r24, 0x98	; 152
     dae:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     db0:	e5 e9       	ldi	r30, 0x95	; 149
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	86 60       	ori	r24, 0x06	; 6
     db8:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
     dba:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
     dbe:	87 e6       	ldi	r24, 0x67	; 103
     dc0:	89 b9       	out	0x09, r24	; 9
     dc2:	08 95       	ret

00000dc4 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
     dc4:	ea e9       	ldi	r30, 0x9A	; 154
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	88 61       	ori	r24, 0x18	; 24
     dcc:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
     dce:	ed e9       	ldi	r30, 0x9D	; 157
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	86 60       	ori	r24, 0x06	; 6
     dd6:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
     dd8:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
     ddc:	87 e6       	ldi	r24, 0x67	; 103
     dde:	80 93 99 00 	sts	0x0099, r24
     de2:	08 95       	ret

00000de4 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	9e e3       	ldi	r25, 0x3E	; 62
     de8:	02 c0       	rjmp	.+4      	; 0xdee <uart_getc+0xa>
     dea:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     dec:	21 f0       	breq	.+8      	; 0xdf6 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     dee:	5f 9b       	sbis	0x0b, 7	; 11
     df0:	fc cf       	rjmp	.-8      	; 0xdea <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
     df2:	8c b1       	in	r24, 0x0c	; 12
     df4:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
     df6:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
     df8:	08 95       	ret

00000dfa <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	9e e3       	ldi	r25, 0x3E	; 62
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <uart1_getc+0xa>
     e00:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     e02:	39 f0       	breq	.+14     	; 0xe12 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
     e04:	20 91 9b 00 	lds	r18, 0x009B
     e08:	27 ff       	sbrs	r18, 7
     e0a:	fa cf       	rjmp	.-12     	; 0xe00 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
     e0c:	80 91 9c 00 	lds	r24, 0x009C
     e10:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
     e12:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
     e14:	08 95       	ret

00000e16 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	81 11       	cpse	r24, r1
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <send_lcd+0x8>
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e20:	77 9b       	sbis	0x0e, 7	; 14
     e22:	fe cf       	rjmp	.-4      	; 0xe20 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     e24:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e26:	77 9b       	sbis	0x0e, 7	; 14
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e2a:	80 91 62 00 	lds	r24, 0x0062
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	80 93 62 00 	sts	0x0062, r24
     e34:	80 91 62 00 	lds	r24, 0x0062
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	80 93 62 00 	sts	0x0062, r24
     e3e:	08 95       	ret

00000e40 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
     e40:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     e42:	c0 91 67 01 	lds	r28, 0x0167
     e46:	8c 0f       	add	r24, r28
     e48:	91 1d       	adc	r25, r1
     e4a:	fc 01       	movw	r30, r24
     e4c:	60 81       	ld	r22, Z
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
 i++;   //increment to next character
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	8c 0f       	add	r24, r28
     e58:	80 93 67 01 	sts	0x0167, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     e5c:	80 31       	cpi	r24, 0x10	; 16
     e5e:	89 f0       	breq	.+34     	; 0xe82 <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     e60:	80 32       	cpi	r24, 0x20	; 32
     e62:	11 f0       	breq	.+4      	; 0xe68 <refresh_lcd+0x28>

 return i;
}//refresh_lcd
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e68:	85 ed       	ldi	r24, 0xD5	; 213
     e6a:	8a 95       	dec	r24
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <refresh_lcd+0x2a>
     e6e:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     e70:	60 e8       	ldi	r22, 0x80	; 128
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     e78:	10 92 67 01 	sts	0x0167, r1
     e7c:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret
     e82:	f5 ed       	ldi	r31, 0xD5	; 213
     e84:	fa 95       	dec	r31
     e86:	f1 f7       	brne	.-4      	; 0xe84 <refresh_lcd+0x44>
     e88:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     e8a:	60 ec       	ldi	r22, 0xC0	; 192
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
     e92:	80 91 67 01 	lds	r24, 0x0167
     e96:	e4 cf       	rjmp	.-56     	; 0xe60 <refresh_lcd+0x20>

00000e98 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     eac:	66 0f       	add	r22, r22
     eae:	66 0f       	add	r22, r22
     eb0:	66 0f       	add	r22, r22
     eb2:	60 5c       	subi	r22, 0xC0	; 192
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	99 83       	std	Y+1, r25	; 0x01
     eb8:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
     ebc:	85 ed       	ldi	r24, 0xD5	; 213
     ebe:	8a 95       	dec	r24
     ec0:	f1 f7       	brne	.-4      	; 0xebe <set_custom_character+0x26>
     ec2:	00 00       	nop
     ec4:	e1 2e       	mov	r14, r17
     ec6:	99 81       	ldd	r25, Y+1	; 0x01
     ec8:	f9 2e       	mov	r15, r25
     eca:	87 01       	movw	r16, r14
     ecc:	08 5f       	subi	r16, 0xF8	; 248
     ece:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     ed0:	f7 01       	movw	r30, r14
     ed2:	61 91       	ld	r22, Z+
     ed4:	7f 01       	movw	r14, r30
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
     edc:	f5 ed       	ldi	r31, 0xD5	; 213
     ede:	fa 95       	dec	r31
     ee0:	f1 f7       	brne	.-4      	; 0xede <set_custom_character+0x46>
     ee2:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     ee4:	e0 16       	cp	r14, r16
     ee6:	f1 06       	cpc	r15, r17
     ee8:	99 f7       	brne	.-26     	; 0xed0 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     efa:	90 e4       	ldi	r25, 0x40	; 64
     efc:	89 9f       	mul	r24, r25
     efe:	60 0d       	add	r22, r0
     f00:	11 24       	eor	r1, r1
     f02:	60 5c       	subi	r22, 0xC0	; 192
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00000f0a <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     f0a:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     f0c:	88 23       	and	r24, r24
     f0e:	b9 f1       	breq	.+110    	; 0xf7e <uint2lcd+0x74>
     f10:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     f12:	84 36       	cpi	r24, 0x64	; 100
     f14:	98 f4       	brcc	.+38     	; 0xf3c <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     f16:	8a 30       	cpi	r24, 0x0A	; 10
     f18:	d8 f4       	brcc	.+54     	; 0xf50 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     f1a:	8d ec       	ldi	r24, 0xCD	; 205
     f1c:	c8 9f       	mul	r28, r24
     f1e:	81 2d       	mov	r24, r1
     f20:	11 24       	eor	r1, r1
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	86 95       	lsr	r24
     f28:	6c 2f       	mov	r22, r28
     f2a:	2a e0       	ldi	r18, 0x0A	; 10
     f2c:	82 9f       	mul	r24, r18
     f2e:	60 19       	sub	r22, r0
     f30:	11 24       	eor	r1, r1
     f32:	60 5d       	subi	r22, 0xD0	; 208
     f34:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     f36:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     f38:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     f3c:	69 e2       	ldi	r22, 0x29	; 41
     f3e:	86 9f       	mul	r24, r22
     f40:	61 2d       	mov	r22, r1
     f42:	11 24       	eor	r1, r1
     f44:	62 95       	swap	r22
     f46:	6f 70       	andi	r22, 0x0F	; 15
     f48:	60 5d       	subi	r22, 0xD0	; 208
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     f50:	89 e2       	ldi	r24, 0x29	; 41
     f52:	c8 9f       	mul	r28, r24
     f54:	81 2d       	mov	r24, r1
     f56:	11 24       	eor	r1, r1
     f58:	82 95       	swap	r24
     f5a:	8f 70       	andi	r24, 0x0F	; 15
     f5c:	9c 2f       	mov	r25, r28
     f5e:	24 e6       	ldi	r18, 0x64	; 100
     f60:	82 9f       	mul	r24, r18
     f62:	90 19       	sub	r25, r0
     f64:	11 24       	eor	r1, r1
     f66:	6d ec       	ldi	r22, 0xCD	; 205
     f68:	96 9f       	mul	r25, r22
     f6a:	61 2d       	mov	r22, r1
     f6c:	11 24       	eor	r1, r1
     f6e:	66 95       	lsr	r22
     f70:	66 95       	lsr	r22
     f72:	66 95       	lsr	r22
     f74:	60 5d       	subi	r22, 0xD0	; 208
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
     f7c:	ce cf       	rjmp	.-100    	; 0xf1a <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     f7e:	60 e3       	ldi	r22, 0x30	; 48
     f80:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     f82:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     f84:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00000f88 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     f88:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     f8a:	87 fd       	sbrc	r24, 7
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     f8e:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     f90:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <uint2lcd>
     f94:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     f96:	6d e2       	ldi	r22, 0x2D	; 45
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
     f9e:	85 ed       	ldi	r24, 0xD5	; 213
     fa0:	8a 95       	dec	r24
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <int2lcd+0x18>
     fa4:	00 00       	nop
     fa6:	8c 2f       	mov	r24, r28
     fa8:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     faa:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     fac:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <uint2lcd>

00000fb0 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     fb0:	6e e0       	ldi	r22, 0x0E	; 14
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00000fb8 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     fb8:	6c e0       	ldi	r22, 0x0C	; 12
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00000fc0 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     fc0:	6e e1       	ldi	r22, 0x1E	; 30
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00000fc8 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     fc8:	68 e1       	ldi	r22, 0x18	; 24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00000fd0 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fd0:	e2 e6       	ldi	r30, 0x62	; 98
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 60       	ori	r24, 0x08	; 8
     fd8:	80 83       	st	Z, r24
     fda:	80 81       	ld	r24, Z
     fdc:	87 7f       	andi	r24, 0xF7	; 247
     fde:	80 83       	st	Z, r24
     fe0:	08 95       	ret

00000fe2 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
     fea:	8f e1       	ldi	r24, 0x1F	; 31
     fec:	9c e1       	ldi	r25, 0x1C	; 28
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <clear_display+0xc>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <clear_display+0x12>
     ff4:	00 00       	nop
     ff6:	08 95       	ret

00000ff8 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    1000:	8f e6       	ldi	r24, 0x6F	; 111
    1002:	97 e1       	ldi	r25, 0x17	; 23
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <cursor_home+0xc>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <cursor_home+0x12>
    100a:	00 00       	nop
    100c:	08 95       	ret

0000100e <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    100e:	60 ec       	ldi	r22, 0xC0	; 192
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00001016 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1016:	60 e8       	ldi	r22, 0x80	; 128
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

0000101e <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    101e:	cf 93       	push	r28
    1020:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    1022:	60 e2       	ldi	r22, 0x20	; 32
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    102a:	85 ed       	ldi	r24, 0xD5	; 213
    102c:	8a 95       	dec	r24
    102e:	f1 f7       	brne	.-4      	; 0x102c <fill_spaces+0xe>
    1030:	00 00       	nop
    1032:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1034:	b1 f7       	brne	.-20     	; 0x1022 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    103a:	68 2f       	mov	r22, r24
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <send_lcd>

00001042 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	c0 e0       	ldi	r28, 0x00	; 0
    1050:	f8 01       	movw	r30, r16
    1052:	e4 0f       	add	r30, r20
    1054:	f5 1f       	adc	r31, r21
    1056:	60 81       	ld	r22, Z
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    105e:	85 ed       	ldi	r24, 0xD5	; 213
    1060:	8a 95       	dec	r24
    1062:	f1 f7       	brne	.-4      	; 0x1060 <string2lcd+0x1e>
    1064:	00 00       	nop
    1066:	cf 5f       	subi	r28, 0xFF	; 255
    1068:	4c 2f       	mov	r20, r28
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	f8 01       	movw	r30, r16
    106e:	01 90       	ld	r0, Z+
    1070:	00 20       	and	r0, r0
    1072:	e9 f7       	brne	.-6      	; 0x106e <string2lcd+0x2c>
    1074:	9f 01       	movw	r18, r30
    1076:	20 1b       	sub	r18, r16
    1078:	31 0b       	sbc	r19, r17
    107a:	22 50       	subi	r18, 0x02	; 2
    107c:	31 09       	sbc	r19, r1
    107e:	24 17       	cp	r18, r20
    1080:	35 07       	cpc	r19, r21
    1082:	30 f7       	brcc	.-52     	; 0x1050 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	99 ef       	ldi	r25, 0xF9	; 249
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <lcd_init+0x4>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <lcd_init+0xa>
    1096:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    109e:	60 e3       	ldi	r22, 0x30	; 48
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    10a6:	8f e5       	ldi	r24, 0x5F	; 95
    10a8:	9d e6       	ldi	r25, 0x6D	; 109
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <lcd_init+0x1e>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <lcd_init+0x24>
    10b0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    10b2:	60 e3       	ldi	r22, 0x30	; 48
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    10ba:	8f e5       	ldi	r24, 0x5F	; 95
    10bc:	9d e6       	ldi	r25, 0x6D	; 109
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <lcd_init+0x32>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <lcd_init+0x38>
    10c4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    10c6:	60 e3       	ldi	r22, 0x30	; 48
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    10ce:	8f e5       	ldi	r24, 0x5F	; 95
    10d0:	9d e6       	ldi	r25, 0x6D	; 109
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <lcd_init+0x46>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <lcd_init+0x4c>
    10d8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    10da:	68 e3       	ldi	r22, 0x38	; 56
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    10e2:	8f e1       	ldi	r24, 0x1F	; 31
    10e4:	9e e4       	ldi	r25, 0x4E	; 78
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <lcd_init+0x5a>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <lcd_init+0x60>
    10ec:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    10ee:	68 e0       	ldi	r22, 0x08	; 8
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    10f6:	8f e1       	ldi	r24, 0x1F	; 31
    10f8:	9e e4       	ldi	r25, 0x4E	; 78
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <lcd_init+0x6e>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <__stack+0x1>
    1100:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    110a:	8f e1       	ldi	r24, 0x1F	; 31
    110c:	9e e4       	ldi	r25, 0x4E	; 78
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <__stack+0xf>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <__stack+0x15>
    1114:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    1116:	66 e0       	ldi	r22, 0x06	; 6
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    111e:	8f e1       	ldi	r24, 0x1F	; 31
    1120:	9e e4       	ldi	r25, 0x4E	; 78
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <__stack+0x23>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <__stack+0x29>
    1128:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    112a:	6c e0       	ldi	r22, 0x0C	; 12
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    1132:	8f e1       	ldi	r24, 0x1F	; 31
    1134:	9e e4       	ldi	r25, 0x4E	; 78
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <__stack+0x37>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <__stack+0x3d>
    113c:	00 00       	nop
    113e:	08 95       	ret

00001140 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	69 97       	sbiw	r28, 0x19	; 25
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	f4 2e       	mov	r15, r20
    116a:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    116c:	00 23       	and	r16, r16
    116e:	59 f0       	breq	.+22     	; 0x1186 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    1170:	4b 01       	movw	r8, r22
    1172:	5c 01       	movw	r10, r24
    1174:	88 24       	eor	r8, r8
    1176:	b7 fc       	sbrc	r11, 7
    1178:	83 94       	inc	r8
    117a:	99 24       	eor	r9, r9
    117c:	aa 24       	eor	r10, r10
    117e:	bb 24       	eor	r11, r11
    1180:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    1182:	97 fd       	sbrc	r25, 7
    1184:	8f c0       	rjmp	.+286    	; 0x12a4 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1186:	11 23       	and	r17, r17
    1188:	09 f4       	brne	.+2      	; 0x118c <lcd_int32+0x4c>
    118a:	84 c0       	rjmp	.+264    	; 0x1294 <lcd_int32+0x154>
    118c:	9e 01       	movw	r18, r28
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	69 01       	movw	r12, r18
    1194:	59 01       	movw	r10, r18
    1196:	88 24       	eor	r8, r8
    1198:	8a 94       	dec	r8
    119a:	81 0e       	add	r8, r17
    119c:	91 2c       	mov	r9, r1
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	83 1a       	sub	r8, r19
    11a2:	93 0a       	sbc	r9, r19
    11a4:	8c 0c       	add	r8, r12
    11a6:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    11a8:	2a e0       	ldi	r18, 0x0A	; 10
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__divmodsi4>
    11b4:	e6 2f       	mov	r30, r22
    11b6:	2a 8b       	std	Y+18, r18	; 0x12
    11b8:	3b 8b       	std	Y+19, r19	; 0x13
    11ba:	4c 8b       	std	Y+20, r20	; 0x14
    11bc:	5d 8b       	std	Y+21, r21	; 0x15
    11be:	6a 89       	ldd	r22, Y+18	; 0x12
    11c0:	7b 89       	ldd	r23, Y+19	; 0x13
    11c2:	8c 89       	ldd	r24, Y+20	; 0x14
    11c4:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    11c6:	20 e3       	ldi	r18, 0x30	; 48
    11c8:	2e 0f       	add	r18, r30
    11ca:	f5 01       	movw	r30, r10
    11cc:	21 93       	st	Z+, r18
    11ce:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    11d0:	e8 15       	cp	r30, r8
    11d2:	f9 05       	cpc	r31, r9
    11d4:	49 f7       	brne	.-46     	; 0x11a8 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    11d6:	bb 24       	eor	r11, r11
    11d8:	b3 94       	inc	r11
    11da:	b1 0e       	add	r11, r17
    11dc:	f6 01       	movw	r30, r12
    11de:	e1 0f       	add	r30, r17
    11e0:	f1 1d       	adc	r31, r1
    11e2:	2e e2       	ldi	r18, 0x2E	; 46
    11e4:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    11e6:	2a e0       	ldi	r18, 0x0A	; 10
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__divmodsi4>
    11f2:	e6 2f       	mov	r30, r22
    11f4:	2a 8b       	std	Y+18, r18	; 0x12
    11f6:	3b 8b       	std	Y+19, r19	; 0x13
    11f8:	4c 8b       	std	Y+20, r20	; 0x14
    11fa:	5d 8b       	std	Y+21, r21	; 0x15
    11fc:	6e 8b       	std	Y+22, r22	; 0x16
    11fe:	7f 8b       	std	Y+23, r23	; 0x17
    1200:	88 8f       	std	Y+24, r24	; 0x18
    1202:	99 8f       	std	Y+25, r25	; 0x19
    1204:	6a 89       	ldd	r22, Y+18	; 0x12
    1206:	7b 89       	ldd	r23, Y+19	; 0x13
    1208:	8c 89       	ldd	r24, Y+20	; 0x14
    120a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    120c:	11 e0       	ldi	r17, 0x01	; 1
    120e:	1b 0d       	add	r17, r11
    1210:	d6 01       	movw	r26, r12
    1212:	ab 0d       	add	r26, r11
    1214:	b1 1d       	adc	r27, r1
    1216:	e0 5d       	subi	r30, 0xD0	; 208
    1218:	ec 93       	st	X, r30
    121a:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    121c:	61 15       	cp	r22, r1
    121e:	71 05       	cpc	r23, r1
    1220:	81 05       	cpc	r24, r1
    1222:	91 05       	cpc	r25, r1
    1224:	01 f7       	brne	.-64     	; 0x11e6 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1226:	ff 20       	and	r15, r15
    1228:	61 f0       	breq	.+24     	; 0x1242 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    122a:	e1 10       	cpse	r14, r1
    122c:	39 c0       	rjmp	.+114    	; 0x12a0 <lcd_int32+0x160>
    122e:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1230:	1f 15       	cp	r17, r15
    1232:	38 f4       	brcc	.+14     	; 0x1242 <lcd_int32+0x102>
    1234:	f6 01       	movw	r30, r12
    1236:	e1 0f       	add	r30, r17
    1238:	f1 1d       	adc	r31, r1
    123a:	80 83       	st	Z, r24
    123c:	1f 5f       	subi	r17, 0xFF	; 255
    123e:	1f 11       	cpse	r17, r15
    1240:	f9 cf       	rjmp	.-14     	; 0x1234 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1242:	00 23       	and	r16, r16
    1244:	31 f0       	breq	.+12     	; 0x1252 <lcd_int32+0x112>
    1246:	f6 01       	movw	r30, r12
    1248:	e1 0f       	add	r30, r17
    124a:	f1 1d       	adc	r31, r1
    124c:	8d e2       	ldi	r24, 0x2D	; 45
    124e:	80 83       	st	Z, r24
    1250:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1252:	11 50       	subi	r17, 0x01	; 1
    1254:	f6 01       	movw	r30, r12
    1256:	e1 0f       	add	r30, r17
    1258:	f1 1d       	adc	r31, r1
    125a:	60 81       	ld	r22, Z
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1262:	35 ed       	ldi	r19, 0xD5	; 213
    1264:	3a 95       	dec	r19
    1266:	f1 f7       	brne	.-4      	; 0x1264 <lcd_int32+0x124>
    1268:	00 00       	nop
    126a:	11 11       	cpse	r17, r1
    126c:	f2 cf       	rjmp	.-28     	; 0x1252 <lcd_int32+0x112>

}
    126e:	69 96       	adiw	r28, 0x19	; 25
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	9f 90       	pop	r9
    1290:	8f 90       	pop	r8
    1292:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1294:	b1 2c       	mov	r11, r1
    1296:	9e 01       	movw	r18, r28
    1298:	2f 5f       	subi	r18, 0xFF	; 255
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	69 01       	movw	r12, r18
    129e:	a3 cf       	rjmp	.-186    	; 0x11e6 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    12a0:	80 e3       	ldi	r24, 0x30	; 48
    12a2:	c6 cf       	rjmp	.-116    	; 0x1230 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	69 cf       	rjmp	.-302    	; 0x1186 <lcd_int32+0x46>

000012b4 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    12b4:	5f 92       	push	r5
    12b6:	6f 92       	push	r6
    12b8:	7f 92       	push	r7
    12ba:	8f 92       	push	r8
    12bc:	9f 92       	push	r9
    12be:	af 92       	push	r10
    12c0:	bf 92       	push	r11
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	61 97       	sbiw	r28, 0x11	; 17
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	a6 2e       	mov	r10, r22
    12e4:	54 2e       	mov	r5, r20
    12e6:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    12e8:	79 2e       	mov	r7, r25
    12ea:	77 1c       	adc	r7, r7
    12ec:	77 24       	eor	r7, r7
    12ee:	77 1c       	adc	r7, r7
    12f0:	b7 2c       	mov	r11, r7
    12f2:	c7 2c       	mov	r12, r7
    12f4:	d1 2c       	mov	r13, r1
    12f6:	ee 27       	eor	r30, r30
    12f8:	ff 27       	eor	r31, r31
    12fa:	ec 19       	sub	r30, r12
    12fc:	fd 09       	sbc	r31, r13
    12fe:	8e 27       	eor	r24, r30
    1300:	9f 27       	eor	r25, r31
    1302:	fc 01       	movw	r30, r24
    1304:	ec 0d       	add	r30, r12
    1306:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1308:	44 23       	and	r20, r20
    130a:	09 f4       	brne	.+2      	; 0x130e <lcd_int16+0x5a>
    130c:	8e c0       	rjmp	.+284    	; 0x142a <lcd_int16+0x176>
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	7c 01       	movw	r14, r24
    1314:	8c 01       	movw	r16, r24
    1316:	88 24       	eor	r8, r8
    1318:	8a 94       	dec	r8
    131a:	84 0e       	add	r8, r20
    131c:	91 2c       	mov	r9, r1
    131e:	9f ef       	ldi	r25, 0xFF	; 255
    1320:	89 1a       	sub	r8, r25
    1322:	99 0a       	sbc	r9, r25
    1324:	8e 0c       	add	r8, r14
    1326:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1328:	6a e0       	ldi	r22, 0x0A	; 10
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	cf 01       	movw	r24, r30
    132e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__divmodhi4>
    1332:	26 2f       	mov	r18, r22
    1334:	e2 2f       	mov	r30, r18
    1336:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    1338:	80 5d       	subi	r24, 0xD0	; 208
    133a:	d8 01       	movw	r26, r16
    133c:	8d 93       	st	X+, r24
    133e:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1340:	a8 15       	cp	r26, r8
    1342:	b9 05       	cpc	r27, r9
    1344:	89 f7       	brne	.-30     	; 0x1328 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1346:	01 e0       	ldi	r16, 0x01	; 1
    1348:	05 0d       	add	r16, r5
    134a:	d7 01       	movw	r26, r14
    134c:	a5 0d       	add	r26, r5
    134e:	b1 1d       	adc	r27, r1
    1350:	8e e2       	ldi	r24, 0x2E	; 46
    1352:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1354:	6a e0       	ldi	r22, 0x0A	; 10
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	cf 01       	movw	r24, r30
    135a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__divmodhi4>
    135e:	26 2f       	mov	r18, r22
    1360:	e2 2f       	mov	r30, r18
    1362:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    1364:	11 e0       	ldi	r17, 0x01	; 1
    1366:	10 0f       	add	r17, r16
    1368:	d7 01       	movw	r26, r14
    136a:	a0 0f       	add	r26, r16
    136c:	b1 1d       	adc	r27, r1
    136e:	80 5d       	subi	r24, 0xD0	; 208
    1370:	8c 93       	st	X, r24
    1372:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    1374:	30 97       	sbiw	r30, 0x00	; 0
    1376:	71 f7       	brne	.-36     	; 0x1354 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1378:	61 10       	cpse	r6, r1
    137a:	15 c0       	rjmp	.+42     	; 0x13a6 <lcd_int16+0xf2>
    137c:	77 20       	and	r7, r7
    137e:	39 f0       	breq	.+14     	; 0x138e <lcd_int16+0xda>
        {
                sline[i++] = '-';
    1380:	11 e0       	ldi	r17, 0x01	; 1
    1382:	10 0f       	add	r17, r16
    1384:	f7 01       	movw	r30, r14
    1386:	e0 0f       	add	r30, r16
    1388:	f1 1d       	adc	r31, r1
    138a:	8d e2       	ldi	r24, 0x2D	; 45
    138c:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    138e:	aa 20       	and	r10, r10
    1390:	41 f1       	breq	.+80     	; 0x13e2 <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1392:	81 2f       	mov	r24, r17
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	2a 2d       	mov	r18, r10
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	82 17       	cp	r24, r18
    139c:	93 07       	cpc	r25, r19
    139e:	0c f5       	brge	.+66     	; 0x13e2 <lcd_int16+0x12e>
    13a0:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	0c c0       	rjmp	.+24     	; 0x13be <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    13a6:	aa 20       	and	r10, r10
    13a8:	a1 f0       	breq	.+40     	; 0x13d2 <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    13aa:	81 2f       	mov	r24, r17
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	2a 2d       	mov	r18, r10
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	2c 19       	sub	r18, r12
    13b4:	3d 09       	sbc	r19, r13
    13b6:	82 17       	cp	r24, r18
    13b8:	93 07       	cpc	r25, r19
    13ba:	5c f4       	brge	.+22     	; 0x13d2 <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    13bc:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    13be:	1f 5f       	subi	r17, 0xFF	; 255
    13c0:	f7 01       	movw	r30, r14
    13c2:	e8 0f       	add	r30, r24
    13c4:	f9 1f       	adc	r31, r25
    13c6:	40 83       	st	Z, r20
    13c8:	81 2f       	mov	r24, r17
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	82 17       	cp	r24, r18
    13ce:	93 07       	cpc	r25, r19
    13d0:	b4 f3       	brlt	.-20     	; 0x13be <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    13d2:	bb 20       	and	r11, r11
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <lcd_int16+0x12e>
    13d6:	f7 01       	movw	r30, r14
    13d8:	e1 0f       	add	r30, r17
    13da:	f1 1d       	adc	r31, r1
    13dc:	8d e2       	ldi	r24, 0x2D	; 45
    13de:	80 83       	st	Z, r24
    13e0:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    13e2:	11 50       	subi	r17, 0x01	; 1
    13e4:	f7 01       	movw	r30, r14
    13e6:	e1 0f       	add	r30, r17
    13e8:	f1 1d       	adc	r31, r1
    13ea:	60 81       	ld	r22, Z
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	0e 94 0b 07 	call	0xe16	; 0xe16 <send_lcd>
    13f2:	95 ed       	ldi	r25, 0xD5	; 213
    13f4:	9a 95       	dec	r25
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <lcd_int16+0x140>
    13f8:	00 00       	nop
    13fa:	11 11       	cpse	r17, r1
    13fc:	f2 cf       	rjmp	.-28     	; 0x13e2 <lcd_int16+0x12e>
}
    13fe:	61 96       	adiw	r28, 0x11	; 17
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	bf 90       	pop	r11
    141c:	af 90       	pop	r10
    141e:	9f 90       	pop	r9
    1420:	8f 90       	pop	r8
    1422:	7f 90       	pop	r7
    1424:	6f 90       	pop	r6
    1426:	5f 90       	pop	r5
    1428:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    142a:	00 e0       	ldi	r16, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	7c 01       	movw	r14, r24
    1432:	90 cf       	rjmp	.-224    	; 0x1354 <lcd_int16+0xa0>

00001434 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	0b b6       	in	r0, 0x3b	; 59
    1440:	0f 92       	push	r0
    1442:	2f 93       	push	r18
    1444:	3f 93       	push	r19
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1452:	e0 91 71 00 	lds	r30, 0x0071
    1456:	8e 2f       	mov	r24, r30
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	fc 01       	movw	r30, r24
    145c:	38 97       	sbiw	r30, 0x08	; 8
    145e:	e1 35       	cpi	r30, 0x51	; 81
    1460:	f1 05       	cpc	r31, r1
    1462:	b0 f0       	brcs	.+44     	; 0x1490 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1464:	80 91 71 00 	lds	r24, 0x0071
    1468:	80 93 8a 02 	sts	0x028A, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    146c:	84 e0       	ldi	r24, 0x04	; 4
    146e:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0b be       	out	0x3b, r0	; 59
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0f 90       	pop	r0
    148c:	1f 90       	pop	r1
    148e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1490:	ea 5b       	subi	r30, 0xBA	; 186
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1498:	80 91 68 01 	lds	r24, 0x0168
    149c:	e0 91 8b 02 	lds	r30, 0x028B
    14a0:	f0 91 8c 02 	lds	r31, 0x028C
    14a4:	e8 0f       	add	r30, r24
    14a6:	f1 1d       	adc	r31, r1
    14a8:	80 91 73 00 	lds	r24, 0x0073
    14ac:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    14ae:	84 e9       	ldi	r24, 0x94	; 148
    14b0:	80 93 74 00 	sts	0x0074, r24
      break;      
    14b4:	de cf       	rjmp	.-68     	; 0x1472 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    14b6:	80 91 8d 02 	lds	r24, 0x028D
    14ba:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    14be:	10 92 68 01 	sts	0x0168, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    14c2:	85 e8       	ldi	r24, 0x85	; 133
    14c4:	80 93 74 00 	sts	0x0074, r24
      break;
    14c8:	d4 cf       	rjmp	.-88     	; 0x1472 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    14ca:	80 91 68 01 	lds	r24, 0x0168
    14ce:	90 91 8e 02 	lds	r25, 0x028E
    14d2:	89 17       	cp	r24, r25
    14d4:	60 f7       	brcc	.-40     	; 0x14ae <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    14d6:	e0 91 8b 02 	lds	r30, 0x028B
    14da:	f0 91 8c 02 	lds	r31, 0x028C
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	98 0f       	add	r25, r24
    14e2:	90 93 68 01 	sts	0x0168, r25
    14e6:	e8 0f       	add	r30, r24
    14e8:	f1 1d       	adc	r31, r1
    14ea:	80 81       	ld	r24, Z
    14ec:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    14f0:	85 e8       	ldi	r24, 0x85	; 133
    14f2:	80 93 74 00 	sts	0x0074, r24
    14f6:	bd cf       	rjmp	.-134    	; 0x1472 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    14f8:	85 ea       	ldi	r24, 0xA5	; 165
    14fa:	80 93 74 00 	sts	0x0074, r24
      break;
    14fe:	b9 cf       	rjmp	.-142    	; 0x1472 <__vector_33+0x3e>
    1500:	20 91 68 01 	lds	r18, 0x0168
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1504:	80 91 8e 02 	lds	r24, 0x028E
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	28 17       	cp	r18, r24
    1510:	39 07       	cpc	r19, r25
    1512:	dc f4       	brge	.+54     	; 0x154a <__vector_33+0x116>
    1514:	85 ec       	ldi	r24, 0xC5	; 197
    1516:	80 93 74 00 	sts	0x0074, r24
    151a:	ab cf       	rjmp	.-170    	; 0x1472 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    151c:	e0 91 8b 02 	lds	r30, 0x028B
    1520:	f0 91 8c 02 	lds	r31, 0x028C
    1524:	80 91 68 01 	lds	r24, 0x0168
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	28 0f       	add	r18, r24
    152c:	20 93 68 01 	sts	0x0168, r18
    1530:	e8 0f       	add	r30, r24
    1532:	f1 1d       	adc	r31, r1
    1534:	80 91 73 00 	lds	r24, 0x0073
    1538:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    153a:	80 91 8e 02 	lds	r24, 0x028E
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	28 17       	cp	r18, r24
    1546:	39 07       	cpc	r19, r25
    1548:	2c f3       	brlt	.-54     	; 0x1514 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    154a:	85 e8       	ldi	r24, 0x85	; 133
    154c:	80 93 74 00 	sts	0x0074, r24
    1550:	90 cf       	rjmp	.-224    	; 0x1472 <__vector_33+0x3e>

00001552 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1552:	80 91 74 00 	lds	r24, 0x0074
}
    1556:	81 70       	andi	r24, 0x01	; 1
    1558:	08 95       	ret

0000155a <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    155a:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    155e:	90 fd       	sbrc	r25, 0
    1560:	fc cf       	rjmp	.-8      	; 0x155a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1562:	8e 7f       	andi	r24, 0xFE	; 254
    1564:	80 93 8d 02 	sts	0x028D, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    1568:	70 93 8c 02 	sts	0x028C, r23
    156c:	60 93 8b 02 	sts	0x028B, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    1570:	40 93 8e 02 	sts	0x028E, r20
  TWCR = TWCR_START;                    //initiate START
    1574:	85 ea       	ldi	r24, 0xA5	; 165
    1576:	80 93 74 00 	sts	0x0074, r24
    157a:	08 95       	ret

0000157c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    157c:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1580:	90 fd       	sbrc	r25, 0
    1582:	fc cf       	rjmp	.-8      	; 0x157c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1584:	81 60       	ori	r24, 0x01	; 1
    1586:	80 93 8d 02 	sts	0x028D, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    158a:	70 93 8c 02 	sts	0x028C, r23
    158e:	60 93 8b 02 	sts	0x028B, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    1592:	40 93 8e 02 	sts	0x028E, r20
  TWCR = TWCR_START;                   //initiate START
    1596:	85 ea       	ldi	r24, 0xA5	; 165
    1598:	80 93 74 00 	sts	0x0074, r24
    159c:	08 95       	ret

0000159e <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    15a4:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    15a8:	8c e0       	ldi	r24, 0x0C	; 12
    15aa:	80 93 70 00 	sts	0x0070, r24
    15ae:	08 95       	ret

000015b0 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15b0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15b2:	10 92 8a 01 	sts	0x018A, r1
    15b6:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	90 93 82 01 	sts	0x0182, r25
    15c0:	80 93 81 01 	sts	0x0181, r24
    15c4:	08 95       	ret

000015c6 <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
    15c6:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
    15c8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
    15ca:	10 92 8a 01 	sts	0x018A, r1
    15ce:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;  //set the max beat
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	30 93 82 01 	sts	0x0182, r19
    15d8:	20 93 81 01 	sts	0x0181, r18
  switch (octave) {
    15dc:	84 2f       	mov	r24, r20
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	89 30       	cpi	r24, 0x09	; 9
    15e2:	91 05       	cpc	r25, r1
    15e4:	18 f0       	brcs	.+6      	; 0x15ec <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
    15e6:	1b bc       	out	0x2b, r1	; 43
    15e8:	1a bc       	out	0x2a, r1	; 42
    15ea:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    15ec:	89 56       	subi	r24, 0x69	; 105
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    15f2:	85 2f       	mov	r24, r21
    15f4:	55 0f       	add	r21, r21
    15f6:	99 0b       	sbc	r25, r25
    15f8:	aa 0b       	sbc	r26, r26
    15fa:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    15fc:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
    1600:	fc 01       	movw	r30, r24
    1602:	e1 54       	subi	r30, 0x41	; 65
    1604:	f1 09       	sbc	r31, r1
    1606:	e7 30       	cpi	r30, 0x07	; 7
    1608:	f1 05       	cpc	r31, r1
    160a:	78 f7       	brcc	.-34     	; 0x15ea <play_note+0x24>
    160c:	e0 56       	subi	r30, 0x60	; 96
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1614:	fc 01       	movw	r30, r24
    1616:	e1 54       	subi	r30, 0x41	; 65
    1618:	f1 09       	sbc	r31, r1
    161a:	e7 30       	cpi	r30, 0x07	; 7
    161c:	f1 05       	cpc	r31, r1
    161e:	28 f7       	brcc	.-54     	; 0x15ea <play_note+0x24>
    1620:	e9 55       	subi	r30, 0x59	; 89
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
    1628:	fc 01       	movw	r30, r24
    162a:	e1 54       	subi	r30, 0x41	; 65
    162c:	f1 09       	sbc	r31, r1
    162e:	e7 30       	cpi	r30, 0x07	; 7
    1630:	f1 05       	cpc	r31, r1
    1632:	d8 f6       	brcc	.-74     	; 0x15ea <play_note+0x24>
    1634:	e2 55       	subi	r30, 0x52	; 82
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
    163c:	fc 01       	movw	r30, r24
    163e:	e1 54       	subi	r30, 0x41	; 65
    1640:	f1 09       	sbc	r31, r1
    1642:	e7 30       	cpi	r30, 0x07	; 7
    1644:	f1 05       	cpc	r31, r1
    1646:	88 f6       	brcc	.-94     	; 0x15ea <play_note+0x24>
    1648:	eb 54       	subi	r30, 0x4B	; 75
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
    1650:	fc 01       	movw	r30, r24
    1652:	e1 54       	subi	r30, 0x41	; 65
    1654:	f1 09       	sbc	r31, r1
    1656:	e7 30       	cpi	r30, 0x07	; 7
    1658:	f1 05       	cpc	r31, r1
    165a:	38 f6       	brcc	.-114    	; 0x15ea <play_note+0x24>
    165c:	e4 54       	subi	r30, 0x44	; 68
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
    1664:	fc 01       	movw	r30, r24
    1666:	e1 54       	subi	r30, 0x41	; 65
    1668:	f1 09       	sbc	r31, r1
    166a:	e7 30       	cpi	r30, 0x07	; 7
    166c:	f1 05       	cpc	r31, r1
    166e:	08 f0       	brcs	.+2      	; 0x1672 <play_note+0xac>
    1670:	bc cf       	rjmp	.-136    	; 0x15ea <play_note+0x24>
    1672:	ed 53       	subi	r30, 0x3D	; 61
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
    167a:	fc 01       	movw	r30, r24
    167c:	e1 54       	subi	r30, 0x41	; 65
    167e:	f1 09       	sbc	r31, r1
    1680:	e7 30       	cpi	r30, 0x07	; 7
    1682:	f1 05       	cpc	r31, r1
    1684:	08 f0       	brcs	.+2      	; 0x1688 <play_note+0xc2>
    1686:	b1 cf       	rjmp	.-158    	; 0x15ea <play_note+0x24>
    1688:	e6 53       	subi	r30, 0x36	; 54
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
    1690:	fc 01       	movw	r30, r24
    1692:	e1 54       	subi	r30, 0x41	; 65
    1694:	f1 09       	sbc	r31, r1
    1696:	e7 30       	cpi	r30, 0x07	; 7
    1698:	f1 05       	cpc	r31, r1
    169a:	08 f0       	brcs	.+2      	; 0x169e <play_note+0xd8>
    169c:	a6 cf       	rjmp	.-180    	; 0x15ea <play_note+0x24>
    169e:	ef 52       	subi	r30, 0x2F	; 47
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
    16a6:	fc 01       	movw	r30, r24
    16a8:	e1 54       	subi	r30, 0x41	; 65
    16aa:	f1 09       	sbc	r31, r1
    16ac:	e7 30       	cpi	r30, 0x07	; 7
    16ae:	f1 05       	cpc	r31, r1
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <play_note+0xee>
    16b2:	9b cf       	rjmp	.-202    	; 0x15ea <play_note+0x24>
    16b4:	e8 52       	subi	r30, 0x28	; 40
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
    16bc:	88 e5       	ldi	r24, 0x58	; 88
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9b bd       	out	0x2b, r25	; 43
    16c2:	8a bd       	out	0x2a, r24	; 42
	break;
    16c4:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
    16c6:	66 23       	and	r22, r22
    16c8:	09 f4       	brne	.+2      	; 0x16cc <play_note+0x106>
    16ca:	0f c2       	rjmp	.+1054   	; 0x1aea <play_note+0x524>
    16cc:	83 e6       	ldi	r24, 0x63	; 99
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9b bd       	out	0x2b, r25	; 43
    16d2:	8a bd       	out	0x2a, r24	; 42
    16d4:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
    16d6:	66 23       	and	r22, r22
    16d8:	09 f4       	brne	.+2      	; 0x16dc <play_note+0x116>
    16da:	11 c2       	rjmp	.+1058   	; 0x1afe <play_note+0x538>
    16dc:	8f e6       	ldi	r24, 0x6F	; 111
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9b bd       	out	0x2b, r25	; 43
    16e2:	8a bd       	out	0x2a, r24	; 42
    16e4:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
    16e6:	86 e7       	ldi	r24, 0x76	; 118
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9b bd       	out	0x2b, r25	; 43
    16ec:	8a bd       	out	0x2a, r24	; 42
	break;
    16ee:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
    16f0:	66 23       	and	r22, r22
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <play_note+0x130>
    16f4:	ff c1       	rjmp	.+1022   	; 0x1af4 <play_note+0x52e>
    16f6:	8a e4       	ldi	r24, 0x4A	; 74
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9b bd       	out	0x2b, r25	; 43
    16fc:	8a bd       	out	0x2a, r24	; 42
    16fe:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
    1700:	66 23       	and	r22, r22
    1702:	09 f4       	brne	.+2      	; 0x1706 <play_note+0x140>
    1704:	01 c2       	rjmp	.+1026   	; 0x1b08 <play_note+0x542>
    1706:	83 e5       	ldi	r24, 0x53	; 83
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9b bd       	out	0x2b, r25	; 43
    170c:	8a bd       	out	0x2a, r24	; 42
    170e:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
    1710:	66 23       	and	r22, r22
    1712:	09 f4       	brne	.+2      	; 0x1716 <play_note+0x150>
    1714:	b8 c1       	rjmp	.+880    	; 0x1a86 <play_note+0x4c0>
    1716:	82 e4       	ldi	r24, 0x42	; 66
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9b bd       	out	0x2b, r25	; 43
    171c:	8a bd       	out	0x2a, r24	; 42
    171e:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
    1720:	81 eb       	ldi	r24, 0xB1	; 177
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9b bd       	out	0x2b, r25	; 43
    1726:	8a bd       	out	0x2a, r24	; 42
	break;
    1728:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
    172a:	66 23       	and	r22, r22
    172c:	09 f4       	brne	.+2      	; 0x1730 <play_note+0x16a>
    172e:	d3 c1       	rjmp	.+934    	; 0x1ad6 <play_note+0x510>
    1730:	85 e8       	ldi	r24, 0x85	; 133
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9b bd       	out	0x2b, r25	; 43
    1736:	8a bd       	out	0x2a, r24	; 42
    1738:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
    173a:	66 23       	and	r22, r22
    173c:	09 f4       	brne	.+2      	; 0x1740 <play_note+0x17a>
    173e:	c1 c1       	rjmp	.+898    	; 0x1ac2 <play_note+0x4fc>
    1740:	85 e9       	ldi	r24, 0x95	; 149
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9b bd       	out	0x2b, r25	; 43
    1746:	8a bd       	out	0x2a, r24	; 42
    1748:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
    174a:	66 23       	and	r22, r22
    174c:	09 f4       	brne	.+2      	; 0x1750 <play_note+0x18a>
    174e:	be c1       	rjmp	.+892    	; 0x1acc <play_note+0x506>
    1750:	87 ea       	ldi	r24, 0xA7	; 167
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9b bd       	out	0x2b, r25	; 43
    1756:	8a bd       	out	0x2a, r24	; 42
    1758:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
    175a:	84 e6       	ldi	r24, 0x64	; 100
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	9b bd       	out	0x2b, r25	; 43
    1760:	8a bd       	out	0x2a, r24	; 42
	break;
    1762:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
    1764:	66 23       	and	r22, r22
    1766:	09 f4       	brne	.+2      	; 0x176a <play_note+0x1a4>
    1768:	bb c1       	rjmp	.+886    	; 0x1ae0 <play_note+0x51a>
    176a:	80 ee       	ldi	r24, 0xE0	; 224
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9b bd       	out	0x2b, r25	; 43
    1770:	8a bd       	out	0x2a, r24	; 42
    1772:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
    1774:	8d ee       	ldi	r24, 0xED	; 237
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9b bd       	out	0x2b, r25	; 43
    177a:	8a bd       	out	0x2a, r24	; 42
	break;
    177c:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
    177e:	66 23       	and	r22, r22
    1780:	09 f4       	brne	.+2      	; 0x1784 <play_note+0x1be>
    1782:	8b c1       	rjmp	.+790    	; 0x1a9a <play_note+0x4d4>
    1784:	87 ec       	ldi	r24, 0xC7	; 199
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9b bd       	out	0x2b, r25	; 43
    178a:	8a bd       	out	0x2a, r24	; 42
    178c:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
    178e:	66 23       	and	r22, r22
    1790:	09 f4       	brne	.+2      	; 0x1794 <play_note+0x1ce>
    1792:	74 c1       	rjmp	.+744    	; 0x1a7c <play_note+0x4b6>
    1794:	80 e9       	ldi	r24, 0x90	; 144
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	9b bd       	out	0x2b, r25	; 43
    179a:	8a bd       	out	0x2a, r24	; 42
    179c:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
    179e:	66 23       	and	r22, r22
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <play_note+0x1de>
    17a2:	cb c1       	rjmp	.+918    	; 0x1b3a <play_note+0x574>
    17a4:	84 e8       	ldi	r24, 0x84	; 132
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	9b bd       	out	0x2b, r25	; 43
    17aa:	8a bd       	out	0x2a, r24	; 42
    17ac:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
    17ae:	66 23       	and	r22, r22
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <play_note+0x1ee>
    17b2:	af c1       	rjmp	.+862    	; 0x1b12 <play_note+0x54c>
    17b4:	8b e2       	ldi	r24, 0x2B	; 43
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	9b bd       	out	0x2b, r25	; 43
    17ba:	8a bd       	out	0x2a, r24	; 42
    17bc:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
    17be:	66 23       	and	r22, r22
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <play_note+0x1fe>
    17c2:	b1 c1       	rjmp	.+866    	; 0x1b26 <play_note+0x560>
    17c4:	82 ea       	ldi	r24, 0xA2	; 162
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	9b bd       	out	0x2b, r25	; 43
    17ca:	8a bd       	out	0x2a, r24	; 42
    17cc:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
    17ce:	8c ed       	ldi	r24, 0xDC	; 220
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	9b bd       	out	0x2b, r25	; 43
    17d4:	8a bd       	out	0x2a, r24	; 42
	break;
    17d6:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
    17d8:	66 23       	and	r22, r22
    17da:	09 f4       	brne	.+2      	; 0x17de <play_note+0x218>
    17dc:	59 c1       	rjmp	.+690    	; 0x1a90 <play_note+0x4ca>
    17de:	87 e1       	ldi	r24, 0x17	; 23
    17e0:	92 e0       	ldi	r25, 0x02	; 2
    17e2:	9b bd       	out	0x2b, r25	; 43
    17e4:	8a bd       	out	0x2a, r24	; 42
    17e6:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
    17e8:	66 23       	and	r22, r22
    17ea:	09 f4       	brne	.+2      	; 0x17ee <play_note+0x228>
    17ec:	b0 c1       	rjmp	.+864    	; 0x1b4e <play_note+0x588>
    17ee:	88 e5       	ldi	r24, 0x58	; 88
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	9b bd       	out	0x2b, r25	; 43
    17f4:	8a bd       	out	0x2a, r24	; 42
    17f6:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
    17f8:	8a ec       	ldi	r24, 0xCA	; 202
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	9b bd       	out	0x2b, r25	; 43
    17fe:	8a bd       	out	0x2a, r24	; 42
	break;
    1800:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
    1802:	66 23       	and	r22, r22
    1804:	09 f4       	brne	.+2      	; 0x1808 <play_note+0x242>
    1806:	35 c1       	rjmp	.+618    	; 0x1a72 <play_note+0x4ac>
    1808:	86 e4       	ldi	r24, 0x46	; 70
    180a:	96 e0       	ldi	r25, 0x06	; 6
    180c:	9b bd       	out	0x2b, r25	; 43
    180e:	8a bd       	out	0x2a, r24	; 42
    1810:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
    1812:	66 23       	and	r22, r22
    1814:	09 f4       	brne	.+2      	; 0x1818 <play_note+0x252>
    1816:	82 c1       	rjmp	.+772    	; 0x1b1c <play_note+0x556>
    1818:	8a e0       	ldi	r24, 0x0A	; 10
    181a:	97 e0       	ldi	r25, 0x07	; 7
    181c:	9b bd       	out	0x2b, r25	; 43
    181e:	8a bd       	out	0x2a, r24	; 42
    1820:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
    1822:	86 e9       	ldi	r24, 0x96	; 150
    1824:	95 e0       	ldi	r25, 0x05	; 5
    1826:	9b bd       	out	0x2b, r25	; 43
    1828:	8a bd       	out	0x2a, r24	; 42
	break;
    182a:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
    182c:	8a eb       	ldi	r24, 0xBA	; 186
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	9b bd       	out	0x2b, r25	; 43
    1832:	8a bd       	out	0x2a, r24	; 42
	break;
    1834:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
    1836:	66 23       	and	r22, r22
    1838:	09 f4       	brne	.+2      	; 0x183c <play_note+0x276>
    183a:	7a c1       	rjmp	.+756    	; 0x1b30 <play_note+0x56a>
    183c:	81 ec       	ldi	r24, 0xC1	; 193
    183e:	91 e0       	ldi	r25, 0x01	; 1
    1840:	9b bd       	out	0x2b, r25	; 43
    1842:	8a bd       	out	0x2a, r24	; 42
    1844:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
    1846:	66 23       	and	r22, r22
    1848:	09 f4       	brne	.+2      	; 0x184c <play_note+0x286>
    184a:	7c c1       	rjmp	.+760    	; 0x1b44 <play_note+0x57e>
    184c:	8b e0       	ldi	r24, 0x0B	; 11
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	9b bd       	out	0x2b, r25	; 43
    1852:	8a bd       	out	0x2a, r24	; 42
    1854:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
    1856:	66 23       	and	r22, r22
    1858:	09 f4       	brne	.+2      	; 0x185c <play_note+0x296>
    185a:	7e c1       	rjmp	.+764    	; 0x1b58 <play_note+0x592>
    185c:	80 e5       	ldi	r24, 0x50	; 80
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	9b bd       	out	0x2b, r25	; 43
    1862:	8a bd       	out	0x2a, r24	; 42
    1864:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
    1866:	66 23       	and	r22, r22
    1868:	09 f4       	brne	.+2      	; 0x186c <play_note+0x2a6>
    186a:	ad c1       	rjmp	.+858    	; 0x1bc6 <play_note+0x600>
    186c:	82 e2       	ldi	r24, 0x22	; 34
    186e:	93 e0       	ldi	r25, 0x03	; 3
    1870:	9b bd       	out	0x2b, r25	; 43
    1872:	8a bd       	out	0x2a, r24	; 42
    1874:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
    1876:	86 e7       	ldi	r24, 0x76	; 118
    1878:	97 e0       	ldi	r25, 0x07	; 7
    187a:	9b bd       	out	0x2b, r25	; 43
    187c:	8a bd       	out	0x2a, r24	; 42
	break;
    187e:	08 95       	ret
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
    1880:	66 23       	and	r22, r22
    1882:	09 f4       	brne	.+2      	; 0x1886 <play_note+0x2c0>
    1884:	0f c1       	rjmp	.+542    	; 0x1aa4 <play_note+0x4de>
    1886:	8e ec       	ldi	r24, 0xCE	; 206
    1888:	92 e1       	ldi	r25, 0x12	; 18
    188a:	9b bd       	out	0x2b, r25	; 43
    188c:	8a bd       	out	0x2a, r24	; 42
    188e:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
    1890:	66 23       	and	r22, r22
    1892:	09 f4       	brne	.+2      	; 0x1896 <play_note+0x2d0>
    1894:	7a c1       	rjmp	.+756    	; 0x1b8a <play_note+0x5c4>
    1896:	8d e1       	ldi	r24, 0x1D	; 29
    1898:	95 e1       	ldi	r25, 0x15	; 21
    189a:	9b bd       	out	0x2b, r25	; 43
    189c:	8a bd       	out	0x2a, r24	; 42
    189e:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
    18a0:	66 23       	and	r22, r22
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <play_note+0x2e0>
    18a4:	dc c0       	rjmp	.+440    	; 0x1a5e <play_note+0x498>
    18a6:	80 e6       	ldi	r24, 0x60	; 96
    18a8:	98 e0       	ldi	r25, 0x08	; 8
    18aa:	9b bd       	out	0x2b, r25	; 43
    18ac:	8a bd       	out	0x2a, r24	; 42
    18ae:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
    18b0:	66 23       	and	r22, r22
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <play_note+0x2f0>
    18b4:	92 c1       	rjmp	.+804    	; 0x1bda <play_note+0x614>
    18b6:	80 e1       	ldi	r24, 0x10	; 16
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9b bd       	out	0x2b, r25	; 43
    18bc:	8a bd       	out	0x2a, r24	; 42
    18be:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
    18c0:	8e e2       	ldi	r24, 0x2E	; 46
    18c2:	9b e0       	ldi	r25, 0x0B	; 11
    18c4:	9b bd       	out	0x2b, r25	; 43
    18c6:	8a bd       	out	0x2a, r24	; 42
	break;
    18c8:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
    18ca:	66 23       	and	r22, r22
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <play_note+0x30a>
    18ce:	49 c1       	rjmp	.+658    	; 0x1b62 <play_note+0x59c>
    18d0:	8b e1       	ldi	r24, 0x1B	; 27
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9b bd       	out	0x2b, r25	; 43
    18d6:	8a bd       	out	0x2a, r24	; 42
    18d8:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
    18da:	8c e1       	ldi	r24, 0x1C	; 28
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9b bd       	out	0x2b, r25	; 43
    18e0:	8a bd       	out	0x2a, r24	; 42
	break;
    18e2:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
    18e4:	66 23       	and	r22, r22
    18e6:	09 f4       	brne	.+2      	; 0x18ea <play_note+0x324>
    18e8:	41 c1       	rjmp	.+642    	; 0x1b6c <play_note+0x5a6>
    18ea:	87 e0       	ldi	r24, 0x07	; 7
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9b bd       	out	0x2b, r25	; 43
    18f0:	8a bd       	out	0x2a, r24	; 42
    18f2:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
    18f4:	66 23       	and	r22, r22
    18f6:	09 f4       	brne	.+2      	; 0x18fa <play_note+0x334>
    18f8:	da c0       	rjmp	.+436    	; 0x1aae <play_note+0x4e8>
    18fa:	8b e0       	ldi	r24, 0x0B	; 11
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9b bd       	out	0x2b, r25	; 43
    1900:	8a bd       	out	0x2a, r24	; 42
    1902:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
    1904:	82 e1       	ldi	r24, 0x12	; 18
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9b bd       	out	0x2b, r25	; 43
    190a:	8a bd       	out	0x2a, r24	; 42
	break;
    190c:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
    190e:	66 23       	and	r22, r22
    1910:	09 f4       	brne	.+2      	; 0x1914 <play_note+0x34e>
    1912:	9b c0       	rjmp	.+310    	; 0x1a4a <play_note+0x484>
    1914:	89 e1       	ldi	r24, 0x19	; 25
    1916:	99 e1       	ldi	r25, 0x19	; 25
    1918:	9b bd       	out	0x2b, r25	; 43
    191a:	8a bd       	out	0x2a, r24	; 42
    191c:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
    191e:	66 23       	and	r22, r22
    1920:	09 f4       	brne	.+2      	; 0x1924 <play_note+0x35e>
    1922:	29 c1       	rjmp	.+594    	; 0x1b76 <play_note+0x5b0>
    1924:	80 e3       	ldi	r24, 0x30	; 48
    1926:	9c e1       	ldi	r25, 0x1C	; 28
    1928:	9b bd       	out	0x2b, r25	; 43
    192a:	8a bd       	out	0x2a, r24	; 42
    192c:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
    192e:	8c ed       	ldi	r24, 0xDC	; 220
    1930:	9d e1       	ldi	r25, 0x1D	; 29
    1932:	9b bd       	out	0x2b, r25	; 43
    1934:	8a bd       	out	0x2a, r24	; 42
	break;
    1936:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
    1938:	8a e3       	ldi	r24, 0x3A	; 58
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9b bd       	out	0x2b, r25	; 43
    193e:	8a bd       	out	0x2a, r24	; 42
	break;
    1940:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
    1942:	66 23       	and	r22, r22
    1944:	09 f4       	brne	.+2      	; 0x1948 <play_note+0x382>
    1946:	35 c1       	rjmp	.+618    	; 0x1bb2 <play_note+0x5ec>
    1948:	80 e2       	ldi	r24, 0x20	; 32
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9b bd       	out	0x2b, r25	; 43
    194e:	8a bd       	out	0x2a, r24	; 42
    1950:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
    1952:	66 23       	and	r22, r22
    1954:	09 f4       	brne	.+2      	; 0x1958 <play_note+0x392>
    1956:	32 c1       	rjmp	.+612    	; 0x1bbc <play_note+0x5f6>
    1958:	84 e2       	ldi	r24, 0x24	; 36
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9b bd       	out	0x2b, r25	; 43
    195e:	8a bd       	out	0x2a, r24	; 42
    1960:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
    1962:	66 23       	and	r22, r22
    1964:	09 f4       	brne	.+2      	; 0x1968 <play_note+0x3a2>
    1966:	76 c0       	rjmp	.+236    	; 0x1a54 <play_note+0x48e>
    1968:	89 e2       	ldi	r24, 0x29	; 41
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9b bd       	out	0x2b, r25	; 43
    196e:	8a bd       	out	0x2a, r24	; 42
    1970:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
    1972:	66 23       	and	r22, r22
    1974:	09 f4       	brne	.+2      	; 0x1978 <play_note+0x3b2>
    1976:	78 c0       	rjmp	.+240    	; 0x1a68 <play_note+0x4a2>
    1978:	81 e3       	ldi	r24, 0x31	; 49
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9b bd       	out	0x2b, r25	; 43
    197e:	8a bd       	out	0x2a, r24	; 42
    1980:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
    1982:	8b e2       	ldi	r24, 0x2B	; 43
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9b bd       	out	0x2b, r25	; 43
    1988:	8a bd       	out	0x2a, r24	; 42
	break;
    198a:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
    198c:	66 23       	and	r22, r22
    198e:	09 f4       	brne	.+2      	; 0x1992 <play_note+0x3cc>
    1990:	93 c0       	rjmp	.+294    	; 0x1ab8 <play_note+0x4f2>
    1992:	87 e3       	ldi	r24, 0x37	; 55
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9b bd       	out	0x2b, r25	; 43
    1998:	8a bd       	out	0x2a, r24	; 42
    199a:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
    199c:	66 23       	and	r22, r22
    199e:	09 f4       	brne	.+2      	; 0x19a2 <play_note+0x3dc>
    19a0:	4f c0       	rjmp	.+158    	; 0x1a40 <play_note+0x47a>
    19a2:	88 e1       	ldi	r24, 0x18	; 24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9b bd       	out	0x2b, r25	; 43
    19a8:	8a bd       	out	0x2a, r24	; 42
    19aa:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
    19ac:	66 23       	and	r22, r22
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <play_note+0x3ec>
    19b0:	f6 c0       	rjmp	.+492    	; 0x1b9e <play_note+0x5d8>
    19b2:	82 eb       	ldi	r24, 0xB2	; 178
    19b4:	94 e0       	ldi	r25, 0x04	; 4
    19b6:	9b bd       	out	0x2b, r25	; 43
    19b8:	8a bd       	out	0x2a, r24	; 42
    19ba:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
    19bc:	66 23       	and	r22, r22
    19be:	09 f4       	brne	.+2      	; 0x19c2 <play_note+0x3fc>
    19c0:	16 c1       	rjmp	.+556    	; 0x1bee <play_note+0x628>
    19c2:	8d e8       	ldi	r24, 0x8D	; 141
    19c4:	9a e0       	ldi	r25, 0x0A	; 10
    19c6:	9b bd       	out	0x2b, r25	; 43
    19c8:	8a bd       	out	0x2a, r24	; 42
    19ca:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
    19cc:	66 23       	and	r22, r22
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <play_note+0x40c>
    19d0:	d7 c0       	rjmp	.+430    	; 0x1b80 <play_note+0x5ba>
    19d2:	86 e1       	ldi	r24, 0x16	; 22
    19d4:	9e e0       	ldi	r25, 0x0E	; 14
    19d6:	9b bd       	out	0x2b, r25	; 43
    19d8:	8a bd       	out	0x2a, r24	; 42
    19da:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
    19dc:	66 23       	and	r22, r22
    19de:	09 f4       	brne	.+2      	; 0x19e2 <play_note+0x41c>
    19e0:	f7 c0       	rjmp	.+494    	; 0x1bd0 <play_note+0x60a>
    19e2:	80 ec       	ldi	r24, 0xC0	; 192
    19e4:	90 e1       	ldi	r25, 0x10	; 16
    19e6:	9b bd       	out	0x2b, r25	; 43
    19e8:	8a bd       	out	0x2a, r24	; 42
    19ea:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
    19ec:	66 23       	and	r22, r22
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <play_note+0x42c>
    19f0:	d1 c0       	rjmp	.+418    	; 0x1b94 <play_note+0x5ce>
    19f2:	8f e2       	ldi	r24, 0x2F	; 47
    19f4:	94 e0       	ldi	r25, 0x04	; 4
    19f6:	9b bd       	out	0x2b, r25	; 43
    19f8:	8a bd       	out	0x2a, r24	; 42
    19fa:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
    19fc:	66 23       	and	r22, r22
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <play_note+0x43c>
    1a00:	f1 c0       	rjmp	.+482    	; 0x1be4 <play_note+0x61e>
    1a02:	87 e6       	ldi	r24, 0x67	; 103
    1a04:	99 e0       	ldi	r25, 0x09	; 9
    1a06:	9b bd       	out	0x2b, r25	; 43
    1a08:	8a bd       	out	0x2a, r24	; 42
    1a0a:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
    1a0c:	66 23       	and	r22, r22
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <play_note+0x44c>
    1a10:	cb c0       	rjmp	.+406    	; 0x1ba8 <play_note+0x5e2>
    1a12:	8d e8       	ldi	r24, 0x8D	; 141
    1a14:	9c e0       	ldi	r25, 0x0C	; 12
    1a16:	9b bd       	out	0x2b, r25	; 43
    1a18:	8a bd       	out	0x2a, r24	; 42
    1a1a:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
    1a1c:	8d e5       	ldi	r24, 0x5D	; 93
    1a1e:	96 e1       	ldi	r25, 0x16	; 22
    1a20:	9b bd       	out	0x2b, r25	; 43
    1a22:	8a bd       	out	0x2a, r24	; 42
	break;
    1a24:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
    1a26:	66 23       	and	r22, r22
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <play_note+0x466>
    1a2a:	e6 c0       	rjmp	.+460    	; 0x1bf8 <play_note+0x632>
    1a2c:	86 e4       	ldi	r24, 0x46	; 70
    1a2e:	95 e0       	ldi	r25, 0x05	; 5
    1a30:	9b bd       	out	0x2b, r25	; 43
    1a32:	8a bd       	out	0x2a, r24	; 42
    1a34:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
    1a36:	8d ee       	ldi	r24, 0xED	; 237
    1a38:	9e e0       	ldi	r25, 0x0E	; 14
    1a3a:	9b bd       	out	0x2b, r25	; 43
    1a3c:	8a bd       	out	0x2a, r24	; 42
	break;
    1a3e:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
    1a40:	85 e1       	ldi	r24, 0x15	; 21
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9b bd       	out	0x2b, r25	; 43
    1a46:	8a bd       	out	0x2a, r24	; 42
    1a48:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
    1a4a:	82 eb       	ldi	r24, 0xB2	; 178
    1a4c:	97 e1       	ldi	r25, 0x17	; 23
    1a4e:	9b bd       	out	0x2b, r25	; 43
    1a50:	8a bd       	out	0x2a, r24	; 42
    1a52:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
    1a54:	86 e2       	ldi	r24, 0x26	; 38
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9b bd       	out	0x2b, r25	; 43
    1a5a:	8a bd       	out	0x2a, r24	; 42
    1a5c:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
    1a5e:	87 ee       	ldi	r24, 0xE7	; 231
    1a60:	97 e0       	ldi	r25, 0x07	; 7
    1a62:	9b bd       	out	0x2b, r25	; 43
    1a64:	8a bd       	out	0x2a, r24	; 42
    1a66:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
    1a68:	8e e2       	ldi	r24, 0x2E	; 46
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9b bd       	out	0x2b, r25	; 43
    1a6e:	8a bd       	out	0x2a, r24	; 42
    1a70:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
    1a72:	8b ee       	ldi	r24, 0xEB	; 235
    1a74:	95 e0       	ldi	r25, 0x05	; 5
    1a76:	9b bd       	out	0x2b, r25	; 43
    1a78:	8a bd       	out	0x2a, r24	; 42
    1a7a:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
    1a7c:	8a e7       	ldi	r24, 0x7A	; 122
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	9b bd       	out	0x2b, r25	; 43
    1a82:	8a bd       	out	0x2a, r24	; 42
    1a84:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
    1a86:	8e e3       	ldi	r24, 0x3E	; 62
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9b bd       	out	0x2b, r25	; 43
    1a8c:	8a bd       	out	0x2a, r24	; 42
    1a8e:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
    1a90:	89 ef       	ldi	r24, 0xF9	; 249
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	9b bd       	out	0x2b, r25	; 43
    1a96:	8a bd       	out	0x2a, r24	; 42
    1a98:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
    1a9a:	8c eb       	ldi	r24, 0xBC	; 188
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9b bd       	out	0x2b, r25	; 43
    1aa0:	8a bd       	out	0x2a, r24	; 42
    1aa2:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
    1aa4:	80 ec       	ldi	r24, 0xC0	; 192
    1aa6:	91 e1       	ldi	r25, 0x11	; 17
    1aa8:	9b bd       	out	0x2b, r25	; 43
    1aaa:	8a bd       	out	0x2a, r24	; 42
    1aac:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
    1aae:	89 e0       	ldi	r24, 0x09	; 9
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9b bd       	out	0x2b, r25	; 43
    1ab4:	8a bd       	out	0x2a, r24	; 42
    1ab6:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
    1ab8:	84 e3       	ldi	r24, 0x34	; 52
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9b bd       	out	0x2b, r25	; 43
    1abe:	8a bd       	out	0x2a, r24	; 42
    1ac0:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
    1ac2:	8d e8       	ldi	r24, 0x8D	; 141
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9b bd       	out	0x2b, r25	; 43
    1ac8:	8a bd       	out	0x2a, r24	; 42
    1aca:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
    1acc:	8e e9       	ldi	r24, 0x9E	; 158
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9b bd       	out	0x2b, r25	; 43
    1ad2:	8a bd       	out	0x2a, r24	; 42
    1ad4:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
    1ad6:	8d e7       	ldi	r24, 0x7D	; 125
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9b bd       	out	0x2b, r25	; 43
    1adc:	8a bd       	out	0x2a, r24	; 42
    1ade:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
    1ae0:	83 ed       	ldi	r24, 0xD3	; 211
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9b bd       	out	0x2b, r25	; 43
    1ae6:	8a bd       	out	0x2a, r24	; 42
    1ae8:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
    1aea:	8d e5       	ldi	r24, 0x5D	; 93
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9b bd       	out	0x2b, r25	; 43
    1af0:	8a bd       	out	0x2a, r24	; 42
    1af2:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
    1af4:	86 e4       	ldi	r24, 0x46	; 70
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9b bd       	out	0x2b, r25	; 43
    1afa:	8a bd       	out	0x2a, r24	; 42
    1afc:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
    1afe:	89 e6       	ldi	r24, 0x69	; 105
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9b bd       	out	0x2b, r25	; 43
    1b04:	8a bd       	out	0x2a, r24	; 42
    1b06:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
    1b08:	8e e4       	ldi	r24, 0x4E	; 78
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9b bd       	out	0x2b, r25	; 43
    1b0e:	8a bd       	out	0x2a, r24	; 42
    1b10:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
    1b12:	8b e1       	ldi	r24, 0x1B	; 27
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	9b bd       	out	0x2b, r25	; 43
    1b18:	8a bd       	out	0x2a, r24	; 42
    1b1a:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
    1b1c:	85 ea       	ldi	r24, 0xA5	; 165
    1b1e:	96 e0       	ldi	r25, 0x06	; 6
    1b20:	9b bd       	out	0x2b, r25	; 43
    1b22:	8a bd       	out	0x2a, r24	; 42
    1b24:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
    1b26:	8c e7       	ldi	r24, 0x7C	; 124
    1b28:	92 e0       	ldi	r25, 0x02	; 2
    1b2a:	9b bd       	out	0x2b, r25	; 43
    1b2c:	8a bd       	out	0x2a, r24	; 42
    1b2e:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
    1b30:	88 ea       	ldi	r24, 0xA8	; 168
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	9b bd       	out	0x2b, r25	; 43
    1b36:	8a bd       	out	0x2a, r24	; 42
    1b38:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
    1b3a:	82 e5       	ldi	r24, 0x52	; 82
    1b3c:	93 e0       	ldi	r25, 0x03	; 3
    1b3e:	9b bd       	out	0x2b, r25	; 43
    1b40:	8a bd       	out	0x2a, r24	; 42
    1b42:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
    1b44:	8c ef       	ldi	r24, 0xFC	; 252
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9b bd       	out	0x2b, r25	; 43
    1b4a:	8a bd       	out	0x2a, r24	; 42
    1b4c:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
    1b4e:	87 e3       	ldi	r24, 0x37	; 55
    1b50:	92 e0       	ldi	r25, 0x02	; 2
    1b52:	9b bd       	out	0x2b, r25	; 43
    1b54:	8a bd       	out	0x2a, r24	; 42
    1b56:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
    1b58:	8d e3       	ldi	r24, 0x3D	; 61
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	9b bd       	out	0x2b, r25	; 43
    1b5e:	8a bd       	out	0x2a, r24	; 42
    1b60:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
    1b62:	89 e1       	ldi	r24, 0x19	; 25
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9b bd       	out	0x2b, r25	; 43
    1b68:	8a bd       	out	0x2a, r24	; 42
    1b6a:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
    1b6c:	85 e0       	ldi	r24, 0x05	; 5
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9b bd       	out	0x2b, r25	; 43
    1b72:	8a bd       	out	0x2a, r24	; 42
    1b74:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
    1b76:	8a e9       	ldi	r24, 0x9A	; 154
    1b78:	9a e1       	ldi	r25, 0x1A	; 26
    1b7a:	9b bd       	out	0x2b, r25	; 43
    1b7c:	8a bd       	out	0x2a, r24	; 42
    1b7e:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
    1b80:	8c e4       	ldi	r24, 0x4C	; 76
    1b82:	9d e0       	ldi	r25, 0x0D	; 13
    1b84:	9b bd       	out	0x2b, r25	; 43
    1b86:	8a bd       	out	0x2a, r24	; 42
    1b88:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
    1b8a:	8d ee       	ldi	r24, 0xED	; 237
    1b8c:	93 e1       	ldi	r25, 0x13	; 19
    1b8e:	9b bd       	out	0x2b, r25	; 43
    1b90:	8a bd       	out	0x2a, r24	; 42
    1b92:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
    1b94:	83 ef       	ldi	r24, 0xF3	; 243
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	9b bd       	out	0x2b, r25	; 43
    1b9a:	8a bd       	out	0x2a, r24	; 42
    1b9c:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
    1b9e:	8f e6       	ldi	r24, 0x6F	; 111
    1ba0:	94 e0       	ldi	r25, 0x04	; 4
    1ba2:	9b bd       	out	0x2b, r25	; 43
    1ba4:	8a bd       	out	0x2a, r24	; 42
    1ba6:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
    1ba8:	88 ed       	ldi	r24, 0xD8	; 216
    1baa:	9b e0       	ldi	r25, 0x0B	; 11
    1bac:	9b bd       	out	0x2b, r25	; 43
    1bae:	8a bd       	out	0x2a, r24	; 42
    1bb0:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
    1bb2:	8e e1       	ldi	r24, 0x1E	; 30
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9b bd       	out	0x2b, r25	; 43
    1bb8:	8a bd       	out	0x2a, r24	; 42
    1bba:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
    1bbc:	82 e2       	ldi	r24, 0x22	; 34
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9b bd       	out	0x2b, r25	; 43
    1bc2:	8a bd       	out	0x2a, r24	; 42
    1bc4:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
    1bc6:	85 ef       	ldi	r24, 0xF5	; 245
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	9b bd       	out	0x2b, r25	; 43
    1bcc:	8a bd       	out	0x2a, r24	; 42
    1bce:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
    1bd0:	80 ed       	ldi	r24, 0xD0	; 208
    1bd2:	9f e0       	ldi	r25, 0x0F	; 15
    1bd4:	9b bd       	out	0x2b, r25	; 43
    1bd6:	8a bd       	out	0x2a, r24	; 42
    1bd8:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
    1bda:	8d e0       	ldi	r24, 0x0D	; 13
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9b bd       	out	0x2b, r25	; 43
    1be0:	8a bd       	out	0x2a, r24	; 42
    1be2:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
    1be4:	8f ed       	ldi	r24, 0xDF	; 223
    1be6:	98 e0       	ldi	r25, 0x08	; 8
    1be8:	9b bd       	out	0x2b, r25	; 43
    1bea:	8a bd       	out	0x2a, r24	; 42
    1bec:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
    1bee:	86 ef       	ldi	r24, 0xF6	; 246
    1bf0:	99 e0       	ldi	r25, 0x09	; 9
    1bf2:	9b bd       	out	0x2b, r25	; 43
    1bf4:	8a bd       	out	0x2a, r24	; 42
    1bf6:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
    1bf8:	8a ef       	ldi	r24, 0xFA	; 250
    1bfa:	94 e0       	ldi	r25, 0x04	; 4
    1bfc:	9b bd       	out	0x2b, r25	; 43
    1bfe:	8a bd       	out	0x2a, r24	; 42
    1c00:	08 95       	ret

00001c02 <song0>:
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1c02:	86 34       	cpi	r24, 0x46	; 70
    1c04:	91 05       	cpc	r25, r1
    1c06:	20 f0       	brcs	.+8      	; 0x1c10 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
    1c08:	8f ef       	ldi	r24, 0xFF	; 255
    1c0a:	80 93 7d 01 	sts	0x017D, r24
    1c0e:	08 95       	ret
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1c10:	fc 01       	movw	r30, r24
    1c12:	e1 52       	subi	r30, 0x21	; 33
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
    1c1a:	22 e0       	ldi	r18, 0x02	; 2
    1c1c:	44 e0       	ldi	r20, 0x04	; 4
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	81 e4       	ldi	r24, 0x41	; 65
    1c22:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
    1c26:	26 e0       	ldi	r18, 0x06	; 6
    1c28:	44 e0       	ldi	r20, 0x04	; 4
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	81 e4       	ldi	r24, 0x41	; 65
    1c2e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
    1c32:	22 e0       	ldi	r18, 0x02	; 2
    1c34:	44 e0       	ldi	r20, 0x04	; 4
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	81 e4       	ldi	r24, 0x41	; 65
    1c3a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
    1c3e:	28 e0       	ldi	r18, 0x08	; 8
    1c40:	44 e0       	ldi	r20, 0x04	; 4
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	84 e4       	ldi	r24, 0x44	; 68
    1c46:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
    1c4a:	28 e0       	ldi	r18, 0x08	; 8
    1c4c:	44 e0       	ldi	r20, 0x04	; 4
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	86 e4       	ldi	r24, 0x46	; 70
    1c52:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
    1c56:	26 e0       	ldi	r18, 0x06	; 6
    1c58:	44 e0       	ldi	r20, 0x04	; 4
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	82 e4       	ldi	r24, 0x42	; 66
    1c5e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
    1c62:	28 e0       	ldi	r18, 0x08	; 8
    1c64:	44 e0       	ldi	r20, 0x04	; 4
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	83 e4       	ldi	r24, 0x43	; 67
    1c6a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
    1c6e:	28 e0       	ldi	r18, 0x08	; 8
    1c70:	44 e0       	ldi	r20, 0x04	; 4
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	81 e4       	ldi	r24, 0x41	; 65
    1c76:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
    1c7a:	28 e0       	ldi	r18, 0x08	; 8
    1c7c:	44 e0       	ldi	r20, 0x04	; 4
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	87 e4       	ldi	r24, 0x47	; 71
    1c82:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
    1c86:	28 e0       	ldi	r18, 0x08	; 8
    1c88:	44 e0       	ldi	r20, 0x04	; 4
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	85 e4       	ldi	r24, 0x45	; 69
    1c8e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
    1c92:	20 e1       	ldi	r18, 0x10	; 16
    1c94:	44 e0       	ldi	r20, 0x04	; 4
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	81 e4       	ldi	r24, 0x41	; 65
    1c9a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
    1c9e:	24 e0       	ldi	r18, 0x04	; 4
    1ca0:	45 e0       	ldi	r20, 0x05	; 5
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	83 e4       	ldi	r24, 0x43	; 67
    1ca6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
    1caa:	24 e0       	ldi	r18, 0x04	; 4
    1cac:	45 e0       	ldi	r20, 0x05	; 5
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	84 e4       	ldi	r24, 0x44	; 68
    1cb2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1cb6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1cb8:	10 92 8a 01 	sts	0x018A, r1
    1cbc:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1cc0:	88 e0       	ldi	r24, 0x08	; 8
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	90 93 82 01 	sts	0x0182, r25
    1cc8:	80 93 81 01 	sts	0x0181, r24
    1ccc:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1cce:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1cd0:	10 92 8a 01 	sts	0x018A, r1
    1cd4:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	90 93 82 01 	sts	0x0182, r25
    1ce0:	80 93 81 01 	sts	0x0181, r24
    1ce4:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
    1ce6:	20 e1       	ldi	r18, 0x10	; 16
    1ce8:	44 e0       	ldi	r20, 0x04	; 4
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	82 e4       	ldi	r24, 0x42	; 66
    1cee:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
    1cf2:	28 e0       	ldi	r18, 0x08	; 8
    1cf4:	44 e0       	ldi	r20, 0x04	; 4
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	82 e4       	ldi	r24, 0x42	; 66
    1cfa:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
    1cfe:	28 e1       	ldi	r18, 0x18	; 24
    1d00:	44 e0       	ldi	r20, 0x04	; 4
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	87 e4       	ldi	r24, 0x47	; 71
    1d06:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
    1d0a:	20 e1       	ldi	r18, 0x10	; 16
    1d0c:	45 e0       	ldi	r20, 0x05	; 5
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	84 e4       	ldi	r24, 0x44	; 68
    1d12:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d16:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1d18:	10 92 8a 01 	sts	0x018A, r1
    1d1c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	90 93 82 01 	sts	0x0182, r25
    1d28:	80 93 81 01 	sts	0x0181, r24
    1d2c:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
    1d2e:	24 e0       	ldi	r18, 0x04	; 4
    1d30:	44 e0       	ldi	r20, 0x04	; 4
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	81 e4       	ldi	r24, 0x41	; 65
    1d36:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
    1d3a:	26 e0       	ldi	r18, 0x06	; 6
    1d3c:	44 e0       	ldi	r20, 0x04	; 4
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	87 e4       	ldi	r24, 0x47	; 71
    1d42:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
    1d46:	24 e0       	ldi	r18, 0x04	; 4
    1d48:	44 e0       	ldi	r20, 0x04	; 4
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	87 e4       	ldi	r24, 0x47	; 71
    1d4e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
    1d52:	28 e0       	ldi	r18, 0x08	; 8
    1d54:	44 e0       	ldi	r20, 0x04	; 4
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	87 e4       	ldi	r24, 0x47	; 71
    1d5a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
    1d5e:	23 e0       	ldi	r18, 0x03	; 3
    1d60:	44 e0       	ldi	r20, 0x04	; 4
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	87 e4       	ldi	r24, 0x47	; 71
    1d66:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
    1d6a:	20 e1       	ldi	r18, 0x10	; 16
    1d6c:	44 e0       	ldi	r20, 0x04	; 4
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	84 e4       	ldi	r24, 0x44	; 68
    1d72:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
    1d76:	20 e1       	ldi	r18, 0x10	; 16
    1d78:	45 e0       	ldi	r20, 0x05	; 5
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	83 e4       	ldi	r24, 0x43	; 67
    1d7e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
    1d82:	22 e0       	ldi	r18, 0x02	; 2
    1d84:	44 e0       	ldi	r20, 0x04	; 4
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	82 e4       	ldi	r24, 0x42	; 66
    1d8a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
    1d8e:	24 e0       	ldi	r18, 0x04	; 4
    1d90:	45 e0       	ldi	r20, 0x05	; 5
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	84 e4       	ldi	r24, 0x44	; 68
    1d96:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
    1d9a:	24 e0       	ldi	r18, 0x04	; 4
    1d9c:	44 e0       	ldi	r20, 0x04	; 4
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	81 e4       	ldi	r24, 0x41	; 65
    1da2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
    1da6:	28 e0       	ldi	r18, 0x08	; 8
    1da8:	44 e0       	ldi	r20, 0x04	; 4
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	82 e4       	ldi	r24, 0x42	; 66
    1dae:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
    1db2:	28 e1       	ldi	r18, 0x18	; 24
    1db4:	44 e0       	ldi	r20, 0x04	; 4
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	86 e4       	ldi	r24, 0x46	; 70
    1dba:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
    1dbe:	27 e0       	ldi	r18, 0x07	; 7
    1dc0:	44 e0       	ldi	r20, 0x04	; 4
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	87 e4       	ldi	r24, 0x47	; 71
    1dc6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>

00001dca <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    1dca:	8f 33       	cpi	r24, 0x3F	; 63
    1dcc:	91 05       	cpc	r25, r1
    1dce:	20 f0       	brcs	.+8      	; 0x1dd8 <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	80 93 7d 01 	sts	0x017D, r24
    1dd6:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    1dd8:	fc 01       	movw	r30, r24
    1dda:	eb 5d       	subi	r30, 0xDB	; 219
    1ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dde:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
    1de2:	24 e0       	ldi	r18, 0x04	; 4
    1de4:	44 e0       	ldi	r20, 0x04	; 4
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	83 e4       	ldi	r24, 0x43	; 67
    1dea:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
    1dee:	28 e0       	ldi	r18, 0x08	; 8
    1df0:	44 e0       	ldi	r20, 0x04	; 4
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	85 e4       	ldi	r24, 0x45	; 69
    1df6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1dfa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1dfc:	10 92 8a 01 	sts	0x018A, r1
    1e00:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	90 93 82 01 	sts	0x0182, r25
    1e0c:	80 93 81 01 	sts	0x0181, r24
    1e10:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
    1e12:	28 e0       	ldi	r18, 0x08	; 8
    1e14:	44 e0       	ldi	r20, 0x04	; 4
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	84 e4       	ldi	r24, 0x44	; 68
    1e1a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
    1e1e:	20 e1       	ldi	r18, 0x10	; 16
    1e20:	43 e0       	ldi	r20, 0x03	; 3
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	83 e4       	ldi	r24, 0x43	; 67
    1e26:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
    1e2a:	24 e0       	ldi	r18, 0x04	; 4
    1e2c:	44 e0       	ldi	r20, 0x04	; 4
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	84 e4       	ldi	r24, 0x44	; 68
    1e32:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
    1e36:	24 e0       	ldi	r18, 0x04	; 4
    1e38:	43 e0       	ldi	r20, 0x03	; 3
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	82 e4       	ldi	r24, 0x42	; 66
    1e3e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
    1e42:	27 e0       	ldi	r18, 0x07	; 7
    1e44:	43 e0       	ldi	r20, 0x03	; 3
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	81 e4       	ldi	r24, 0x41	; 65
    1e4a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
    1e4e:	24 e0       	ldi	r18, 0x04	; 4
    1e50:	44 e0       	ldi	r20, 0x04	; 4
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	86 e4       	ldi	r24, 0x46	; 70
    1e56:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
    1e5a:	20 e1       	ldi	r18, 0x10	; 16
    1e5c:	42 e0       	ldi	r20, 0x02	; 2
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	82 e4       	ldi	r24, 0x42	; 66
    1e62:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
    1e66:	20 e1       	ldi	r18, 0x10	; 16
    1e68:	43 e0       	ldi	r20, 0x03	; 3
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	81 e4       	ldi	r24, 0x41	; 65
    1e6e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
    1e72:	28 e0       	ldi	r18, 0x08	; 8
    1e74:	44 e0       	ldi	r20, 0x04	; 4
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	83 e4       	ldi	r24, 0x43	; 67
    1e7a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
    1e7e:	20 e1       	ldi	r18, 0x10	; 16
    1e80:	43 e0       	ldi	r20, 0x03	; 3
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	84 e4       	ldi	r24, 0x44	; 68
    1e86:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
    1e8a:	20 e1       	ldi	r18, 0x10	; 16
    1e8c:	43 e0       	ldi	r20, 0x03	; 3
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	85 e4       	ldi	r24, 0x45	; 69
    1e92:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e96:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1e98:	10 92 8a 01 	sts	0x018A, r1
    1e9c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1ea0:	88 e0       	ldi	r24, 0x08	; 8
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	90 93 82 01 	sts	0x0182, r25
    1ea8:	80 93 81 01 	sts	0x0181, r24
    1eac:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
    1eae:	27 e0       	ldi	r18, 0x07	; 7
    1eb0:	43 e0       	ldi	r20, 0x03	; 3
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	82 e4       	ldi	r24, 0x42	; 66
    1eb6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
    1eba:	2c e0       	ldi	r18, 0x0C	; 12
    1ebc:	43 e0       	ldi	r20, 0x03	; 3
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	82 e4       	ldi	r24, 0x42	; 66
    1ec2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
    1ec6:	20 e1       	ldi	r18, 0x10	; 16
    1ec8:	43 e0       	ldi	r20, 0x03	; 3
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	81 e4       	ldi	r24, 0x41	; 65
    1ece:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1ed2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1ed4:	10 92 8a 01 	sts	0x018A, r1
    1ed8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1edc:	80 e1       	ldi	r24, 0x10	; 16
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	90 93 82 01 	sts	0x0182, r25
    1ee4:	80 93 81 01 	sts	0x0181, r24
    1ee8:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
    1eea:	24 e0       	ldi	r18, 0x04	; 4
    1eec:	44 e0       	ldi	r20, 0x04	; 4
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	87 e4       	ldi	r24, 0x47	; 71
    1ef2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
    1ef6:	28 e0       	ldi	r18, 0x08	; 8
    1ef8:	42 e0       	ldi	r20, 0x02	; 2
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	82 e4       	ldi	r24, 0x42	; 66
    1efe:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
    1f02:	20 e1       	ldi	r18, 0x10	; 16
    1f04:	42 e0       	ldi	r20, 0x02	; 2
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	81 e4       	ldi	r24, 0x41	; 65
    1f0a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
    1f0e:	20 e1       	ldi	r18, 0x10	; 16
    1f10:	42 e0       	ldi	r20, 0x02	; 2
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	81 e4       	ldi	r24, 0x41	; 65
    1f16:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
    1f1a:	2c e0       	ldi	r18, 0x0C	; 12
    1f1c:	44 e0       	ldi	r20, 0x04	; 4
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	85 e4       	ldi	r24, 0x45	; 69
    1f22:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
    1f26:	22 e0       	ldi	r18, 0x02	; 2
    1f28:	44 e0       	ldi	r20, 0x04	; 4
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	84 e4       	ldi	r24, 0x44	; 68
    1f2e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
    1f32:	22 e0       	ldi	r18, 0x02	; 2
    1f34:	44 e0       	ldi	r20, 0x04	; 4
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	85 e4       	ldi	r24, 0x45	; 69
    1f3a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
    1f3e:	28 e0       	ldi	r18, 0x08	; 8
    1f40:	43 e0       	ldi	r20, 0x03	; 3
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	83 e4       	ldi	r24, 0x43	; 67
    1f46:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
    1f4a:	24 e0       	ldi	r18, 0x04	; 4
    1f4c:	43 e0       	ldi	r20, 0x03	; 3
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	81 e4       	ldi	r24, 0x41	; 65
    1f52:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
    1f56:	28 e0       	ldi	r18, 0x08	; 8
    1f58:	43 e0       	ldi	r20, 0x03	; 3
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	85 e4       	ldi	r24, 0x45	; 69
    1f5e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
    1f62:	28 e0       	ldi	r18, 0x08	; 8
    1f64:	43 e0       	ldi	r20, 0x03	; 3
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	81 e4       	ldi	r24, 0x41	; 65
    1f6a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1f6e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1f70:	10 92 8a 01 	sts	0x018A, r1
    1f74:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	90 93 82 01 	sts	0x0182, r25
    1f80:	80 93 81 01 	sts	0x0181, r24
    1f84:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
    1f86:	28 e0       	ldi	r18, 0x08	; 8
    1f88:	44 e0       	ldi	r20, 0x04	; 4
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	81 e4       	ldi	r24, 0x41	; 65
    1f8e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>

00001f92 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    1f92:	85 39       	cpi	r24, 0x95	; 149
    1f94:	91 05       	cpc	r25, r1
    1f96:	20 f0       	brcs	.+8      	; 0x1fa0 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	80 93 7d 01 	sts	0x017D, r24
    1f9e:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	ec 59       	subi	r30, 0x9C	; 156
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
    1faa:	24 e0       	ldi	r18, 0x04	; 4
    1fac:	43 e0       	ldi	r20, 0x03	; 3
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	87 e4       	ldi	r24, 0x47	; 71
    1fb2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
    1fb6:	22 e0       	ldi	r18, 0x02	; 2
    1fb8:	43 e0       	ldi	r20, 0x03	; 3
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	81 e4       	ldi	r24, 0x41	; 65
    1fbe:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1fc2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1fc4:	10 92 8a 01 	sts	0x018A, r1
    1fc8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	90 93 82 01 	sts	0x0182, r25
    1fd4:	80 93 81 01 	sts	0x0181, r24
    1fd8:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
    1fda:	22 e0       	ldi	r18, 0x02	; 2
    1fdc:	44 e0       	ldi	r20, 0x04	; 4
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	83 e4       	ldi	r24, 0x43	; 67
    1fe2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
    1fe6:	22 e0       	ldi	r18, 0x02	; 2
    1fe8:	44 e0       	ldi	r20, 0x04	; 4
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	85 e4       	ldi	r24, 0x45	; 69
    1fee:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
    1ff2:	24 e0       	ldi	r18, 0x04	; 4
    1ff4:	44 e0       	ldi	r20, 0x04	; 4
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	84 e4       	ldi	r24, 0x44	; 68
    1ffa:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
    1ffe:	22 e0       	ldi	r18, 0x02	; 2
    2000:	44 e0       	ldi	r20, 0x04	; 4
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	83 e4       	ldi	r24, 0x43	; 67
    2006:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    200a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    200c:	10 92 8a 01 	sts	0x018A, r1
    2010:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	90 93 82 01 	sts	0x0182, r25
    201c:	80 93 81 01 	sts	0x0181, r24
    2020:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
    2022:	22 e0       	ldi	r18, 0x02	; 2
    2024:	44 e0       	ldi	r20, 0x04	; 4
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	83 e4       	ldi	r24, 0x43	; 67
    202a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    202e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2030:	10 92 8a 01 	sts	0x018A, r1
    2034:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	90 93 82 01 	sts	0x0182, r25
    2040:	80 93 81 01 	sts	0x0181, r24
    2044:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
    2046:	22 e0       	ldi	r18, 0x02	; 2
    2048:	44 e0       	ldi	r20, 0x04	; 4
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	83 e4       	ldi	r24, 0x43	; 67
    204e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2052:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2054:	10 92 8a 01 	sts	0x018A, r1
    2058:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	90 93 82 01 	sts	0x0182, r25
    2064:	80 93 81 01 	sts	0x0181, r24
    2068:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
    206a:	22 e0       	ldi	r18, 0x02	; 2
    206c:	44 e0       	ldi	r20, 0x04	; 4
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	83 e4       	ldi	r24, 0x43	; 67
    2072:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2076:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2078:	10 92 8a 01 	sts	0x018A, r1
    207c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2080:	80 e1       	ldi	r24, 0x10	; 16
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	90 93 82 01 	sts	0x0182, r25
    2088:	80 93 81 01 	sts	0x0181, r24
    208c:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
    208e:	22 e0       	ldi	r18, 0x02	; 2
    2090:	44 e0       	ldi	r20, 0x04	; 4
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	85 e4       	ldi	r24, 0x45	; 69
    2096:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
    209a:	22 e0       	ldi	r18, 0x02	; 2
    209c:	44 e0       	ldi	r20, 0x04	; 4
    209e:	60 e0       	ldi	r22, 0x00	; 0
    20a0:	84 e4       	ldi	r24, 0x44	; 68
    20a2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
    20a6:	22 e0       	ldi	r18, 0x02	; 2
    20a8:	44 e0       	ldi	r20, 0x04	; 4
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	83 e4       	ldi	r24, 0x43	; 67
    20ae:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20b2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    20b4:	10 92 8a 01 	sts	0x018A, r1
    20b8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	90 93 82 01 	sts	0x0182, r25
    20c4:	80 93 81 01 	sts	0x0181, r24
    20c8:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
    20ca:	22 e0       	ldi	r18, 0x02	; 2
    20cc:	44 e0       	ldi	r20, 0x04	; 4
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	83 e4       	ldi	r24, 0x43	; 67
    20d2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20d6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    20d8:	10 92 8a 01 	sts	0x018A, r1
    20dc:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	90 93 82 01 	sts	0x0182, r25
    20e8:	80 93 81 01 	sts	0x0181, r24
    20ec:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
    20ee:	22 e0       	ldi	r18, 0x02	; 2
    20f0:	44 e0       	ldi	r20, 0x04	; 4
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	83 e4       	ldi	r24, 0x43	; 67
    20f6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20fa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    20fc:	10 92 8a 01 	sts	0x018A, r1
    2100:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	90 93 82 01 	sts	0x0182, r25
    210c:	80 93 81 01 	sts	0x0181, r24
    2110:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
    2112:	22 e0       	ldi	r18, 0x02	; 2
    2114:	44 e0       	ldi	r20, 0x04	; 4
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	83 e4       	ldi	r24, 0x43	; 67
    211a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    211e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2120:	10 92 8a 01 	sts	0x018A, r1
    2124:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2128:	84 e0       	ldi	r24, 0x04	; 4
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	90 93 82 01 	sts	0x0182, r25
    2130:	80 93 81 01 	sts	0x0181, r24
    2134:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
    2136:	24 e0       	ldi	r18, 0x04	; 4
    2138:	43 e0       	ldi	r20, 0x03	; 3
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	87 e4       	ldi	r24, 0x47	; 71
    213e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
    2142:	22 e0       	ldi	r18, 0x02	; 2
    2144:	43 e0       	ldi	r20, 0x03	; 3
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	81 e4       	ldi	r24, 0x41	; 65
    214a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    214e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2150:	10 92 8a 01 	sts	0x018A, r1
    2154:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	90 93 82 01 	sts	0x0182, r25
    2160:	80 93 81 01 	sts	0x0181, r24
    2164:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
    2166:	22 e0       	ldi	r18, 0x02	; 2
    2168:	44 e0       	ldi	r20, 0x04	; 4
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	83 e4       	ldi	r24, 0x43	; 67
    216e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
    2172:	22 e0       	ldi	r18, 0x02	; 2
    2174:	44 e0       	ldi	r20, 0x04	; 4
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	85 e4       	ldi	r24, 0x45	; 69
    217a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
    217e:	24 e0       	ldi	r18, 0x04	; 4
    2180:	44 e0       	ldi	r20, 0x04	; 4
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	84 e4       	ldi	r24, 0x44	; 68
    2186:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
    218a:	22 e0       	ldi	r18, 0x02	; 2
    218c:	44 e0       	ldi	r20, 0x04	; 4
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	83 e4       	ldi	r24, 0x43	; 67
    2192:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2196:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2198:	10 92 8a 01 	sts	0x018A, r1
    219c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	90 93 82 01 	sts	0x0182, r25
    21a8:	80 93 81 01 	sts	0x0181, r24
    21ac:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
    21ae:	22 e0       	ldi	r18, 0x02	; 2
    21b0:	44 e0       	ldi	r20, 0x04	; 4
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	83 e4       	ldi	r24, 0x43	; 67
    21b6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    21ba:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    21bc:	10 92 8a 01 	sts	0x018A, r1
    21c0:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	90 93 82 01 	sts	0x0182, r25
    21cc:	80 93 81 01 	sts	0x0181, r24
    21d0:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
    21d2:	22 e0       	ldi	r18, 0x02	; 2
    21d4:	44 e0       	ldi	r20, 0x04	; 4
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	83 e4       	ldi	r24, 0x43	; 67
    21da:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    21de:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    21e0:	10 92 8a 01 	sts	0x018A, r1
    21e4:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	90 93 82 01 	sts	0x0182, r25
    21f0:	80 93 81 01 	sts	0x0181, r24
    21f4:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
    21f6:	22 e0       	ldi	r18, 0x02	; 2
    21f8:	44 e0       	ldi	r20, 0x04	; 4
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	83 e4       	ldi	r24, 0x43	; 67
    21fe:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2202:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2204:	10 92 8a 01 	sts	0x018A, r1
    2208:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    220c:	8a e0       	ldi	r24, 0x0A	; 10
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	90 93 82 01 	sts	0x0182, r25
    2214:	80 93 81 01 	sts	0x0181, r24
    2218:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    221a:	24 e0       	ldi	r18, 0x04	; 4
    221c:	44 e0       	ldi	r20, 0x04	; 4
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	83 e4       	ldi	r24, 0x43	; 67
    2222:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2226:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2228:	10 92 8a 01 	sts	0x018A, r1
    222c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2230:	84 e0       	ldi	r24, 0x04	; 4
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	90 93 82 01 	sts	0x0182, r25
    2238:	80 93 81 01 	sts	0x0181, r24
    223c:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    223e:	22 e0       	ldi	r18, 0x02	; 2
    2240:	44 e0       	ldi	r20, 0x04	; 4
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	84 e4       	ldi	r24, 0x44	; 68
    2246:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    224a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    224c:	10 92 8a 01 	sts	0x018A, r1
    2250:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	90 93 82 01 	sts	0x0182, r25
    225c:	80 93 81 01 	sts	0x0181, r24
    2260:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    2262:	24 e0       	ldi	r18, 0x04	; 4
    2264:	44 e0       	ldi	r20, 0x04	; 4
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	85 e4       	ldi	r24, 0x45	; 69
    226a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    226e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2270:	10 92 8a 01 	sts	0x018A, r1
    2274:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2278:	84 e0       	ldi	r24, 0x04	; 4
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	90 93 82 01 	sts	0x0182, r25
    2280:	80 93 81 01 	sts	0x0181, r24
    2284:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    2286:	22 e0       	ldi	r18, 0x02	; 2
    2288:	44 e0       	ldi	r20, 0x04	; 4
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	84 e4       	ldi	r24, 0x44	; 68
    228e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    2292:	22 e0       	ldi	r18, 0x02	; 2
    2294:	44 e0       	ldi	r20, 0x04	; 4
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	83 e4       	ldi	r24, 0x43	; 67
    229a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    229e:	22 e0       	ldi	r18, 0x02	; 2
    22a0:	43 e0       	ldi	r20, 0x03	; 3
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	81 e4       	ldi	r24, 0x41	; 65
    22a6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    22aa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    22ac:	10 92 8a 01 	sts	0x018A, r1
    22b0:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	90 93 82 01 	sts	0x0182, r25
    22bc:	80 93 81 01 	sts	0x0181, r24
    22c0:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    22c2:	22 e0       	ldi	r18, 0x02	; 2
    22c4:	44 e0       	ldi	r20, 0x04	; 4
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	83 e4       	ldi	r24, 0x43	; 67
    22ca:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    22ce:	22 e0       	ldi	r18, 0x02	; 2
    22d0:	43 e0       	ldi	r20, 0x03	; 3
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	81 e4       	ldi	r24, 0x41	; 65
    22d6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    22da:	22 e0       	ldi	r18, 0x02	; 2
    22dc:	43 e0       	ldi	r20, 0x03	; 3
    22de:	61 e0       	ldi	r22, 0x01	; 1
    22e0:	81 e4       	ldi	r24, 0x41	; 65
    22e2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    22e6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    22e8:	10 92 8a 01 	sts	0x018A, r1
    22ec:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	90 93 82 01 	sts	0x0182, r25
    22f8:	80 93 81 01 	sts	0x0181, r24
    22fc:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    22fe:	22 e0       	ldi	r18, 0x02	; 2
    2300:	44 e0       	ldi	r20, 0x04	; 4
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	85 e4       	ldi	r24, 0x45	; 69
    2306:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    230a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    230c:	10 92 8a 01 	sts	0x018A, r1
    2310:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	90 93 82 01 	sts	0x0182, r25
    231c:	80 93 81 01 	sts	0x0181, r24
    2320:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    2322:	22 e0       	ldi	r18, 0x02	; 2
    2324:	44 e0       	ldi	r20, 0x04	; 4
    2326:	61 e0       	ldi	r22, 0x01	; 1
    2328:	85 e4       	ldi	r24, 0x45	; 69
    232a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    232e:	22 e0       	ldi	r18, 0x02	; 2
    2330:	44 e0       	ldi	r20, 0x04	; 4
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	86 e4       	ldi	r24, 0x46	; 70
    2336:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    233a:	22 e0       	ldi	r18, 0x02	; 2
    233c:	44 e0       	ldi	r20, 0x04	; 4
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	87 e4       	ldi	r24, 0x47	; 71
    2342:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    2346:	22 e0       	ldi	r18, 0x02	; 2
    2348:	44 e0       	ldi	r20, 0x04	; 4
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	87 e4       	ldi	r24, 0x47	; 71
    234e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2352:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2354:	10 92 8a 01 	sts	0x018A, r1
    2358:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    235c:	88 e0       	ldi	r24, 0x08	; 8
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	90 93 82 01 	sts	0x0182, r25
    2364:	80 93 81 01 	sts	0x0181, r24
    2368:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    236a:	24 e0       	ldi	r18, 0x04	; 4
    236c:	44 e0       	ldi	r20, 0x04	; 4
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	87 e4       	ldi	r24, 0x47	; 71
    2372:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2376:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2378:	10 92 8a 01 	sts	0x018A, r1
    237c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	90 93 82 01 	sts	0x0182, r25
    2388:	80 93 81 01 	sts	0x0181, r24
    238c:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	44 e0       	ldi	r20, 0x04	; 4
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	87 e4       	ldi	r24, 0x47	; 71
    2396:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    239a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    239c:	10 92 8a 01 	sts	0x018A, r1
    23a0:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	90 93 82 01 	sts	0x0182, r25
    23ac:	80 93 81 01 	sts	0x0181, r24
    23b0:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    23b2:	22 e0       	ldi	r18, 0x02	; 2
    23b4:	44 e0       	ldi	r20, 0x04	; 4
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	87 e4       	ldi	r24, 0x47	; 71
    23ba:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    23be:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    23c0:	10 92 8a 01 	sts	0x018A, r1
    23c4:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	90 93 82 01 	sts	0x0182, r25
    23d0:	80 93 81 01 	sts	0x0181, r24
    23d4:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    23d6:	22 e0       	ldi	r18, 0x02	; 2
    23d8:	43 e0       	ldi	r20, 0x03	; 3
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	85 e4       	ldi	r24, 0x45	; 69
    23de:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    23e2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    23e4:	10 92 8a 01 	sts	0x018A, r1
    23e8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	90 93 82 01 	sts	0x0182, r25
    23f4:	80 93 81 01 	sts	0x0181, r24
    23f8:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    23fa:	22 e0       	ldi	r18, 0x02	; 2
    23fc:	43 e0       	ldi	r20, 0x03	; 3
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	85 e4       	ldi	r24, 0x45	; 69
    2402:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    2406:	22 e0       	ldi	r18, 0x02	; 2
    2408:	43 e0       	ldi	r20, 0x03	; 3
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	86 e4       	ldi	r24, 0x46	; 70
    240e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    2412:	22 e0       	ldi	r18, 0x02	; 2
    2414:	43 e0       	ldi	r20, 0x03	; 3
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	87 e4       	ldi	r24, 0x47	; 71
    241a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    241e:	22 e0       	ldi	r18, 0x02	; 2
    2420:	43 e0       	ldi	r20, 0x03	; 3
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	87 e4       	ldi	r24, 0x47	; 71
    2426:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    242a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    242c:	10 92 8a 01 	sts	0x018A, r1
    2430:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2434:	84 e0       	ldi	r24, 0x04	; 4
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	90 93 82 01 	sts	0x0182, r25
    243c:	80 93 81 01 	sts	0x0181, r24
    2440:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    2442:	22 e0       	ldi	r18, 0x02	; 2
    2444:	44 e0       	ldi	r20, 0x04	; 4
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	84 e4       	ldi	r24, 0x44	; 68
    244a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    244e:	22 e0       	ldi	r18, 0x02	; 2
    2450:	44 e0       	ldi	r20, 0x04	; 4
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	83 e4       	ldi	r24, 0x43	; 67
    2456:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    245a:	22 e0       	ldi	r18, 0x02	; 2
    245c:	43 e0       	ldi	r20, 0x03	; 3
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	81 e4       	ldi	r24, 0x41	; 65
    2462:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2466:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2468:	10 92 8a 01 	sts	0x018A, r1
    246c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	90 93 82 01 	sts	0x0182, r25
    2478:	80 93 81 01 	sts	0x0181, r24
    247c:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    247e:	22 e0       	ldi	r18, 0x02	; 2
    2480:	44 e0       	ldi	r20, 0x04	; 4
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	83 e4       	ldi	r24, 0x43	; 67
    2486:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    248a:	22 e0       	ldi	r18, 0x02	; 2
    248c:	43 e0       	ldi	r20, 0x03	; 3
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	81 e4       	ldi	r24, 0x41	; 65
    2492:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    2496:	22 e0       	ldi	r18, 0x02	; 2
    2498:	43 e0       	ldi	r20, 0x03	; 3
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	81 e4       	ldi	r24, 0x41	; 65
    249e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    24a2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    24a4:	10 92 8a 01 	sts	0x018A, r1
    24a8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	90 93 82 01 	sts	0x0182, r25
    24b4:	80 93 81 01 	sts	0x0181, r24
    24b8:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    24ba:	22 e0       	ldi	r18, 0x02	; 2
    24bc:	44 e0       	ldi	r20, 0x04	; 4
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	85 e4       	ldi	r24, 0x45	; 69
    24c2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    24c6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    24c8:	10 92 8a 01 	sts	0x018A, r1
    24cc:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	90 93 82 01 	sts	0x0182, r25
    24d8:	80 93 81 01 	sts	0x0181, r24
    24dc:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    24de:	22 e0       	ldi	r18, 0x02	; 2
    24e0:	44 e0       	ldi	r20, 0x04	; 4
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	85 e4       	ldi	r24, 0x45	; 69
    24e6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    24ea:	22 e0       	ldi	r18, 0x02	; 2
    24ec:	44 e0       	ldi	r20, 0x04	; 4
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	86 e4       	ldi	r24, 0x46	; 70
    24f2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    24f6:	22 e0       	ldi	r18, 0x02	; 2
    24f8:	44 e0       	ldi	r20, 0x04	; 4
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	87 e4       	ldi	r24, 0x47	; 71
    24fe:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    2502:	22 e0       	ldi	r18, 0x02	; 2
    2504:	44 e0       	ldi	r20, 0x04	; 4
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	87 e4       	ldi	r24, 0x47	; 71
    250a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    250e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2510:	10 92 8a 01 	sts	0x018A, r1
    2514:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2518:	88 e0       	ldi	r24, 0x08	; 8
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	90 93 82 01 	sts	0x0182, r25
    2520:	80 93 81 01 	sts	0x0181, r24
    2524:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    2526:	22 e0       	ldi	r18, 0x02	; 2
    2528:	43 e0       	ldi	r20, 0x03	; 3
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	82 e4       	ldi	r24, 0x42	; 66
    252e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    2532:	22 e0       	ldi	r18, 0x02	; 2
    2534:	44 e0       	ldi	r20, 0x04	; 4
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	84 e4       	ldi	r24, 0x44	; 68
    253a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    253e:	22 e0       	ldi	r18, 0x02	; 2
    2540:	44 e0       	ldi	r20, 0x04	; 4
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	83 e4       	ldi	r24, 0x43	; 67
    2546:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    254a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    254c:	10 92 8a 01 	sts	0x018A, r1
    2550:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	90 93 82 01 	sts	0x0182, r25
    255c:	80 93 81 01 	sts	0x0181, r24
    2560:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    2562:	22 e0       	ldi	r18, 0x02	; 2
    2564:	44 e0       	ldi	r20, 0x04	; 4
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	85 e4       	ldi	r24, 0x45	; 69
    256a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    256e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2570:	10 92 8a 01 	sts	0x018A, r1
    2574:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	90 93 82 01 	sts	0x0182, r25
    2580:	80 93 81 01 	sts	0x0181, r24
    2584:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    2586:	22 e0       	ldi	r18, 0x02	; 2
    2588:	44 e0       	ldi	r20, 0x04	; 4
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	87 e4       	ldi	r24, 0x47	; 71
    258e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    2592:	22 e0       	ldi	r18, 0x02	; 2
    2594:	44 e0       	ldi	r20, 0x04	; 4
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	86 e4       	ldi	r24, 0x46	; 70
    259a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    259e:	24 e0       	ldi	r18, 0x04	; 4
    25a0:	44 e0       	ldi	r20, 0x04	; 4
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	81 e4       	ldi	r24, 0x41	; 65
    25a6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    25aa:	22 e0       	ldi	r18, 0x02	; 2
    25ac:	44 e0       	ldi	r20, 0x04	; 4
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	87 e4       	ldi	r24, 0x47	; 71
    25b2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25b6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    25b8:	10 92 8a 01 	sts	0x018A, r1
    25bc:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	90 93 82 01 	sts	0x0182, r25
    25c8:	80 93 81 01 	sts	0x0181, r24
    25cc:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    25ce:	22 e0       	ldi	r18, 0x02	; 2
    25d0:	44 e0       	ldi	r20, 0x04	; 4
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	85 e4       	ldi	r24, 0x45	; 69
    25d6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    25da:	23 e0       	ldi	r18, 0x03	; 3
    25dc:	43 e0       	ldi	r20, 0x03	; 3
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	87 e4       	ldi	r24, 0x47	; 71
    25e2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    25e6:	24 e0       	ldi	r18, 0x04	; 4
    25e8:	43 e0       	ldi	r20, 0x03	; 3
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	81 e4       	ldi	r24, 0x41	; 65
    25ee:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    25f2:	22 e0       	ldi	r18, 0x02	; 2
    25f4:	43 e0       	ldi	r20, 0x03	; 3
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	82 e4       	ldi	r24, 0x42	; 66
    25fa:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25fe:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2600:	10 92 8a 01 	sts	0x018A, r1
    2604:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	90 93 82 01 	sts	0x0182, r25
    2610:	80 93 81 01 	sts	0x0181, r24
    2614:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    2616:	22 e0       	ldi	r18, 0x02	; 2
    2618:	43 e0       	ldi	r20, 0x03	; 3
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	82 e4       	ldi	r24, 0x42	; 66
    261e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2622:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2624:	10 92 8a 01 	sts	0x018A, r1
    2628:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	90 93 82 01 	sts	0x0182, r25
    2634:	80 93 81 01 	sts	0x0181, r24
    2638:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    263a:	22 e0       	ldi	r18, 0x02	; 2
    263c:	43 e0       	ldi	r20, 0x03	; 3
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	81 e4       	ldi	r24, 0x41	; 65
    2642:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2646:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2648:	10 92 8a 01 	sts	0x018A, r1
    264c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	90 93 82 01 	sts	0x0182, r25
    2658:	80 93 81 01 	sts	0x0181, r24
    265c:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    265e:	24 e0       	ldi	r18, 0x04	; 4
    2660:	43 e0       	ldi	r20, 0x03	; 3
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	85 e4       	ldi	r24, 0x45	; 69
    2666:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    266a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    266c:	10 92 8a 01 	sts	0x018A, r1
    2670:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	90 93 82 01 	sts	0x0182, r25
    267c:	80 93 81 01 	sts	0x0181, r24
    2680:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    2682:	22 e0       	ldi	r18, 0x02	; 2
    2684:	43 e0       	ldi	r20, 0x03	; 3
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	87 e4       	ldi	r24, 0x47	; 71
    268a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    268e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2690:	10 92 8a 01 	sts	0x018A, r1
    2694:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	90 93 82 01 	sts	0x0182, r25
    26a0:	80 93 81 01 	sts	0x0181, r24
    26a4:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    26a6:	25 e0       	ldi	r18, 0x05	; 5
    26a8:	44 e0       	ldi	r20, 0x04	; 4
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	83 e4       	ldi	r24, 0x43	; 67
    26ae:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26b2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26b4:	10 92 8a 01 	sts	0x018A, r1
    26b8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	90 93 82 01 	sts	0x0182, r25
    26c4:	80 93 81 01 	sts	0x0181, r24
    26c8:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    26ca:	22 e0       	ldi	r18, 0x02	; 2
    26cc:	43 e0       	ldi	r20, 0x03	; 3
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	82 e4       	ldi	r24, 0x42	; 66
    26d2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    26d6:	22 e0       	ldi	r18, 0x02	; 2
    26d8:	44 e0       	ldi	r20, 0x04	; 4
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	84 e4       	ldi	r24, 0x44	; 68
    26de:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    26e2:	22 e0       	ldi	r18, 0x02	; 2
    26e4:	44 e0       	ldi	r20, 0x04	; 4
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	83 e4       	ldi	r24, 0x43	; 67
    26ea:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26ee:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26f0:	10 92 8a 01 	sts	0x018A, r1
    26f4:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	90 93 82 01 	sts	0x0182, r25
    2700:	80 93 81 01 	sts	0x0181, r24
    2704:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    2706:	22 e0       	ldi	r18, 0x02	; 2
    2708:	44 e0       	ldi	r20, 0x04	; 4
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	85 e4       	ldi	r24, 0x45	; 69
    270e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2712:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2714:	10 92 8a 01 	sts	0x018A, r1
    2718:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	90 93 82 01 	sts	0x0182, r25
    2724:	80 93 81 01 	sts	0x0181, r24
    2728:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    272a:	22 e0       	ldi	r18, 0x02	; 2
    272c:	44 e0       	ldi	r20, 0x04	; 4
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	87 e4       	ldi	r24, 0x47	; 71
    2732:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    2736:	22 e0       	ldi	r18, 0x02	; 2
    2738:	44 e0       	ldi	r20, 0x04	; 4
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	86 e4       	ldi	r24, 0x46	; 70
    273e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    2742:	24 e0       	ldi	r18, 0x04	; 4
    2744:	44 e0       	ldi	r20, 0x04	; 4
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	81 e4       	ldi	r24, 0x41	; 65
    274a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    274e:	22 e0       	ldi	r18, 0x02	; 2
    2750:	44 e0       	ldi	r20, 0x04	; 4
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	87 e4       	ldi	r24, 0x47	; 71
    2756:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    275a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    275c:	10 92 8a 01 	sts	0x018A, r1
    2760:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	90 93 82 01 	sts	0x0182, r25
    276c:	80 93 81 01 	sts	0x0181, r24
    2770:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    2772:	22 e0       	ldi	r18, 0x02	; 2
    2774:	44 e0       	ldi	r20, 0x04	; 4
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	85 e4       	ldi	r24, 0x45	; 69
    277a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    277e:	23 e0       	ldi	r18, 0x03	; 3
    2780:	43 e0       	ldi	r20, 0x03	; 3
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	87 e4       	ldi	r24, 0x47	; 71
    2786:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    278a:	24 e0       	ldi	r18, 0x04	; 4
    278c:	43 e0       	ldi	r20, 0x03	; 3
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	81 e4       	ldi	r24, 0x41	; 65
    2792:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    2796:	22 e0       	ldi	r18, 0x02	; 2
    2798:	43 e0       	ldi	r20, 0x03	; 3
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	82 e4       	ldi	r24, 0x42	; 66
    279e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27a2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27a4:	10 92 8a 01 	sts	0x018A, r1
    27a8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	90 93 82 01 	sts	0x0182, r25
    27b4:	80 93 81 01 	sts	0x0181, r24
    27b8:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    27ba:	22 e0       	ldi	r18, 0x02	; 2
    27bc:	43 e0       	ldi	r20, 0x03	; 3
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	82 e4       	ldi	r24, 0x42	; 66
    27c2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27c6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27c8:	10 92 8a 01 	sts	0x018A, r1
    27cc:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	90 93 82 01 	sts	0x0182, r25
    27d8:	80 93 81 01 	sts	0x0181, r24
    27dc:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    27de:	22 e0       	ldi	r18, 0x02	; 2
    27e0:	43 e0       	ldi	r20, 0x03	; 3
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	81 e4       	ldi	r24, 0x41	; 65
    27e6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27ea:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27ec:	10 92 8a 01 	sts	0x018A, r1
    27f0:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	90 93 82 01 	sts	0x0182, r25
    27fc:	80 93 81 01 	sts	0x0181, r24
    2800:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    2802:	24 e0       	ldi	r18, 0x04	; 4
    2804:	43 e0       	ldi	r20, 0x03	; 3
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	85 e4       	ldi	r24, 0x45	; 69
    280a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    280e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2810:	10 92 8a 01 	sts	0x018A, r1
    2814:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2818:	84 e0       	ldi	r24, 0x04	; 4
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	90 93 82 01 	sts	0x0182, r25
    2820:	80 93 81 01 	sts	0x0181, r24
    2824:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    2826:	22 e0       	ldi	r18, 0x02	; 2
    2828:	43 e0       	ldi	r20, 0x03	; 3
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	87 e4       	ldi	r24, 0x47	; 71
    282e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    2832:	25 e0       	ldi	r18, 0x05	; 5
    2834:	44 e0       	ldi	r20, 0x04	; 4
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	83 e4       	ldi	r24, 0x43	; 67
    283a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    283e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2840:	10 92 8a 01 	sts	0x018A, r1
    2844:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2848:	88 e0       	ldi	r24, 0x08	; 8
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	90 93 82 01 	sts	0x0182, r25
    2850:	80 93 81 01 	sts	0x0181, r24
    2854:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    2856:	28 e0       	ldi	r18, 0x08	; 8
    2858:	42 e0       	ldi	r20, 0x02	; 2
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	87 e4       	ldi	r24, 0x47	; 71
    285e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    2862:	28 e0       	ldi	r18, 0x08	; 8
    2864:	44 e0       	ldi	r20, 0x04	; 4
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	87 e4       	ldi	r24, 0x47	; 71
    286a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    286e:	24 e0       	ldi	r18, 0x04	; 4
    2870:	44 e0       	ldi	r20, 0x04	; 4
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	85 e4       	ldi	r24, 0x45	; 69
    2876:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    287a:	22 e0       	ldi	r18, 0x02	; 2
    287c:	44 e0       	ldi	r20, 0x04	; 4
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	83 e4       	ldi	r24, 0x43	; 67
    2882:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2886:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2888:	10 92 8a 01 	sts	0x018A, r1
    288c:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2890:	82 e0       	ldi	r24, 0x02	; 2
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	90 93 82 01 	sts	0x0182, r25
    2898:	80 93 81 01 	sts	0x0181, r24
    289c:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    289e:	22 e0       	ldi	r18, 0x02	; 2
    28a0:	44 e0       	ldi	r20, 0x04	; 4
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	85 e4       	ldi	r24, 0x45	; 69
    28a6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28aa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28ac:	10 92 8a 01 	sts	0x018A, r1
    28b0:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	90 93 82 01 	sts	0x0182, r25
    28bc:	80 93 81 01 	sts	0x0181, r24
    28c0:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    28c2:	23 e0       	ldi	r18, 0x03	; 3
    28c4:	44 e0       	ldi	r20, 0x04	; 4
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	85 e4       	ldi	r24, 0x45	; 69
    28ca:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28ce:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28d0:	10 92 8a 01 	sts	0x018A, r1
    28d4:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	90 93 82 01 	sts	0x0182, r25
    28e0:	80 93 81 01 	sts	0x0181, r24
    28e4:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	44 e0       	ldi	r20, 0x04	; 4
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	85 e4       	ldi	r24, 0x45	; 69
    28ee:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28f2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28f4:	10 92 8a 01 	sts	0x018A, r1
    28f8:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    28fc:	88 e0       	ldi	r24, 0x08	; 8
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	90 93 82 01 	sts	0x0182, r25
    2904:	80 93 81 01 	sts	0x0181, r24
    2908:	08 95       	ret

0000290a <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    290a:	8f 31       	cpi	r24, 0x1F	; 31
    290c:	91 05       	cpc	r25, r1
    290e:	20 f0       	brcs	.+8      	; 0x2918 <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	80 93 7d 01 	sts	0x017D, r24
    2916:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    2918:	fc 01       	movw	r30, r24
    291a:	e7 50       	subi	r30, 0x07	; 7
    291c:	fe 4f       	sbci	r31, 0xFE	; 254
    291e:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2922:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2924:	10 92 8a 01 	sts	0x018A, r1
    2928:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	90 93 82 01 	sts	0x0182, r25
    2934:	80 93 81 01 	sts	0x0181, r24
    2938:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    293a:	24 e0       	ldi	r18, 0x04	; 4
    293c:	45 e0       	ldi	r20, 0x05	; 5
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	85 e4       	ldi	r24, 0x45	; 69
    2942:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    2946:	27 e0       	ldi	r18, 0x07	; 7
    2948:	44 e0       	ldi	r20, 0x04	; 4
    294a:	60 e0       	ldi	r22, 0x00	; 0
    294c:	85 e4       	ldi	r24, 0x45	; 69
    294e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    2952:	27 e0       	ldi	r18, 0x07	; 7
    2954:	44 e0       	ldi	r20, 0x04	; 4
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	85 e4       	ldi	r24, 0x45	; 69
    295a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    295e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2960:	10 92 8a 01 	sts	0x018A, r1
    2964:	10 92 89 01 	sts	0x0189, r1
  max_beat = duration;
    2968:	85 e0       	ldi	r24, 0x05	; 5
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	90 93 82 01 	sts	0x0182, r25
    2970:	80 93 81 01 	sts	0x0181, r24
    2974:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    2976:	28 e0       	ldi	r18, 0x08	; 8
    2978:	45 e0       	ldi	r20, 0x05	; 5
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	85 e4       	ldi	r24, 0x45	; 69
    297e:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    2982:	23 e0       	ldi	r18, 0x03	; 3
    2984:	44 e0       	ldi	r20, 0x04	; 4
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	85 e4       	ldi	r24, 0x45	; 69
    298a:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    298e:	23 e0       	ldi	r18, 0x03	; 3
    2990:	44 e0       	ldi	r20, 0x04	; 4
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	85 e4       	ldi	r24, 0x45	; 69
    2996:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    299a:	28 e0       	ldi	r18, 0x08	; 8
    299c:	45 e0       	ldi	r20, 0x05	; 5
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	87 e4       	ldi	r24, 0x47	; 71
    29a2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    29a6:	24 e0       	ldi	r18, 0x04	; 4
    29a8:	45 e0       	ldi	r20, 0x05	; 5
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	85 e4       	ldi	r24, 0x45	; 69
    29ae:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    29b2:	23 e0       	ldi	r18, 0x03	; 3
    29b4:	45 e0       	ldi	r20, 0x05	; 5
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	85 e4       	ldi	r24, 0x45	; 69
    29ba:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    29be:	24 e0       	ldi	r18, 0x04	; 4
    29c0:	45 e0       	ldi	r20, 0x05	; 5
    29c2:	61 e0       	ldi	r22, 0x01	; 1
    29c4:	87 e4       	ldi	r24, 0x47	; 71
    29c6:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    29ca:	28 e0       	ldi	r18, 0x08	; 8
    29cc:	45 e0       	ldi	r20, 0x05	; 5
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	87 e4       	ldi	r24, 0x47	; 71
    29d2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <play_note>

000029d6 <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    29d6:	81 30       	cpi	r24, 0x01	; 1
    29d8:	89 f0       	breq	.+34     	; 0x29fc <play_song+0x26>
    29da:	60 f0       	brcs	.+24     	; 0x29f4 <play_song+0x1e>
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	31 f0       	breq	.+12     	; 0x29ec <play_song+0x16>
    29e0:	83 30       	cpi	r24, 0x03	; 3
    29e2:	41 f4       	brne	.+16     	; 0x29f4 <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    29e4:	86 2f       	mov	r24, r22
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0c 94 85 14 	jmp	0x290a	; 0x290a <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    29ec:	86 2f       	mov	r24, r22
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    29f4:	86 2f       	mov	r24, r22
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    29fc:	86 2f       	mov	r24, r22
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <song1>

00002a04 <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    2a04:	10 92 7d 01 	sts	0x017D, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2a08:	8e b5       	in	r24, 0x2e	; 46
    2a0a:	8c 7f       	andi	r24, 0xFC	; 252
    2a0c:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    2a0e:	92 9a       	sbi	0x12, 2	; 18
    2a10:	08 95       	ret

00002a12 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    2a12:	10 92 7d 01 	sts	0x017D, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    2a16:	8e b5       	in	r24, 0x2e	; 46
    2a18:	83 60       	ori	r24, 0x03	; 3
    2a1a:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    2a1c:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    2a1e:	60 91 7d 01 	lds	r22, 0x017D
    2a22:	80 91 7e 01 	lds	r24, 0x017E
    2a26:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <play_song>

00002a2a <music_init>:
    2a2a:	87 b7       	in	r24, 0x37	; 55
    2a2c:	80 61       	ori	r24, 0x10	; 16
    2a2e:	87 bf       	out	0x37, r24	; 55
    2a30:	1f bc       	out	0x2f, r1	; 47
    2a32:	8e b5       	in	r24, 0x2e	; 46
    2a34:	88 60       	ori	r24, 0x08	; 8
    2a36:	8e bd       	out	0x2e, r24	; 46
    2a38:	10 92 7a 00 	sts	0x007A, r1
    2a3c:	81 e3       	ldi	r24, 0x31	; 49
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	9b bd       	out	0x2b, r25	; 43
    2a42:	8a bd       	out	0x2a, r24	; 42
    2a44:	10 92 7d 01 	sts	0x017D, r1
    2a48:	8e b5       	in	r24, 0x2e	; 46
    2a4a:	8c 7f       	andi	r24, 0xFC	; 252
    2a4c:	8e bd       	out	0x2e, r24	; 46
    2a4e:	92 9a       	sbi	0x12, 2	; 18
    2a50:	10 92 8a 01 	sts	0x018A, r1
    2a54:	10 92 89 01 	sts	0x0189, r1
    2a58:	10 92 82 01 	sts	0x0182, r1
    2a5c:	10 92 81 01 	sts	0x0181, r1
    2a60:	10 92 7d 01 	sts	0x017D, r1
    2a64:	10 92 7e 01 	sts	0x017E, r1
    2a68:	08 95       	ret

00002a6a <main>:
}

int main()
{
/*******************part 5 ******************/
 DDRF |= 0x08; //lcd strobe bit
    2a6a:	80 91 61 00 	lds	r24, 0x0061
    2a6e:	88 60       	ori	r24, 0x08	; 8
    2a70:	80 93 61 00 	sts	0x0061, r24
  uart_init();  
    2a74:	0e 94 d5 06 	call	0xdaa	; 0xdaa <uart_init>
extern uint8_t lm73_wr_buf[2]; 
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
    2a78:	87 b3       	in	r24, 0x17	; 23
    2a7a:	87 60       	ori	r24, 0x07	; 7
    2a7c:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
    2a7e:	8d b1       	in	r24, 0x0d	; 13
    2a80:	80 65       	ori	r24, 0x50	; 80
    2a82:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
    2a84:	70 9a       	sbi	0x0e, 0	; 14
/*******************part 5 ******************/
 DDRF |= 0x08; //lcd strobe bit
  uart_init();  
  spi_init();
 // lcd_init();
  clear_display();
    2a86:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <clear_display>
  cursor_home();
    2a8a:	0e 94 fc 07 	call	0xff8	; 0xff8 <cursor_home>
  init_twi();
    2a8e:	0e 94 cf 0a 	call	0x159e	; 0x159e <init_twi>

 
 
lm73_wr_buf[0] = 0x90; //load lm73_wr_buf[0] with temperature pointer address
    2a92:	80 e9       	ldi	r24, 0x90	; 144
    2a94:	80 93 86 02 	sts	0x0286, r24
twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);//start the TWI write process
    2a98:	42 e0       	ldi	r20, 0x02	; 2
    2a9a:	66 e8       	ldi	r22, 0x86	; 134
    2a9c:	72 e0       	ldi	r23, 0x02	; 2
    2a9e:	0e 94 ad 0a 	call	0x155a	; 0x155a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2aa2:	83 ef       	ldi	r24, 0xF3	; 243
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <main+0x3c>
    2aaa:	00 c0       	rjmp	.+0      	; 0x2aac <main+0x42>
    2aac:	00 00       	nop
_delay_ms(2);    //wait for the xfer to finish
//clear_display(); //clean up the display

/************set up ports *******/
  DDRA = 0xFF; 
    2aae:	cf ef       	ldi	r28, 0xFF	; 255
    2ab0:	ca bb       	out	0x1a, r28	; 26
  DDRB =0xF7;  //enabling the bits from 0 to 2 as well as the upper nibble  
    2ab2:	87 ef       	ldi	r24, 0xF7	; 247
    2ab4:	87 bb       	out	0x17, r24	; 23
  DDRE = 0xC0;  // enabling bit 6 and 7
    2ab6:	80 ec       	ldi	r24, 0xC0	; 192
    2ab8:	82 b9       	out	0x02, r24	; 2
  PORTE= 0x40;  //  bit 6 as high for the SPDR and graph
    2aba:	90 e4       	ldi	r25, 0x40	; 64
    2abc:	93 b9       	out	0x03, r25	; 3
/******************/
/*******TIMER 0 *********/
TIMSK |= (1<<TOIE0); 
    2abe:	87 b7       	in	r24, 0x37	; 55
    2ac0:	81 60       	ori	r24, 0x01	; 1
    2ac2:	87 bf       	out	0x37, r24	; 55
/*TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);*/  //Normal mode but not 128
TCCR0 |= (1<<CS00);
    2ac4:	83 b7       	in	r24, 0x33	; 51
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	83 bf       	out	0x33, r24	; 51
ASSR  |= (1 <<AS0);
    2aca:	80 b7       	in	r24, 0x30	; 48
    2acc:	88 60       	ori	r24, 0x08	; 8
    2ace:	80 bf       	out	0x30, r24	; 48

 /*while(bit_is_set(ASSR, TCN0UB));
  while(bit_is_set(ASSR, OCR0UB));
  while(bit_is_set(ASSR, TCR0UB));*/
/***********************************TIMER2*****************/
TCCR2|= (1<<WGM21) |(1<< WGM20) | (1<<COM21) |(1<<CS21) |(1<<CS20);
    2ad0:	85 b5       	in	r24, 0x25	; 37
    2ad2:	8b 66       	ori	r24, 0x6B	; 107
    2ad4:	85 bd       	out	0x25, r24	; 37

/******ADC Configures****************/

DDRF|=0x01;  //using pin 1 in the portf
    2ad6:	80 91 61 00 	lds	r24, 0x0061
    2ada:	81 60       	ori	r24, 0x01	; 1
    2adc:	80 93 61 00 	sts	0x0061, r24
PORTF=0x01;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	80 93 62 00 	sts	0x0062, r24

ADMUX= (1<<REFS0); //with external cappacitor, the light sensor one. 
    2ae6:	97 b9       	out	0x07, r25	; 7

ADCSRA= (1<< ADEN) | (1 <<ADIE) | (1<<ADPS0) | (1<<ADPS1)|(1<<ADPS2); //|(1 <<ADSC);
    2ae8:	8f e8       	ldi	r24, 0x8F	; 143
    2aea:	86 b9       	out	0x06, r24	; 6

/******************THE SPDR and BARGRAPH******************************************/
SPCR = (1 << SPE) | (1 << MSTR) ;
    2aec:	80 e5       	ldi	r24, 0x50	; 80
    2aee:	8d b9       	out	0x0d, r24	; 13
/**********************************AUDIO PORT and TIMER1***************************************/
DDRD=0xff;
    2af0:	c1 bb       	out	0x11, r28	; 17
TCCR1C |=0x00;
//OCR1A   =20000;
TIMSK |= (1<<OCIE1A);
*/

music_init();
    2af2:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <music_init>
//OCR1A   =30000;
/**************************TIMER 3 VOlume ********************/
DDRE|=0x08;
    2af6:	13 9a       	sbi	0x02, 3	; 2

TCCR3A |= (1<< COM3A1) |(1<<WGM31);
    2af8:	80 91 8b 00 	lds	r24, 0x008B
    2afc:	82 68       	ori	r24, 0x82	; 130
    2afe:	80 93 8b 00 	sts	0x008B, r24
TCCR3B |= (1 <<WGM32) | (1 <<CS31);
    2b02:	80 91 8a 00 	lds	r24, 0x008A
    2b06:	8a 60       	ori	r24, 0x0A	; 10
    2b08:	80 93 8a 00 	sts	0x008A, r24
TCCR3C|=0x00;
    2b0c:	80 91 8c 00 	lds	r24, 0x008C
    2b10:	80 93 8c 00 	sts	0x008C, r24

OCR3A=1000;
    2b14:	88 ee       	ldi	r24, 0xE8	; 232
    2b16:	93 e0       	ldi	r25, 0x03	; 3
    2b18:	90 93 87 00 	sts	0x0087, r25
    2b1c:	80 93 86 00 	sts	0x0086, r24

//vol_n=1000;
/***********************************************************/
	lcd_init();
    2b20:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_init>

	clear_display();
    2b24:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <clear_display>
	string2lcd("Mohammed");
    2b28:	8d e2       	ldi	r24, 0x2D	; 45
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	0e 94 21 08 	call	0x1042	; 0x1042 <string2lcd>
	//_delay_ms(1000);	
	sei(); 
    2b30:	78 94       	sei
 	DDRA = 0xFF; 
    2b32:	ca bb       	out	0x1a, r28	; 26
	PORTB =0x70;
    2b34:	80 e7       	ldi	r24, 0x70	; 112
    2b36:	88 bb       	out	0x18, r24	; 24
//	music_on();
//	checker();
	 sei();
    2b38:	78 94       	sei
		//OCR1A= 10000;
		}
	}
	else{
		display_digits();
		strcpy(lcd_now,"           ");
    2b3a:	0c e0       	ldi	r16, 0x0C	; 12
		
	}

	else if(alarmON){
		display_digits();
		strcpy(lcd_now,"Wake UP");
    2b3c:	18 e0       	ldi	r17, 0x08	; 8
		vol_n=700;
    2b3e:	cc eb       	ldi	r28, 0xBC	; 188
    2b40:	d2 e0       	ldi	r29, 0x02	; 2
		if(fix==0){
		music_on();
		fix=1;		
    2b42:	ee 24       	eor	r14, r14
    2b44:	e3 94       	inc	r14
/*******displying part*********/
	//get_128();
	
	if (alarm){
		display_alarm();
		strcpy(lcd_now,"set alarm");	
    2b46:	8a e0       	ldi	r24, 0x0A	; 10
    2b48:	f8 2e       	mov	r15, r24
    2b4a:	20 c0       	rjmp	.+64     	; 0x2b8c <main+0x122>
		
		
	}

	else if(alarmON){
		display_digits();
    2b4c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <display_digits>
		strcpy(lcd_now,"Wake UP");
    2b50:	e0 e4       	ldi	r30, 0x40	; 64
    2b52:	f1 e0       	ldi	r31, 0x01	; 1
    2b54:	a9 e6       	ldi	r26, 0x69	; 105
    2b56:	b1 e0       	ldi	r27, 0x01	; 1
    2b58:	81 2f       	mov	r24, r17
    2b5a:	01 90       	ld	r0, Z+
    2b5c:	0d 92       	st	X+, r0
    2b5e:	8a 95       	dec	r24
    2b60:	e1 f7       	brne	.-8      	; 0x2b5a <main+0xf0>
		vol_n=700;
    2b62:	d0 93 21 01 	sts	0x0121, r29
    2b66:	c0 93 20 01 	sts	0x0120, r28
		if(fix==0){
    2b6a:	80 91 56 01 	lds	r24, 0x0156
    2b6e:	88 23       	and	r24, r24
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <main+0x10a>
    2b72:	40 c0       	rjmp	.+128    	; 0x2bf4 <main+0x18a>
	else{OCR2=210;}
	*/

	
 	//OCR1A   =40000;
	lcd_control();
    2b74:	0e 94 17 05 	call	0xa2e	; 0xa2e <lcd_control>

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
    2b78:	90 91 25 01 	lds	r25, 0x0125
    2b7c:	80 91 24 01 	lds	r24, 0x0124
    2b80:	98 17       	cp	r25, r24
    2b82:	19 f1       	breq	.+70     	; 0x2bca <main+0x160>
	alarmON=1;
}

else{

	alarmON=0;
    2b84:	10 92 5b 01 	sts	0x015B, r1
	
 	//OCR1A   =40000;
	lcd_control();

	alarm_check();
	checker();
    2b88:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <checker>
	//OCR2=250;
	//music_on();
/*******displying part*********/
	//get_128();
	
	if (alarm){
    2b8c:	80 91 83 01 	lds	r24, 0x0183
    2b90:	81 11       	cpse	r24, r1
    2b92:	24 c0       	rjmp	.+72     	; 0x2bdc <main+0x172>
		strcpy(lcd_now,"set alarm");	
		
		
	}

	else if(alarmON){
    2b94:	80 91 5b 01 	lds	r24, 0x015B
    2b98:	81 11       	cpse	r24, r1
    2b9a:	d8 cf       	rjmp	.-80     	; 0x2b4c <main+0xe2>
		fix=1;		
		//OCR1A= 10000;
		}
	}
	else{
		display_digits();
    2b9c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <display_digits>
		strcpy(lcd_now,"           ");
    2ba0:	e8 e4       	ldi	r30, 0x48	; 72
    2ba2:	f1 e0       	ldi	r31, 0x01	; 1
    2ba4:	a9 e6       	ldi	r26, 0x69	; 105
    2ba6:	b1 e0       	ldi	r27, 0x01	; 1
    2ba8:	80 2f       	mov	r24, r16
    2baa:	01 90       	ld	r0, Z+
    2bac:	0d 92       	st	X+, r0
    2bae:	8a 95       	dec	r24
    2bb0:	e1 f7       	brne	.-8      	; 0x2baa <main+0x140>
		//strcpy(lcd_now,adcr);
		//OCR1A=0;
		
		music_off();
    2bb2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <music_off>
		fix=0;
    2bb6:	10 92 56 01 	sts	0x0156, r1
	else{OCR2=210;}
	*/

	
 	//OCR1A   =40000;
	lcd_control();
    2bba:	0e 94 17 05 	call	0xa2e	; 0xa2e <lcd_control>

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
    2bbe:	90 91 25 01 	lds	r25, 0x0125
    2bc2:	80 91 24 01 	lds	r24, 0x0124
    2bc6:	98 13       	cpse	r25, r24
    2bc8:	dd cf       	rjmp	.-70     	; 0x2b84 <main+0x11a>
    2bca:	90 91 5c 01 	lds	r25, 0x015C
    2bce:	80 91 23 01 	lds	r24, 0x0123
    2bd2:	98 13       	cpse	r25, r24
    2bd4:	d7 cf       	rjmp	.-82     	; 0x2b84 <main+0x11a>

	alarmON=1;
    2bd6:	e0 92 5b 01 	sts	0x015B, r14
    2bda:	d6 cf       	rjmp	.-84     	; 0x2b88 <main+0x11e>
	//music_on();
/*******displying part*********/
	//get_128();
	
	if (alarm){
		display_alarm();
    2bdc:	0e 94 a5 02 	call	0x54a	; 0x54a <display_alarm>
		strcpy(lcd_now,"set alarm");	
    2be0:	e6 e3       	ldi	r30, 0x36	; 54
    2be2:	f1 e0       	ldi	r31, 0x01	; 1
    2be4:	a9 e6       	ldi	r26, 0x69	; 105
    2be6:	b1 e0       	ldi	r27, 0x01	; 1
    2be8:	8f 2d       	mov	r24, r15
    2bea:	01 90       	ld	r0, Z+
    2bec:	0d 92       	st	X+, r0
    2bee:	8a 95       	dec	r24
    2bf0:	e1 f7       	brne	.-8      	; 0x2bea <main+0x180>
    2bf2:	c0 cf       	rjmp	.-128    	; 0x2b74 <main+0x10a>
	else if(alarmON){
		display_digits();
		strcpy(lcd_now,"Wake UP");
		vol_n=700;
		if(fix==0){
		music_on();
    2bf4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <music_on>
		fix=1;		
    2bf8:	e0 92 56 01 	sts	0x0156, r14
    2bfc:	bb cf       	rjmp	.-138    	; 0x2b74 <main+0x10a>

00002bfe <__divmodhi4>:
    2bfe:	97 fb       	bst	r25, 7
    2c00:	07 2e       	mov	r0, r23
    2c02:	16 f4       	brtc	.+4      	; 0x2c08 <__divmodhi4+0xa>
    2c04:	00 94       	com	r0
    2c06:	07 d0       	rcall	.+14     	; 0x2c16 <__divmodhi4_neg1>
    2c08:	77 fd       	sbrc	r23, 7
    2c0a:	09 d0       	rcall	.+18     	; 0x2c1e <__divmodhi4_neg2>
    2c0c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__udivmodhi4>
    2c10:	07 fc       	sbrc	r0, 7
    2c12:	05 d0       	rcall	.+10     	; 0x2c1e <__divmodhi4_neg2>
    2c14:	3e f4       	brtc	.+14     	; 0x2c24 <__divmodhi4_exit>

00002c16 <__divmodhi4_neg1>:
    2c16:	90 95       	com	r25
    2c18:	81 95       	neg	r24
    2c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1c:	08 95       	ret

00002c1e <__divmodhi4_neg2>:
    2c1e:	70 95       	com	r23
    2c20:	61 95       	neg	r22
    2c22:	7f 4f       	sbci	r23, 0xFF	; 255

00002c24 <__divmodhi4_exit>:
    2c24:	08 95       	ret

00002c26 <__divmodsi4>:
    2c26:	05 2e       	mov	r0, r21
    2c28:	97 fb       	bst	r25, 7
    2c2a:	1e f4       	brtc	.+6      	; 0x2c32 <__divmodsi4+0xc>
    2c2c:	00 94       	com	r0
    2c2e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__negsi2>
    2c32:	57 fd       	sbrc	r21, 7
    2c34:	07 d0       	rcall	.+14     	; 0x2c44 <__divmodsi4_neg2>
    2c36:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__udivmodsi4>
    2c3a:	07 fc       	sbrc	r0, 7
    2c3c:	03 d0       	rcall	.+6      	; 0x2c44 <__divmodsi4_neg2>
    2c3e:	4e f4       	brtc	.+18     	; 0x2c52 <__divmodsi4_exit>
    2c40:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__negsi2>

00002c44 <__divmodsi4_neg2>:
    2c44:	50 95       	com	r21
    2c46:	40 95       	com	r20
    2c48:	30 95       	com	r19
    2c4a:	21 95       	neg	r18
    2c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2c50:	5f 4f       	sbci	r21, 0xFF	; 255

00002c52 <__divmodsi4_exit>:
    2c52:	08 95       	ret

00002c54 <__negsi2>:
    2c54:	90 95       	com	r25
    2c56:	80 95       	com	r24
    2c58:	70 95       	com	r23
    2c5a:	61 95       	neg	r22
    2c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c60:	9f 4f       	sbci	r25, 0xFF	; 255
    2c62:	08 95       	ret

00002c64 <__tablejump2__>:
    2c64:	ee 0f       	add	r30, r30
    2c66:	ff 1f       	adc	r31, r31
    2c68:	00 24       	eor	r0, r0
    2c6a:	00 1c       	adc	r0, r0
    2c6c:	0b be       	out	0x3b, r0	; 59
    2c6e:	07 90       	elpm	r0, Z+
    2c70:	f6 91       	elpm	r31, Z
    2c72:	e0 2d       	mov	r30, r0
    2c74:	09 94       	ijmp

00002c76 <__umulhisi3>:
    2c76:	a2 9f       	mul	r26, r18
    2c78:	b0 01       	movw	r22, r0
    2c7a:	b3 9f       	mul	r27, r19
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	a3 9f       	mul	r26, r19
    2c80:	70 0d       	add	r23, r0
    2c82:	81 1d       	adc	r24, r1
    2c84:	11 24       	eor	r1, r1
    2c86:	91 1d       	adc	r25, r1
    2c88:	b2 9f       	mul	r27, r18
    2c8a:	70 0d       	add	r23, r0
    2c8c:	81 1d       	adc	r24, r1
    2c8e:	11 24       	eor	r1, r1
    2c90:	91 1d       	adc	r25, r1
    2c92:	08 95       	ret

00002c94 <__udivmodhi4>:
    2c94:	aa 1b       	sub	r26, r26
    2c96:	bb 1b       	sub	r27, r27
    2c98:	51 e1       	ldi	r21, 0x11	; 17
    2c9a:	07 c0       	rjmp	.+14     	; 0x2caa <__udivmodhi4_ep>

00002c9c <__udivmodhi4_loop>:
    2c9c:	aa 1f       	adc	r26, r26
    2c9e:	bb 1f       	adc	r27, r27
    2ca0:	a6 17       	cp	r26, r22
    2ca2:	b7 07       	cpc	r27, r23
    2ca4:	10 f0       	brcs	.+4      	; 0x2caa <__udivmodhi4_ep>
    2ca6:	a6 1b       	sub	r26, r22
    2ca8:	b7 0b       	sbc	r27, r23

00002caa <__udivmodhi4_ep>:
    2caa:	88 1f       	adc	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	5a 95       	dec	r21
    2cb0:	a9 f7       	brne	.-22     	; 0x2c9c <__udivmodhi4_loop>
    2cb2:	80 95       	com	r24
    2cb4:	90 95       	com	r25
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	08 95       	ret

00002cbc <__udivmodsi4>:
    2cbc:	a1 e2       	ldi	r26, 0x21	; 33
    2cbe:	1a 2e       	mov	r1, r26
    2cc0:	aa 1b       	sub	r26, r26
    2cc2:	bb 1b       	sub	r27, r27
    2cc4:	fd 01       	movw	r30, r26
    2cc6:	0d c0       	rjmp	.+26     	; 0x2ce2 <__udivmodsi4_ep>

00002cc8 <__udivmodsi4_loop>:
    2cc8:	aa 1f       	adc	r26, r26
    2cca:	bb 1f       	adc	r27, r27
    2ccc:	ee 1f       	adc	r30, r30
    2cce:	ff 1f       	adc	r31, r31
    2cd0:	a2 17       	cp	r26, r18
    2cd2:	b3 07       	cpc	r27, r19
    2cd4:	e4 07       	cpc	r30, r20
    2cd6:	f5 07       	cpc	r31, r21
    2cd8:	20 f0       	brcs	.+8      	; 0x2ce2 <__udivmodsi4_ep>
    2cda:	a2 1b       	sub	r26, r18
    2cdc:	b3 0b       	sbc	r27, r19
    2cde:	e4 0b       	sbc	r30, r20
    2ce0:	f5 0b       	sbc	r31, r21

00002ce2 <__udivmodsi4_ep>:
    2ce2:	66 1f       	adc	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	88 1f       	adc	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	1a 94       	dec	r1
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <__udivmodsi4_loop>
    2cee:	60 95       	com	r22
    2cf0:	70 95       	com	r23
    2cf2:	80 95       	com	r24
    2cf4:	90 95       	com	r25
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	bd 01       	movw	r22, r26
    2cfc:	cf 01       	movw	r24, r30
    2cfe:	08 95       	ret

00002d00 <strcmp>:
    2d00:	fb 01       	movw	r30, r22
    2d02:	dc 01       	movw	r26, r24
    2d04:	8d 91       	ld	r24, X+
    2d06:	01 90       	ld	r0, Z+
    2d08:	80 19       	sub	r24, r0
    2d0a:	01 10       	cpse	r0, r1
    2d0c:	d9 f3       	breq	.-10     	; 0x2d04 <strcmp+0x4>
    2d0e:	99 0b       	sbc	r25, r25
    2d10:	08 95       	ret

00002d12 <strcpy>:
    2d12:	fb 01       	movw	r30, r22
    2d14:	dc 01       	movw	r26, r24
    2d16:	01 90       	ld	r0, Z+
    2d18:	0d 92       	st	X+, r0
    2d1a:	00 20       	and	r0, r0
    2d1c:	e1 f7       	brne	.-8      	; 0x2d16 <strcpy+0x4>
    2d1e:	08 95       	ret

00002d20 <__itoa_ncheck>:
    2d20:	bb 27       	eor	r27, r27
    2d22:	4a 30       	cpi	r20, 0x0A	; 10
    2d24:	31 f4       	brne	.+12     	; 0x2d32 <__itoa_ncheck+0x12>
    2d26:	99 23       	and	r25, r25
    2d28:	22 f4       	brpl	.+8      	; 0x2d32 <__itoa_ncheck+0x12>
    2d2a:	bd e2       	ldi	r27, 0x2D	; 45
    2d2c:	90 95       	com	r25
    2d2e:	81 95       	neg	r24
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__utoa_common>

00002d36 <__utoa_ncheck>:
    2d36:	bb 27       	eor	r27, r27

00002d38 <__utoa_common>:
    2d38:	fb 01       	movw	r30, r22
    2d3a:	55 27       	eor	r21, r21
    2d3c:	aa 27       	eor	r26, r26
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	aa 1f       	adc	r26, r26
    2d44:	a4 17       	cp	r26, r20
    2d46:	10 f0       	brcs	.+4      	; 0x2d4c <__utoa_common+0x14>
    2d48:	a4 1b       	sub	r26, r20
    2d4a:	83 95       	inc	r24
    2d4c:	50 51       	subi	r21, 0x10	; 16
    2d4e:	b9 f7       	brne	.-18     	; 0x2d3e <__utoa_common+0x6>
    2d50:	a0 5d       	subi	r26, 0xD0	; 208
    2d52:	aa 33       	cpi	r26, 0x3A	; 58
    2d54:	08 f0       	brcs	.+2      	; 0x2d58 <__utoa_common+0x20>
    2d56:	a9 5d       	subi	r26, 0xD9	; 217
    2d58:	a1 93       	st	Z+, r26
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	79 f7       	brne	.-34     	; 0x2d3c <__utoa_common+0x4>
    2d5e:	b1 11       	cpse	r27, r1
    2d60:	b1 93       	st	Z+, r27
    2d62:	11 92       	st	Z+, r1
    2d64:	cb 01       	movw	r24, r22
    2d66:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <strrev>

00002d6a <strrev>:
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	67 2f       	mov	r22, r23
    2d70:	71 91       	ld	r23, Z+
    2d72:	77 23       	and	r23, r23
    2d74:	e1 f7       	brne	.-8      	; 0x2d6e <strrev+0x4>
    2d76:	32 97       	sbiw	r30, 0x02	; 2
    2d78:	04 c0       	rjmp	.+8      	; 0x2d82 <strrev+0x18>
    2d7a:	7c 91       	ld	r23, X
    2d7c:	6d 93       	st	X+, r22
    2d7e:	70 83       	st	Z, r23
    2d80:	62 91       	ld	r22, -Z
    2d82:	ae 17       	cp	r26, r30
    2d84:	bf 07       	cpc	r27, r31
    2d86:	c8 f3       	brcs	.-14     	; 0x2d7a <strrev+0x10>
    2d88:	08 95       	ret

00002d8a <_exit>:
    2d8a:	f8 94       	cli

00002d8c <__stop_program>:
    2d8c:	ff cf       	rjmp	.-2      	; 0x2d8c <__stop_program>
