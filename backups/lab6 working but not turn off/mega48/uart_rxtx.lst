
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800102  00800102  00000570  2**0
                  ALLOC
  3 .stab         000016c8  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010a8  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	6a c0       	rjmp	.+212    	; 0xd6 <__ctors_end>
   2:	84 c0       	rjmp	.+264    	; 0x10c <__bad_interrupt>
   4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
   6:	82 c0       	rjmp	.+260    	; 0x10c <__bad_interrupt>
   8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
   a:	80 c0       	rjmp	.+256    	; 0x10c <__bad_interrupt>
   c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
   e:	7e c0       	rjmp	.+252    	; 0x10c <__bad_interrupt>
  10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
  12:	7c c0       	rjmp	.+248    	; 0x10c <__bad_interrupt>
  14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
  16:	7a c0       	rjmp	.+244    	; 0x10c <__bad_interrupt>
  18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
  1a:	78 c0       	rjmp	.+240    	; 0x10c <__bad_interrupt>
  1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
  1e:	76 c0       	rjmp	.+236    	; 0x10c <__bad_interrupt>
  20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
  22:	74 c0       	rjmp	.+232    	; 0x10c <__bad_interrupt>
  24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
  26:	72 c0       	rjmp	.+228    	; 0x10c <__bad_interrupt>
  28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
  2a:	70 c0       	rjmp	.+224    	; 0x10c <__bad_interrupt>
  2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
  2e:	6e c0       	rjmp	.+220    	; 0x10c <__bad_interrupt>
  30:	d8 c0       	rjmp	.+432    	; 0x1e2 <__vector_24>
  32:	6c c0       	rjmp	.+216    	; 0x10c <__bad_interrupt>
  34:	12 c1       	rjmp	.+548    	; 0x25a <__vector_24+0x78>
  36:	eb c0       	rjmp	.+470    	; 0x20e <__vector_24+0x2c>
  38:	ea c0       	rjmp	.+468    	; 0x20e <__vector_24+0x2c>
  3a:	e9 c0       	rjmp	.+466    	; 0x20e <__vector_24+0x2c>
  3c:	e8 c0       	rjmp	.+464    	; 0x20e <__vector_24+0x2c>
  3e:	e7 c0       	rjmp	.+462    	; 0x20e <__vector_24+0x2c>
  40:	e6 c0       	rjmp	.+460    	; 0x20e <__vector_24+0x2c>
  42:	e5 c0       	rjmp	.+458    	; 0x20e <__vector_24+0x2c>
  44:	0a c1       	rjmp	.+532    	; 0x25a <__vector_24+0x78>
  46:	e3 c0       	rjmp	.+454    	; 0x20e <__vector_24+0x2c>
  48:	e2 c0       	rjmp	.+452    	; 0x20e <__vector_24+0x2c>
  4a:	e1 c0       	rjmp	.+450    	; 0x20e <__vector_24+0x2c>
  4c:	e0 c0       	rjmp	.+448    	; 0x20e <__vector_24+0x2c>
  4e:	df c0       	rjmp	.+446    	; 0x20e <__vector_24+0x2c>
  50:	de c0       	rjmp	.+444    	; 0x20e <__vector_24+0x2c>
  52:	dd c0       	rjmp	.+442    	; 0x20e <__vector_24+0x2c>
  54:	0c c1       	rjmp	.+536    	; 0x26e <__vector_24+0x8c>
  56:	db c0       	rjmp	.+438    	; 0x20e <__vector_24+0x2c>
  58:	da c0       	rjmp	.+436    	; 0x20e <__vector_24+0x2c>
  5a:	d9 c0       	rjmp	.+434    	; 0x20e <__vector_24+0x2c>
  5c:	d8 c0       	rjmp	.+432    	; 0x20e <__vector_24+0x2c>
  5e:	d7 c0       	rjmp	.+430    	; 0x20e <__vector_24+0x2c>
  60:	d6 c0       	rjmp	.+428    	; 0x20e <__vector_24+0x2c>
  62:	d5 c0       	rjmp	.+426    	; 0x20e <__vector_24+0x2c>
  64:	d4 c0       	rjmp	.+424    	; 0x20e <__vector_24+0x2c>
  66:	d3 c0       	rjmp	.+422    	; 0x20e <__vector_24+0x2c>
  68:	d2 c0       	rjmp	.+420    	; 0x20e <__vector_24+0x2c>
  6a:	d1 c0       	rjmp	.+418    	; 0x20e <__vector_24+0x2c>
  6c:	d0 c0       	rjmp	.+416    	; 0x20e <__vector_24+0x2c>
  6e:	cf c0       	rjmp	.+414    	; 0x20e <__vector_24+0x2c>
  70:	ce c0       	rjmp	.+412    	; 0x20e <__vector_24+0x2c>
  72:	cd c0       	rjmp	.+410    	; 0x20e <__vector_24+0x2c>
  74:	fc c0       	rjmp	.+504    	; 0x26e <__vector_24+0x8c>
  76:	cb c0       	rjmp	.+406    	; 0x20e <__vector_24+0x2c>
  78:	ca c0       	rjmp	.+404    	; 0x20e <__vector_24+0x2c>
  7a:	c9 c0       	rjmp	.+402    	; 0x20e <__vector_24+0x2c>
  7c:	c8 c0       	rjmp	.+400    	; 0x20e <__vector_24+0x2c>
  7e:	c7 c0       	rjmp	.+398    	; 0x20e <__vector_24+0x2c>
  80:	c6 c0       	rjmp	.+396    	; 0x20e <__vector_24+0x2c>
  82:	c5 c0       	rjmp	.+394    	; 0x20e <__vector_24+0x2c>
  84:	c4 c0       	rjmp	.+392    	; 0x20e <__vector_24+0x2c>
  86:	c3 c0       	rjmp	.+390    	; 0x20e <__vector_24+0x2c>
  88:	c2 c0       	rjmp	.+388    	; 0x20e <__vector_24+0x2c>
  8a:	c1 c0       	rjmp	.+386    	; 0x20e <__vector_24+0x2c>
  8c:	c0 c0       	rjmp	.+384    	; 0x20e <__vector_24+0x2c>
  8e:	bf c0       	rjmp	.+382    	; 0x20e <__vector_24+0x2c>
  90:	be c0       	rjmp	.+380    	; 0x20e <__vector_24+0x2c>
  92:	bd c0       	rjmp	.+378    	; 0x20e <__vector_24+0x2c>
  94:	03 c1       	rjmp	.+518    	; 0x29c <__vector_24+0xba>
  96:	bb c0       	rjmp	.+374    	; 0x20e <__vector_24+0x2c>
  98:	ba c0       	rjmp	.+372    	; 0x20e <__vector_24+0x2c>
  9a:	b9 c0       	rjmp	.+370    	; 0x20e <__vector_24+0x2c>
  9c:	b8 c0       	rjmp	.+368    	; 0x20e <__vector_24+0x2c>
  9e:	b7 c0       	rjmp	.+366    	; 0x20e <__vector_24+0x2c>
  a0:	b6 c0       	rjmp	.+364    	; 0x20e <__vector_24+0x2c>
  a2:	b5 c0       	rjmp	.+362    	; 0x20e <__vector_24+0x2c>
  a4:	ff c0       	rjmp	.+510    	; 0x2a4 <__vector_24+0xc2>
  a6:	b3 c0       	rjmp	.+358    	; 0x20e <__vector_24+0x2c>
  a8:	b2 c0       	rjmp	.+356    	; 0x20e <__vector_24+0x2c>
  aa:	b1 c0       	rjmp	.+354    	; 0x20e <__vector_24+0x2c>
  ac:	b0 c0       	rjmp	.+352    	; 0x20e <__vector_24+0x2c>
  ae:	af c0       	rjmp	.+350    	; 0x20e <__vector_24+0x2c>
  b0:	ae c0       	rjmp	.+348    	; 0x20e <__vector_24+0x2c>
  b2:	ad c0       	rjmp	.+346    	; 0x20e <__vector_24+0x2c>
  b4:	ac c0       	rjmp	.+344    	; 0x20e <__vector_24+0x2c>
  b6:	ab c0       	rjmp	.+342    	; 0x20e <__vector_24+0x2c>
  b8:	aa c0       	rjmp	.+340    	; 0x20e <__vector_24+0x2c>
  ba:	a9 c0       	rjmp	.+338    	; 0x20e <__vector_24+0x2c>
  bc:	a8 c0       	rjmp	.+336    	; 0x20e <__vector_24+0x2c>
  be:	a7 c0       	rjmp	.+334    	; 0x20e <__vector_24+0x2c>
  c0:	a6 c0       	rjmp	.+332    	; 0x20e <__vector_24+0x2c>
  c2:	a5 c0       	rjmp	.+330    	; 0x20e <__vector_24+0x2c>
  c4:	fd c0       	rjmp	.+506    	; 0x2c0 <__vector_24+0xde>
  c6:	a3 c0       	rjmp	.+326    	; 0x20e <__vector_24+0x2c>
  c8:	a2 c0       	rjmp	.+324    	; 0x20e <__vector_24+0x2c>
  ca:	a1 c0       	rjmp	.+322    	; 0x20e <__vector_24+0x2c>
  cc:	a0 c0       	rjmp	.+320    	; 0x20e <__vector_24+0x2c>
  ce:	9f c0       	rjmp	.+318    	; 0x20e <__vector_24+0x2c>
  d0:	9e c0       	rjmp	.+316    	; 0x20e <__vector_24+0x2c>
  d2:	9d c0       	rjmp	.+314    	; 0x20e <__vector_24+0x2c>
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__vector_24+0x5a>

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf ef       	ldi	r28, 0xFF	; 255
  dc:	d2 e0       	ldi	r29, 0x02	; 2
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	ea ed       	ldi	r30, 0xDA	; 218
  ea:	f4 e0       	ldi	r31, 0x04	; 4
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a2 30       	cpi	r26, 0x02	; 2
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	a2 e0       	ldi	r26, 0x02	; 2
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 38       	cpi	r26, 0x8B	; 139
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	25 d1       	rcall	.+586    	; 0x354 <main>
 10a:	e5 c1       	rjmp	.+970    	; 0x4d6 <_exit>

0000010c <__bad_interrupt>:
 10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <spi_init>:
char     lcd_str_l[16];  //holds string to send to lcd  
div_t    fp_adc_result, fp_low_result;  //double fp_adc_result;  


void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	87 60       	ori	r24, 0x07	; 7
 112:	84 b9       	out	0x04, r24	; 4
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	80 65       	ori	r24, 0x50	; 80
 118:	8c bd       	out	0x2c, r24	; 44
  SPSR  |= (1<<SPI2X);            //run at double speed 
 11a:	8d b5       	in	r24, 0x2d	; 45
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	8d bd       	out	0x2d, r24	; 45
 120:	08 95       	ret

00000122 <USART0_RX_vect>:

//**************  end tx portion ***************
  }//while
}//main

ISR(USART0_RX_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1

}
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 136:	90 91 c0 00 	lds	r25, 0x00C0
 13a:	95 ff       	sbrs	r25, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <uart_putc>
    UDR0 = data;    // Send data byte
 13e:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 142:	80 91 c0 00 	lds	r24, 0x00C0
 146:	85 ff       	sbrs	r24, 5
 148:	fc cf       	rjmp	.-8      	; 0x142 <uart_putc+0xc>
}
 14a:	08 95       	ret

0000014c <uart_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z
 150:	22 23       	and	r18, r18
 152:	71 f0       	breq	.+28     	; 0x170 <uart_puts+0x24>
 154:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 156:	90 91 c0 00 	lds	r25, 0x00C0
 15a:	95 ff       	sbrs	r25, 5
 15c:	fc cf       	rjmp	.-8      	; 0x156 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 15e:	20 93 c6 00 	sts	0x00C6, r18
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 162:	90 91 c0 00 	lds	r25, 0x00C0
 166:	95 ff       	sbrs	r25, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <uart_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 16a:	21 91       	ld	r18, Z+
 16c:	21 11       	cpse	r18, r1
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <uart_puts+0xa>
 170:	08 95       	ret

00000172 <uart_puts_p>:

//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
 172:	9c 01       	movw	r18, r24
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 174:	c9 01       	movw	r24, r18
 176:	f9 01       	movw	r30, r18
 178:	44 91       	lpm	r20, Z
 17a:	44 23       	and	r20, r20
 17c:	99 f0       	breq	.+38     	; 0x1a4 <uart_puts_p+0x32>
        uart_putc(pgm_read_byte(str++));
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	fc 01       	movw	r30, r24
 184:	84 91       	lpm	r24, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 186:	90 91 c0 00 	lds	r25, 0x00C0
 18a:	95 ff       	sbrs	r25, 5
 18c:	fc cf       	rjmp	.-8      	; 0x186 <uart_puts_p+0x14>
    UDR0 = data;    // Send data byte
 18e:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 192:	90 91 c0 00 	lds	r25, 0x00C0
 196:	95 ff       	sbrs	r25, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <uart_puts_p+0x20>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 19a:	c9 01       	movw	r24, r18
 19c:	f9 01       	movw	r30, r18
 19e:	44 91       	lpm	r20, Z
 1a0:	41 11       	cpse	r20, r1
 1a2:	ed cf       	rjmp	.-38     	; 0x17e <uart_puts_p+0xc>
        uart_putc(pgm_read_byte(str++));
    }
}
 1a4:	08 95       	ret

000001a6 <uart_init>:
//TXD is PORT D bit 1

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED
 1a6:	e1 ec       	ldi	r30, 0xC1	; 193
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 61       	ori	r24, 0x18	; 24
 1ae:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1b0:	e2 ec       	ldi	r30, 0xC2	; 194
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	86 60       	ori	r24, 0x06	; 6
 1b8:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 1ba:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	80 93 c4 00 	sts	0x00C4, r24
 1c4:	08 95       	ret

000001c6 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	9e e3       	ldi	r25, 0x3E	; 62
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <uart_getc+0xa>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 1ce:	39 f0       	breq	.+14     	; 0x1de <uart_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 1d0:	20 91 c0 00 	lds	r18, 0x00C0
 1d4:	27 ff       	sbrs	r18, 7
 1d6:	fa cf       	rjmp	.-12     	; 0x1cc <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 1d8:	80 91 c6 00 	lds	r24, 0x00C6
 1dc:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 1de:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 1e0:	08 95       	ret

000001e2 <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1fc:	e0 91 b9 00 	lds	r30, 0x00B9
 200:	8e 2f       	mov	r24, r30
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	38 97       	sbiw	r30, 0x08	; 8
 208:	e1 35       	cpi	r30, 0x51	; 81
 20a:	f1 05       	cpc	r31, r1
 20c:	a0 f0       	brcs	.+40     	; 0x236 <__vector_24+0x54>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 20e:	80 91 b9 00 	lds	r24, 0x00B9
 212:	80 93 86 01 	sts	0x0186, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	80 93 bc 00 	sts	0x00BC, r24
  }//switch
}//TWI_isr
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 236:	e6 5e       	subi	r30, 0xE6	; 230
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	09 94       	ijmp
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 23c:	80 91 03 01 	lds	r24, 0x0103
 240:	e0 91 87 01 	lds	r30, 0x0187
 244:	f0 91 88 01 	lds	r31, 0x0188
 248:	e8 0f       	add	r30, r24
 24a:	f1 1d       	adc	r31, r1
 24c:	80 91 bb 00 	lds	r24, 0x00BB
 250:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 252:	84 e9       	ldi	r24, 0x94	; 148
 254:	80 93 bc 00 	sts	0x00BC, r24
      break;      
 258:	e1 cf       	rjmp	.-62     	; 0x21c <__vector_24+0x3a>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 25a:	80 91 89 01 	lds	r24, 0x0189
 25e:	80 93 bb 00 	sts	0x00BB, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 262:	10 92 03 01 	sts	0x0103, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 266:	85 e8       	ldi	r24, 0x85	; 133
 268:	80 93 bc 00 	sts	0x00BC, r24
      break;
 26c:	d7 cf       	rjmp	.-82     	; 0x21c <__vector_24+0x3a>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 26e:	80 91 03 01 	lds	r24, 0x0103
 272:	90 91 8a 01 	lds	r25, 0x018A
 276:	89 17       	cp	r24, r25
 278:	60 f7       	brcc	.-40     	; 0x252 <__vector_24+0x70>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 27a:	e0 91 87 01 	lds	r30, 0x0187
 27e:	f0 91 88 01 	lds	r31, 0x0188
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	98 0f       	add	r25, r24
 286:	90 93 03 01 	sts	0x0103, r25
 28a:	e8 0f       	add	r30, r24
 28c:	f1 1d       	adc	r31, r1
 28e:	80 81       	ld	r24, Z
 290:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = TWCR_SEND;               //send next byte 
 294:	85 e8       	ldi	r24, 0x85	; 133
 296:	80 93 bc 00 	sts	0x00BC, r24
 29a:	c0 cf       	rjmp	.-128    	; 0x21c <__vector_24+0x3a>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 29c:	85 ea       	ldi	r24, 0xA5	; 165
 29e:	80 93 bc 00 	sts	0x00BC, r24
      break;
 2a2:	bc cf       	rjmp	.-136    	; 0x21c <__vector_24+0x3a>
 2a4:	20 91 03 01 	lds	r18, 0x0103
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 2a8:	80 91 8a 01 	lds	r24, 0x018A
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	28 17       	cp	r18, r24
 2b4:	39 07       	cpc	r19, r25
 2b6:	dc f4       	brge	.+54     	; 0x2ee <__vector_24+0x10c>
 2b8:	85 ec       	ldi	r24, 0xC5	; 197
 2ba:	80 93 bc 00 	sts	0x00BC, r24
 2be:	ae cf       	rjmp	.-164    	; 0x21c <__vector_24+0x3a>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 2c0:	e0 91 87 01 	lds	r30, 0x0187
 2c4:	f0 91 88 01 	lds	r31, 0x0188
 2c8:	80 91 03 01 	lds	r24, 0x0103
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	28 0f       	add	r18, r24
 2d0:	20 93 03 01 	sts	0x0103, r18
 2d4:	e8 0f       	add	r30, r24
 2d6:	f1 1d       	adc	r31, r1
 2d8:	80 91 bb 00 	lds	r24, 0x00BB
 2dc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 2de:	80 91 8a 01 	lds	r24, 0x018A
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	2c f3       	brlt	.-54     	; 0x2b8 <__vector_24+0xd6>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 2ee:	85 e8       	ldi	r24, 0x85	; 133
 2f0:	80 93 bc 00 	sts	0x00BC, r24
 2f4:	93 cf       	rjmp	.-218    	; 0x21c <__vector_24+0x3a>

000002f6 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2f6:	80 91 bc 00 	lds	r24, 0x00BC
}
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	08 95       	ret

000002fe <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2fe:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 302:	90 fd       	sbrc	r25, 0
 304:	fc cf       	rjmp	.-8      	; 0x2fe <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 306:	8e 7f       	andi	r24, 0xFE	; 254
 308:	80 93 89 01 	sts	0x0189, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 30c:	70 93 88 01 	sts	0x0188, r23
 310:	60 93 87 01 	sts	0x0187, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 314:	40 93 8a 01 	sts	0x018A, r20
  TWCR = TWCR_START;                    //initiate START
 318:	85 ea       	ldi	r24, 0xA5	; 165
 31a:	80 93 bc 00 	sts	0x00BC, r24
 31e:	08 95       	ret

00000320 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 320:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 324:	90 fd       	sbrc	r25, 0
 326:	fc cf       	rjmp	.-8      	; 0x320 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 93 89 01 	sts	0x0189, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 32e:	70 93 88 01 	sts	0x0188, r23
 332:	60 93 87 01 	sts	0x0187, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 336:	40 93 8a 01 	sts	0x018A, r20
  TWCR = TWCR_START;                   //initiate START
 33a:	85 ea       	ldi	r24, 0xA5	; 165
 33c:	80 93 bc 00 	sts	0x00BC, r24
 340:	08 95       	ret

00000342 <init_twi>:
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	80 93 bb 00 	sts	0x00BB, r24
 348:	10 92 b9 00 	sts	0x00B9, r1
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	80 93 b8 00 	sts	0x00B8, r24
 352:	08 95       	ret

00000354 <main>:
}//spi_init    

int main(){
  //DDRF |= 0x08; //lcd strobe bit
 int16_t lm73_temp;  //a place to assemble the temperature from the lm73
  uart_init();  
 354:	28 df       	rcall	.-432    	; 0x1a6 <uart_init>
char     lcd_str_l[16];  //holds string to send to lcd  
div_t    fp_adc_result, fp_low_result;  //double fp_adc_result;  


void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 356:	84 b1       	in	r24, 0x04	; 4
 358:	87 60       	ori	r24, 0x07	; 7
 35a:	84 b9       	out	0x04, r24	; 4
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 35c:	8c b5       	in	r24, 0x2c	; 44
 35e:	80 65       	ori	r24, 0x50	; 80
 360:	8c bd       	out	0x2c, r24	; 44
  SPSR  |= (1<<SPI2X);            //run at double speed 
 362:	8d b5       	in	r24, 0x2d	; 45
 364:	81 60       	ori	r24, 0x01	; 1
 366:	8d bd       	out	0x2d, r24	; 45
int main(){
  //DDRF |= 0x08; //lcd strobe bit
 int16_t lm73_temp;  //a place to assemble the temperature from the lm73
  uart_init();  
  spi_init();
  init_twi();      //initalize TWI (twi_master.h)  
 368:	ec df       	rcall	.-40     	; 0x342 <init_twi>
  sei();
 36a:	78 94       	sei

  //set LM73 mode for reading temperature by loading pointer register
lm73_wr_buf[0] = 0x00; //load lm73_wr_buf[0] with temperature pointer address
 36c:	10 92 82 01 	sts	0x0182, r1
twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);//start the TWI write process
 370:	42 e0       	ldi	r20, 0x02	; 2
 372:	62 e8       	ldi	r22, 0x82	; 130
 374:	71 e0       	ldi	r23, 0x01	; 1
 376:	80 e9       	ldi	r24, 0x90	; 144
 378:	c2 df       	rcall	.-124    	; 0x2fe <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x2a>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x30>
 384:	00 00       	nop
lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
  lm73_temp = lm73_temp << 8; //shift it into upper byte 
  lm73_temp |= lm73_rd_buf[1];  //"OR" in the low temp byte to lm73_temp 
  fp_adc_result = div(lm73_temp, 128);              //do division by 205 (204.8 to be exact)
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 128); //get the decimal fraction into non-fractional form 
 386:	c4 e6       	ldi	r28, 0x64	; 100
lm73_wr_buf[0] = 0x00; //load lm73_wr_buf[0] with temperature pointer address
twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);//start the TWI write process
_delay_ms(2);    //wait for the xfer to finish
  while(1){
//**************  start rcv portion ***************
      if(rcv_rdy==1){
 388:	80 91 04 01 	lds	r24, 0x0104
  }
//**************  end rcv portion ***************
 twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 4);//read temperature data from LM73 (2 bytes)  
 38c:	44 e0       	ldi	r20, 0x04	; 4
 38e:	64 e8       	ldi	r22, 0x84	; 132
 390:	71 e0       	ldi	r23, 0x01	; 1
 392:	80 e9       	ldi	r24, 0x90	; 144
 394:	c5 df       	rcall	.-118    	; 0x320 <twi_start_rd>
 396:	8f e9       	ldi	r24, 0x9F	; 159
 398:	9f e0       	ldi	r25, 0x0F	; 15
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x46>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x4c>
 3a0:	00 00       	nop
  _delay_ms(2);    //wait for it to finish
lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
 3a2:	80 91 84 01 	lds	r24, 0x0184
 3a6:	90 e0       	ldi	r25, 0x00	; 0
  lm73_temp = lm73_temp << 8; //shift it into upper byte 
 3a8:	98 2f       	mov	r25, r24
 3aa:	88 27       	eor	r24, r24
  lm73_temp |= lm73_rd_buf[1];  //"OR" in the low temp byte to lm73_temp 
 3ac:	20 91 85 01 	lds	r18, 0x0185
  fp_adc_result = div(lm73_temp, 128);              //do division by 205 (204.8 to be exact)
 3b0:	60 e8       	ldi	r22, 0x80	; 128
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	82 2b       	or	r24, r18
 3b6:	35 d0       	rcall	.+106    	; 0x422 <__divmodhi4>
 3b8:	9b 01       	movw	r18, r22
 3ba:	60 93 2e 01 	sts	0x012E, r22
 3be:	70 93 2f 01 	sts	0x012F, r23
 3c2:	80 93 30 01 	sts	0x0130, r24
 3c6:	90 93 31 01 	sts	0x0131, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ca:	4a e0       	ldi	r20, 0x0A	; 10
 3cc:	6d e1       	ldi	r22, 0x1D	; 29
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	c9 01       	movw	r24, r18
 3d2:	4e d0       	rcall	.+156    	; 0x470 <__itoa_ncheck>
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 128); //get the decimal fraction into non-fractional form 
 3d4:	80 91 30 01 	lds	r24, 0x0130
 3d8:	90 91 31 01 	lds	r25, 0x0131
 3dc:	60 e8       	ldi	r22, 0x80	; 128
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	9c 01       	movw	r18, r24
 3e2:	c2 9f       	mul	r28, r18
 3e4:	c0 01       	movw	r24, r0
 3e6:	c3 9f       	mul	r28, r19
 3e8:	90 0d       	add	r25, r0
 3ea:	11 24       	eor	r1, r1
 3ec:	1a d0       	rcall	.+52     	; 0x422 <__divmodhi4>
 3ee:	9b 01       	movw	r18, r22
 3f0:	60 93 19 01 	sts	0x0119, r22
 3f4:	70 93 1a 01 	sts	0x011A, r23
 3f8:	80 93 1b 01 	sts	0x011B, r24
 3fc:	90 93 1c 01 	sts	0x011C, r25
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	65 e0       	ldi	r22, 0x05	; 5
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	c9 01       	movw	r24, r18
 408:	33 d0       	rcall	.+102    	; 0x470 <__itoa_ncheck>
//**************  start tx portion ***************



  
 uart_puts(lcd_str_h);
 40a:	8d e1       	ldi	r24, 0x1D	; 29
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	9e de       	rcall	.-708    	; 0x14c <uart_puts>
 uart_puts(".");
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	9b de       	rcall	.-714    	; 0x14c <uart_puts>
 uart_puts(lcd_str_l);
 416:	85 e0       	ldi	r24, 0x05	; 5
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	98 de       	rcall	.-720    	; 0x14c <uart_puts>

    //itoa(send_seq,lcd_string,10);
    //uart_puts(lcd_string);
    uart_putc('\0');
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	8b de       	rcall	.-746    	; 0x136 <uart_putc>
    //send_seq=(send_seq);



//**************  end tx portion ***************
  }//while
 420:	b3 cf       	rjmp	.-154    	; 0x388 <main+0x34>

00000422 <__divmodhi4>:
 422:	97 fb       	bst	r25, 7
 424:	07 2e       	mov	r0, r23
 426:	16 f4       	brtc	.+4      	; 0x42c <__divmodhi4+0xa>
 428:	00 94       	com	r0
 42a:	06 d0       	rcall	.+12     	; 0x438 <__divmodhi4_neg1>
 42c:	77 fd       	sbrc	r23, 7
 42e:	08 d0       	rcall	.+16     	; 0x440 <__divmodhi4_neg2>
 430:	0b d0       	rcall	.+22     	; 0x448 <__udivmodhi4>
 432:	07 fc       	sbrc	r0, 7
 434:	05 d0       	rcall	.+10     	; 0x440 <__divmodhi4_neg2>
 436:	3e f4       	brtc	.+14     	; 0x446 <__divmodhi4_exit>

00000438 <__divmodhi4_neg1>:
 438:	90 95       	com	r25
 43a:	81 95       	neg	r24
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__divmodhi4_neg2>:
 440:	70 95       	com	r23
 442:	61 95       	neg	r22
 444:	7f 4f       	sbci	r23, 0xFF	; 255

00000446 <__divmodhi4_exit>:
 446:	08 95       	ret

00000448 <__udivmodhi4>:
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	51 e1       	ldi	r21, 0x11	; 17
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__udivmodhi4_ep>

00000450 <__udivmodhi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	a6 17       	cp	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	10 f0       	brcs	.+4      	; 0x45e <__udivmodhi4_ep>
 45a:	a6 1b       	sub	r26, r22
 45c:	b7 0b       	sbc	r27, r23

0000045e <__udivmodhi4_ep>:
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	5a 95       	dec	r21
 464:	a9 f7       	brne	.-22     	; 0x450 <__udivmodhi4_loop>
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	08 95       	ret

00000470 <__itoa_ncheck>:
 470:	bb 27       	eor	r27, r27
 472:	4a 30       	cpi	r20, 0x0A	; 10
 474:	31 f4       	brne	.+12     	; 0x482 <__itoa_ncheck+0x12>
 476:	99 23       	and	r25, r25
 478:	22 f4       	brpl	.+8      	; 0x482 <__itoa_ncheck+0x12>
 47a:	bd e2       	ldi	r27, 0x2D	; 45
 47c:	90 95       	com	r25
 47e:	81 95       	neg	r24
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	01 c0       	rjmp	.+2      	; 0x486 <__utoa_common>

00000484 <__utoa_ncheck>:
 484:	bb 27       	eor	r27, r27

00000486 <__utoa_common>:
 486:	fb 01       	movw	r30, r22
 488:	55 27       	eor	r21, r21
 48a:	aa 27       	eor	r26, r26
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	aa 1f       	adc	r26, r26
 492:	a4 17       	cp	r26, r20
 494:	10 f0       	brcs	.+4      	; 0x49a <__utoa_common+0x14>
 496:	a4 1b       	sub	r26, r20
 498:	83 95       	inc	r24
 49a:	50 51       	subi	r21, 0x10	; 16
 49c:	b9 f7       	brne	.-18     	; 0x48c <__utoa_common+0x6>
 49e:	a0 5d       	subi	r26, 0xD0	; 208
 4a0:	aa 33       	cpi	r26, 0x3A	; 58
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <__utoa_common+0x20>
 4a4:	a9 5d       	subi	r26, 0xD9	; 217
 4a6:	a1 93       	st	Z+, r26
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	79 f7       	brne	.-34     	; 0x48a <__utoa_common+0x4>
 4ac:	b1 11       	cpse	r27, r1
 4ae:	b1 93       	st	Z+, r27
 4b0:	11 92       	st	Z+, r1
 4b2:	cb 01       	movw	r24, r22
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <strrev>

000004b6 <strrev>:
 4b6:	dc 01       	movw	r26, r24
 4b8:	fc 01       	movw	r30, r24
 4ba:	67 2f       	mov	r22, r23
 4bc:	71 91       	ld	r23, Z+
 4be:	77 23       	and	r23, r23
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <strrev+0x4>
 4c2:	32 97       	sbiw	r30, 0x02	; 2
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <strrev+0x18>
 4c6:	7c 91       	ld	r23, X
 4c8:	6d 93       	st	X+, r22
 4ca:	70 83       	st	Z, r23
 4cc:	62 91       	ld	r22, -Z
 4ce:	ae 17       	cp	r26, r30
 4d0:	bf 07       	cpc	r27, r31
 4d2:	c8 f3       	brcs	.-14     	; 0x4c6 <strrev+0x10>
 4d4:	08 95       	ret

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
