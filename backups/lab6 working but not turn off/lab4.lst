
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  000034c0  00003554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800244  00800244  00003698  2**0
                  ALLOC
  3 .stab         00006dc8  00000000  00000000  00003698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d7c  00000000  00000000  0000a460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000c1f0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 02 	jmp	0x430	; 0x430 <__ctors_end>
       4:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
       8:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
       c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      10:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      14:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      18:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      20:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_8>
      24:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      28:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_10>
      2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      30:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_12>
      34:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      38:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      3c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      40:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_16>
      44:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      48:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__vector_18>
      4c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      50:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      54:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_21>
      58:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      5c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      60:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      64:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      68:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      6c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      70:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      74:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      78:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      7c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      80:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      84:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_33>
      88:	0c 94 37 02 	jmp	0x46e	; 0x46e <__bad_interrupt>
      8c:	35 0a       	sbc	r3, r21
      8e:	0c 0a       	sbc	r0, r28
      90:	0c 0a       	sbc	r0, r28
      92:	0c 0a       	sbc	r0, r28
      94:	0c 0a       	sbc	r0, r28
      96:	0c 0a       	sbc	r0, r28
      98:	0c 0a       	sbc	r0, r28
      9a:	0c 0a       	sbc	r0, r28
      9c:	35 0a       	sbc	r3, r21
      9e:	0c 0a       	sbc	r0, r28
      a0:	0c 0a       	sbc	r0, r28
      a2:	0c 0a       	sbc	r0, r28
      a4:	0c 0a       	sbc	r0, r28
      a6:	0c 0a       	sbc	r0, r28
      a8:	0c 0a       	sbc	r0, r28
      aa:	0c 0a       	sbc	r0, r28
      ac:	3f 0a       	sbc	r3, r31
      ae:	0c 0a       	sbc	r0, r28
      b0:	0c 0a       	sbc	r0, r28
      b2:	0c 0a       	sbc	r0, r28
      b4:	0c 0a       	sbc	r0, r28
      b6:	0c 0a       	sbc	r0, r28
      b8:	0c 0a       	sbc	r0, r28
      ba:	0c 0a       	sbc	r0, r28
      bc:	0c 0a       	sbc	r0, r28
      be:	0c 0a       	sbc	r0, r28
      c0:	0c 0a       	sbc	r0, r28
      c2:	0c 0a       	sbc	r0, r28
      c4:	0c 0a       	sbc	r0, r28
      c6:	0c 0a       	sbc	r0, r28
      c8:	0c 0a       	sbc	r0, r28
      ca:	0c 0a       	sbc	r0, r28
      cc:	3f 0a       	sbc	r3, r31
      ce:	0c 0a       	sbc	r0, r28
      d0:	0c 0a       	sbc	r0, r28
      d2:	0c 0a       	sbc	r0, r28
      d4:	0c 0a       	sbc	r0, r28
      d6:	0c 0a       	sbc	r0, r28
      d8:	0c 0a       	sbc	r0, r28
      da:	0c 0a       	sbc	r0, r28
      dc:	0c 0a       	sbc	r0, r28
      de:	0c 0a       	sbc	r0, r28
      e0:	0c 0a       	sbc	r0, r28
      e2:	0c 0a       	sbc	r0, r28
      e4:	0c 0a       	sbc	r0, r28
      e6:	0c 0a       	sbc	r0, r28
      e8:	0c 0a       	sbc	r0, r28
      ea:	0c 0a       	sbc	r0, r28
      ec:	56 0a       	sbc	r5, r22
      ee:	0c 0a       	sbc	r0, r28
      f0:	0c 0a       	sbc	r0, r28
      f2:	0c 0a       	sbc	r0, r28
      f4:	0c 0a       	sbc	r0, r28
      f6:	0c 0a       	sbc	r0, r28
      f8:	0c 0a       	sbc	r0, r28
      fa:	0c 0a       	sbc	r0, r28
      fc:	5a 0a       	sbc	r5, r26
      fe:	0c 0a       	sbc	r0, r28
     100:	0c 0a       	sbc	r0, r28
     102:	0c 0a       	sbc	r0, r28
     104:	0c 0a       	sbc	r0, r28
     106:	0c 0a       	sbc	r0, r28
     108:	0c 0a       	sbc	r0, r28
     10a:	0c 0a       	sbc	r0, r28
     10c:	0c 0a       	sbc	r0, r28
     10e:	0c 0a       	sbc	r0, r28
     110:	0c 0a       	sbc	r0, r28
     112:	0c 0a       	sbc	r0, r28
     114:	0c 0a       	sbc	r0, r28
     116:	0c 0a       	sbc	r0, r28
     118:	0c 0a       	sbc	r0, r28
     11a:	0c 0a       	sbc	r0, r28
     11c:	68 0a       	sbc	r6, r24
     11e:	0c 0a       	sbc	r0, r28
     120:	0c 0a       	sbc	r0, r28
     122:	0c 0a       	sbc	r0, r28
     124:	0c 0a       	sbc	r0, r28
     126:	0c 0a       	sbc	r0, r28
     128:	0c 0a       	sbc	r0, r28
     12a:	0c 0a       	sbc	r0, r28
     12c:	26 0a       	sbc	r2, r22
     12e:	3c 0e       	add	r3, r28
     130:	46 0e       	add	r4, r22
     132:	50 0e       	add	r5, r16
     134:	5a 0e       	add	r5, r26
     136:	65 0e       	add	r6, r21
     138:	70 0e       	add	r7, r16
     13a:	7b 0e       	add	r7, r27
     13c:	28 0e       	add	r2, r24
     13e:	32 0e       	add	r3, r18
     140:	d1 0f       	add	r29, r17
     142:	c9 0f       	add	r28, r25
     144:	c4 0f       	add	r28, r20
     146:	ee 0f       	add	r30, r30
     148:	e1 0f       	add	r30, r17
     14a:	e9 0f       	add	r30, r25
     14c:	d9 0f       	add	r29, r25
     14e:	a2 0f       	add	r26, r18
     150:	9a 0f       	add	r25, r26
     152:	95 0f       	add	r25, r21
     154:	8d 0f       	add	r24, r29
     156:	f6 0f       	add	r31, r22
     158:	aa 0f       	add	r26, r26
     15a:	80 0f       	add	r24, r16
     15c:	68 0f       	add	r22, r24
     15e:	16 10       	cpse	r1, r6
     160:	bf 0f       	add	r27, r31
     162:	b7 0f       	add	r27, r23
     164:	af 0f       	add	r26, r31
     166:	36 10       	cpse	r3, r6
     168:	70 0f       	add	r23, r16
     16a:	26 10       	cpse	r2, r6
     16c:	78 0f       	add	r23, r24
     16e:	43 10       	cpse	r4, r3
     170:	0e 10       	cpse	r0, r14
     172:	2e 10       	cpse	r2, r14
     174:	88 0f       	add	r24, r24
     176:	06 10       	cpse	r0, r6
     178:	fe 0f       	add	r31, r30
     17a:	1e 10       	cpse	r1, r14
     17c:	63 0f       	add	r22, r19
     17e:	31 0f       	add	r19, r17
     180:	29 0f       	add	r18, r25
     182:	39 0f       	add	r19, r25
     184:	3b 10       	cpse	r3, r11
     186:	1c 0f       	add	r17, r28
     188:	14 0f       	add	r17, r20
     18a:	3e 0f       	add	r19, r30
     18c:	f7 0e       	add	r15, r23
     18e:	5b 0f       	add	r21, r27
     190:	24 0f       	add	r18, r20
     192:	07 0f       	add	r16, r23
     194:	ff 0e       	add	r15, r31
     196:	4b 0f       	add	r20, r27
     198:	0f 0f       	add	r16, r31
     19a:	43 0f       	add	r20, r19
     19c:	ef 0e       	add	r14, r31
     19e:	d5 0e       	add	r13, r21
     1a0:	53 0f       	add	r21, r19
     1a2:	c5 0e       	add	r12, r21
     1a4:	bd 0e       	add	r11, r29
     1a6:	e2 0e       	add	r14, r18
     1a8:	da 0e       	add	r13, r26
     1aa:	e7 0e       	add	r14, r23
     1ac:	b8 0e       	add	r11, r24
     1ae:	cd 0e       	add	r12, r29
     1b0:	a0 0e       	add	r10, r16
     1b2:	b0 0e       	add	r11, r16
     1b4:	9b 0e       	add	r9, r27
     1b6:	93 0e       	add	r9, r19
     1b8:	8b 0e       	add	r8, r27
     1ba:	86 0e       	add	r8, r22
     1bc:	a8 0e       	add	r10, r24
     1be:	4d 11       	cpse	r20, r13
     1c0:	6b 11       	cpse	r22, r11
     1c2:	47 11       	cpse	r20, r7
     1c4:	59 11       	cpse	r21, r9
     1c6:	3b 11       	cpse	r19, r11
     1c8:	41 11       	cpse	r20, r1
     1ca:	3b 11       	cpse	r19, r11
     1cc:	41 11       	cpse	r20, r1
     1ce:	71 11       	cpse	r23, r1
     1d0:	4d 11       	cpse	r20, r13
     1d2:	6b 11       	cpse	r22, r11
     1d4:	47 11       	cpse	r20, r7
     1d6:	59 11       	cpse	r21, r9
     1d8:	53 11       	cpse	r21, r3
     1da:	35 11       	cpse	r19, r5
     1dc:	53 11       	cpse	r21, r3
     1de:	35 11       	cpse	r19, r5
     1e0:	9b 11       	cpse	r25, r11
     1e2:	d7 11       	cpse	r29, r7
     1e4:	8f 11       	cpse	r24, r15
     1e6:	07 12       	cpse	r0, r23
     1e8:	8f 11       	cpse	r24, r15
     1ea:	cb 11       	cpse	r28, r11
     1ec:	c5 11       	cpse	r28, r5
     1ee:	35 11       	cpse	r19, r5
     1f0:	a1 11       	cpse	r26, r1
     1f2:	35 11       	cpse	r19, r5
     1f4:	b3 11       	cpse	r27, r3
     1f6:	5f 11       	cpse	r21, r15
     1f8:	f5 11       	cpse	r31, r5
     1fa:	3b 11       	cpse	r19, r11
     1fc:	e9 11       	cpse	r30, r9
     1fe:	77 11       	cpse	r23, r7
     200:	ef 11       	cpse	r30, r15
     202:	7d 11       	cpse	r23, r13
     204:	fb 11       	cpse	r31, r11
     206:	bf 11       	cpse	r27, r15
     208:	65 11       	cpse	r22, r5
     20a:	5f 11       	cpse	r21, r15
     20c:	a7 11       	cpse	r26, r7
     20e:	83 11       	cpse	r24, r3
     210:	4d 11       	cpse	r20, r13
     212:	6b 11       	cpse	r22, r11
     214:	47 11       	cpse	r20, r7
     216:	59 11       	cpse	r21, r9
     218:	3b 11       	cpse	r19, r11
     21a:	41 11       	cpse	r20, r1
     21c:	3b 11       	cpse	r19, r11
     21e:	41 11       	cpse	r20, r1
     220:	71 11       	cpse	r23, r1
     222:	4d 11       	cpse	r20, r13
     224:	d1 11       	cpse	r29, r1
     226:	65 11       	cpse	r22, r5
     228:	47 11       	cpse	r20, r7
     22a:	53 11       	cpse	r21, r3
     22c:	35 11       	cpse	r19, r5
     22e:	53 11       	cpse	r21, r3
     230:	35 11       	cpse	r19, r5
     232:	9b 11       	cpse	r25, r11
     234:	dd 11       	cpse	r29, r13
     236:	ad 11       	cpse	r26, r13
     238:	71 11       	cpse	r23, r1
     23a:	e3 11       	cpse	r30, r3
     23c:	a1 11       	cpse	r26, r1
     23e:	77 11       	cpse	r23, r7
     240:	7d 11       	cpse	r23, r13
     242:	5f 11       	cpse	r21, r15
     244:	65 11       	cpse	r22, r5
     246:	01 12       	cpse	r0, r17
     248:	83 11       	cpse	r24, r3
     24a:	1f 12       	cpse	r1, r31
     24c:	43 12       	cpse	r4, r19
     24e:	19 12       	cpse	r1, r25
     250:	3d 12       	cpse	r3, r29
     252:	c1 12       	cpse	r12, r17
     254:	bb 12       	cpse	r11, r27
     256:	19 12       	cpse	r1, r25
     258:	43 12       	cpse	r4, r19
     25a:	49 12       	cpse	r4, r25
     25c:	25 12       	cpse	r2, r21
     25e:	cd 12       	cpse	r12, r29
     260:	19 12       	cpse	r1, r25
     262:	1f 12       	cpse	r1, r31
     264:	3d 12       	cpse	r3, r29
     266:	19 12       	cpse	r1, r25
     268:	85 12       	cpse	r8, r21
     26a:	19 12       	cpse	r1, r25
     26c:	31 12       	cpse	r3, r17
     26e:	1f 12       	cpse	r1, r31
     270:	61 12       	cpse	r6, r17
     272:	49 12       	cpse	r4, r25
     274:	25 12       	cpse	r2, r21
     276:	5b 12       	cpse	r5, r27
     278:	df 12       	cpse	r13, r31
     27a:	31 12       	cpse	r3, r17
     27c:	4f 12       	cpse	r4, r31
     27e:	eb 12       	cpse	r14, r27
     280:	9d 12       	cpse	r9, r29
     282:	4f 12       	cpse	r4, r31
     284:	b5 12       	cpse	r11, r21
     286:	19 12       	cpse	r1, r25
     288:	1f 12       	cpse	r1, r31
     28a:	3d 12       	cpse	r3, r29
     28c:	19 12       	cpse	r1, r25
     28e:	7f 12       	cpse	r7, r31
     290:	25 12       	cpse	r2, r21
     292:	43 12       	cpse	r4, r19
     294:	19 12       	cpse	r1, r25
     296:	31 12       	cpse	r3, r17
     298:	1f 12       	cpse	r1, r31
     29a:	61 12       	cpse	r6, r17
     29c:	49 12       	cpse	r4, r25
     29e:	25 12       	cpse	r2, r21
     2a0:	d9 12       	cpse	r13, r25
     2a2:	73 12       	cpse	r7, r19
     2a4:	6d 12       	cpse	r6, r29
     2a6:	37 12       	cpse	r3, r23
     2a8:	67 12       	cpse	r6, r23
     2aa:	55 12       	cpse	r5, r21
     2ac:	37 12       	cpse	r3, r23
     2ae:	a9 12       	cpse	r10, r25
     2b0:	af 12       	cpse	r10, r31
     2b2:	a3 12       	cpse	r10, r19
     2b4:	73 12       	cpse	r7, r19
     2b6:	6d 12       	cpse	r6, r29
     2b8:	37 12       	cpse	r3, r23
     2ba:	67 12       	cpse	r6, r23
     2bc:	55 12       	cpse	r5, r21
     2be:	c7 12       	cpse	r12, r23
     2c0:	d3 12       	cpse	r13, r19
     2c2:	5b 12       	cpse	r5, r27
     2c4:	8b 12       	cpse	r8, r27
     2c6:	91 12       	cpse	r9, r17
     2c8:	9b 17       	cp	r25, r27
     2ca:	8f 17       	cp	r24, r31
     2cc:	89 17       	cp	r24, r25
     2ce:	7d 17       	cp	r23, r29
     2d0:	77 17       	cp	r23, r23
     2d2:	6b 17       	cp	r22, r27
     2d4:	65 17       	cp	r22, r21
     2d6:	5f 17       	cp	r21, r31
     2d8:	59 17       	cp	r21, r25
     2da:	53 17       	cp	r21, r19
     2dc:	47 17       	cp	r20, r23
     2de:	41 17       	cp	r20, r17
     2e0:	3b 17       	cp	r19, r27
     2e2:	2f 17       	cp	r18, r31
     2e4:	29 17       	cp	r18, r25
     2e6:	1d 17       	cp	r17, r29
     2e8:	17 17       	cp	r17, r23
     2ea:	0b 17       	cp	r16, r27
     2ec:	05 17       	cp	r16, r21
     2ee:	f9 16       	cp	r15, r25
     2f0:	f3 16       	cp	r15, r19
     2f2:	ed 16       	cp	r14, r29
     2f4:	e7 16       	cp	r14, r23
     2f6:	e1 16       	cp	r14, r17
     2f8:	d5 16       	cp	r13, r21
     2fa:	cf 16       	cp	r12, r31
     2fc:	c9 16       	cp	r12, r25
     2fe:	c3 16       	cp	r12, r19
     300:	bd 16       	cp	r11, r29
     302:	b1 16       	cp	r11, r17
     304:	ab 16       	cp	r10, r27
     306:	9f 16       	cp	r9, r31
     308:	99 16       	cp	r9, r25
     30a:	93 16       	cp	r9, r19
     30c:	8d 16       	cp	r8, r29
     30e:	81 16       	cp	r8, r17
     310:	7b 16       	cp	r7, r27
     312:	6f 16       	cp	r6, r31
     314:	69 16       	cp	r6, r25
     316:	5d 16       	cp	r5, r29
     318:	57 16       	cp	r5, r23
     31a:	4b 16       	cp	r4, r27
     31c:	45 16       	cp	r4, r21
     31e:	39 16       	cp	r3, r25
     320:	33 16       	cp	r3, r19
     322:	27 16       	cp	r2, r23
     324:	21 16       	cp	r2, r17
     326:	1b 16       	cp	r1, r27
     328:	15 16       	cp	r1, r21
     32a:	0f 16       	cp	r0, r31
     32c:	03 16       	cp	r0, r19
     32e:	fd 15       	cp	r31, r13
     330:	f7 15       	cp	r31, r7
     332:	f1 15       	cp	r31, r1
     334:	eb 15       	cp	r30, r11
     336:	df 15       	cp	r29, r15
     338:	d9 15       	cp	r29, r9
     33a:	cd 15       	cp	r28, r13
     33c:	c7 15       	cp	r28, r7
     33e:	c1 15       	cp	r28, r1
     340:	bb 15       	cp	r27, r11
     342:	af 15       	cp	r26, r15
     344:	a9 15       	cp	r26, r9
     346:	a3 15       	cp	r26, r3
     348:	9d 15       	cp	r25, r13
     34a:	97 15       	cp	r25, r7
     34c:	8b 15       	cp	r24, r11
     34e:	85 15       	cp	r24, r5
     350:	79 15       	cp	r23, r9
     352:	73 15       	cp	r23, r3
     354:	6d 15       	cp	r22, r13
     356:	67 15       	cp	r22, r7
     358:	5b 15       	cp	r21, r11
     35a:	55 15       	cp	r21, r5
     35c:	4f 15       	cp	r20, r15
     35e:	49 15       	cp	r20, r9
     360:	3d 15       	cp	r19, r13
     362:	37 15       	cp	r19, r7
     364:	31 15       	cp	r19, r1
     366:	2b 15       	cp	r18, r11
     368:	25 15       	cp	r18, r5
     36a:	19 15       	cp	r17, r9
     36c:	13 15       	cp	r17, r3
     36e:	07 15       	cp	r16, r7
     370:	01 15       	cp	r16, r1
     372:	f5 14       	cp	r15, r5
     374:	ef 14       	cp	r14, r15
     376:	e3 14       	cp	r14, r3
     378:	dd 14       	cp	r13, r13
     37a:	d1 14       	cp	r13, r1
     37c:	cb 14       	cp	r12, r11
     37e:	c5 14       	cp	r12, r5
     380:	bf 14       	cp	r11, r15
     382:	b9 14       	cp	r11, r9
     384:	ad 14       	cp	r10, r13
     386:	a7 14       	cp	r10, r7
     388:	9b 14       	cp	r9, r11
     38a:	95 14       	cp	r9, r5
     38c:	8f 14       	cp	r8, r15
     38e:	89 14       	cp	r8, r9
     390:	7d 14       	cp	r7, r13
     392:	77 14       	cp	r7, r7
     394:	71 14       	cp	r7, r1
     396:	6b 14       	cp	r6, r11
     398:	5f 14       	cp	r5, r15
     39a:	59 14       	cp	r5, r9
     39c:	4d 14       	cp	r4, r13
     39e:	47 14       	cp	r4, r7
     3a0:	3b 14       	cp	r3, r11
     3a2:	35 14       	cp	r3, r5
     3a4:	29 14       	cp	r2, r9
     3a6:	23 14       	cp	r2, r3
     3a8:	17 14       	cp	r1, r7
     3aa:	11 14       	cp	r1, r1
     3ac:	05 14       	cp	r0, r5
     3ae:	ff 13       	cpse	r31, r31
     3b0:	f3 13       	cpse	r31, r19
     3b2:	ed 13       	cpse	r30, r29
     3b4:	e7 13       	cpse	r30, r23
     3b6:	e1 13       	cpse	r30, r17
     3b8:	db 13       	cpse	r29, r27
     3ba:	cf 13       	cpse	r28, r31
     3bc:	c9 13       	cpse	r28, r25
     3be:	c3 13       	cpse	r28, r19
     3c0:	b7 13       	cpse	r27, r23
     3c2:	b1 13       	cpse	r27, r17
     3c4:	a5 13       	cpse	r26, r21
     3c6:	9f 13       	cpse	r25, r31
     3c8:	93 13       	cpse	r25, r19
     3ca:	8d 13       	cpse	r24, r29
     3cc:	81 13       	cpse	r24, r17
     3ce:	7b 13       	cpse	r23, r27
     3d0:	75 13       	cpse	r23, r21
     3d2:	6f 13       	cpse	r22, r31
     3d4:	63 13       	cpse	r22, r19
     3d6:	5d 13       	cpse	r21, r29
     3d8:	51 13       	cpse	r21, r17
     3da:	4b 13       	cpse	r20, r27
     3dc:	3f 13       	cpse	r19, r31
     3de:	39 13       	cpse	r19, r25
     3e0:	2d 13       	cpse	r18, r29
     3e2:	27 13       	cpse	r18, r23
     3e4:	21 13       	cpse	r18, r17
     3e6:	1b 13       	cpse	r17, r27
     3e8:	15 13       	cpse	r17, r21
     3ea:	09 13       	cpse	r16, r25
     3ec:	03 13       	cpse	r16, r19
     3ee:	fd 12       	cpse	r15, r29
     3f0:	a1 17       	cp	r26, r17
     3f2:	cb 17       	cp	r28, r27
     3f4:	b9 17       	cp	r27, r25
     3f6:	cb 17       	cp	r28, r27
     3f8:	b9 17       	cp	r27, r25
     3fa:	cb 17       	cp	r28, r27
     3fc:	b9 17       	cp	r27, r25
     3fe:	ef 17       	cp	r30, r31
     400:	b9 17       	cp	r27, r25
     402:	ef 17       	cp	r30, r31
     404:	d7 17       	cp	r29, r23
     406:	c5 17       	cp	r28, r21
     408:	07 18       	sub	r0, r7
     40a:	c5 17       	cp	r28, r21
     40c:	f5 17       	cp	r31, r21
     40e:	e3 17       	cp	r30, r19
     410:	d1 17       	cp	r29, r17
     412:	b9 17       	cp	r27, r25
     414:	d1 17       	cp	r29, r17
     416:	b9 17       	cp	r27, r25
     418:	d1 17       	cp	r29, r17
     41a:	b9 17       	cp	r27, r25
     41c:	e9 17       	cp	r30, r25
     41e:	b9 17       	cp	r27, r25
     420:	e9 17       	cp	r30, r25
     422:	d7 17       	cp	r29, r23
     424:	fb 17       	cp	r31, r27
     426:	01 18       	sub	r0, r1
     428:	b9 17       	cp	r27, r25
     42a:	c5 17       	cp	r28, r21
     42c:	0d 18       	sub	r0, r13
     42e:	e3 17       	cp	r30, r19

00000430 <__ctors_end>:
     430:	11 24       	eor	r1, r1
     432:	1f be       	out	0x3f, r1	; 63
     434:	cf ef       	ldi	r28, 0xFF	; 255
     436:	d0 e1       	ldi	r29, 0x10	; 16
     438:	de bf       	out	0x3e, r29	; 62
     43a:	cd bf       	out	0x3d, r28	; 61

0000043c <__do_copy_data>:
     43c:	12 e0       	ldi	r17, 0x02	; 2
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	b1 e0       	ldi	r27, 0x01	; 1
     442:	e0 ec       	ldi	r30, 0xC0	; 192
     444:	f4 e3       	ldi	r31, 0x34	; 52
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	0b bf       	out	0x3b, r16	; 59
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__do_copy_data+0x14>
     44c:	07 90       	elpm	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	a4 34       	cpi	r26, 0x44	; 68
     452:	b1 07       	cpc	r27, r17
     454:	d9 f7       	brne	.-10     	; 0x44c <__do_copy_data+0x10>

00000456 <__do_clear_bss>:
     456:	23 e0       	ldi	r18, 0x03	; 3
     458:	a4 e4       	ldi	r26, 0x44	; 68
     45a:	b2 e0       	ldi	r27, 0x02	; 2
     45c:	01 c0       	rjmp	.+2      	; 0x460 <.do_clear_bss_start>

0000045e <.do_clear_bss_loop>:
     45e:	1d 92       	st	X+, r1

00000460 <.do_clear_bss_start>:
     460:	a4 37       	cpi	r26, 0x74	; 116
     462:	b2 07       	cpc	r27, r18
     464:	e1 f7       	brne	.-8      	; 0x45e <.do_clear_bss_loop>
     466:	0e 94 5d 18 	call	0x30ba	; 0x30ba <main>
     46a:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <_exit>

0000046e <__bad_interrupt>:
     46e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000472 <__vector_8>:
#include "si4734.h"

extern uint16_t current_fm_freq;
volatile uint8_t STC_interrupt;  //flag bit to indicate tune or seek is done

ISR(INT7_vect){  STC_interrupt = TRUE;  }
     472:	1f 92       	push	r1
     474:	0f 92       	push	r0
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	8f 93       	push	r24
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 8c 02 	sts	0x028C, r24
     484:	8f 91       	pop	r24
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <spi_init>:
extern uint8_t lm73_wr_buf[2]; 
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
     490:	87 b3       	in	r24, 0x17	; 23
     492:	87 60       	ori	r24, 0x07	; 7
     494:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
     496:	8d b1       	in	r24, 0x0d	; 13
     498:	80 65       	ori	r24, 0x50	; 80
     49a:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
     49c:	70 9a       	sbi	0x0e, 0	; 14
     49e:	08 95       	ret

000004a0 <get_48>:
}//spi_init    

/*************************Test function**********************/
double get_48(){

clear_display();
     4a0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <clear_display>
	 
	string2lcd("a");	
     4a4:	89 e2       	ldi	r24, 0x29	; 41
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 07 0c 	call	0x180e	; 0x180e <string2lcd>
	string2lcd(lcd_str_array);	  
     4ac:	87 e8       	ldi	r24, 0x87	; 135
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 07 0c 	call	0x180e	; 0x180e <string2lcd>
        rcv_rdy=0;
     4b4:	10 92 72 02 	sts	0x0272, r1
        //cursor_home();



}
     4b8:	08 95       	ret

000004ba <get_128>:
/*******************************/
double get_128(){

//_delay_ms(50); //tenth second wait                  //wipe the display
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);//read temperature data from LM73 (2 bytes) 
     4ba:	42 e0       	ldi	r20, 0x02	; 2
     4bc:	62 e7       	ldi	r22, 0x72	; 114
     4be:	73 e0       	ldi	r23, 0x03	; 3
     4c0:	80 e9       	ldi	r24, 0x90	; 144
     4c2:	0e 94 98 0a 	call	0x1530	; 0x1530 <twi_start_rd>
  //_delay_ms(2);    //wait for it to finish
  lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
     4c6:	e2 e7       	ldi	r30, 0x72	; 114
     4c8:	f3 e0       	ldi	r31, 0x03	; 3
     4ca:	80 81       	ld	r24, Z
     4cc:	90 e0       	ldi	r25, 0x00	; 0
  lm73_temp = lm73_temp << 8; //shift it into upper byte 
     4ce:	98 2f       	mov	r25, r24
     4d0:	88 27       	eor	r24, r24
  lm73_temp |= lm73_rd_buf[1];  //"OR" in the low temp byte to lm73_temp 
     4d2:	21 81       	ldd	r18, Z+1	; 0x01
     4d4:	82 2b       	or	r24, r18
     4d6:	90 93 76 02 	sts	0x0276, r25
     4da:	80 93 75 02 	sts	0x0275, r24
  //lm73_temp =
  //itoa(lm73_temp, lcd_string_array, 10); //convert to string in array with itoa() from avr-libc                           
  //string2lcd(lcd_string_array); //send the string to LCD (lcd_functions)
  fp_adc_result = div(lm73_temp, 128);              //do division by 205 (204.8 to be exact)
     4de:	60 e8       	ldi	r22, 0x80	; 128
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__divmodhi4>
     4e6:	9b 01       	movw	r18, r22
     4e8:	60 93 a9 02 	sts	0x02A9, r22
     4ec:	70 93 aa 02 	sts	0x02AA, r23
     4f0:	80 93 ab 02 	sts	0x02AB, r24
     4f4:	90 93 ac 02 	sts	0x02AC, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4f8:	4a e0       	ldi	r20, 0x0A	; 10
     4fa:	62 e9       	ldi	r22, 0x92	; 146
     4fc:	72 e0       	ldi	r23, 0x02	; 2
     4fe:	c9 01       	movw	r24, r18
     500:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 128); //get the decimal fraction into non-fractional form 
     504:	80 91 ab 02 	lds	r24, 0x02AB
     508:	90 91 ac 02 	lds	r25, 0x02AC
     50c:	60 e8       	ldi	r22, 0x80	; 128
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	24 e6       	ldi	r18, 0x64	; 100
     512:	ac 01       	movw	r20, r24
     514:	24 9f       	mul	r18, r20
     516:	c0 01       	movw	r24, r0
     518:	25 9f       	mul	r18, r21
     51a:	90 0d       	add	r25, r0
     51c:	11 24       	eor	r1, r1
     51e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__divmodhi4>
     522:	9b 01       	movw	r18, r22
     524:	60 93 8d 02 	sts	0x028D, r22
     528:	70 93 8e 02 	sts	0x028E, r23
     52c:	80 93 8f 02 	sts	0x028F, r24
     530:	90 93 90 02 	sts	0x0290, r25
     534:	4a e0       	ldi	r20, 0x0A	; 10
     536:	6a e7       	ldi	r22, 0x7A	; 122
     538:	72 e0       	ldi	r23, 0x02	; 2
     53a:	c9 01       	movw	r24, r18
     53c:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
  itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string



}
     540:	08 95       	ret

00000542 <display_freq>:
	0b01000000, //thousands place
	0b00100000, //center colon
	0b01110000  //hi-Z mode
};
/*********************/
void display_freq(){
     542:	cf 93       	push	r28
cur_digit=0;
     544:	10 92 4e 02 	sts	0x024E, r1

	//Set Register A
	DDRA = 0xFF; //output
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     54c:	8b bb       	out	0x1b, r24	; 27

tmp=current_fm_freq;
     54e:	e0 91 fe 02 	lds	r30, 0x02FE
     552:	f0 91 ff 02 	lds	r31, 0x02FF
     556:	f0 93 70 02 	sts	0x0270, r31
     55a:	e0 93 6f 02 	sts	0x026F, r30
for(i=0; i<4 ; i++){
     55e:	10 92 81 02 	sts	0x0281, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     562:	cf ef       	ldi	r28, 0xFF	; 255
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=current_fm_freq;
for(i=0; i<4 ; i++){
		cur_value = tmp % 10; //get current digit to display
     564:	9f 01       	movw	r18, r30
     566:	ad ec       	ldi	r26, 0xCD	; 205
     568:	bc ec       	ldi	r27, 0xCC	; 204
     56a:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     56e:	ac 01       	movw	r20, r24
     570:	56 95       	lsr	r21
     572:	47 95       	ror	r20
     574:	56 95       	lsr	r21
     576:	47 95       	ror	r20
     578:	56 95       	lsr	r21
     57a:	47 95       	ror	r20
     57c:	ca 01       	movw	r24, r20
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	44 0f       	add	r20, r20
     584:	55 1f       	adc	r21, r21
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	44 0f       	add	r20, r20
     58c:	55 1f       	adc	r21, r21
     58e:	48 0f       	add	r20, r24
     590:	59 1f       	adc	r21, r25
     592:	e4 1b       	sub	r30, r20
     594:	f5 0b       	sbc	r31, r21
     596:	e0 93 91 02 	sts	0x0291, r30
		PORTB=0x00;
     59a:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     59c:	98 b3       	in	r25, 0x18	; 24
     59e:	e0 91 4e 02 	lds	r30, 0x024E
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	e0 50       	subi	r30, 0x00	; 0
     5a6:	ff 4f       	sbci	r31, 0xFF	; 255
     5a8:	80 81       	ld	r24, Z
     5aa:	89 2b       	or	r24, r25
     5ac:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     5ae:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     5b0:	e0 91 91 02 	lds	r30, 0x0291
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	ea 5e       	subi	r30, 0xEA	; 234
     5b8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ba:	80 81       	ld	r24, Z
     5bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5be:	81 ee       	ldi	r24, 0xE1	; 225
     5c0:	94 e0       	ldi	r25, 0x04	; 4
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <display_freq+0x80>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <display_freq+0x86>
     5c8:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     5ca:	80 91 4e 02 	lds	r24, 0x024E
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	80 93 4e 02 	sts	0x024E, r24
		tmp /= 10; //get next value
     5d4:	20 91 6f 02 	lds	r18, 0x026F
     5d8:	30 91 70 02 	lds	r19, 0x0270
     5dc:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     5e0:	fc 01       	movw	r30, r24
     5e2:	f6 95       	lsr	r31
     5e4:	e7 95       	ror	r30
     5e6:	f6 95       	lsr	r31
     5e8:	e7 95       	ror	r30
     5ea:	f6 95       	lsr	r31
     5ec:	e7 95       	ror	r30
     5ee:	f0 93 70 02 	sts	0x0270, r31
     5f2:	e0 93 6f 02 	sts	0x026F, r30
	//Set Register A
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=current_fm_freq;
for(i=0; i<4 ; i++){
     5f6:	80 91 81 02 	lds	r24, 0x0281
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	80 93 81 02 	sts	0x0281, r24
     600:	84 30       	cpi	r24, 0x04	; 4
     602:	08 f4       	brcc	.+2      	; 0x606 <display_freq+0xc4>
     604:	af cf       	rjmp	.-162    	; 0x564 <display_freq+0x22>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=alarm_hours;
     606:	80 91 24 01 	lds	r24, 0x0124
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 70 02 	sts	0x0270, r25
     610:	80 93 6f 02 	sts	0x026F, r24





	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     614:	80 e6       	ldi	r24, 0x60	; 96
     616:	88 bb       	out	0x18, r24	; 24





}
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <display_alarm>:
/****************/
void display_alarm(){
     61c:	cf 93       	push	r28
cur_digit=0;
     61e:	10 92 4e 02 	sts	0x024E, r1

	//Set Register A
	DDRA = 0xFF; //output
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     626:	8b bb       	out	0x1b, r24	; 27

tmp=alarm_minutes;
     628:	e0 91 23 01 	lds	r30, 0x0123
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	f0 93 70 02 	sts	0x0270, r31
     632:	e0 93 6f 02 	sts	0x026F, r30
for(i=0; i<2 ; i++){
     636:	10 92 81 02 	sts	0x0281, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     63a:	cf ef       	ldi	r28, 0xFF	; 255
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     63c:	9f 01       	movw	r18, r30
     63e:	ad ec       	ldi	r26, 0xCD	; 205
     640:	bc ec       	ldi	r27, 0xCC	; 204
     642:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     646:	ac 01       	movw	r20, r24
     648:	56 95       	lsr	r21
     64a:	47 95       	ror	r20
     64c:	56 95       	lsr	r21
     64e:	47 95       	ror	r20
     650:	56 95       	lsr	r21
     652:	47 95       	ror	r20
     654:	ca 01       	movw	r24, r20
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	44 0f       	add	r20, r20
     65c:	55 1f       	adc	r21, r21
     65e:	44 0f       	add	r20, r20
     660:	55 1f       	adc	r21, r21
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	48 0f       	add	r20, r24
     668:	59 1f       	adc	r21, r25
     66a:	e4 1b       	sub	r30, r20
     66c:	f5 0b       	sbc	r31, r21
     66e:	e0 93 91 02 	sts	0x0291, r30
		PORTB=0x00;
     672:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     674:	98 b3       	in	r25, 0x18	; 24
     676:	e0 91 4e 02 	lds	r30, 0x024E
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e0 50       	subi	r30, 0x00	; 0
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	80 81       	ld	r24, Z
     682:	89 2b       	or	r24, r25
     684:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     686:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     688:	e0 91 91 02 	lds	r30, 0x0291
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	ea 5e       	subi	r30, 0xEA	; 234
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	80 81       	ld	r24, Z
     694:	8b bb       	out	0x1b, r24	; 27
     696:	81 ee       	ldi	r24, 0xE1	; 225
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <display_alarm+0x7e>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <display_alarm+0x84>
     6a0:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     6a2:	80 91 4e 02 	lds	r24, 0x024E
     6a6:	8f 5f       	subi	r24, 0xFF	; 255
     6a8:	80 93 4e 02 	sts	0x024E, r24
		tmp /= 10; //get next value
     6ac:	20 91 6f 02 	lds	r18, 0x026F
     6b0:	30 91 70 02 	lds	r19, 0x0270
     6b4:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     6b8:	fc 01       	movw	r30, r24
     6ba:	f6 95       	lsr	r31
     6bc:	e7 95       	ror	r30
     6be:	f6 95       	lsr	r31
     6c0:	e7 95       	ror	r30
     6c2:	f6 95       	lsr	r31
     6c4:	e7 95       	ror	r30
     6c6:	f0 93 70 02 	sts	0x0270, r31
     6ca:	e0 93 6f 02 	sts	0x026F, r30
	//Set Register A
	DDRA = 0xFF; //output
	PORTA = 0xFF; //pullups

tmp=alarm_minutes;
for(i=0; i<2 ; i++){
     6ce:	80 91 81 02 	lds	r24, 0x0281
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	80 93 81 02 	sts	0x0281, r24
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	08 f4       	brcc	.+2      	; 0x6de <display_alarm+0xc2>
     6dc:	af cf       	rjmp	.-162    	; 0x63c <display_alarm+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=alarm_hours;
     6de:	40 91 24 01 	lds	r20, 0x0124
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	50 93 70 02 	sts	0x0270, r21
     6e8:	40 93 6f 02 	sts	0x026F, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     6ec:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=alarm_hours;
do {
		cur_value = tmp % 10; //get current digit to display
     6ee:	9a 01       	movw	r18, r20
     6f0:	ad ec       	ldi	r26, 0xCD	; 205
     6f2:	bc ec       	ldi	r27, 0xCC	; 204
     6f4:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     6f8:	96 95       	lsr	r25
     6fa:	87 95       	ror	r24
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	9c 01       	movw	r18, r24
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	48 1b       	sub	r20, r24
     71c:	59 0b       	sbc	r21, r25
     71e:	40 93 91 02 	sts	0x0291, r20
		PORTB=0x00;
     722:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     724:	98 b3       	in	r25, 0x18	; 24
     726:	e0 91 4e 02 	lds	r30, 0x024E
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	e0 50       	subi	r30, 0x00	; 0
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	80 81       	ld	r24, Z
     732:	89 2b       	or	r24, r25
     734:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     736:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     738:	e0 91 91 02 	lds	r30, 0x0291
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ea 5e       	subi	r30, 0xEA	; 234
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	80 81       	ld	r24, Z
     744:	8b bb       	out	0x1b, r24	; 27
     746:	81 ee       	ldi	r24, 0xE1	; 225
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <display_alarm+0x12e>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <display_alarm+0x134>
     750:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     752:	80 91 4e 02 	lds	r24, 0x024E
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 4e 02 	sts	0x024E, r24
		tmp /= 10; //get next value
     75c:	20 91 6f 02 	lds	r18, 0x026F
     760:	30 91 70 02 	lds	r19, 0x0270
     764:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     768:	ac 01       	movw	r20, r24
     76a:	56 95       	lsr	r21
     76c:	47 95       	ror	r20
     76e:	56 95       	lsr	r21
     770:	47 95       	ror	r20
     772:	56 95       	lsr	r21
     774:	47 95       	ror	r20
     776:	50 93 70 02 	sts	0x0270, r21
     77a:	40 93 6f 02 	sts	0x026F, r20
	} while (tmp >= 1);
     77e:	41 15       	cp	r20, r1
     780:	51 05       	cpc	r21, r1
     782:	09 f0       	breq	.+2      	; 0x786 <display_alarm+0x16a>
     784:	b4 cf       	rjmp	.-152    	; 0x6ee <display_alarm+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     786:	80 e6       	ldi	r24, 0x60	; 96
     788:	88 bb       	out	0x18, r24	; 24





}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <display_digits>:

/*******************************/
void display_digits() 
{
     78e:	cf 93       	push	r28
	cur_digit=0;
     790:	10 92 4e 02 	sts	0x024E, r1

	//Set Register A
	DDRA = 0xFF; //output
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF; //pullups
     798:	8b bb       	out	0x1b, r24	; 27
PORTB=0x00;
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
     79a:	e0 91 50 02 	lds	r30, 0x0250
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	f0 93 70 02 	sts	0x0270, r31
     7a4:	e0 93 6f 02 	sts	0x026F, r30
for(i=0; i<2 ; i++){
     7a8:	10 92 81 02 	sts	0x0281, r1
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     7ac:	cf ef       	ldi	r28, 0xFF	; 255
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
		cur_value = tmp % 10; //get current digit to display
     7ae:	9f 01       	movw	r18, r30
     7b0:	ad ec       	ldi	r26, 0xCD	; 205
     7b2:	bc ec       	ldi	r27, 0xCC	; 204
     7b4:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     7b8:	ac 01       	movw	r20, r24
     7ba:	56 95       	lsr	r21
     7bc:	47 95       	ror	r20
     7be:	56 95       	lsr	r21
     7c0:	47 95       	ror	r20
     7c2:	56 95       	lsr	r21
     7c4:	47 95       	ror	r20
     7c6:	ca 01       	movw	r24, r20
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	44 0f       	add	r20, r20
     7ce:	55 1f       	adc	r21, r21
     7d0:	44 0f       	add	r20, r20
     7d2:	55 1f       	adc	r21, r21
     7d4:	44 0f       	add	r20, r20
     7d6:	55 1f       	adc	r21, r21
     7d8:	48 0f       	add	r20, r24
     7da:	59 1f       	adc	r21, r25
     7dc:	e4 1b       	sub	r30, r20
     7de:	f5 0b       	sbc	r31, r21
     7e0:	e0 93 91 02 	sts	0x0291, r30
		PORTB=0x00;
     7e4:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     7e6:	98 b3       	in	r25, 0x18	; 24
     7e8:	e0 91 4e 02 	lds	r30, 0x024E
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	e0 50       	subi	r30, 0x00	; 0
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	80 81       	ld	r24, Z
     7f4:	89 2b       	or	r24, r25
     7f6:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     7f8:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     7fa:	e0 91 91 02 	lds	r30, 0x0291
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	ea 5e       	subi	r30, 0xEA	; 234
     802:	fe 4f       	sbci	r31, 0xFE	; 254
     804:	80 81       	ld	r24, Z
     806:	8b bb       	out	0x1b, r24	; 27
     808:	81 ee       	ldi	r24, 0xE1	; 225
     80a:	94 e0       	ldi	r25, 0x04	; 4
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <display_digits+0x7e>
     810:	00 c0       	rjmp	.+0      	; 0x812 <display_digits+0x84>
     812:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     814:	80 91 4e 02 	lds	r24, 0x024E
     818:	8f 5f       	subi	r24, 0xFF	; 255
     81a:	80 93 4e 02 	sts	0x024E, r24
		tmp /= 10; //get next value
     81e:	20 91 6f 02 	lds	r18, 0x026F
     822:	30 91 70 02 	lds	r19, 0x0270
     826:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     82a:	fc 01       	movw	r30, r24
     82c:	f6 95       	lsr	r31
     82e:	e7 95       	ror	r30
     830:	f6 95       	lsr	r31
     832:	e7 95       	ror	r30
     834:	f6 95       	lsr	r31
     836:	e7 95       	ror	r30
     838:	f0 93 70 02 	sts	0x0270, r31
     83c:	e0 93 6f 02 	sts	0x026F, r30
PORTB|=decoder_select[0];
PORTA = 0xFF; //clear PORTA
PORTA = sev_seg_digits[cur_value]; //display digit
*/
tmp=minutes;
for(i=0; i<2 ; i++){
     840:	80 91 81 02 	lds	r24, 0x0281
     844:	8f 5f       	subi	r24, 0xFF	; 255
     846:	80 93 81 02 	sts	0x0281, r24
     84a:	82 30       	cpi	r24, 0x02	; 2
     84c:	08 f4       	brcc	.+2      	; 0x850 <display_digits+0xc2>
     84e:	af cf       	rjmp	.-162    	; 0x7ae <display_digits+0x20>
/*PORTB=0b00100000;
PORTA=0x00;
_delay_ms(5);
*/

tmp=hours;
     850:	40 91 25 01 	lds	r20, 0x0125
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	50 93 70 02 	sts	0x0270, r21
     85a:	40 93 6f 02 	sts	0x026F, r20
do {
		cur_value = tmp % 10; //get current digit to display
		PORTB=0x00;
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
		PORTA = 0xFF; //clear PORTA
     85e:	cf ef       	ldi	r28, 0xFF	; 255
_delay_ms(5);
*/

tmp=hours;
do {
		cur_value = tmp % 10; //get current digit to display
     860:	9a 01       	movw	r18, r20
     862:	ad ec       	ldi	r26, 0xCD	; 205
     864:	bc ec       	ldi	r27, 0xCC	; 204
     866:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     86a:	96 95       	lsr	r25
     86c:	87 95       	ror	r24
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	96 95       	lsr	r25
     874:	87 95       	ror	r24
     876:	9c 01       	movw	r18, r24
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	48 1b       	sub	r20, r24
     88e:	59 0b       	sbc	r21, r25
     890:	40 93 91 02 	sts	0x0291, r20
		PORTB=0x00;
     894:	18 ba       	out	0x18, r1	; 24
		PORTB |= decoder_select[cur_digit]; //set portb decoder bits
     896:	98 b3       	in	r25, 0x18	; 24
     898:	e0 91 4e 02 	lds	r30, 0x024E
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e0 50       	subi	r30, 0x00	; 0
     8a0:	ff 4f       	sbci	r31, 0xFF	; 255
     8a2:	80 81       	ld	r24, Z
     8a4:	89 2b       	or	r24, r25
     8a6:	88 bb       	out	0x18, r24	; 24
		PORTA = 0xFF; //clear PORTA
     8a8:	cb bb       	out	0x1b, r28	; 27
		PORTA = sev_seg_digits[cur_value]; //display digit
     8aa:	e0 91 91 02 	lds	r30, 0x0291
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ea 5e       	subi	r30, 0xEA	; 234
     8b2:	fe 4f       	sbci	r31, 0xFE	; 254
     8b4:	80 81       	ld	r24, Z
     8b6:	8b bb       	out	0x1b, r24	; 27
     8b8:	81 ee       	ldi	r24, 0xE1	; 225
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <display_digits+0x12e>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <display_digits+0x134>
     8c2:	00 00       	nop
		_delay_ms(5);
		cur_digit++; //next digit
     8c4:	80 91 4e 02 	lds	r24, 0x024E
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 4e 02 	sts	0x024E, r24
		tmp /= 10; //get next value
     8ce:	20 91 6f 02 	lds	r18, 0x026F
     8d2:	30 91 70 02 	lds	r19, 0x0270
     8d6:	0e 94 a4 19 	call	0x3348	; 0x3348 <__umulhisi3>
     8da:	ac 01       	movw	r20, r24
     8dc:	56 95       	lsr	r21
     8de:	47 95       	ror	r20
     8e0:	56 95       	lsr	r21
     8e2:	47 95       	ror	r20
     8e4:	56 95       	lsr	r21
     8e6:	47 95       	ror	r20
     8e8:	50 93 70 02 	sts	0x0270, r21
     8ec:	40 93 6f 02 	sts	0x026F, r20
	} while (tmp >= 1);
     8f0:	41 15       	cp	r20, r1
     8f2:	51 05       	cpc	r21, r1
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <display_digits+0x16a>
     8f6:	b4 cf       	rjmp	.-152    	; 0x860 <display_digits+0xd2>




	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
     8f8:	80 e6       	ldi	r24, 0x60	; 96
     8fa:	88 bb       	out	0x18, r24	; 24
}
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <Button>:
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
     900:	99 b3       	in	r25, 0x19	; 25
     902:	80 91 27 01 	lds	r24, 0x0127
     906:	89 1b       	sub	r24, r25
 switch(checker){
     908:	88 30       	cpi	r24, 0x08	; 8
     90a:	09 f4       	brne	.+2      	; 0x90e <Button+0xe>
     90c:	5f c0       	rjmp	.+190    	; 0x9cc <Button+0xcc>
     90e:	a8 f0       	brcs	.+42     	; 0x93a <Button+0x3a>
     910:	80 32       	cpi	r24, 0x20	; 32
     912:	09 f4       	brne	.+2      	; 0x916 <Button+0x16>
     914:	4f c0       	rjmp	.+158    	; 0x9b4 <Button+0xb4>
     916:	a0 f1       	brcs	.+104    	; 0x980 <Button+0x80>
     918:	80 34       	cpi	r24, 0x40	; 64
     91a:	61 f1       	breq	.+88     	; 0x974 <Button+0x74>
     91c:	80 38       	cpi	r24, 0x80	; 128
     91e:	09 f0       	breq	.+2      	; 0x922 <Button+0x22>
     920:	60 c0       	rjmp	.+192    	; 0x9e2 <Button+0xe2>

		break;

	case 0x80:
		
		radio ^=0x01;
     922:	90 91 47 02 	lds	r25, 0x0247
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	89 27       	eor	r24, r25
     92a:	80 93 47 02 	sts	0x0247, r24
		BARAGRAPH ^= (1<<7);
     92e:	80 91 56 02 	lds	r24, 0x0256
     932:	80 58       	subi	r24, 0x80	; 128
     934:	80 93 56 02 	sts	0x0256, r24
     938:	08 95       	ret
	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
}
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
 switch(checker){
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	79 f1       	breq	.+94     	; 0x99c <Button+0x9c>
     93e:	84 30       	cpi	r24, 0x04	; 4
     940:	69 f0       	breq	.+26     	; 0x95c <Button+0x5c>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	c9 f7       	brne	.-14     	; 0x938 <Button+0x38>

	case 0x01:
		edit_hour ^=0x01;
     946:	90 91 a7 02 	lds	r25, 0x02A7
     94a:	98 27       	eor	r25, r24
     94c:	90 93 a7 02 	sts	0x02A7, r25
		BARAGRAPH ^=( 1 << 0 );
     950:	90 91 56 02 	lds	r25, 0x0256
     954:	89 27       	eor	r24, r25
     956:	80 93 56 02 	sts	0x0256, r24
		break;
     95a:	08 95       	ret
	

		break;

	case 0x04:
		alarm ^=0x01;
     95c:	20 91 79 02 	lds	r18, 0x0279
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	92 27       	eor	r25, r18
     964:	90 93 79 02 	sts	0x0279, r25
		BARAGRAPH ^= ( 1 <<2);
     968:	90 91 56 02 	lds	r25, 0x0256
     96c:	89 27       	eor	r24, r25
     96e:	80 93 56 02 	sts	0x0256, r24
	
		break;
     972:	08 95       	ret
		BARAGRAPH ^= (1<<5);
		break;


	case 0x40:
		minutes=minutes+1;
     974:	80 91 50 02 	lds	r24, 0x0250
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	80 93 50 02 	sts	0x0250, r24

		break;
     97e:	08 95       	ret
	PORTB = 0x60; //switch encoder output to unused bit to remove ghosting
}
/********************************************************************/
void Button(){
uint8_t checker =NotTouched-  PINA;
 switch(checker){
     980:	80 31       	cpi	r24, 0x10	; 16
     982:	81 f5       	brne	.+96     	; 0x9e4 <Button+0xe4>
		alarm_minutes= alarm_minutes+5;
		BARAGRAPH ^= (1<<3);
		break;

	case 0x10:
		temp ^=0x01;
     984:	20 91 49 02 	lds	r18, 0x0249
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	92 27       	eor	r25, r18
     98c:	90 93 49 02 	sts	0x0249, r25
		BARAGRAPH ^= (1<<4);
     990:	90 91 56 02 	lds	r25, 0x0256
     994:	89 27       	eor	r24, r25
     996:	80 93 56 02 	sts	0x0256, r24
		break;
     99a:	08 95       	ret
		edit_hour ^=0x01;
		BARAGRAPH ^=( 1 << 0 );
		break;
    
	case 0x02:
    		edit_minutes ^=0x01;
     99c:	20 91 71 02 	lds	r18, 0x0271
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	92 27       	eor	r25, r18
     9a4:	90 93 71 02 	sts	0x0271, r25
		BARAGRAPH ^= ( 1 << 1);
     9a8:	90 91 56 02 	lds	r25, 0x0256
     9ac:	89 27       	eor	r24, r25
     9ae:	80 93 56 02 	sts	0x0256, r24
	

		break;
     9b2:	08 95       	ret
		break;



	case 0x20:
		temp2 ^=0x01;
     9b4:	20 91 48 02 	lds	r18, 0x0248
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	92 27       	eor	r25, r18
     9bc:	90 93 48 02 	sts	0x0248, r25
		BARAGRAPH ^= (1<<5);
     9c0:	90 91 56 02 	lds	r25, 0x0256
     9c4:	89 27       	eor	r24, r25
     9c6:	80 93 56 02 	sts	0x0256, r24
		break;
     9ca:	08 95       	ret
		BARAGRAPH ^= ( 1 <<2);
	
		break;

	case 0x08:
		alarm_minutes= alarm_minutes+5;
     9cc:	90 91 23 01 	lds	r25, 0x0123
     9d0:	9b 5f       	subi	r25, 0xFB	; 251
     9d2:	90 93 23 01 	sts	0x0123, r25
		BARAGRAPH ^= (1<<3);
     9d6:	90 91 56 02 	lds	r25, 0x0256
     9da:	89 27       	eor	r24, r25
     9dc:	80 93 56 02 	sts	0x0256, r24
		break;
     9e0:	08 95       	ret
     9e2:	08 95       	ret
     9e4:	08 95       	ret

000009e6 <encoder>:
}
/******************************************encoder************************/
void encoder(){


 OE1 = encoder1;
     9e6:	30 91 53 02 	lds	r19, 0x0253
     9ea:	30 93 55 02 	sts	0x0255, r19
  OE2 = encoder2;
     9ee:	20 91 52 02 	lds	r18, 0x0252
     9f2:	20 93 54 02 	sts	0x0254, r18

  

  encoder1 =  (spdr_to_encoder & 0x03);
     9f6:	80 91 85 02 	lds	r24, 0x0285
     9fa:	90 91 86 02 	lds	r25, 0x0286
     9fe:	48 2f       	mov	r20, r24
     a00:	43 70       	andi	r20, 0x03	; 3
     a02:	40 93 53 02 	sts	0x0253, r20
  encoder2 = ((spdr_to_encoder& 0x0C) >> 2);
     a06:	8c 70       	andi	r24, 0x0C	; 12
     a08:	99 27       	eor	r25, r25
     a0a:	96 95       	lsr	r25
     a0c:	87 95       	ror	r24
     a0e:	96 95       	lsr	r25
     a10:	87 95       	ror	r24
     a12:	98 2f       	mov	r25, r24
     a14:	80 93 52 02 	sts	0x0252, r24



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
     a18:	34 17       	cp	r19, r20
     a1a:	21 f0       	breq	.+8      	; 0xa24 <encoder+0x3e>
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     a1c:	31 30       	cpi	r19, 0x01	; 1
     a1e:	41 f1       	breq	.+80     	; 0xa70 <encoder+0x8a>
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     a20:	32 30       	cpi	r19, 0x02	; 2
     a22:	49 f0       	breq	.+18     	; 0xa36 <encoder+0x50>
    	

	}
  }
/********************************************************/
  if(encoder2 != OE2){
     a24:	29 17       	cp	r18, r25
     a26:	31 f0       	breq	.+12     	; 0xa34 <encoder+0x4e>
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     a28:	21 30       	cpi	r18, 0x01	; 1
     a2a:	b1 f0       	breq	.+44     	; 0xa58 <encoder+0x72>
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
     a2c:	22 30       	cpi	r18, 0x02	; 2
     a2e:	11 f4       	brne	.+4      	; 0xa34 <encoder+0x4e>
     a30:	93 30       	cpi	r25, 0x03	; 3
     a32:	79 f1       	breq	.+94     	; 0xa92 <encoder+0xac>
     a34:	08 95       	ret
   
	    	}
	}


    if((OE1 == 0x02) && (encoder1 == 0x03)){      
     a36:	43 30       	cpi	r20, 0x03	; 3
     a38:	a9 f7       	brne	.-22     	; 0xa24 <encoder+0x3e>
		if(edit_hour & edit_minutes){    	
     a3a:	80 91 a7 02 	lds	r24, 0x02A7
     a3e:	30 91 71 02 	lds	r19, 0x0271
     a42:	43 2f       	mov	r20, r19
     a44:	48 23       	and	r20, r24
     a46:	71 f7       	brne	.-36     	; 0xa24 <encoder+0x3e>
		}
	  	else if (edit_hour){
     a48:	88 23       	and	r24, r24
     a4a:	69 f1       	breq	.+90     	; 0xaa6 <encoder+0xc0>
	    	hours=hours-1;
     a4c:	80 91 25 01 	lds	r24, 0x0125
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	80 93 25 01 	sts	0x0125, r24
     a56:	e6 cf       	rjmp	.-52     	; 0xa24 <encoder+0x3e>

	}
  }
/********************************************************/
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
     a58:	93 30       	cpi	r25, 0x03	; 3
     a5a:	61 f7       	brne	.-40     	; 0xa34 <encoder+0x4e>
	OCR3A=OCR3A+50;
     a5c:	80 91 86 00 	lds	r24, 0x0086
     a60:	90 91 87 00 	lds	r25, 0x0087
     a64:	c2 96       	adiw	r24, 0x32	; 50
     a66:	90 93 87 00 	sts	0x0087, r25
     a6a:	80 93 86 00 	sts	0x0086, r24
     a6e:	08 95       	ret



/*************regular hour encoder**********************/  
  if(encoder1 != OE1){
    if((OE1 == 0x01) && (encoder1 == 0x03)){
     a70:	43 30       	cpi	r20, 0x03	; 3
     a72:	c1 f6       	brne	.-80     	; 0xa24 <encoder+0x3e>
  
	if(edit_hour & edit_minutes){    	
     a74:	80 91 a7 02 	lds	r24, 0x02A7
     a78:	30 91 71 02 	lds	r19, 0x0271
     a7c:	43 2f       	mov	r20, r19
     a7e:	48 23       	and	r20, r24
     a80:	89 f6       	brne	.-94     	; 0xa24 <encoder+0x3e>
	}
	  	else if (edit_hour){
     a82:	88 23       	and	r24, r24
     a84:	c9 f0       	breq	.+50     	; 0xab8 <encoder+0xd2>
	    	hours=hours+1;
     a86:	80 91 25 01 	lds	r24, 0x0125
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	80 93 25 01 	sts	0x0125, r24
     a90:	c9 cf       	rjmp	.-110    	; 0xa24 <encoder+0x3e>
  if(encoder2 != OE2){
    if((OE2 == 0x01) && (encoder2 == 0x03)){     
	OCR3A=OCR3A+50;
	}
    if((OE2 == 0x02) && (encoder2 == 0x03)){
	OCR3A=OCR3A-50;
     a92:	80 91 86 00 	lds	r24, 0x0086
     a96:	90 91 87 00 	lds	r25, 0x0087
     a9a:	c2 97       	sbiw	r24, 0x32	; 50
     a9c:	90 93 87 00 	sts	0x0087, r25
     aa0:	80 93 86 00 	sts	0x0086, r24
     aa4:	08 95       	ret
		if(edit_hour & edit_minutes){    	
		}
	  	else if (edit_hour){
	    	hours=hours-1;
		}
	  	else if (edit_minutes){
     aa6:	33 23       	and	r19, r19
     aa8:	09 f4       	brne	.+2      	; 0xaac <encoder+0xc6>
     aaa:	bc cf       	rjmp	.-136    	; 0xa24 <encoder+0x3e>
	    	minutes=minutes-1;
     aac:	80 91 50 02 	lds	r24, 0x0250
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 50 02 	sts	0x0250, r24
     ab6:	b6 cf       	rjmp	.-148    	; 0xa24 <encoder+0x3e>
	if(edit_hour & edit_minutes){    	
	}
	  	else if (edit_hour){
	    	hours=hours+1;
		}
	  	else if (edit_minutes){
     ab8:	33 23       	and	r19, r19
     aba:	09 f4       	brne	.+2      	; 0xabe <encoder+0xd8>
     abc:	b3 cf       	rjmp	.-154    	; 0xa24 <encoder+0x3e>
	    	minutes=minutes+1;
     abe:	80 91 50 02 	lds	r24, 0x0250
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	80 93 50 02 	sts	0x0250, r24
     ac8:	ad cf       	rjmp	.-166    	; 0xa24 <encoder+0x3e>

00000aca <checker>:


}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
     aca:	80 91 51 02 	lds	r24, 0x0251
     ace:	8c 33       	cpi	r24, 0x3C	; 60
     ad0:	b1 f0       	breq	.+44     	; 0xafe <checker+0x34>
     ad2:	80 91 50 02 	lds	r24, 0x0250
	sec=0;
	minutes++;

}

if(minutes==60){
     ad6:	8c 33       	cpi	r24, 0x3C	; 60
     ad8:	d9 f0       	breq	.+54     	; 0xb10 <checker+0x46>
     ada:	80 91 25 01 	lds	r24, 0x0125
	minutes=0;
	hours++;

}

if(hours==13){
     ade:	8d 30       	cpi	r24, 0x0D	; 13
     ae0:	01 f1       	breq	.+64     	; 0xb22 <checker+0x58>

if(vol_n <0){
vol_n=0;
}

if( vol_n >2000){
     ae2:	80 91 20 01 	lds	r24, 0x0120
     ae6:	90 91 21 01 	lds	r25, 0x0121
     aea:	81 3d       	cpi	r24, 0xD1	; 209
     aec:	97 40       	sbci	r25, 0x07	; 7
     aee:	30 f0       	brcs	.+12     	; 0xafc <checker+0x32>
vol_n=2000;
     af0:	80 ed       	ldi	r24, 0xD0	; 208
     af2:	97 e0       	ldi	r25, 0x07	; 7
     af4:	90 93 21 01 	sts	0x0121, r25
     af8:	80 93 20 01 	sts	0x0120, r24
     afc:	08 95       	ret

}
/******************************Clock checker*******************/
void checker(){
if(sec==60){
	sec=0;
     afe:	10 92 51 02 	sts	0x0251, r1
	minutes++;
     b02:	80 91 50 02 	lds	r24, 0x0250
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	80 93 50 02 	sts	0x0250, r24

}

if(minutes==60){
     b0c:	8c 33       	cpi	r24, 0x3C	; 60
     b0e:	29 f7       	brne	.-54     	; 0xada <checker+0x10>

	minutes=0;
     b10:	10 92 50 02 	sts	0x0250, r1
	hours++;
     b14:	80 91 25 01 	lds	r24, 0x0125
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	80 93 25 01 	sts	0x0125, r24

}

if(hours==13){
     b1e:	8d 30       	cpi	r24, 0x0D	; 13
     b20:	01 f7       	brne	.-64     	; 0xae2 <checker+0x18>
	hours=1;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 25 01 	sts	0x0125, r24
     b28:	dc cf       	rjmp	.-72     	; 0xae2 <checker+0x18>

00000b2a <alarm_check>:

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     b2a:	90 91 25 01 	lds	r25, 0x0125
     b2e:	80 91 24 01 	lds	r24, 0x0124
     b32:	98 17       	cp	r25, r24
     b34:	19 f0       	breq	.+6      	; 0xb3c <alarm_check+0x12>
	alarmON=1;
}

else{

	alarmON=0;
     b36:	10 92 4f 02 	sts	0x024F, r1
     b3a:	08 95       	ret

}
/*****************************Check if alarm == clock *********/
void alarm_check(){

if( (hours == alarm_hours) && (minutes==alarm_minutes)){
     b3c:	90 91 50 02 	lds	r25, 0x0250
     b40:	80 91 23 01 	lds	r24, 0x0123
     b44:	98 13       	cpse	r25, r24
     b46:	f7 cf       	rjmp	.-18     	; 0xb36 <alarm_check+0xc>

	alarmON=1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 4f 02 	sts	0x024F, r24
     b4e:	08 95       	ret

00000b50 <lcd_control>:


}
/**************************LCD control***********************/
void lcd_control(){
if (temp==0){
     b50:	80 91 49 02 	lds	r24, 0x0249
     b54:	81 11       	cpse	r24, r1
     b56:	09 c0       	rjmp	.+18     	; 0xb6a <lcd_control+0x1a>
if(strcmp(lcd_now,lcd_old)){
     b58:	67 e9       	ldi	r22, 0x97	; 151
     b5a:	72 e0       	ldi	r23, 0x02	; 2
     b5c:	8f e5       	ldi	r24, 0x5F	; 95
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcmp>
     b64:	89 2b       	or	r24, r25
     b66:	d9 f5       	brne	.+118    	; 0xbde <lcd_control+0x8e>
     b68:	08 95       	ret

}
}

	else{
		if(temp2==0){
     b6a:	80 91 48 02 	lds	r24, 0x0248
     b6e:	88 23       	and	r24, r24
     b70:	a9 f0       	breq	.+42     	; 0xb9c <lcd_control+0x4c>
		}



		else{
			if(rcv_rdy==1){
     b72:	80 91 72 02 	lds	r24, 0x0272
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	b9 f7       	brne	.-18     	; 0xb68 <lcd_control+0x18>
				
					strcpy(lcd_now,lcd_str_array);
     b7a:	67 e8       	ldi	r22, 0x87	; 135
     b7c:	72 e0       	ldi	r23, 0x02	; 2
     b7e:	8f e5       	ldi	r24, 0x5F	; 95
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <strcpy>
					if (strcmp(lcd_now,lcd_old)){
     b86:	67 e9       	ldi	r22, 0x97	; 151
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	8f e5       	ldi	r24, 0x5F	; 95
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcmp>
     b92:	89 2b       	or	r24, r25
     b94:	81 f5       	brne	.+96     	; 0xbf6 <lcd_control+0xa6>
						clear_display();
						string2lcd(lcd_now);
					}
					
					  
			rcv_rdy=0;
     b96:	10 92 72 02 	sts	0x0272, r1
     b9a:	08 95       	ret

	else{
		if(temp2==0){


			strcpy(lcd_now,lcd_str_h);
     b9c:	62 e9       	ldi	r22, 0x92	; 146
     b9e:	72 e0       	ldi	r23, 0x02	; 2
     ba0:	8f e5       	ldi	r24, 0x5F	; 95
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <strcpy>
			if (strcmp(lcd_now,lcd_old)){
     ba8:	67 e9       	ldi	r22, 0x97	; 151
     baa:	72 e0       	ldi	r23, 0x02	; 2
     bac:	8f e5       	ldi	r24, 0x5F	; 95
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <strcmp>
     bb4:	89 2b       	or	r24, r25
     bb6:	c1 f2       	breq	.-80     	; 0xb68 <lcd_control+0x18>
				strcpy(lcd_old,lcd_now);
     bb8:	6f e5       	ldi	r22, 0x5F	; 95
     bba:	72 e0       	ldi	r23, 0x02	; 2
     bbc:	87 e9       	ldi	r24, 0x97	; 151
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <strcpy>
				clear_display();
     bc4:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <clear_display>
				string2lcd(lcd_now);
     bc8:	8f e5       	ldi	r24, 0x5F	; 95
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 07 0c 	call	0x180e	; 0x180e <string2lcd>
				char2lcd('.');
     bd0:	8e e2       	ldi	r24, 0x2E	; 46
     bd2:	0e 94 03 0c 	call	0x1806	; 0x1806 <char2lcd>
				string2lcd(lcd_str_l);
     bd6:	8a e7       	ldi	r24, 0x7A	; 122
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0c 94 07 0c 	jmp	0x180e	; 0x180e <string2lcd>
}
/**************************LCD control***********************/
void lcd_control(){
if (temp==0){
if(strcmp(lcd_now,lcd_old)){
	strcpy(lcd_old,lcd_now);
     bde:	6f e5       	ldi	r22, 0x5F	; 95
     be0:	72 e0       	ldi	r23, 0x02	; 2
     be2:	87 e9       	ldi	r24, 0x97	; 151
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <strcpy>
	clear_display();
     bea:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <clear_display>
	string2lcd(lcd_now);
     bee:	8f e5       	ldi	r24, 0x5F	; 95
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	0c 94 07 0c 	jmp	0x180e	; 0x180e <string2lcd>
		else{
			if(rcv_rdy==1){
				
					strcpy(lcd_now,lcd_str_array);
					if (strcmp(lcd_now,lcd_old)){
						strcpy(lcd_old,lcd_now);
     bf6:	6f e5       	ldi	r22, 0x5F	; 95
     bf8:	72 e0       	ldi	r23, 0x02	; 2
     bfa:	87 e9       	ldi	r24, 0x97	; 151
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <strcpy>
						clear_display();
     c02:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <clear_display>
						string2lcd(lcd_now);
     c06:	8f e5       	ldi	r24, 0x5F	; 95
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 07 0c 	call	0x180e	; 0x180e <string2lcd>
     c0e:	c3 cf       	rjmp	.-122    	; 0xb96 <lcd_control+0x46>

00000c10 <__vector_10>:

	}

}
/*************************************************************TIMER 2**********************/
ISR(TIMER2_OVF_vect){
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1

}
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <__vector_18>:
/****************lab 5*****************/
ISR(USART0_RX_vect){
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	0b b6       	in	r0, 0x3b	; 59
     c30:	0f 92       	push	r0
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
     c3a:	8c b1       	in	r24, 0x0c	; 12
     c3c:	80 93 a8 02 	sts	0x02A8, r24
  lcd_str_array[i++]=rx_char;  //store in array 
     c40:	e0 91 5a 02 	lds	r30, 0x025A
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	9e 0f       	add	r25, r30
     c48:	90 93 5a 02 	sts	0x025A, r25
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	e9 57       	subi	r30, 0x79	; 121
     c50:	fd 4f       	sbci	r31, 0xFD	; 253
     c52:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
     c54:	81 11       	cpse	r24, r1
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <__vector_18+0x46>
    rcv_rdy=1; 
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 72 02 	sts	0x0272, r24
    lcd_str_array[--i]  = (' ');     //clear the count field
     c5e:	80 e2       	ldi	r24, 0x20	; 32
     c60:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
     c62:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
     c64:	82 83       	std	Z+2, r24	; 0x02
    i=0;  
     c66:	10 92 5a 02 	sts	0x025A, r1
  }

}
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	0f 90       	pop	r0
     c74:	0b be       	out	0x3b, r0	; 59
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <__vector_21>:
/************************************ADC***********************/
ISR(ADC_vect){
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25

adcr=ADC;
     c8e:	84 b1       	in	r24, 0x04	; 4
     c90:	95 b1       	in	r25, 0x05	; 5
     c92:	80 93 22 01 	sts	0x0122, r24
}
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_12>:

/***********************************TIMER 1 **********************/
ISR(TIMER1_COMPA_vect){
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	0b b6       	in	r0, 0x3b	; 59
     cb0:	0f 92       	push	r0
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31

PORTD ^=ALARM_PIN;
     cca:	82 b3       	in	r24, 0x12	; 18
     ccc:	80 58       	subi	r24, 0x80	; 128
     cce:	82 bb       	out	0x12, r24	; 18
if(beat >= max_beat) {   //if we've played the note long enough
     cd0:	20 91 7f 02 	lds	r18, 0x027F
     cd4:	30 91 80 02 	lds	r19, 0x0280
     cd8:	80 91 77 02 	lds	r24, 0x0277
     cdc:	90 91 78 02 	lds	r25, 0x0278
     ce0:	28 17       	cp	r18, r24
     ce2:	39 07       	cpc	r19, r25
     ce4:	58 f0       	brcs	.+22     	; 0xcfc <__vector_12+0x58>
    notes++;               //move on to the next note
     ce6:	80 91 73 02 	lds	r24, 0x0273
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	80 93 73 02 	sts	0x0273, r24
    play_song(song, notes);//and play it
     cf0:	60 91 73 02 	lds	r22, 0x0273
     cf4:	80 91 74 02 	lds	r24, 0x0274
     cf8:	0e 94 13 18 	call	0x3026	; 0x3026 <play_song>
  }

}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_16>:
/**********************************************************TIMER 0 *************************************/
ISR(TIMER0_OVF_vect){
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	0b b6       	in	r0, 0x3b	; 59
     d2e:	0f 92       	push	r0
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31




/**********************************seconds*******************************/
counter++;
     d48:	80 91 59 02 	lds	r24, 0x0259
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	80 93 59 02 	sts	0x0259, r24
if(counter % 8 == 0) {
     d52:	98 2f       	mov	r25, r24
     d54:	97 70       	andi	r25, 0x07	; 7
     d56:	51 f4       	brne	.+20     	; 0xd6c <__vector_16+0x4a>
    //for note duration (64th notes) 
    beat++;
     d58:	20 91 7f 02 	lds	r18, 0x027F
     d5c:	30 91 80 02 	lds	r19, 0x0280
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	30 93 80 02 	sts	0x0280, r19
     d68:	20 93 7f 02 	sts	0x027F, r18
  }  

if((counter %128)==0) { 
     d6c:	98 2f       	mov	r25, r24
     d6e:	9f 77       	andi	r25, 0x7F	; 127
     d70:	09 f4       	brne	.+2      	; 0xd74 <__vector_16+0x52>
     d72:	6f c0       	rjmp	.+222    	; 0xe52 <__vector_16+0x130>
sec++;
//ADCSRA |= (1<<ADSC);

}

if((counter %132)==0){
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	84 38       	cpi	r24, 0x84	; 132
     d78:	08 f4       	brcc	.+2      	; 0xd7c <__vector_16+0x5a>
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	2c e7       	ldi	r18, 0x7C	; 124
     d7e:	92 9f       	mul	r25, r18
     d80:	80 0d       	add	r24, r0
     d82:	11 24       	eor	r1, r1
     d84:	81 11       	cpse	r24, r1
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <__vector_16+0x68>
ADCSRA |= (1<<ADSC);
     d88:	36 9a       	sbi	0x06, 6	; 6

}
/******************************************************************BUTTONS*****************************************************************************/
 /*enabling button to read */
  DDRA = 0x00; //make PORTA as an input
     d8a:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF; // pull ups
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	8b bb       	out	0x1b, r24	; 27
  PORTB=0x70;
     d90:	80 e7       	ldi	r24, 0x70	; 112
     d92:	88 bb       	out	0x18, r24	; 24
     d94:	89 ef       	ldi	r24, 0xF9	; 249
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <__vector_16+0x76>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <__vector_16+0x7c>
     d9e:	00 00       	nop

  _delay_ms(1); 

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
     da0:	89 b3       	in	r24, 0x19	; 25
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	20 91 27 01 	lds	r18, 0x0127
     da8:	30 91 28 01 	lds	r19, 0x0128
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	09 f4       	brne	.+2      	; 0xdb4 <__vector_16+0x92>
     db2:	64 c0       	rjmp	.+200    	; 0xe7c <__vector_16+0x15a>
    if(nothing){
     db4:	80 91 26 01 	lds	r24, 0x0126
     db8:	81 11       	cpse	r24, r1
     dba:	64 c0       	rjmp	.+200    	; 0xe84 <__vector_16+0x162>
        
	Button();
        nothing = 0; 
    }
    else if(PINA == SavedPORTA_Value){ //do nothing
     dbc:	89 b3       	in	r24, 0x19	; 25
     dbe:	20 91 57 02 	lds	r18, 0x0257
     dc2:	30 91 58 02 	lds	r19, 0x0258
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	82 17       	cp	r24, r18
     dca:	93 07       	cpc	r25, r19
     dcc:	39 f0       	breq	.+14     	; 0xddc <__vector_16+0xba>
      
    }
    else if(PINA != SavedPORTA_Value){
     dce:	89 b3       	in	r24, 0x19	; 25
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	11 f0       	breq	.+4      	; 0xddc <__vector_16+0xba>
   Button();
     dd8:	0e 94 80 04 	call	0x900	; 0x900 <Button>
      
	
    }

    SavedPORTA_Value = PINA;
     ddc:	89 b3       	in	r24, 0x19	; 25
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	90 93 58 02 	sts	0x0258, r25
     de4:	80 93 57 02 	sts	0x0257, r24
  }
  else {
    nothing = 1;  
  }
 
	DDRA = 0xFF; 
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	8a bb       	out	0x1a, r24	; 26
	PORTB =0x70;  
     dec:	80 e7       	ldi	r24, 0x70	; 112
     dee:	88 bb       	out	0x18, r24	; 24

/******************************************start the ISP part, where seding data to SPDR*************************************************************/

	

	PORTE =0x00;
     df0:	13 b8       	out	0x03, r1	; 3
	PORTE =0x80;  
     df2:	80 e8       	ldi	r24, 0x80	; 128
     df4:	83 b9       	out	0x03, r24	; 3
     df6:	83 ef       	ldi	r24, 0xF3	; 243
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <__vector_16+0xd8>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <__vector_16+0xde>
     e00:	00 00       	nop
 
	_delay_ms(2);


  SPDR = BARAGRAPH;		//SPDR SEND Data so it can receive, and vice versa 
     e02:	80 91 56 02 	lds	r24, 0x0256
     e06:	8f b9       	out	0x0f, r24	; 15
  spdr_to_encoder = SPDR;
     e08:	8f b1       	in	r24, 0x0f	; 15
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 86 02 	sts	0x0286, r25
     e10:	80 93 85 02 	sts	0x0285, r24

  
  while (bit_is_clear(SPSR, SPIF)){};
     e14:	77 9b       	sbis	0x0e, 7	; 14
     e16:	fe cf       	rjmp	.-4      	; 0xe14 <__vector_16+0xf2>


			//low high
  PORTE =   0xC0 ;
     e18:	80 ec       	ldi	r24, 0xC0	; 192
     e1a:	83 b9       	out	0x03, r24	; 3
  PORTE =   0x40;
     e1c:	80 e4       	ldi	r24, 0x40	; 64
     e1e:	83 b9       	out	0x03, r24	; 3

 
  PORTB =  0x71;
     e20:	81 e7       	ldi	r24, 0x71	; 113
     e22:	88 bb       	out	0x18, r24	; 24
  PORTB = 0x70;
     e24:	80 e7       	ldi	r24, 0x70	; 112
     e26:	88 bb       	out	0x18, r24	; 24

/**************************************************END The ISP Part*********************************************************************************/
  
/****************************************************** ENCODER************************************************************/
  encoder();
     e28:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <encoder>




}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0b be       	out	0x3b, r0	; 59
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti
    beat++;
  }  

if((counter %128)==0) { 
//OCR3A=vol_n;
get_128();
     e52:	0e 94 5d 02 	call	0x4ba	; 0x4ba <get_128>

PORTB=decoder_select[4];
     e56:	80 91 04 01 	lds	r24, 0x0104
     e5a:	88 bb       	out	0x18, r24	; 24
PORTA=0xFC;
     e5c:	8c ef       	ldi	r24, 0xFC	; 252
     e5e:	8b bb       	out	0x1b, r24	; 27
     e60:	87 ea       	ldi	r24, 0xA7	; 167
     e62:	91 e6       	ldi	r25, 0x61	; 97
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <__vector_16+0x142>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <__vector_16+0x148>
     e6a:	00 00       	nop
_delay_ms(100);
sec++;
     e6c:	80 91 51 02 	lds	r24, 0x0251
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	80 93 51 02 	sts	0x0251, r24
     e76:	80 91 59 02 	lds	r24, 0x0259
     e7a:	7c cf       	rjmp	.-264    	; 0xd74 <__vector_16+0x52>
    }

    SavedPORTA_Value = PINA;
  }
  else {
    nothing = 1;  
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 26 01 	sts	0x0126, r24
     e82:	b2 cf       	rjmp	.-156    	; 0xde8 <__vector_16+0xc6>

 //sinc there is pull ups so the value of PORTA will be deducted from 0xff
  if(PINA != NotTouched){ 
    if(nothing){
        
	Button();
     e84:	0e 94 80 04 	call	0x900	; 0x900 <Button>
        nothing = 0; 
     e88:	10 92 26 01 	sts	0x0126, r1
     e8c:	a7 cf       	rjmp	.-178    	; 0xddc <__vector_16+0xba>

00000e8e <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
     e8e:	84 e1       	ldi	r24, 0x14	; 20
     e90:	80 93 d8 02 	sts	0x02D8, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	68 ed       	ldi	r22, 0xD8	; 216
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	82 e2       	ldi	r24, 0x22	; 34
     e9c:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     ea0:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
     ea4:	81 11       	cpse	r24, r1
     ea6:	fc cf       	rjmp	.-8      	; 0xea0 <get_int_status+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ea8:	8f ea       	ldi	r24, 0xAF	; 175
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <get_int_status+0x1e>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <get_int_status+0x24>
     eb2:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	6c e2       	ldi	r22, 0x2C	; 44
     eb8:	73 e0       	ldi	r23, 0x03	; 3
     eba:	82 e2       	ldi	r24, 0x22	; 34
     ebc:	0e 94 98 0a 	call	0x1530	; 0x1530 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     ec0:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
     ec4:	81 11       	cpse	r24, r1
     ec6:	fc cf       	rjmp	.-8      	; 0xec0 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
     ec8:	80 91 2c 03 	lds	r24, 0x032C
     ecc:	08 95       	ret

00000ece <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
     ece:	80 e2       	ldi	r24, 0x20	; 32
     ed0:	80 93 d8 02 	sts	0x02D8, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
     ed4:	10 92 d9 02 	sts	0x02D9, r1
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
     ed8:	80 91 fe 02 	lds	r24, 0x02FE
     edc:	90 91 ff 02 	lds	r25, 0x02FF
     ee0:	90 93 da 02 	sts	0x02DA, r25
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
     ee4:	80 93 db 02 	sts	0x02DB, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
     ee8:	10 92 dc 02 	sts	0x02DC, r1
  //send fm tune command
  STC_interrupt = FALSE;
     eec:	10 92 8c 02 	sts	0x028C, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
     ef0:	45 e0       	ldi	r20, 0x05	; 5
     ef2:	68 ed       	ldi	r22, 0xD8	; 216
     ef4:	72 e0       	ldi	r23, 0x02	; 2
     ef6:	82 e2       	ldi	r24, 0x22	; 34
     ef8:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     efc:	80 91 8c 02 	lds	r24, 0x028C
     f00:	88 23       	and	r24, r24
     f02:	e1 f3       	breq	.-8      	; 0xefc <fm_tune_freq+0x2e>
}
     f04:	08 95       	ret

00000f06 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
     f06:	80 e4       	ldi	r24, 0x40	; 64
     f08:	80 93 d8 02 	sts	0x02D8, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
     f0c:	10 92 d9 02 	sts	0x02D9, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
     f10:	80 91 fc 02 	lds	r24, 0x02FC
     f14:	90 91 fd 02 	lds	r25, 0x02FD
     f18:	90 93 da 02 	sts	0x02DA, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
     f1c:	80 93 db 02 	sts	0x02DB, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     f20:	10 92 dc 02 	sts	0x02DC, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
     f24:	10 92 dd 02 	sts	0x02DD, r1
  //send am tune command
  STC_interrupt = FALSE;
     f28:	10 92 8c 02 	sts	0x028C, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     f2c:	46 e0       	ldi	r20, 0x06	; 6
     f2e:	68 ed       	ldi	r22, 0xD8	; 216
     f30:	72 e0       	ldi	r23, 0x02	; 2
     f32:	82 e2       	ldi	r24, 0x22	; 34
     f34:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     f38:	80 91 8c 02 	lds	r24, 0x028C
     f3c:	88 23       	and	r24, r24
     f3e:	e1 f3       	breq	.-8      	; 0xf38 <am_tune_freq+0x32>
}
     f40:	08 95       	ret

00000f42 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
     f42:	e8 ed       	ldi	r30, 0xD8	; 216
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	80 e4       	ldi	r24, 0x40	; 64
     f48:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
     f4a:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
     f4c:	80 91 00 03 	lds	r24, 0x0300
     f50:	90 91 01 03 	lds	r25, 0x0301
     f54:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
     f56:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     f58:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     f5e:	46 e0       	ldi	r20, 0x06	; 6
     f60:	bf 01       	movw	r22, r30
     f62:	82 e2       	ldi	r24, 0x22	; 34
     f64:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	87 ee       	ldi	r24, 0xE7	; 231
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	80 40       	sbci	r24, 0x00	; 0
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <sw_tune_freq+0x2c>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <sw_tune_freq+0x36>
     f78:	00 00       	nop
     f7a:	08 95       	ret

00000f7c <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
     f7c:	80 91 5b 02 	lds	r24, 0x025B
     f80:	90 91 5c 02 	lds	r25, 0x025C
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	51 f1       	breq	.+84     	; 0xfde <radio_pwr_dwn+0x62>
     f8a:	00 f1       	brcs	.+64     	; 0xfcc <radio_pwr_dwn+0x50>
     f8c:	02 97       	sbiw	r24, 0x02	; 2
     f8e:	41 f4       	brne	.+16     	; 0xfa0 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
     f90:	60 91 00 03 	lds	r22, 0x0300
     f94:	70 91 01 03 	lds	r23, 0x0301
     f98:	8a e2       	ldi	r24, 0x2A	; 42
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	0e 94 49 1a 	call	0x3492	; 0x3492 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
     fa0:	60 91 eb 02 	lds	r22, 0x02EB
     fa4:	8d ea       	ldi	r24, 0xAD	; 173
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	0e 94 3c 1a 	call	0x3478	; 0x3478 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
     fac:	81 e1       	ldi	r24, 0x11	; 17
     fae:	80 93 d8 02 	sts	0x02D8, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	68 ed       	ldi	r22, 0xD8	; 216
     fb6:	72 e0       	ldi	r23, 0x02	; 2
     fb8:	82 e2       	ldi	r24, 0x22	; 34
     fba:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fbe:	87 ed       	ldi	r24, 0xD7	; 215
     fc0:	94 e0       	ldi	r25, 0x04	; 4
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <radio_pwr_dwn+0x46>
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <radio_pwr_dwn+0x4c>
     fc8:	00 00       	nop
     fca:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
     fcc:	60 91 fe 02 	lds	r22, 0x02FE
     fd0:	70 91 ff 02 	lds	r23, 0x02FF
     fd4:	8e ea       	ldi	r24, 0xAE	; 174
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 49 1a 	call	0x3492	; 0x3492 <eeprom_write_word>
     fdc:	e1 cf       	rjmp	.-62     	; 0xfa0 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
     fde:	60 91 fc 02 	lds	r22, 0x02FC
     fe2:	70 91 fd 02 	lds	r23, 0x02FD
     fe6:	89 ee       	ldi	r24, 0xE9	; 233
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0e 94 49 1a 	call	0x3492	; 0x3492 <eeprom_write_word>
     fee:	d8 cf       	rjmp	.-80     	; 0xfa0 <radio_pwr_dwn+0x24>

00000ff0 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
     ff0:	83 e2       	ldi	r24, 0x23	; 35
     ff2:	80 93 d8 02 	sts	0x02D8, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 93 d9 02 	sts	0x02D9, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     ffc:	42 e0       	ldi	r20, 0x02	; 2
     ffe:	68 ed       	ldi	r22, 0xD8	; 216
    1000:	72 e0       	ldi	r23, 0x02	; 2
    1002:	82 e2       	ldi	r24, 0x22	; 34
    1004:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1008:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    100c:	81 11       	cpse	r24, r1
    100e:	fc cf       	rjmp	.-8      	; 0x1008 <fm_rsq_status+0x18>
    1010:	8f ea       	ldi	r24, 0xAF	; 175
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <fm_rsq_status+0x24>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <fm_rsq_status+0x2a>
    101a:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    101c:	48 e0       	ldi	r20, 0x08	; 8
    101e:	61 ee       	ldi	r22, 0xE1	; 225
    1020:	72 e0       	ldi	r23, 0x02	; 2
    1022:	82 e2       	ldi	r24, 0x22	; 34
    1024:	0e 94 98 0a 	call	0x1530	; 0x1530 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1028:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    102c:	81 11       	cpse	r24, r1
    102e:	fc cf       	rjmp	.-8      	; 0x1028 <fm_rsq_status+0x38>
}
    1030:	08 95       	ret

00001032 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1032:	82 e2       	ldi	r24, 0x22	; 34
    1034:	80 93 d8 02 	sts	0x02D8, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 d9 02 	sts	0x02D9, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    103e:	42 e0       	ldi	r20, 0x02	; 2
    1040:	68 ed       	ldi	r22, 0xD8	; 216
    1042:	72 e0       	ldi	r23, 0x02	; 2
    1044:	82 e2       	ldi	r24, 0x22	; 34
    1046:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    104a:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    104e:	81 11       	cpse	r24, r1
    1050:	fc cf       	rjmp	.-8      	; 0x104a <fm_tune_status+0x18>
    1052:	8f ea       	ldi	r24, 0xAF	; 175
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <fm_tune_status+0x24>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <fm_tune_status+0x2a>
    105c:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    105e:	48 e0       	ldi	r20, 0x08	; 8
    1060:	61 ee       	ldi	r22, 0xE1	; 225
    1062:	72 e0       	ldi	r23, 0x02	; 2
    1064:	82 e2       	ldi	r24, 0x22	; 34
    1066:	0e 94 98 0a 	call	0x1530	; 0x1530 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    106a:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    106e:	81 11       	cpse	r24, r1
    1070:	fc cf       	rjmp	.-8      	; 0x106a <fm_tune_status+0x38>
}
    1072:	08 95       	ret

00001074 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    1074:	82 e4       	ldi	r24, 0x42	; 66
    1076:	80 93 d8 02 	sts	0x02D8, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 d9 02 	sts	0x02D9, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1080:	42 e0       	ldi	r20, 0x02	; 2
    1082:	68 ed       	ldi	r22, 0xD8	; 216
    1084:	72 e0       	ldi	r23, 0x02	; 2
    1086:	82 e2       	ldi	r24, 0x22	; 34
    1088:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    108c:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    1090:	81 11       	cpse	r24, r1
    1092:	fc cf       	rjmp	.-8      	; 0x108c <am_tune_status+0x18>
    1094:	8f ea       	ldi	r24, 0xAF	; 175
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <am_tune_status+0x24>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <am_tune_status+0x2a>
    109e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    10a0:	48 e0       	ldi	r20, 0x08	; 8
    10a2:	61 ee       	ldi	r22, 0xE1	; 225
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	82 e2       	ldi	r24, 0x22	; 34
    10a8:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <twi_start_rd>

000010ac <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    10ac:	83 e4       	ldi	r24, 0x43	; 67
    10ae:	80 93 d8 02 	sts	0x02D8, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 d9 02 	sts	0x02D9, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    10b8:	42 e0       	ldi	r20, 0x02	; 2
    10ba:	68 ed       	ldi	r22, 0xD8	; 216
    10bc:	72 e0       	ldi	r23, 0x02	; 2
    10be:	82 e2       	ldi	r24, 0x22	; 34
    10c0:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    10c4:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    10c8:	81 11       	cpse	r24, r1
    10ca:	fc cf       	rjmp	.-8      	; 0x10c4 <am_rsq_status+0x18>
    10cc:	8f ea       	ldi	r24, 0xAF	; 175
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <am_rsq_status+0x24>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <am_rsq_status+0x2a>
    10d6:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    10d8:	48 e0       	ldi	r20, 0x08	; 8
    10da:	61 ee       	ldi	r22, 0xE1	; 225
    10dc:	72 e0       	ldi	r23, 0x02	; 2
    10de:	82 e2       	ldi	r24, 0x22	; 34
    10e0:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <twi_start_rd>

000010e4 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    10e4:	e8 ed       	ldi	r30, 0xD8	; 216
    10e6:	f2 e0       	ldi	r31, 0x02	; 2
    10e8:	22 e1       	ldi	r18, 0x12	; 18
    10ea:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    10ec:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    10ee:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    10f0:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    10f2:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    10f4:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    10f6:	46 e0       	ldi	r20, 0x06	; 6
    10f8:	bf 01       	movw	r22, r30
    10fa:	82 e2       	ldi	r24, 0x22	; 34
    10fc:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1100:	8f e3       	ldi	r24, 0x3F	; 63
    1102:	9c e9       	ldi	r25, 0x9C	; 156
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <__stack+0x5>
    1108:	00 c0       	rjmp	.+0      	; 0x110a <__stack+0xb>
    110a:	00 00       	nop
    110c:	08 95       	ret

0000110e <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    110e:	8e ea       	ldi	r24, 0xAE	; 174
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	0e 94 36 1a 	call	0x346c	; 0x346c <eeprom_read_word>
    1116:	90 93 ff 02 	sts	0x02FF, r25
    111a:	80 93 fe 02 	sts	0x02FE, r24
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    111e:	8d ea       	ldi	r24, 0xAD	; 173
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_read_byte>
    1126:	80 93 eb 02 	sts	0x02EB, r24

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    112a:	e8 ed       	ldi	r30, 0xD8	; 216
    112c:	f2 e0       	ldi	r31, 0x02	; 2
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1132:	80 e5       	ldi	r24, 0x50	; 80
    1134:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    113a:	43 e0       	ldi	r20, 0x03	; 3
    113c:	bf 01       	movw	r22, r30
    113e:	82 e2       	ldi	r24, 0x22	; 34
    1140:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    1144:	2f ef       	ldi	r18, 0xFF	; 255
    1146:	8b ed       	ldi	r24, 0xDB	; 219
    1148:	95 e0       	ldi	r25, 0x05	; 5
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	80 40       	sbci	r24, 0x00	; 0
    114e:	90 40       	sbci	r25, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <fm_pwr_up+0x3c>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <fm_pwr_up+0x46>
    1154:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <set_property>

00001162 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    1162:	89 ee       	ldi	r24, 0xE9	; 233
    1164:	92 e0       	ldi	r25, 0x02	; 2
    1166:	0e 94 36 1a 	call	0x346c	; 0x346c <eeprom_read_word>
    116a:	90 93 fd 02 	sts	0x02FD, r25
    116e:	80 93 fc 02 	sts	0x02FC, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1172:	8d ea       	ldi	r24, 0xAD	; 173
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_read_byte>
    117a:	80 93 eb 02 	sts	0x02EB, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    117e:	e8 ed       	ldi	r30, 0xD8	; 216
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1186:	81 e5       	ldi	r24, 0x51	; 81
    1188:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    118e:	43 e0       	ldi	r20, 0x03	; 3
    1190:	bf 01       	movw	r22, r30
    1192:	82 e2       	ldi	r24, 0x22	; 34
    1194:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	8b ed       	ldi	r24, 0xDB	; 219
    119c:	95 e0       	ldi	r25, 0x05	; 5
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <am_pwr_up+0x3c>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <am_pwr_up+0x46>
    11a8:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <set_property>

000011b6 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    11b6:	8a e2       	ldi	r24, 0x2A	; 42
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	0e 94 36 1a 	call	0x346c	; 0x346c <eeprom_read_word>
    11be:	90 93 01 03 	sts	0x0301, r25
    11c2:	80 93 00 03 	sts	0x0300, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    11c6:	8d ea       	ldi	r24, 0xAD	; 173
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_read_byte>
    11ce:	80 93 eb 02 	sts	0x02EB, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    11d2:	e8 ed       	ldi	r30, 0xD8	; 216
    11d4:	f2 e0       	ldi	r31, 0x02	; 2
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    11da:	81 e5       	ldi	r24, 0x51	; 81
    11dc:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    11de:	85 e0       	ldi	r24, 0x05	; 5
    11e0:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    11e2:	43 e0       	ldi	r20, 0x03	; 3
    11e4:	bf 01       	movw	r22, r30
    11e6:	82 e2       	ldi	r24, 0x22	; 34
    11e8:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    11ec:	2f ef       	ldi	r18, 0xFF	; 255
    11ee:	8b ed       	ldi	r24, 0xDB	; 219
    11f0:	95 e0       	ldi	r25, 0x05	; 5
    11f2:	21 50       	subi	r18, 0x01	; 1
    11f4:	80 40       	sbci	r24, 0x00	; 0
    11f6:	90 40       	sbci	r25, 0x00	; 0
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <sw_pwr_up+0x3c>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <sw_pwr_up+0x46>
    11fc:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	93 e3       	ldi	r25, 0x33	; 51
    1206:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	71 e0       	ldi	r23, 0x01	; 1
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	91 e3       	ldi	r25, 0x31	; 49
    1212:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <set_property>

00001222 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart. uart be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    1222:	80 e1       	ldi	r24, 0x10	; 16
    1224:	80 93 d8 02 	sts	0x02D8, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1228:	41 e0       	ldi	r20, 0x01	; 1
    122a:	68 ed       	ldi	r22, 0xD8	; 216
    122c:	72 e0       	ldi	r23, 0x02	; 2
    122e:	82 e2       	ldi	r24, 0x22	; 34
    1230:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1234:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    1238:	81 11       	cpse	r24, r1
    123a:	fc cf       	rjmp	.-8      	; 0x1234 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    123c:	8f ea       	ldi	r24, 0xAF	; 175
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <get_rev+0x1e>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <get_rev+0x24>
    1246:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    1248:	48 e0       	ldi	r20, 0x08	; 8
    124a:	6c ee       	ldi	r22, 0xEC	; 236
    124c:	72 e0       	ldi	r23, 0x02	; 2
    124e:	82 e2       	ldi	r24, 0x22	; 34
    1250:	0e 94 98 0a 	call	0x1530	; 0x1530 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1254:	0e 94 83 0a 	call	0x1506	; 0x1506 <twi_busy>
    1258:	81 11       	cpse	r24, r1
    125a:	fc cf       	rjmp	.-8      	; 0x1254 <get_rev+0x32>
//use TABs instead?
    uart_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    125c:	86 e4       	ldi	r24, 0x46	; 70
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    uart_puts("             -------------------------   --------     \n\r");
    1264:	8f e7       	ldi	r24, 0x7F	; 127
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    uart_puts("                          "); itoa((int)si4734_revision_buf[1], uart_tx_buf, 10); uart_puts(uart_tx_buf); 
    126c:	88 eb       	ldi	r24, 0xB8	; 184
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    1274:	80 91 ed 02 	lds	r24, 0x02ED
    1278:	4a e0       	ldi	r20, 0x0A	; 10
    127a:	60 eb       	ldi	r22, 0xB0	; 176
    127c:	72 e0       	ldi	r23, 0x02	; 2
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    1284:	80 eb       	ldi	r24, 0xB0	; 176
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    uart_puts("             "); itoa((int)si4734_revision_buf[2], uart_tx_buf, 10); uart_puts(uart_tx_buf); uart_puts("\n\r");
    128c:	85 ec       	ldi	r24, 0xC5	; 197
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    1294:	80 91 ee 02 	lds	r24, 0x02EE
    1298:	4a e0       	ldi	r20, 0x0A	; 10
    129a:	60 eb       	ldi	r22, 0xB0	; 176
    129c:	72 e0       	ldi	r23, 0x02	; 2
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    12a4:	80 eb       	ldi	r24, 0xB0	; 176
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    12ac:	85 eb       	ldi	r24, 0xB5	; 181
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <uart_puts>

000012b4 <get_fm_rsq_status>:
// TODO: UNTESTED!
//Report the fm rsq status via uart. Requires that uart be setup and connected to 
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status(){
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	a8 97       	sbiw	r28, 0x28	; 40
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
  uint8_t disp_freq;  //temp holding variable
  char    str[40];    //temp for building strings

  uart_puts("FM_RSQ_STATUS: ");
    12ce:	83 ed       	ldi	r24, 0xD3	; 211
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
  uart_puts("status byte   :");   itoa((int)si4734_tune_status_buf[0], uart_tx_buf, 16);   uart_puts(uart_tx_buf); uart_puts("\n\r");
    12d6:	83 ee       	ldi	r24, 0xE3	; 227
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    12de:	01 ee       	ldi	r16, 0xE1	; 225
    12e0:	12 e0       	ldi	r17, 0x02	; 2
    12e2:	f8 01       	movw	r30, r16
    12e4:	80 81       	ld	r24, Z
    12e6:	40 e1       	ldi	r20, 0x10	; 16
    12e8:	60 eb       	ldi	r22, 0xB0	; 176
    12ea:	72 e0       	ldi	r23, 0x02	; 2
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    12f2:	80 eb       	ldi	r24, 0xB0	; 176
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    12fa:	85 eb       	ldi	r24, 0xB5	; 181
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
  uart_puts("resp1         :");   itoa((int)si4734_tune_status_buf[1], uart_tx_buf, 10);   uart_puts(uart_tx_buf); uart_puts("\n\r");
    1302:	83 ef       	ldi	r24, 0xF3	; 243
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    130a:	f8 01       	movw	r30, r16
    130c:	81 81       	ldd	r24, Z+1	; 0x01
    130e:	4a e0       	ldi	r20, 0x0A	; 10
    1310:	60 eb       	ldi	r22, 0xB0	; 176
    1312:	72 e0       	ldi	r23, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    131a:	80 eb       	ldi	r24, 0xB0	; 176
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    1322:	85 eb       	ldi	r24, 0xB5	; 181
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
  disp_freq = si4734_tune_status_buf[2];      //load high frequency byte
  disp_freq = (disp_freq << 8); //shift upper byte to upper 8 bits
  disp_freq |= si4734_tune_status_buf[3];     //load low high frequency byte
    132a:	f8 01       	movw	r30, r16
    132c:	f3 80       	ldd	r15, Z+3	; 0x03
  uart_puts("freq          :");   itoa(disp_freq, uart_tx_buf, 10);   uart_puts(uart_tx_buf); uart_puts("\n\r");
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	92 e0       	ldi	r25, 0x02	; 2
    1332:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    1336:	4a e0       	ldi	r20, 0x0A	; 10
    1338:	60 eb       	ldi	r22, 0xB0	; 176
    133a:	72 e0       	ldi	r23, 0x02	; 2
    133c:	8f 2d       	mov	r24, r15
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    1344:	80 eb       	ldi	r24, 0xB0	; 176
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    134c:	85 eb       	ldi	r24, 0xB5	; 181
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
  uart_puts("freq high     :");   itoa((int)si4734_tune_status_buf[2], str, 16);   uart_puts(str); uart_puts("\n\r");
    1354:	83 e1       	ldi	r24, 0x13	; 19
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    135c:	f8 01       	movw	r30, r16
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	40 e1       	ldi	r20, 0x10	; 16
    1362:	be 01       	movw	r22, r28
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    1376:	85 eb       	ldi	r24, 0xB5	; 181
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
  uart_puts("freq low      :");   itoa((int)si4734_tune_status_buf[3], str, 16);   uart_puts(str); uart_puts("\n\r");
    137e:	83 e2       	ldi	r24, 0x23	; 35
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    1386:	f8 01       	movw	r30, r16
    1388:	83 81       	ldd	r24, Z+3	; 0x03
    138a:	40 e1       	ldi	r20, 0x10	; 16
    138c:	be 01       	movw	r22, r28
    138e:	6f 5f       	subi	r22, 0xFF	; 255
    1390:	7f 4f       	sbci	r23, 0xFF	; 255
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    13a0:	85 eb       	ldi	r24, 0xB5	; 181
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
  uart_puts("rssi          :");   itoa((int)si4734_tune_status_buf[4], uart_tx_buf, 16);   uart_puts(uart_tx_buf); uart_puts("\n\r");
    13a8:	83 e3       	ldi	r24, 0x33	; 51
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    13b0:	f8 01       	movw	r30, r16
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	40 e1       	ldi	r20, 0x10	; 16
    13b6:	60 eb       	ldi	r22, 0xB0	; 176
    13b8:	72 e0       	ldi	r23, 0x02	; 2
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__itoa_ncheck>
    13c0:	80 eb       	ldi	r24, 0xB0	; 176
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
    13c8:	85 eb       	ldi	r24, 0xB5	; 181
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <uart_puts>
}
    13d0:	a8 96       	adiw	r28, 0x28	; 40
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	08 95       	ret

000013e8 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	0b b6       	in	r0, 0x3b	; 59
    13f4:	0f 92       	push	r0
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	8f 93       	push	r24
    13fc:	9f 93       	push	r25
    13fe:	af 93       	push	r26
    1400:	bf 93       	push	r27
    1402:	ef 93       	push	r30
    1404:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1406:	e0 91 71 00 	lds	r30, 0x0071
    140a:	8e 2f       	mov	r24, r30
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	38 97       	sbiw	r30, 0x08	; 8
    1412:	e1 35       	cpi	r30, 0x51	; 81
    1414:	f1 05       	cpc	r31, r1
    1416:	b0 f0       	brcs	.+44     	; 0x1444 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1418:	80 91 71 00 	lds	r24, 0x0071
    141c:	80 93 3b 03 	sts	0x033B, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0b be       	out	0x3b, r0	; 59
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1444:	ea 5b       	subi	r30, 0xBA	; 186
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    144c:	80 91 5d 02 	lds	r24, 0x025D
    1450:	e0 91 3c 03 	lds	r30, 0x033C
    1454:	f0 91 3d 03 	lds	r31, 0x033D
    1458:	e8 0f       	add	r30, r24
    145a:	f1 1d       	adc	r31, r1
    145c:	80 91 73 00 	lds	r24, 0x0073
    1460:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    1462:	84 e9       	ldi	r24, 0x94	; 148
    1464:	80 93 74 00 	sts	0x0074, r24
      break;      
    1468:	de cf       	rjmp	.-68     	; 0x1426 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    146a:	80 91 3e 03 	lds	r24, 0x033E
    146e:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1472:	10 92 5d 02 	sts	0x025D, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    1476:	85 e8       	ldi	r24, 0x85	; 133
    1478:	80 93 74 00 	sts	0x0074, r24
      break;
    147c:	d4 cf       	rjmp	.-88     	; 0x1426 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    147e:	80 91 5d 02 	lds	r24, 0x025D
    1482:	90 91 3f 03 	lds	r25, 0x033F
    1486:	89 17       	cp	r24, r25
    1488:	60 f7       	brcc	.-40     	; 0x1462 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    148a:	e0 91 3c 03 	lds	r30, 0x033C
    148e:	f0 91 3d 03 	lds	r31, 0x033D
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	98 0f       	add	r25, r24
    1496:	90 93 5d 02 	sts	0x025D, r25
    149a:	e8 0f       	add	r30, r24
    149c:	f1 1d       	adc	r31, r1
    149e:	80 81       	ld	r24, Z
    14a0:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    14a4:	85 e8       	ldi	r24, 0x85	; 133
    14a6:	80 93 74 00 	sts	0x0074, r24
    14aa:	bd cf       	rjmp	.-134    	; 0x1426 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    14ac:	85 ea       	ldi	r24, 0xA5	; 165
    14ae:	80 93 74 00 	sts	0x0074, r24
      break;
    14b2:	b9 cf       	rjmp	.-142    	; 0x1426 <__vector_33+0x3e>
    14b4:	20 91 5d 02 	lds	r18, 0x025D
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    14b8:	80 91 3f 03 	lds	r24, 0x033F
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	28 17       	cp	r18, r24
    14c4:	39 07       	cpc	r19, r25
    14c6:	dc f4       	brge	.+54     	; 0x14fe <__vector_33+0x116>
    14c8:	85 ec       	ldi	r24, 0xC5	; 197
    14ca:	80 93 74 00 	sts	0x0074, r24
    14ce:	ab cf       	rjmp	.-170    	; 0x1426 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    14d0:	e0 91 3c 03 	lds	r30, 0x033C
    14d4:	f0 91 3d 03 	lds	r31, 0x033D
    14d8:	80 91 5d 02 	lds	r24, 0x025D
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	28 0f       	add	r18, r24
    14e0:	20 93 5d 02 	sts	0x025D, r18
    14e4:	e8 0f       	add	r30, r24
    14e6:	f1 1d       	adc	r31, r1
    14e8:	80 91 73 00 	lds	r24, 0x0073
    14ec:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    14ee:	80 91 3f 03 	lds	r24, 0x033F
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	28 17       	cp	r18, r24
    14fa:	39 07       	cpc	r19, r25
    14fc:	2c f3       	brlt	.-54     	; 0x14c8 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    14fe:	85 e8       	ldi	r24, 0x85	; 133
    1500:	80 93 74 00 	sts	0x0074, r24
    1504:	90 cf       	rjmp	.-224    	; 0x1426 <__vector_33+0x3e>

00001506 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1506:	80 91 74 00 	lds	r24, 0x0074
}
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	08 95       	ret

0000150e <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    150e:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1512:	90 fd       	sbrc	r25, 0
    1514:	fc cf       	rjmp	.-8      	; 0x150e <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1516:	8e 7f       	andi	r24, 0xFE	; 254
    1518:	80 93 3e 03 	sts	0x033E, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    151c:	70 93 3d 03 	sts	0x033D, r23
    1520:	60 93 3c 03 	sts	0x033C, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    1524:	40 93 3f 03 	sts	0x033F, r20
  TWCR = TWCR_START;                    //initiate START
    1528:	85 ea       	ldi	r24, 0xA5	; 165
    152a:	80 93 74 00 	sts	0x0074, r24
    152e:	08 95       	ret

00001530 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1530:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1534:	90 fd       	sbrc	r25, 0
    1536:	fc cf       	rjmp	.-8      	; 0x1530 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1538:	81 60       	ori	r24, 0x01	; 1
    153a:	80 93 3e 03 	sts	0x033E, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    153e:	70 93 3d 03 	sts	0x033D, r23
    1542:	60 93 3c 03 	sts	0x033C, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    1546:	40 93 3f 03 	sts	0x033F, r20
  TWCR = TWCR_START;                   //initiate START
    154a:	85 ea       	ldi	r24, 0xA5	; 165
    154c:	80 93 74 00 	sts	0x0074, r24
    1550:	08 95       	ret

00001552 <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    1558:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    155c:	8c e0       	ldi	r24, 0x0C	; 12
    155e:	80 93 70 00 	sts	0x0070, r24
    1562:	08 95       	ret

00001564 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1564:	5d 9b       	sbis	0x0b, 5	; 11
    1566:	fe cf       	rjmp	.-4      	; 0x1564 <uart_putc>
    UDR0 = data;    // Send data byte
    1568:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    156a:	5d 9b       	sbis	0x0b, 5	; 11
    156c:	fe cf       	rjmp	.-4      	; 0x156a <uart_putc+0x6>
}
    156e:	08 95       	ret

00001570 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1570:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1572:	90 81       	ld	r25, Z
    1574:	99 23       	and	r25, r25
    1576:	49 f0       	breq	.+18     	; 0x158a <uart_puts+0x1a>
    1578:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    157a:	5d 9b       	sbis	0x0b, 5	; 11
    157c:	fe cf       	rjmp	.-4      	; 0x157a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    157e:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1580:	5d 9b       	sbis	0x0b, 5	; 11
    1582:	fe cf       	rjmp	.-4      	; 0x1580 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1584:	91 91       	ld	r25, Z+
    1586:	91 11       	cpse	r25, r1
    1588:	f8 cf       	rjmp	.-16     	; 0x157a <uart_puts+0xa>
    158a:	08 95       	ret

0000158c <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    158c:	9c 01       	movw	r18, r24
    158e:	fc 01       	movw	r30, r24
    1590:	44 91       	lpm	r20, Z
    1592:	44 23       	and	r20, r20
    1594:	69 f0       	breq	.+26     	; 0x15b0 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	f9 01       	movw	r30, r18
    159a:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    159c:	5d 9b       	sbis	0x0b, 5	; 11
    159e:	fe cf       	rjmp	.-4      	; 0x159c <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    15a0:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15a2:	5d 9b       	sbis	0x0b, 5	; 11
    15a4:	fe cf       	rjmp	.-4      	; 0x15a2 <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    15a6:	9c 01       	movw	r18, r24
    15a8:	fc 01       	movw	r30, r24
    15aa:	44 91       	lpm	r20, Z
    15ac:	41 11       	cpse	r20, r1
    15ae:	f3 cf       	rjmp	.-26     	; 0x1596 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    15b0:	08 95       	ret

000015b2 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    15b2:	8a b1       	in	r24, 0x0a	; 10
    15b4:	88 69       	ori	r24, 0x98	; 152
    15b6:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    15b8:	e5 e9       	ldi	r30, 0x95	; 149
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	86 60       	ori	r24, 0x06	; 6
    15c0:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    15c2:	10 92 90 00 	sts	0x0090, r1
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    15c6:	87 e6       	ldi	r24, 0x67	; 103
    15c8:	89 b9       	out	0x09, r24	; 9
    15ca:	08 95       	ret

000015cc <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    15cc:	80 e8       	ldi	r24, 0x80	; 128
    15ce:	9e e3       	ldi	r25, 0x3E	; 62
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <uart_getc+0xa>
    15d2:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    15d4:	21 f0       	breq	.+8      	; 0x15de <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    15d6:	5f 9b       	sbis	0x0b, 7	; 11
    15d8:	fc cf       	rjmp	.-8      	; 0x15d2 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    15da:	8c b1       	in	r24, 0x0c	; 12
    15dc:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    15de:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    15e0:	08 95       	ret

000015e2 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	81 11       	cpse	r24, r1
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <send_lcd+0x8>
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15ec:	77 9b       	sbis	0x0e, 7	; 14
    15ee:	fe cf       	rjmp	.-4      	; 0x15ec <send_lcd+0xa>
  SPDR = byte;                        //send payload
    15f0:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15f2:	77 9b       	sbis	0x0e, 7	; 14
    15f4:	fe cf       	rjmp	.-4      	; 0x15f2 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15f6:	80 91 62 00 	lds	r24, 0x0062
    15fa:	88 60       	ori	r24, 0x08	; 8
    15fc:	80 93 62 00 	sts	0x0062, r24
    1600:	80 91 62 00 	lds	r24, 0x0062
    1604:	87 7f       	andi	r24, 0xF7	; 247
    1606:	80 93 62 00 	sts	0x0062, r24
    160a:	08 95       	ret

0000160c <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
    160c:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    160e:	c0 91 5e 02 	lds	r28, 0x025E
    1612:	8c 0f       	add	r24, r28
    1614:	91 1d       	adc	r25, r1
    1616:	fc 01       	movw	r30, r24
    1618:	60 81       	ld	r22, Z
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
 i++;   //increment to next character
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	8c 0f       	add	r24, r28
    1624:	80 93 5e 02 	sts	0x025E, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    1628:	80 31       	cpi	r24, 0x10	; 16
    162a:	89 f0       	breq	.+34     	; 0x164e <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	11 f0       	breq	.+4      	; 0x1634 <refresh_lcd+0x28>

 return i;
}//refresh_lcd
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret
    1634:	85 ed       	ldi	r24, 0xD5	; 213
    1636:	8a 95       	dec	r24
    1638:	f1 f7       	brne	.-4      	; 0x1636 <refresh_lcd+0x2a>
    163a:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    163c:	60 e8       	ldi	r22, 0x80	; 128
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1644:	10 92 5e 02 	sts	0x025E, r1
    1648:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret
    164e:	f5 ed       	ldi	r31, 0xD5	; 213
    1650:	fa 95       	dec	r31
    1652:	f1 f7       	brne	.-4      	; 0x1650 <refresh_lcd+0x44>
    1654:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1656:	60 ec       	ldi	r22, 0xC0	; 192
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    165e:	80 91 5e 02 	lds	r24, 0x025E
    1662:	e4 cf       	rjmp	.-56     	; 0x162c <refresh_lcd+0x20>

00001664 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	1f 92       	push	r1
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    1678:	66 0f       	add	r22, r22
    167a:	66 0f       	add	r22, r22
    167c:	66 0f       	add	r22, r22
    167e:	60 5c       	subi	r22, 0xC0	; 192
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	99 83       	std	Y+1, r25	; 0x01
    1684:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    1688:	85 ed       	ldi	r24, 0xD5	; 213
    168a:	8a 95       	dec	r24
    168c:	f1 f7       	brne	.-4      	; 0x168a <set_custom_character+0x26>
    168e:	00 00       	nop
    1690:	e1 2e       	mov	r14, r17
    1692:	99 81       	ldd	r25, Y+1	; 0x01
    1694:	f9 2e       	mov	r15, r25
    1696:	87 01       	movw	r16, r14
    1698:	08 5f       	subi	r16, 0xF8	; 248
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    169c:	f7 01       	movw	r30, r14
    169e:	61 91       	ld	r22, Z+
    16a0:	7f 01       	movw	r14, r30
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    16a8:	f5 ed       	ldi	r31, 0xD5	; 213
    16aa:	fa 95       	dec	r31
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <set_custom_character+0x46>
    16ae:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    16b0:	e0 16       	cp	r14, r16
    16b2:	f1 06       	cpc	r15, r17
    16b4:	99 f7       	brne	.-26     	; 0x169c <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    16b6:	0f 90       	pop	r0
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	08 95       	ret

000016c6 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    16c6:	90 e4       	ldi	r25, 0x40	; 64
    16c8:	89 9f       	mul	r24, r25
    16ca:	60 0d       	add	r22, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	60 5c       	subi	r22, 0xC0	; 192
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

000016d6 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    16d6:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    16d8:	88 23       	and	r24, r24
    16da:	b9 f1       	breq	.+110    	; 0x174a <uint2lcd+0x74>
    16dc:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    16de:	84 36       	cpi	r24, 0x64	; 100
    16e0:	98 f4       	brcc	.+38     	; 0x1708 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    16e2:	8a 30       	cpi	r24, 0x0A	; 10
    16e4:	d8 f4       	brcc	.+54     	; 0x171c <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    16e6:	8d ec       	ldi	r24, 0xCD	; 205
    16e8:	c8 9f       	mul	r28, r24
    16ea:	81 2d       	mov	r24, r1
    16ec:	11 24       	eor	r1, r1
    16ee:	86 95       	lsr	r24
    16f0:	86 95       	lsr	r24
    16f2:	86 95       	lsr	r24
    16f4:	6c 2f       	mov	r22, r28
    16f6:	2a e0       	ldi	r18, 0x0A	; 10
    16f8:	82 9f       	mul	r24, r18
    16fa:	60 19       	sub	r22, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	60 5d       	subi	r22, 0xD0	; 208
    1700:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1702:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1704:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1708:	69 e2       	ldi	r22, 0x29	; 41
    170a:	86 9f       	mul	r24, r22
    170c:	61 2d       	mov	r22, r1
    170e:	11 24       	eor	r1, r1
    1710:	62 95       	swap	r22
    1712:	6f 70       	andi	r22, 0x0F	; 15
    1714:	60 5d       	subi	r22, 0xD0	; 208
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    171c:	89 e2       	ldi	r24, 0x29	; 41
    171e:	c8 9f       	mul	r28, r24
    1720:	81 2d       	mov	r24, r1
    1722:	11 24       	eor	r1, r1
    1724:	82 95       	swap	r24
    1726:	8f 70       	andi	r24, 0x0F	; 15
    1728:	9c 2f       	mov	r25, r28
    172a:	24 e6       	ldi	r18, 0x64	; 100
    172c:	82 9f       	mul	r24, r18
    172e:	90 19       	sub	r25, r0
    1730:	11 24       	eor	r1, r1
    1732:	6d ec       	ldi	r22, 0xCD	; 205
    1734:	96 9f       	mul	r25, r22
    1736:	61 2d       	mov	r22, r1
    1738:	11 24       	eor	r1, r1
    173a:	66 95       	lsr	r22
    173c:	66 95       	lsr	r22
    173e:	66 95       	lsr	r22
    1740:	60 5d       	subi	r22, 0xD0	; 208
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    1748:	ce cf       	rjmp	.-100    	; 0x16e6 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    174a:	60 e3       	ldi	r22, 0x30	; 48
    174c:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    174e:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1750:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

00001754 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    1754:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1756:	87 fd       	sbrc	r24, 7
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    175a:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    175c:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <uint2lcd>
    1760:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1762:	6d e2       	ldi	r22, 0x2D	; 45
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    176a:	85 ed       	ldi	r24, 0xD5	; 213
    176c:	8a 95       	dec	r24
    176e:	f1 f7       	brne	.-4      	; 0x176c <int2lcd+0x18>
    1770:	00 00       	nop
    1772:	8c 2f       	mov	r24, r28
    1774:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    1776:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1778:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <uint2lcd>

0000177c <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    177c:	6e e0       	ldi	r22, 0x0E	; 14
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

00001784 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    1784:	6c e0       	ldi	r22, 0x0C	; 12
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

0000178c <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    178c:	6e e1       	ldi	r22, 0x1E	; 30
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

00001794 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    1794:	68 e1       	ldi	r22, 0x18	; 24
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

0000179c <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    179c:	e2 e6       	ldi	r30, 0x62	; 98
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	88 60       	ori	r24, 0x08	; 8
    17a4:	80 83       	st	Z, r24
    17a6:	80 81       	ld	r24, Z
    17a8:	87 7f       	andi	r24, 0xF7	; 247
    17aa:	80 83       	st	Z, r24
    17ac:	08 95       	ret

000017ae <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    17b6:	8f e1       	ldi	r24, 0x1F	; 31
    17b8:	9c e1       	ldi	r25, 0x1C	; 28
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <clear_display+0xc>
    17be:	00 c0       	rjmp	.+0      	; 0x17c0 <clear_display+0x12>
    17c0:	00 00       	nop
    17c2:	08 95       	ret

000017c4 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    17cc:	8f e6       	ldi	r24, 0x6F	; 111
    17ce:	97 e1       	ldi	r25, 0x17	; 23
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <cursor_home+0xc>
    17d4:	00 c0       	rjmp	.+0      	; 0x17d6 <cursor_home+0x12>
    17d6:	00 00       	nop
    17d8:	08 95       	ret

000017da <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    17da:	60 ec       	ldi	r22, 0xC0	; 192
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

000017e2 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    17e2:	60 e8       	ldi	r22, 0x80	; 128
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

000017ea <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    17ea:	cf 93       	push	r28
    17ec:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    17ee:	60 e2       	ldi	r22, 0x20	; 32
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    17f6:	85 ed       	ldi	r24, 0xD5	; 213
    17f8:	8a 95       	dec	r24
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <fill_spaces+0xe>
    17fc:	00 00       	nop
    17fe:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1800:	b1 f7       	brne	.-20     	; 0x17ee <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1806:	68 2f       	mov	r22, r24
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <send_lcd>

0000180e <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	c0 e0       	ldi	r28, 0x00	; 0
    181c:	f8 01       	movw	r30, r16
    181e:	e4 0f       	add	r30, r20
    1820:	f5 1f       	adc	r31, r21
    1822:	60 81       	ld	r22, Z
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    182a:	85 ed       	ldi	r24, 0xD5	; 213
    182c:	8a 95       	dec	r24
    182e:	f1 f7       	brne	.-4      	; 0x182c <string2lcd+0x1e>
    1830:	00 00       	nop
    1832:	cf 5f       	subi	r28, 0xFF	; 255
    1834:	4c 2f       	mov	r20, r28
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	f8 01       	movw	r30, r16
    183a:	01 90       	ld	r0, Z+
    183c:	00 20       	and	r0, r0
    183e:	e9 f7       	brne	.-6      	; 0x183a <string2lcd+0x2c>
    1840:	9f 01       	movw	r18, r30
    1842:	20 1b       	sub	r18, r16
    1844:	31 0b       	sbc	r19, r17
    1846:	22 50       	subi	r18, 0x02	; 2
    1848:	31 09       	sbc	r19, r1
    184a:	24 17       	cp	r18, r20
    184c:	35 07       	cpc	r19, r21
    184e:	30 f7       	brcc	.-52     	; 0x181c <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	99 ef       	ldi	r25, 0xF9	; 249
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <lcd_init+0x4>
    1860:	00 c0       	rjmp	.+0      	; 0x1862 <lcd_init+0xa>
    1862:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1864:	88 e0       	ldi	r24, 0x08	; 8
    1866:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    186a:	60 e3       	ldi	r22, 0x30	; 48
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    1872:	8f e5       	ldi	r24, 0x5F	; 95
    1874:	9d e6       	ldi	r25, 0x6D	; 109
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <lcd_init+0x1e>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <lcd_init+0x24>
    187c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    187e:	60 e3       	ldi	r22, 0x30	; 48
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    1886:	8f e5       	ldi	r24, 0x5F	; 95
    1888:	9d e6       	ldi	r25, 0x6D	; 109
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <lcd_init+0x32>
    188e:	00 c0       	rjmp	.+0      	; 0x1890 <lcd_init+0x38>
    1890:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    1892:	60 e3       	ldi	r22, 0x30	; 48
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    189a:	8f e5       	ldi	r24, 0x5F	; 95
    189c:	9d e6       	ldi	r25, 0x6D	; 109
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <lcd_init+0x46>
    18a2:	00 c0       	rjmp	.+0      	; 0x18a4 <lcd_init+0x4c>
    18a4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    18a6:	68 e3       	ldi	r22, 0x38	; 56
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    18ae:	8f e1       	ldi	r24, 0x1F	; 31
    18b0:	9e e4       	ldi	r25, 0x4E	; 78
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <lcd_init+0x5a>
    18b6:	00 c0       	rjmp	.+0      	; 0x18b8 <lcd_init+0x60>
    18b8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    18ba:	68 e0       	ldi	r22, 0x08	; 8
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    18c2:	8f e1       	ldi	r24, 0x1F	; 31
    18c4:	9e e4       	ldi	r25, 0x4E	; 78
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <lcd_init+0x6e>
    18ca:	00 c0       	rjmp	.+0      	; 0x18cc <lcd_init+0x74>
    18cc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    18d6:	8f e1       	ldi	r24, 0x1F	; 31
    18d8:	9e e4       	ldi	r25, 0x4E	; 78
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <lcd_init+0x82>
    18de:	00 c0       	rjmp	.+0      	; 0x18e0 <lcd_init+0x88>
    18e0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    18e2:	66 e0       	ldi	r22, 0x06	; 6
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    18ea:	8f e1       	ldi	r24, 0x1F	; 31
    18ec:	9e e4       	ldi	r25, 0x4E	; 78
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <lcd_init+0x96>
    18f2:	00 c0       	rjmp	.+0      	; 0x18f4 <lcd_init+0x9c>
    18f4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    18f6:	6c e0       	ldi	r22, 0x0C	; 12
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    18fe:	8f e1       	ldi	r24, 0x1F	; 31
    1900:	9e e4       	ldi	r25, 0x4E	; 78
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <lcd_init+0xaa>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <lcd_init+0xb0>
    1908:	00 00       	nop
    190a:	08 95       	ret

0000190c <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    190c:	8f 92       	push	r8
    190e:	9f 92       	push	r9
    1910:	af 92       	push	r10
    1912:	bf 92       	push	r11
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	69 97       	sbiw	r28, 0x19	; 25
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	f4 2e       	mov	r15, r20
    1936:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1938:	00 23       	and	r16, r16
    193a:	59 f0       	breq	.+22     	; 0x1952 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    193c:	4b 01       	movw	r8, r22
    193e:	5c 01       	movw	r10, r24
    1940:	88 24       	eor	r8, r8
    1942:	b7 fc       	sbrc	r11, 7
    1944:	83 94       	inc	r8
    1946:	99 24       	eor	r9, r9
    1948:	aa 24       	eor	r10, r10
    194a:	bb 24       	eor	r11, r11
    194c:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    194e:	97 fd       	sbrc	r25, 7
    1950:	8f c0       	rjmp	.+286    	; 0x1a70 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1952:	11 23       	and	r17, r17
    1954:	09 f4       	brne	.+2      	; 0x1958 <lcd_int32+0x4c>
    1956:	84 c0       	rjmp	.+264    	; 0x1a60 <lcd_int32+0x154>
    1958:	9e 01       	movw	r18, r28
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	69 01       	movw	r12, r18
    1960:	59 01       	movw	r10, r18
    1962:	88 24       	eor	r8, r8
    1964:	8a 94       	dec	r8
    1966:	81 0e       	add	r8, r17
    1968:	91 2c       	mov	r9, r1
    196a:	3f ef       	ldi	r19, 0xFF	; 255
    196c:	83 1a       	sub	r8, r19
    196e:	93 0a       	sbc	r9, r19
    1970:	8c 0c       	add	r8, r12
    1972:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1974:	2a e0       	ldi	r18, 0x0A	; 10
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__divmodsi4>
    1980:	e6 2f       	mov	r30, r22
    1982:	2a 8b       	std	Y+18, r18	; 0x12
    1984:	3b 8b       	std	Y+19, r19	; 0x13
    1986:	4c 8b       	std	Y+20, r20	; 0x14
    1988:	5d 8b       	std	Y+21, r21	; 0x15
    198a:	6a 89       	ldd	r22, Y+18	; 0x12
    198c:	7b 89       	ldd	r23, Y+19	; 0x13
    198e:	8c 89       	ldd	r24, Y+20	; 0x14
    1990:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1992:	20 e3       	ldi	r18, 0x30	; 48
    1994:	2e 0f       	add	r18, r30
    1996:	f5 01       	movw	r30, r10
    1998:	21 93       	st	Z+, r18
    199a:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    199c:	e8 15       	cp	r30, r8
    199e:	f9 05       	cpc	r31, r9
    19a0:	49 f7       	brne	.-46     	; 0x1974 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    19a2:	bb 24       	eor	r11, r11
    19a4:	b3 94       	inc	r11
    19a6:	b1 0e       	add	r11, r17
    19a8:	f6 01       	movw	r30, r12
    19aa:	e1 0f       	add	r30, r17
    19ac:	f1 1d       	adc	r31, r1
    19ae:	2e e2       	ldi	r18, 0x2E	; 46
    19b0:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    19b2:	2a e0       	ldi	r18, 0x0A	; 10
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__divmodsi4>
    19be:	e6 2f       	mov	r30, r22
    19c0:	2a 8b       	std	Y+18, r18	; 0x12
    19c2:	3b 8b       	std	Y+19, r19	; 0x13
    19c4:	4c 8b       	std	Y+20, r20	; 0x14
    19c6:	5d 8b       	std	Y+21, r21	; 0x15
    19c8:	6e 8b       	std	Y+22, r22	; 0x16
    19ca:	7f 8b       	std	Y+23, r23	; 0x17
    19cc:	88 8f       	std	Y+24, r24	; 0x18
    19ce:	99 8f       	std	Y+25, r25	; 0x19
    19d0:	6a 89       	ldd	r22, Y+18	; 0x12
    19d2:	7b 89       	ldd	r23, Y+19	; 0x13
    19d4:	8c 89       	ldd	r24, Y+20	; 0x14
    19d6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    19d8:	11 e0       	ldi	r17, 0x01	; 1
    19da:	1b 0d       	add	r17, r11
    19dc:	d6 01       	movw	r26, r12
    19de:	ab 0d       	add	r26, r11
    19e0:	b1 1d       	adc	r27, r1
    19e2:	e0 5d       	subi	r30, 0xD0	; 208
    19e4:	ec 93       	st	X, r30
    19e6:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    19e8:	61 15       	cp	r22, r1
    19ea:	71 05       	cpc	r23, r1
    19ec:	81 05       	cpc	r24, r1
    19ee:	91 05       	cpc	r25, r1
    19f0:	01 f7       	brne	.-64     	; 0x19b2 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    19f2:	ff 20       	and	r15, r15
    19f4:	61 f0       	breq	.+24     	; 0x1a0e <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    19f6:	e1 10       	cpse	r14, r1
    19f8:	39 c0       	rjmp	.+114    	; 0x1a6c <lcd_int32+0x160>
    19fa:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    19fc:	1f 15       	cp	r17, r15
    19fe:	38 f4       	brcc	.+14     	; 0x1a0e <lcd_int32+0x102>
    1a00:	f6 01       	movw	r30, r12
    1a02:	e1 0f       	add	r30, r17
    1a04:	f1 1d       	adc	r31, r1
    1a06:	80 83       	st	Z, r24
    1a08:	1f 5f       	subi	r17, 0xFF	; 255
    1a0a:	1f 11       	cpse	r17, r15
    1a0c:	f9 cf       	rjmp	.-14     	; 0x1a00 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1a0e:	00 23       	and	r16, r16
    1a10:	31 f0       	breq	.+12     	; 0x1a1e <lcd_int32+0x112>
    1a12:	f6 01       	movw	r30, r12
    1a14:	e1 0f       	add	r30, r17
    1a16:	f1 1d       	adc	r31, r1
    1a18:	8d e2       	ldi	r24, 0x2D	; 45
    1a1a:	80 83       	st	Z, r24
    1a1c:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1a1e:	11 50       	subi	r17, 0x01	; 1
    1a20:	f6 01       	movw	r30, r12
    1a22:	e1 0f       	add	r30, r17
    1a24:	f1 1d       	adc	r31, r1
    1a26:	60 81       	ld	r22, Z
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a2e:	35 ed       	ldi	r19, 0xD5	; 213
    1a30:	3a 95       	dec	r19
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <lcd_int32+0x124>
    1a34:	00 00       	nop
    1a36:	11 11       	cpse	r17, r1
    1a38:	f2 cf       	rjmp	.-28     	; 0x1a1e <lcd_int32+0x112>

}
    1a3a:	69 96       	adiw	r28, 0x19	; 25
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1a60:	b1 2c       	mov	r11, r1
    1a62:	9e 01       	movw	r18, r28
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	69 01       	movw	r12, r18
    1a6a:	a3 cf       	rjmp	.-186    	; 0x19b2 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1a6c:	80 e3       	ldi	r24, 0x30	; 48
    1a6e:	c6 cf       	rjmp	.-116    	; 0x19fc <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1a70:	90 95       	com	r25
    1a72:	80 95       	com	r24
    1a74:	70 95       	com	r23
    1a76:	61 95       	neg	r22
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	69 cf       	rjmp	.-302    	; 0x1952 <lcd_int32+0x46>

00001a80 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    1a80:	5f 92       	push	r5
    1a82:	6f 92       	push	r6
    1a84:	7f 92       	push	r7
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	61 97       	sbiw	r28, 0x11	; 17
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	a6 2e       	mov	r10, r22
    1ab0:	54 2e       	mov	r5, r20
    1ab2:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1ab4:	79 2e       	mov	r7, r25
    1ab6:	77 1c       	adc	r7, r7
    1ab8:	77 24       	eor	r7, r7
    1aba:	77 1c       	adc	r7, r7
    1abc:	b7 2c       	mov	r11, r7
    1abe:	c7 2c       	mov	r12, r7
    1ac0:	d1 2c       	mov	r13, r1
    1ac2:	ee 27       	eor	r30, r30
    1ac4:	ff 27       	eor	r31, r31
    1ac6:	ec 19       	sub	r30, r12
    1ac8:	fd 09       	sbc	r31, r13
    1aca:	8e 27       	eor	r24, r30
    1acc:	9f 27       	eor	r25, r31
    1ace:	fc 01       	movw	r30, r24
    1ad0:	ec 0d       	add	r30, r12
    1ad2:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1ad4:	44 23       	and	r20, r20
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <lcd_int16+0x5a>
    1ad8:	8e c0       	rjmp	.+284    	; 0x1bf6 <lcd_int16+0x176>
    1ada:	ce 01       	movw	r24, r28
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	7c 01       	movw	r14, r24
    1ae0:	8c 01       	movw	r16, r24
    1ae2:	88 24       	eor	r8, r8
    1ae4:	8a 94       	dec	r8
    1ae6:	84 0e       	add	r8, r20
    1ae8:	91 2c       	mov	r9, r1
    1aea:	9f ef       	ldi	r25, 0xFF	; 255
    1aec:	89 1a       	sub	r8, r25
    1aee:	99 0a       	sbc	r9, r25
    1af0:	8e 0c       	add	r8, r14
    1af2:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1af4:	6a e0       	ldi	r22, 0x0A	; 10
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	cf 01       	movw	r24, r30
    1afa:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__divmodhi4>
    1afe:	26 2f       	mov	r18, r22
    1b00:	e2 2f       	mov	r30, r18
    1b02:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    1b04:	80 5d       	subi	r24, 0xD0	; 208
    1b06:	d8 01       	movw	r26, r16
    1b08:	8d 93       	st	X+, r24
    1b0a:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1b0c:	a8 15       	cp	r26, r8
    1b0e:	b9 05       	cpc	r27, r9
    1b10:	89 f7       	brne	.-30     	; 0x1af4 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1b12:	01 e0       	ldi	r16, 0x01	; 1
    1b14:	05 0d       	add	r16, r5
    1b16:	d7 01       	movw	r26, r14
    1b18:	a5 0d       	add	r26, r5
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	8e e2       	ldi	r24, 0x2E	; 46
    1b1e:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1b20:	6a e0       	ldi	r22, 0x0A	; 10
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	cf 01       	movw	r24, r30
    1b26:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__divmodhi4>
    1b2a:	26 2f       	mov	r18, r22
    1b2c:	e2 2f       	mov	r30, r18
    1b2e:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    1b30:	11 e0       	ldi	r17, 0x01	; 1
    1b32:	10 0f       	add	r17, r16
    1b34:	d7 01       	movw	r26, r14
    1b36:	a0 0f       	add	r26, r16
    1b38:	b1 1d       	adc	r27, r1
    1b3a:	80 5d       	subi	r24, 0xD0	; 208
    1b3c:	8c 93       	st	X, r24
    1b3e:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    1b40:	30 97       	sbiw	r30, 0x00	; 0
    1b42:	71 f7       	brne	.-36     	; 0x1b20 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1b44:	61 10       	cpse	r6, r1
    1b46:	15 c0       	rjmp	.+42     	; 0x1b72 <lcd_int16+0xf2>
    1b48:	77 20       	and	r7, r7
    1b4a:	39 f0       	breq	.+14     	; 0x1b5a <lcd_int16+0xda>
        {
                sline[i++] = '-';
    1b4c:	11 e0       	ldi	r17, 0x01	; 1
    1b4e:	10 0f       	add	r17, r16
    1b50:	f7 01       	movw	r30, r14
    1b52:	e0 0f       	add	r30, r16
    1b54:	f1 1d       	adc	r31, r1
    1b56:	8d e2       	ldi	r24, 0x2D	; 45
    1b58:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1b5a:	aa 20       	and	r10, r10
    1b5c:	41 f1       	breq	.+80     	; 0x1bae <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1b5e:	81 2f       	mov	r24, r17
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	2a 2d       	mov	r18, r10
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	82 17       	cp	r24, r18
    1b68:	93 07       	cpc	r25, r19
    1b6a:	0c f5       	brge	.+66     	; 0x1bae <lcd_int16+0x12e>
    1b6c:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1b72:	aa 20       	and	r10, r10
    1b74:	a1 f0       	breq	.+40     	; 0x1b9e <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1b76:	81 2f       	mov	r24, r17
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	2a 2d       	mov	r18, r10
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	2c 19       	sub	r18, r12
    1b80:	3d 09       	sbc	r19, r13
    1b82:	82 17       	cp	r24, r18
    1b84:	93 07       	cpc	r25, r19
    1b86:	5c f4       	brge	.+22     	; 0x1b9e <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1b88:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1b8a:	1f 5f       	subi	r17, 0xFF	; 255
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	e8 0f       	add	r30, r24
    1b90:	f9 1f       	adc	r31, r25
    1b92:	40 83       	st	Z, r20
    1b94:	81 2f       	mov	r24, r17
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	82 17       	cp	r24, r18
    1b9a:	93 07       	cpc	r25, r19
    1b9c:	b4 f3       	brlt	.-20     	; 0x1b8a <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    1b9e:	bb 20       	and	r11, r11
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <lcd_int16+0x12e>
    1ba2:	f7 01       	movw	r30, r14
    1ba4:	e1 0f       	add	r30, r17
    1ba6:	f1 1d       	adc	r31, r1
    1ba8:	8d e2       	ldi	r24, 0x2D	; 45
    1baa:	80 83       	st	Z, r24
    1bac:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1bae:	11 50       	subi	r17, 0x01	; 1
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	e1 0f       	add	r30, r17
    1bb4:	f1 1d       	adc	r31, r1
    1bb6:	60 81       	ld	r22, Z
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <send_lcd>
    1bbe:	95 ed       	ldi	r25, 0xD5	; 213
    1bc0:	9a 95       	dec	r25
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <lcd_int16+0x140>
    1bc4:	00 00       	nop
    1bc6:	11 11       	cpse	r17, r1
    1bc8:	f2 cf       	rjmp	.-28     	; 0x1bae <lcd_int16+0x12e>
}
    1bca:	61 96       	adiw	r28, 0x11	; 17
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	5f 90       	pop	r5
    1bf4:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1bf6:	00 e0       	ldi	r16, 0x00	; 0
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	7c 01       	movw	r14, r24
    1bfe:	90 cf       	rjmp	.-224    	; 0x1b20 <lcd_int16+0xa0>

00001c00 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1c00:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1c02:	10 92 80 02 	sts	0x0280, r1
    1c06:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	90 93 78 02 	sts	0x0278, r25
    1c10:	80 93 77 02 	sts	0x0277, r24
    1c14:	08 95       	ret

00001c16 <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
    1c16:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
    1c18:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
    1c1a:	10 92 80 02 	sts	0x0280, r1
    1c1e:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;  //set the max beat
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	30 93 78 02 	sts	0x0278, r19
    1c28:	20 93 77 02 	sts	0x0277, r18
  switch (octave) {
    1c2c:	84 2f       	mov	r24, r20
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	89 30       	cpi	r24, 0x09	; 9
    1c32:	91 05       	cpc	r25, r1
    1c34:	18 f0       	brcs	.+6      	; 0x1c3c <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
    1c36:	1b bc       	out	0x2b, r1	; 43
    1c38:	1a bc       	out	0x2a, r1	; 42
    1c3a:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    1c3c:	89 56       	subi	r24, 0x69	; 105
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1c42:	85 2f       	mov	r24, r21
    1c44:	55 0f       	add	r21, r21
    1c46:	99 0b       	sbc	r25, r25
    1c48:	aa 0b       	sbc	r26, r26
    1c4a:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    1c4c:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
    1c50:	fc 01       	movw	r30, r24
    1c52:	e1 54       	subi	r30, 0x41	; 65
    1c54:	f1 09       	sbc	r31, r1
    1c56:	e7 30       	cpi	r30, 0x07	; 7
    1c58:	f1 05       	cpc	r31, r1
    1c5a:	78 f7       	brcc	.-34     	; 0x1c3a <play_note+0x24>
    1c5c:	e0 56       	subi	r30, 0x60	; 96
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1c64:	fc 01       	movw	r30, r24
    1c66:	e1 54       	subi	r30, 0x41	; 65
    1c68:	f1 09       	sbc	r31, r1
    1c6a:	e7 30       	cpi	r30, 0x07	; 7
    1c6c:	f1 05       	cpc	r31, r1
    1c6e:	28 f7       	brcc	.-54     	; 0x1c3a <play_note+0x24>
    1c70:	e9 55       	subi	r30, 0x59	; 89
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
    1c78:	fc 01       	movw	r30, r24
    1c7a:	e1 54       	subi	r30, 0x41	; 65
    1c7c:	f1 09       	sbc	r31, r1
    1c7e:	e7 30       	cpi	r30, 0x07	; 7
    1c80:	f1 05       	cpc	r31, r1
    1c82:	d8 f6       	brcc	.-74     	; 0x1c3a <play_note+0x24>
    1c84:	e2 55       	subi	r30, 0x52	; 82
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	e1 54       	subi	r30, 0x41	; 65
    1c90:	f1 09       	sbc	r31, r1
    1c92:	e7 30       	cpi	r30, 0x07	; 7
    1c94:	f1 05       	cpc	r31, r1
    1c96:	88 f6       	brcc	.-94     	; 0x1c3a <play_note+0x24>
    1c98:	eb 54       	subi	r30, 0x4B	; 75
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e1 54       	subi	r30, 0x41	; 65
    1ca4:	f1 09       	sbc	r31, r1
    1ca6:	e7 30       	cpi	r30, 0x07	; 7
    1ca8:	f1 05       	cpc	r31, r1
    1caa:	38 f6       	brcc	.-114    	; 0x1c3a <play_note+0x24>
    1cac:	e4 54       	subi	r30, 0x44	; 68
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	e1 54       	subi	r30, 0x41	; 65
    1cb8:	f1 09       	sbc	r31, r1
    1cba:	e7 30       	cpi	r30, 0x07	; 7
    1cbc:	f1 05       	cpc	r31, r1
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <play_note+0xac>
    1cc0:	bc cf       	rjmp	.-136    	; 0x1c3a <play_note+0x24>
    1cc2:	ed 53       	subi	r30, 0x3D	; 61
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
    1cca:	fc 01       	movw	r30, r24
    1ccc:	e1 54       	subi	r30, 0x41	; 65
    1cce:	f1 09       	sbc	r31, r1
    1cd0:	e7 30       	cpi	r30, 0x07	; 7
    1cd2:	f1 05       	cpc	r31, r1
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <play_note+0xc2>
    1cd6:	b1 cf       	rjmp	.-158    	; 0x1c3a <play_note+0x24>
    1cd8:	e6 53       	subi	r30, 0x36	; 54
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	e1 54       	subi	r30, 0x41	; 65
    1ce4:	f1 09       	sbc	r31, r1
    1ce6:	e7 30       	cpi	r30, 0x07	; 7
    1ce8:	f1 05       	cpc	r31, r1
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <play_note+0xd8>
    1cec:	a6 cf       	rjmp	.-180    	; 0x1c3a <play_note+0x24>
    1cee:	ef 52       	subi	r30, 0x2F	; 47
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e1 54       	subi	r30, 0x41	; 65
    1cfa:	f1 09       	sbc	r31, r1
    1cfc:	e7 30       	cpi	r30, 0x07	; 7
    1cfe:	f1 05       	cpc	r31, r1
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <play_note+0xee>
    1d02:	9b cf       	rjmp	.-202    	; 0x1c3a <play_note+0x24>
    1d04:	e8 52       	subi	r30, 0x28	; 40
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
    1d0c:	88 e5       	ldi	r24, 0x58	; 88
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9b bd       	out	0x2b, r25	; 43
    1d12:	8a bd       	out	0x2a, r24	; 42
	break;
    1d14:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
    1d16:	66 23       	and	r22, r22
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <play_note+0x106>
    1d1a:	0f c2       	rjmp	.+1054   	; 0x213a <play_note+0x524>
    1d1c:	83 e6       	ldi	r24, 0x63	; 99
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9b bd       	out	0x2b, r25	; 43
    1d22:	8a bd       	out	0x2a, r24	; 42
    1d24:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
    1d26:	66 23       	and	r22, r22
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <play_note+0x116>
    1d2a:	11 c2       	rjmp	.+1058   	; 0x214e <play_note+0x538>
    1d2c:	8f e6       	ldi	r24, 0x6F	; 111
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9b bd       	out	0x2b, r25	; 43
    1d32:	8a bd       	out	0x2a, r24	; 42
    1d34:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
    1d36:	86 e7       	ldi	r24, 0x76	; 118
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9b bd       	out	0x2b, r25	; 43
    1d3c:	8a bd       	out	0x2a, r24	; 42
	break;
    1d3e:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
    1d40:	66 23       	and	r22, r22
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <play_note+0x130>
    1d44:	ff c1       	rjmp	.+1022   	; 0x2144 <play_note+0x52e>
    1d46:	8a e4       	ldi	r24, 0x4A	; 74
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9b bd       	out	0x2b, r25	; 43
    1d4c:	8a bd       	out	0x2a, r24	; 42
    1d4e:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
    1d50:	66 23       	and	r22, r22
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <play_note+0x140>
    1d54:	01 c2       	rjmp	.+1026   	; 0x2158 <play_note+0x542>
    1d56:	83 e5       	ldi	r24, 0x53	; 83
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9b bd       	out	0x2b, r25	; 43
    1d5c:	8a bd       	out	0x2a, r24	; 42
    1d5e:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
    1d60:	66 23       	and	r22, r22
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <play_note+0x150>
    1d64:	b8 c1       	rjmp	.+880    	; 0x20d6 <play_note+0x4c0>
    1d66:	82 e4       	ldi	r24, 0x42	; 66
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9b bd       	out	0x2b, r25	; 43
    1d6c:	8a bd       	out	0x2a, r24	; 42
    1d6e:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
    1d70:	81 eb       	ldi	r24, 0xB1	; 177
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9b bd       	out	0x2b, r25	; 43
    1d76:	8a bd       	out	0x2a, r24	; 42
	break;
    1d78:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
    1d7a:	66 23       	and	r22, r22
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <play_note+0x16a>
    1d7e:	d3 c1       	rjmp	.+934    	; 0x2126 <play_note+0x510>
    1d80:	85 e8       	ldi	r24, 0x85	; 133
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9b bd       	out	0x2b, r25	; 43
    1d86:	8a bd       	out	0x2a, r24	; 42
    1d88:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
    1d8a:	66 23       	and	r22, r22
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <play_note+0x17a>
    1d8e:	c1 c1       	rjmp	.+898    	; 0x2112 <play_note+0x4fc>
    1d90:	85 e9       	ldi	r24, 0x95	; 149
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9b bd       	out	0x2b, r25	; 43
    1d96:	8a bd       	out	0x2a, r24	; 42
    1d98:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
    1d9a:	66 23       	and	r22, r22
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <play_note+0x18a>
    1d9e:	be c1       	rjmp	.+892    	; 0x211c <play_note+0x506>
    1da0:	87 ea       	ldi	r24, 0xA7	; 167
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9b bd       	out	0x2b, r25	; 43
    1da6:	8a bd       	out	0x2a, r24	; 42
    1da8:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
    1daa:	84 e6       	ldi	r24, 0x64	; 100
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	9b bd       	out	0x2b, r25	; 43
    1db0:	8a bd       	out	0x2a, r24	; 42
	break;
    1db2:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
    1db4:	66 23       	and	r22, r22
    1db6:	09 f4       	brne	.+2      	; 0x1dba <play_note+0x1a4>
    1db8:	bb c1       	rjmp	.+886    	; 0x2130 <play_note+0x51a>
    1dba:	80 ee       	ldi	r24, 0xE0	; 224
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9b bd       	out	0x2b, r25	; 43
    1dc0:	8a bd       	out	0x2a, r24	; 42
    1dc2:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
    1dc4:	8d ee       	ldi	r24, 0xED	; 237
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9b bd       	out	0x2b, r25	; 43
    1dca:	8a bd       	out	0x2a, r24	; 42
	break;
    1dcc:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
    1dce:	66 23       	and	r22, r22
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <play_note+0x1be>
    1dd2:	8b c1       	rjmp	.+790    	; 0x20ea <play_note+0x4d4>
    1dd4:	87 ec       	ldi	r24, 0xC7	; 199
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9b bd       	out	0x2b, r25	; 43
    1dda:	8a bd       	out	0x2a, r24	; 42
    1ddc:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
    1dde:	66 23       	and	r22, r22
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <play_note+0x1ce>
    1de2:	74 c1       	rjmp	.+744    	; 0x20cc <play_note+0x4b6>
    1de4:	80 e9       	ldi	r24, 0x90	; 144
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	9b bd       	out	0x2b, r25	; 43
    1dea:	8a bd       	out	0x2a, r24	; 42
    1dec:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
    1dee:	66 23       	and	r22, r22
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <play_note+0x1de>
    1df2:	cb c1       	rjmp	.+918    	; 0x218a <play_note+0x574>
    1df4:	84 e8       	ldi	r24, 0x84	; 132
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	9b bd       	out	0x2b, r25	; 43
    1dfa:	8a bd       	out	0x2a, r24	; 42
    1dfc:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
    1dfe:	66 23       	and	r22, r22
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <play_note+0x1ee>
    1e02:	af c1       	rjmp	.+862    	; 0x2162 <play_note+0x54c>
    1e04:	8b e2       	ldi	r24, 0x2B	; 43
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	9b bd       	out	0x2b, r25	; 43
    1e0a:	8a bd       	out	0x2a, r24	; 42
    1e0c:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
    1e0e:	66 23       	and	r22, r22
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <play_note+0x1fe>
    1e12:	b1 c1       	rjmp	.+866    	; 0x2176 <play_note+0x560>
    1e14:	82 ea       	ldi	r24, 0xA2	; 162
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	9b bd       	out	0x2b, r25	; 43
    1e1a:	8a bd       	out	0x2a, r24	; 42
    1e1c:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
    1e1e:	8c ed       	ldi	r24, 0xDC	; 220
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	9b bd       	out	0x2b, r25	; 43
    1e24:	8a bd       	out	0x2a, r24	; 42
	break;
    1e26:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
    1e28:	66 23       	and	r22, r22
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <play_note+0x218>
    1e2c:	59 c1       	rjmp	.+690    	; 0x20e0 <play_note+0x4ca>
    1e2e:	87 e1       	ldi	r24, 0x17	; 23
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	9b bd       	out	0x2b, r25	; 43
    1e34:	8a bd       	out	0x2a, r24	; 42
    1e36:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
    1e38:	66 23       	and	r22, r22
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <play_note+0x228>
    1e3c:	b0 c1       	rjmp	.+864    	; 0x219e <play_note+0x588>
    1e3e:	88 e5       	ldi	r24, 0x58	; 88
    1e40:	92 e0       	ldi	r25, 0x02	; 2
    1e42:	9b bd       	out	0x2b, r25	; 43
    1e44:	8a bd       	out	0x2a, r24	; 42
    1e46:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
    1e48:	8a ec       	ldi	r24, 0xCA	; 202
    1e4a:	92 e0       	ldi	r25, 0x02	; 2
    1e4c:	9b bd       	out	0x2b, r25	; 43
    1e4e:	8a bd       	out	0x2a, r24	; 42
	break;
    1e50:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
    1e52:	66 23       	and	r22, r22
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <play_note+0x242>
    1e56:	35 c1       	rjmp	.+618    	; 0x20c2 <play_note+0x4ac>
    1e58:	86 e4       	ldi	r24, 0x46	; 70
    1e5a:	96 e0       	ldi	r25, 0x06	; 6
    1e5c:	9b bd       	out	0x2b, r25	; 43
    1e5e:	8a bd       	out	0x2a, r24	; 42
    1e60:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
    1e62:	66 23       	and	r22, r22
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <play_note+0x252>
    1e66:	82 c1       	rjmp	.+772    	; 0x216c <play_note+0x556>
    1e68:	8a e0       	ldi	r24, 0x0A	; 10
    1e6a:	97 e0       	ldi	r25, 0x07	; 7
    1e6c:	9b bd       	out	0x2b, r25	; 43
    1e6e:	8a bd       	out	0x2a, r24	; 42
    1e70:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
    1e72:	86 e9       	ldi	r24, 0x96	; 150
    1e74:	95 e0       	ldi	r25, 0x05	; 5
    1e76:	9b bd       	out	0x2b, r25	; 43
    1e78:	8a bd       	out	0x2a, r24	; 42
	break;
    1e7a:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
    1e7c:	8a eb       	ldi	r24, 0xBA	; 186
    1e7e:	93 e0       	ldi	r25, 0x03	; 3
    1e80:	9b bd       	out	0x2b, r25	; 43
    1e82:	8a bd       	out	0x2a, r24	; 42
	break;
    1e84:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
    1e86:	66 23       	and	r22, r22
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <play_note+0x276>
    1e8a:	7a c1       	rjmp	.+756    	; 0x2180 <play_note+0x56a>
    1e8c:	81 ec       	ldi	r24, 0xC1	; 193
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	9b bd       	out	0x2b, r25	; 43
    1e92:	8a bd       	out	0x2a, r24	; 42
    1e94:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
    1e96:	66 23       	and	r22, r22
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <play_note+0x286>
    1e9a:	7c c1       	rjmp	.+760    	; 0x2194 <play_note+0x57e>
    1e9c:	8b e0       	ldi	r24, 0x0B	; 11
    1e9e:	91 e0       	ldi	r25, 0x01	; 1
    1ea0:	9b bd       	out	0x2b, r25	; 43
    1ea2:	8a bd       	out	0x2a, r24	; 42
    1ea4:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
    1ea6:	66 23       	and	r22, r22
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <play_note+0x296>
    1eaa:	7e c1       	rjmp	.+764    	; 0x21a8 <play_note+0x592>
    1eac:	80 e5       	ldi	r24, 0x50	; 80
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	9b bd       	out	0x2b, r25	; 43
    1eb2:	8a bd       	out	0x2a, r24	; 42
    1eb4:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
    1eb6:	66 23       	and	r22, r22
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <play_note+0x2a6>
    1eba:	ad c1       	rjmp	.+858    	; 0x2216 <play_note+0x600>
    1ebc:	82 e2       	ldi	r24, 0x22	; 34
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	9b bd       	out	0x2b, r25	; 43
    1ec2:	8a bd       	out	0x2a, r24	; 42
    1ec4:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
    1ec6:	86 e7       	ldi	r24, 0x76	; 118
    1ec8:	97 e0       	ldi	r25, 0x07	; 7
    1eca:	9b bd       	out	0x2b, r25	; 43
    1ecc:	8a bd       	out	0x2a, r24	; 42
	break;
    1ece:	08 95       	ret
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
    1ed0:	66 23       	and	r22, r22
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <play_note+0x2c0>
    1ed4:	0f c1       	rjmp	.+542    	; 0x20f4 <play_note+0x4de>
    1ed6:	8e ec       	ldi	r24, 0xCE	; 206
    1ed8:	92 e1       	ldi	r25, 0x12	; 18
    1eda:	9b bd       	out	0x2b, r25	; 43
    1edc:	8a bd       	out	0x2a, r24	; 42
    1ede:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
    1ee0:	66 23       	and	r22, r22
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <play_note+0x2d0>
    1ee4:	7a c1       	rjmp	.+756    	; 0x21da <play_note+0x5c4>
    1ee6:	8d e1       	ldi	r24, 0x1D	; 29
    1ee8:	95 e1       	ldi	r25, 0x15	; 21
    1eea:	9b bd       	out	0x2b, r25	; 43
    1eec:	8a bd       	out	0x2a, r24	; 42
    1eee:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
    1ef0:	66 23       	and	r22, r22
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <play_note+0x2e0>
    1ef4:	dc c0       	rjmp	.+440    	; 0x20ae <play_note+0x498>
    1ef6:	80 e6       	ldi	r24, 0x60	; 96
    1ef8:	98 e0       	ldi	r25, 0x08	; 8
    1efa:	9b bd       	out	0x2b, r25	; 43
    1efc:	8a bd       	out	0x2a, r24	; 42
    1efe:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
    1f00:	66 23       	and	r22, r22
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <play_note+0x2f0>
    1f04:	92 c1       	rjmp	.+804    	; 0x222a <play_note+0x614>
    1f06:	80 e1       	ldi	r24, 0x10	; 16
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9b bd       	out	0x2b, r25	; 43
    1f0c:	8a bd       	out	0x2a, r24	; 42
    1f0e:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
    1f10:	8e e2       	ldi	r24, 0x2E	; 46
    1f12:	9b e0       	ldi	r25, 0x0B	; 11
    1f14:	9b bd       	out	0x2b, r25	; 43
    1f16:	8a bd       	out	0x2a, r24	; 42
	break;
    1f18:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
    1f1a:	66 23       	and	r22, r22
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <play_note+0x30a>
    1f1e:	49 c1       	rjmp	.+658    	; 0x21b2 <play_note+0x59c>
    1f20:	8b e1       	ldi	r24, 0x1B	; 27
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9b bd       	out	0x2b, r25	; 43
    1f26:	8a bd       	out	0x2a, r24	; 42
    1f28:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
    1f2a:	8c e1       	ldi	r24, 0x1C	; 28
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9b bd       	out	0x2b, r25	; 43
    1f30:	8a bd       	out	0x2a, r24	; 42
	break;
    1f32:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
    1f34:	66 23       	and	r22, r22
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <play_note+0x324>
    1f38:	41 c1       	rjmp	.+642    	; 0x21bc <play_note+0x5a6>
    1f3a:	87 e0       	ldi	r24, 0x07	; 7
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9b bd       	out	0x2b, r25	; 43
    1f40:	8a bd       	out	0x2a, r24	; 42
    1f42:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
    1f44:	66 23       	and	r22, r22
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <play_note+0x334>
    1f48:	da c0       	rjmp	.+436    	; 0x20fe <play_note+0x4e8>
    1f4a:	8b e0       	ldi	r24, 0x0B	; 11
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9b bd       	out	0x2b, r25	; 43
    1f50:	8a bd       	out	0x2a, r24	; 42
    1f52:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
    1f54:	82 e1       	ldi	r24, 0x12	; 18
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9b bd       	out	0x2b, r25	; 43
    1f5a:	8a bd       	out	0x2a, r24	; 42
	break;
    1f5c:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
    1f5e:	66 23       	and	r22, r22
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <play_note+0x34e>
    1f62:	9b c0       	rjmp	.+310    	; 0x209a <play_note+0x484>
    1f64:	89 e1       	ldi	r24, 0x19	; 25
    1f66:	99 e1       	ldi	r25, 0x19	; 25
    1f68:	9b bd       	out	0x2b, r25	; 43
    1f6a:	8a bd       	out	0x2a, r24	; 42
    1f6c:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
    1f6e:	66 23       	and	r22, r22
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <play_note+0x35e>
    1f72:	29 c1       	rjmp	.+594    	; 0x21c6 <play_note+0x5b0>
    1f74:	80 e3       	ldi	r24, 0x30	; 48
    1f76:	9c e1       	ldi	r25, 0x1C	; 28
    1f78:	9b bd       	out	0x2b, r25	; 43
    1f7a:	8a bd       	out	0x2a, r24	; 42
    1f7c:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
    1f7e:	8c ed       	ldi	r24, 0xDC	; 220
    1f80:	9d e1       	ldi	r25, 0x1D	; 29
    1f82:	9b bd       	out	0x2b, r25	; 43
    1f84:	8a bd       	out	0x2a, r24	; 42
	break;
    1f86:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
    1f88:	8a e3       	ldi	r24, 0x3A	; 58
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9b bd       	out	0x2b, r25	; 43
    1f8e:	8a bd       	out	0x2a, r24	; 42
	break;
    1f90:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
    1f92:	66 23       	and	r22, r22
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <play_note+0x382>
    1f96:	35 c1       	rjmp	.+618    	; 0x2202 <play_note+0x5ec>
    1f98:	80 e2       	ldi	r24, 0x20	; 32
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9b bd       	out	0x2b, r25	; 43
    1f9e:	8a bd       	out	0x2a, r24	; 42
    1fa0:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
    1fa2:	66 23       	and	r22, r22
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <play_note+0x392>
    1fa6:	32 c1       	rjmp	.+612    	; 0x220c <play_note+0x5f6>
    1fa8:	84 e2       	ldi	r24, 0x24	; 36
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9b bd       	out	0x2b, r25	; 43
    1fae:	8a bd       	out	0x2a, r24	; 42
    1fb0:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
    1fb2:	66 23       	and	r22, r22
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <play_note+0x3a2>
    1fb6:	76 c0       	rjmp	.+236    	; 0x20a4 <play_note+0x48e>
    1fb8:	89 e2       	ldi	r24, 0x29	; 41
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9b bd       	out	0x2b, r25	; 43
    1fbe:	8a bd       	out	0x2a, r24	; 42
    1fc0:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
    1fc2:	66 23       	and	r22, r22
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <play_note+0x3b2>
    1fc6:	78 c0       	rjmp	.+240    	; 0x20b8 <play_note+0x4a2>
    1fc8:	81 e3       	ldi	r24, 0x31	; 49
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9b bd       	out	0x2b, r25	; 43
    1fce:	8a bd       	out	0x2a, r24	; 42
    1fd0:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
    1fd2:	8b e2       	ldi	r24, 0x2B	; 43
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9b bd       	out	0x2b, r25	; 43
    1fd8:	8a bd       	out	0x2a, r24	; 42
	break;
    1fda:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
    1fdc:	66 23       	and	r22, r22
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <play_note+0x3cc>
    1fe0:	93 c0       	rjmp	.+294    	; 0x2108 <play_note+0x4f2>
    1fe2:	87 e3       	ldi	r24, 0x37	; 55
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9b bd       	out	0x2b, r25	; 43
    1fe8:	8a bd       	out	0x2a, r24	; 42
    1fea:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
    1fec:	66 23       	and	r22, r22
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <play_note+0x3dc>
    1ff0:	4f c0       	rjmp	.+158    	; 0x2090 <play_note+0x47a>
    1ff2:	88 e1       	ldi	r24, 0x18	; 24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9b bd       	out	0x2b, r25	; 43
    1ff8:	8a bd       	out	0x2a, r24	; 42
    1ffa:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
    1ffc:	66 23       	and	r22, r22
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <play_note+0x3ec>
    2000:	f6 c0       	rjmp	.+492    	; 0x21ee <play_note+0x5d8>
    2002:	82 eb       	ldi	r24, 0xB2	; 178
    2004:	94 e0       	ldi	r25, 0x04	; 4
    2006:	9b bd       	out	0x2b, r25	; 43
    2008:	8a bd       	out	0x2a, r24	; 42
    200a:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
    200c:	66 23       	and	r22, r22
    200e:	09 f4       	brne	.+2      	; 0x2012 <play_note+0x3fc>
    2010:	16 c1       	rjmp	.+556    	; 0x223e <play_note+0x628>
    2012:	8d e8       	ldi	r24, 0x8D	; 141
    2014:	9a e0       	ldi	r25, 0x0A	; 10
    2016:	9b bd       	out	0x2b, r25	; 43
    2018:	8a bd       	out	0x2a, r24	; 42
    201a:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
    201c:	66 23       	and	r22, r22
    201e:	09 f4       	brne	.+2      	; 0x2022 <play_note+0x40c>
    2020:	d7 c0       	rjmp	.+430    	; 0x21d0 <play_note+0x5ba>
    2022:	86 e1       	ldi	r24, 0x16	; 22
    2024:	9e e0       	ldi	r25, 0x0E	; 14
    2026:	9b bd       	out	0x2b, r25	; 43
    2028:	8a bd       	out	0x2a, r24	; 42
    202a:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
    202c:	66 23       	and	r22, r22
    202e:	09 f4       	brne	.+2      	; 0x2032 <play_note+0x41c>
    2030:	f7 c0       	rjmp	.+494    	; 0x2220 <play_note+0x60a>
    2032:	80 ec       	ldi	r24, 0xC0	; 192
    2034:	90 e1       	ldi	r25, 0x10	; 16
    2036:	9b bd       	out	0x2b, r25	; 43
    2038:	8a bd       	out	0x2a, r24	; 42
    203a:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
    203c:	66 23       	and	r22, r22
    203e:	09 f4       	brne	.+2      	; 0x2042 <play_note+0x42c>
    2040:	d1 c0       	rjmp	.+418    	; 0x21e4 <play_note+0x5ce>
    2042:	8f e2       	ldi	r24, 0x2F	; 47
    2044:	94 e0       	ldi	r25, 0x04	; 4
    2046:	9b bd       	out	0x2b, r25	; 43
    2048:	8a bd       	out	0x2a, r24	; 42
    204a:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
    204c:	66 23       	and	r22, r22
    204e:	09 f4       	brne	.+2      	; 0x2052 <play_note+0x43c>
    2050:	f1 c0       	rjmp	.+482    	; 0x2234 <play_note+0x61e>
    2052:	87 e6       	ldi	r24, 0x67	; 103
    2054:	99 e0       	ldi	r25, 0x09	; 9
    2056:	9b bd       	out	0x2b, r25	; 43
    2058:	8a bd       	out	0x2a, r24	; 42
    205a:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
    205c:	66 23       	and	r22, r22
    205e:	09 f4       	brne	.+2      	; 0x2062 <play_note+0x44c>
    2060:	cb c0       	rjmp	.+406    	; 0x21f8 <play_note+0x5e2>
    2062:	8d e8       	ldi	r24, 0x8D	; 141
    2064:	9c e0       	ldi	r25, 0x0C	; 12
    2066:	9b bd       	out	0x2b, r25	; 43
    2068:	8a bd       	out	0x2a, r24	; 42
    206a:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
    206c:	8d e5       	ldi	r24, 0x5D	; 93
    206e:	96 e1       	ldi	r25, 0x16	; 22
    2070:	9b bd       	out	0x2b, r25	; 43
    2072:	8a bd       	out	0x2a, r24	; 42
	break;
    2074:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
    2076:	66 23       	and	r22, r22
    2078:	09 f4       	brne	.+2      	; 0x207c <play_note+0x466>
    207a:	e6 c0       	rjmp	.+460    	; 0x2248 <play_note+0x632>
    207c:	86 e4       	ldi	r24, 0x46	; 70
    207e:	95 e0       	ldi	r25, 0x05	; 5
    2080:	9b bd       	out	0x2b, r25	; 43
    2082:	8a bd       	out	0x2a, r24	; 42
    2084:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
    2086:	8d ee       	ldi	r24, 0xED	; 237
    2088:	9e e0       	ldi	r25, 0x0E	; 14
    208a:	9b bd       	out	0x2b, r25	; 43
    208c:	8a bd       	out	0x2a, r24	; 42
	break;
    208e:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
    2090:	85 e1       	ldi	r24, 0x15	; 21
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9b bd       	out	0x2b, r25	; 43
    2096:	8a bd       	out	0x2a, r24	; 42
    2098:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
    209a:	82 eb       	ldi	r24, 0xB2	; 178
    209c:	97 e1       	ldi	r25, 0x17	; 23
    209e:	9b bd       	out	0x2b, r25	; 43
    20a0:	8a bd       	out	0x2a, r24	; 42
    20a2:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
    20a4:	86 e2       	ldi	r24, 0x26	; 38
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9b bd       	out	0x2b, r25	; 43
    20aa:	8a bd       	out	0x2a, r24	; 42
    20ac:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
    20ae:	87 ee       	ldi	r24, 0xE7	; 231
    20b0:	97 e0       	ldi	r25, 0x07	; 7
    20b2:	9b bd       	out	0x2b, r25	; 43
    20b4:	8a bd       	out	0x2a, r24	; 42
    20b6:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
    20b8:	8e e2       	ldi	r24, 0x2E	; 46
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9b bd       	out	0x2b, r25	; 43
    20be:	8a bd       	out	0x2a, r24	; 42
    20c0:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
    20c2:	8b ee       	ldi	r24, 0xEB	; 235
    20c4:	95 e0       	ldi	r25, 0x05	; 5
    20c6:	9b bd       	out	0x2b, r25	; 43
    20c8:	8a bd       	out	0x2a, r24	; 42
    20ca:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
    20cc:	8a e7       	ldi	r24, 0x7A	; 122
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	9b bd       	out	0x2b, r25	; 43
    20d2:	8a bd       	out	0x2a, r24	; 42
    20d4:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
    20d6:	8e e3       	ldi	r24, 0x3E	; 62
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9b bd       	out	0x2b, r25	; 43
    20dc:	8a bd       	out	0x2a, r24	; 42
    20de:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
    20e0:	89 ef       	ldi	r24, 0xF9	; 249
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	9b bd       	out	0x2b, r25	; 43
    20e6:	8a bd       	out	0x2a, r24	; 42
    20e8:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
    20ea:	8c eb       	ldi	r24, 0xBC	; 188
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9b bd       	out	0x2b, r25	; 43
    20f0:	8a bd       	out	0x2a, r24	; 42
    20f2:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
    20f4:	80 ec       	ldi	r24, 0xC0	; 192
    20f6:	91 e1       	ldi	r25, 0x11	; 17
    20f8:	9b bd       	out	0x2b, r25	; 43
    20fa:	8a bd       	out	0x2a, r24	; 42
    20fc:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
    20fe:	89 e0       	ldi	r24, 0x09	; 9
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9b bd       	out	0x2b, r25	; 43
    2104:	8a bd       	out	0x2a, r24	; 42
    2106:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
    2108:	84 e3       	ldi	r24, 0x34	; 52
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9b bd       	out	0x2b, r25	; 43
    210e:	8a bd       	out	0x2a, r24	; 42
    2110:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
    2112:	8d e8       	ldi	r24, 0x8D	; 141
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9b bd       	out	0x2b, r25	; 43
    2118:	8a bd       	out	0x2a, r24	; 42
    211a:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
    211c:	8e e9       	ldi	r24, 0x9E	; 158
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9b bd       	out	0x2b, r25	; 43
    2122:	8a bd       	out	0x2a, r24	; 42
    2124:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
    2126:	8d e7       	ldi	r24, 0x7D	; 125
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9b bd       	out	0x2b, r25	; 43
    212c:	8a bd       	out	0x2a, r24	; 42
    212e:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
    2130:	83 ed       	ldi	r24, 0xD3	; 211
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9b bd       	out	0x2b, r25	; 43
    2136:	8a bd       	out	0x2a, r24	; 42
    2138:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
    213a:	8d e5       	ldi	r24, 0x5D	; 93
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9b bd       	out	0x2b, r25	; 43
    2140:	8a bd       	out	0x2a, r24	; 42
    2142:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
    2144:	86 e4       	ldi	r24, 0x46	; 70
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9b bd       	out	0x2b, r25	; 43
    214a:	8a bd       	out	0x2a, r24	; 42
    214c:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
    214e:	89 e6       	ldi	r24, 0x69	; 105
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9b bd       	out	0x2b, r25	; 43
    2154:	8a bd       	out	0x2a, r24	; 42
    2156:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
    2158:	8e e4       	ldi	r24, 0x4E	; 78
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9b bd       	out	0x2b, r25	; 43
    215e:	8a bd       	out	0x2a, r24	; 42
    2160:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
    2162:	8b e1       	ldi	r24, 0x1B	; 27
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	9b bd       	out	0x2b, r25	; 43
    2168:	8a bd       	out	0x2a, r24	; 42
    216a:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
    216c:	85 ea       	ldi	r24, 0xA5	; 165
    216e:	96 e0       	ldi	r25, 0x06	; 6
    2170:	9b bd       	out	0x2b, r25	; 43
    2172:	8a bd       	out	0x2a, r24	; 42
    2174:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
    2176:	8c e7       	ldi	r24, 0x7C	; 124
    2178:	92 e0       	ldi	r25, 0x02	; 2
    217a:	9b bd       	out	0x2b, r25	; 43
    217c:	8a bd       	out	0x2a, r24	; 42
    217e:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
    2180:	88 ea       	ldi	r24, 0xA8	; 168
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	9b bd       	out	0x2b, r25	; 43
    2186:	8a bd       	out	0x2a, r24	; 42
    2188:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
    218a:	82 e5       	ldi	r24, 0x52	; 82
    218c:	93 e0       	ldi	r25, 0x03	; 3
    218e:	9b bd       	out	0x2b, r25	; 43
    2190:	8a bd       	out	0x2a, r24	; 42
    2192:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
    2194:	8c ef       	ldi	r24, 0xFC	; 252
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9b bd       	out	0x2b, r25	; 43
    219a:	8a bd       	out	0x2a, r24	; 42
    219c:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
    219e:	87 e3       	ldi	r24, 0x37	; 55
    21a0:	92 e0       	ldi	r25, 0x02	; 2
    21a2:	9b bd       	out	0x2b, r25	; 43
    21a4:	8a bd       	out	0x2a, r24	; 42
    21a6:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
    21a8:	8d e3       	ldi	r24, 0x3D	; 61
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	9b bd       	out	0x2b, r25	; 43
    21ae:	8a bd       	out	0x2a, r24	; 42
    21b0:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
    21b2:	89 e1       	ldi	r24, 0x19	; 25
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9b bd       	out	0x2b, r25	; 43
    21b8:	8a bd       	out	0x2a, r24	; 42
    21ba:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
    21bc:	85 e0       	ldi	r24, 0x05	; 5
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9b bd       	out	0x2b, r25	; 43
    21c2:	8a bd       	out	0x2a, r24	; 42
    21c4:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
    21c6:	8a e9       	ldi	r24, 0x9A	; 154
    21c8:	9a e1       	ldi	r25, 0x1A	; 26
    21ca:	9b bd       	out	0x2b, r25	; 43
    21cc:	8a bd       	out	0x2a, r24	; 42
    21ce:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
    21d0:	8c e4       	ldi	r24, 0x4C	; 76
    21d2:	9d e0       	ldi	r25, 0x0D	; 13
    21d4:	9b bd       	out	0x2b, r25	; 43
    21d6:	8a bd       	out	0x2a, r24	; 42
    21d8:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
    21da:	8d ee       	ldi	r24, 0xED	; 237
    21dc:	93 e1       	ldi	r25, 0x13	; 19
    21de:	9b bd       	out	0x2b, r25	; 43
    21e0:	8a bd       	out	0x2a, r24	; 42
    21e2:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
    21e4:	83 ef       	ldi	r24, 0xF3	; 243
    21e6:	93 e0       	ldi	r25, 0x03	; 3
    21e8:	9b bd       	out	0x2b, r25	; 43
    21ea:	8a bd       	out	0x2a, r24	; 42
    21ec:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
    21ee:	8f e6       	ldi	r24, 0x6F	; 111
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	9b bd       	out	0x2b, r25	; 43
    21f4:	8a bd       	out	0x2a, r24	; 42
    21f6:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
    21f8:	88 ed       	ldi	r24, 0xD8	; 216
    21fa:	9b e0       	ldi	r25, 0x0B	; 11
    21fc:	9b bd       	out	0x2b, r25	; 43
    21fe:	8a bd       	out	0x2a, r24	; 42
    2200:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
    2202:	8e e1       	ldi	r24, 0x1E	; 30
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9b bd       	out	0x2b, r25	; 43
    2208:	8a bd       	out	0x2a, r24	; 42
    220a:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
    220c:	82 e2       	ldi	r24, 0x22	; 34
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9b bd       	out	0x2b, r25	; 43
    2212:	8a bd       	out	0x2a, r24	; 42
    2214:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
    2216:	85 ef       	ldi	r24, 0xF5	; 245
    2218:	92 e0       	ldi	r25, 0x02	; 2
    221a:	9b bd       	out	0x2b, r25	; 43
    221c:	8a bd       	out	0x2a, r24	; 42
    221e:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
    2220:	80 ed       	ldi	r24, 0xD0	; 208
    2222:	9f e0       	ldi	r25, 0x0F	; 15
    2224:	9b bd       	out	0x2b, r25	; 43
    2226:	8a bd       	out	0x2a, r24	; 42
    2228:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
    222a:	8d e0       	ldi	r24, 0x0D	; 13
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9b bd       	out	0x2b, r25	; 43
    2230:	8a bd       	out	0x2a, r24	; 42
    2232:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
    2234:	8f ed       	ldi	r24, 0xDF	; 223
    2236:	98 e0       	ldi	r25, 0x08	; 8
    2238:	9b bd       	out	0x2b, r25	; 43
    223a:	8a bd       	out	0x2a, r24	; 42
    223c:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
    223e:	86 ef       	ldi	r24, 0xF6	; 246
    2240:	99 e0       	ldi	r25, 0x09	; 9
    2242:	9b bd       	out	0x2b, r25	; 43
    2244:	8a bd       	out	0x2a, r24	; 42
    2246:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
    2248:	8a ef       	ldi	r24, 0xFA	; 250
    224a:	94 e0       	ldi	r25, 0x04	; 4
    224c:	9b bd       	out	0x2b, r25	; 43
    224e:	8a bd       	out	0x2a, r24	; 42
    2250:	08 95       	ret

00002252 <song0>:
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    2252:	86 34       	cpi	r24, 0x46	; 70
    2254:	91 05       	cpc	r25, r1
    2256:	20 f0       	brcs	.+8      	; 0x2260 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	80 93 73 02 	sts	0x0273, r24
    225e:	08 95       	ret
#define F_CPU 16000000UL //16Mhz clock
#include <string.h>
#include"music.h"

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    2260:	fc 01       	movw	r30, r24
    2262:	e1 52       	subi	r30, 0x21	; 33
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
    226a:	22 e0       	ldi	r18, 0x02	; 2
    226c:	44 e0       	ldi	r20, 0x04	; 4
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	81 e4       	ldi	r24, 0x41	; 65
    2272:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
    2276:	26 e0       	ldi	r18, 0x06	; 6
    2278:	44 e0       	ldi	r20, 0x04	; 4
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	81 e4       	ldi	r24, 0x41	; 65
    227e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
    2282:	22 e0       	ldi	r18, 0x02	; 2
    2284:	44 e0       	ldi	r20, 0x04	; 4
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	81 e4       	ldi	r24, 0x41	; 65
    228a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
    228e:	28 e0       	ldi	r18, 0x08	; 8
    2290:	44 e0       	ldi	r20, 0x04	; 4
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	84 e4       	ldi	r24, 0x44	; 68
    2296:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
    229a:	28 e0       	ldi	r18, 0x08	; 8
    229c:	44 e0       	ldi	r20, 0x04	; 4
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	86 e4       	ldi	r24, 0x46	; 70
    22a2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
    22a6:	26 e0       	ldi	r18, 0x06	; 6
    22a8:	44 e0       	ldi	r20, 0x04	; 4
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	82 e4       	ldi	r24, 0x42	; 66
    22ae:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
    22b2:	28 e0       	ldi	r18, 0x08	; 8
    22b4:	44 e0       	ldi	r20, 0x04	; 4
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	83 e4       	ldi	r24, 0x43	; 67
    22ba:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
    22be:	28 e0       	ldi	r18, 0x08	; 8
    22c0:	44 e0       	ldi	r20, 0x04	; 4
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	81 e4       	ldi	r24, 0x41	; 65
    22c6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
    22ca:	28 e0       	ldi	r18, 0x08	; 8
    22cc:	44 e0       	ldi	r20, 0x04	; 4
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	87 e4       	ldi	r24, 0x47	; 71
    22d2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
    22d6:	28 e0       	ldi	r18, 0x08	; 8
    22d8:	44 e0       	ldi	r20, 0x04	; 4
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	85 e4       	ldi	r24, 0x45	; 69
    22de:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
    22e2:	20 e1       	ldi	r18, 0x10	; 16
    22e4:	44 e0       	ldi	r20, 0x04	; 4
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	81 e4       	ldi	r24, 0x41	; 65
    22ea:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
    22ee:	24 e0       	ldi	r18, 0x04	; 4
    22f0:	45 e0       	ldi	r20, 0x05	; 5
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	83 e4       	ldi	r24, 0x43	; 67
    22f6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
    22fa:	24 e0       	ldi	r18, 0x04	; 4
    22fc:	45 e0       	ldi	r20, 0x05	; 5
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	84 e4       	ldi	r24, 0x44	; 68
    2302:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2306:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2308:	10 92 80 02 	sts	0x0280, r1
    230c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2310:	88 e0       	ldi	r24, 0x08	; 8
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	90 93 78 02 	sts	0x0278, r25
    2318:	80 93 77 02 	sts	0x0277, r24
    231c:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    231e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2320:	10 92 80 02 	sts	0x0280, r1
    2324:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	90 93 78 02 	sts	0x0278, r25
    2330:	80 93 77 02 	sts	0x0277, r24
    2334:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
    2336:	20 e1       	ldi	r18, 0x10	; 16
    2338:	44 e0       	ldi	r20, 0x04	; 4
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	82 e4       	ldi	r24, 0x42	; 66
    233e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
    2342:	28 e0       	ldi	r18, 0x08	; 8
    2344:	44 e0       	ldi	r20, 0x04	; 4
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	82 e4       	ldi	r24, 0x42	; 66
    234a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
    234e:	28 e1       	ldi	r18, 0x18	; 24
    2350:	44 e0       	ldi	r20, 0x04	; 4
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	87 e4       	ldi	r24, 0x47	; 71
    2356:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
    235a:	20 e1       	ldi	r18, 0x10	; 16
    235c:	45 e0       	ldi	r20, 0x05	; 5
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	84 e4       	ldi	r24, 0x44	; 68
    2362:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2366:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2368:	10 92 80 02 	sts	0x0280, r1
    236c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	90 93 78 02 	sts	0x0278, r25
    2378:	80 93 77 02 	sts	0x0277, r24
    237c:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
    237e:	24 e0       	ldi	r18, 0x04	; 4
    2380:	44 e0       	ldi	r20, 0x04	; 4
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	81 e4       	ldi	r24, 0x41	; 65
    2386:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
    238a:	26 e0       	ldi	r18, 0x06	; 6
    238c:	44 e0       	ldi	r20, 0x04	; 4
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	87 e4       	ldi	r24, 0x47	; 71
    2392:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
    2396:	24 e0       	ldi	r18, 0x04	; 4
    2398:	44 e0       	ldi	r20, 0x04	; 4
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	87 e4       	ldi	r24, 0x47	; 71
    239e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
    23a2:	28 e0       	ldi	r18, 0x08	; 8
    23a4:	44 e0       	ldi	r20, 0x04	; 4
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	87 e4       	ldi	r24, 0x47	; 71
    23aa:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
    23ae:	23 e0       	ldi	r18, 0x03	; 3
    23b0:	44 e0       	ldi	r20, 0x04	; 4
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	87 e4       	ldi	r24, 0x47	; 71
    23b6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
    23ba:	20 e1       	ldi	r18, 0x10	; 16
    23bc:	44 e0       	ldi	r20, 0x04	; 4
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	84 e4       	ldi	r24, 0x44	; 68
    23c2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
    23c6:	20 e1       	ldi	r18, 0x10	; 16
    23c8:	45 e0       	ldi	r20, 0x05	; 5
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	83 e4       	ldi	r24, 0x43	; 67
    23ce:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
    23d2:	22 e0       	ldi	r18, 0x02	; 2
    23d4:	44 e0       	ldi	r20, 0x04	; 4
    23d6:	61 e0       	ldi	r22, 0x01	; 1
    23d8:	82 e4       	ldi	r24, 0x42	; 66
    23da:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
    23de:	24 e0       	ldi	r18, 0x04	; 4
    23e0:	45 e0       	ldi	r20, 0x05	; 5
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	84 e4       	ldi	r24, 0x44	; 68
    23e6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
    23ea:	24 e0       	ldi	r18, 0x04	; 4
    23ec:	44 e0       	ldi	r20, 0x04	; 4
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	81 e4       	ldi	r24, 0x41	; 65
    23f2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
    23f6:	28 e0       	ldi	r18, 0x08	; 8
    23f8:	44 e0       	ldi	r20, 0x04	; 4
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	82 e4       	ldi	r24, 0x42	; 66
    23fe:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
    2402:	28 e1       	ldi	r18, 0x18	; 24
    2404:	44 e0       	ldi	r20, 0x04	; 4
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	86 e4       	ldi	r24, 0x46	; 70
    240a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
    240e:	27 e0       	ldi	r18, 0x07	; 7
    2410:	44 e0       	ldi	r20, 0x04	; 4
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	87 e4       	ldi	r24, 0x47	; 71
    2416:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>

0000241a <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    241a:	8f 33       	cpi	r24, 0x3F	; 63
    241c:	91 05       	cpc	r25, r1
    241e:	20 f0       	brcs	.+8      	; 0x2428 <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
    2420:	8f ef       	ldi	r24, 0xFF	; 255
    2422:	80 93 73 02 	sts	0x0273, r24
    2426:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    2428:	fc 01       	movw	r30, r24
    242a:	eb 5d       	subi	r30, 0xDB	; 219
    242c:	fe 4f       	sbci	r31, 0xFE	; 254
    242e:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
    2432:	24 e0       	ldi	r18, 0x04	; 4
    2434:	44 e0       	ldi	r20, 0x04	; 4
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	83 e4       	ldi	r24, 0x43	; 67
    243a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
    243e:	28 e0       	ldi	r18, 0x08	; 8
    2440:	44 e0       	ldi	r20, 0x04	; 4
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	85 e4       	ldi	r24, 0x45	; 69
    2446:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    244a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    244c:	10 92 80 02 	sts	0x0280, r1
    2450:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	90 93 78 02 	sts	0x0278, r25
    245c:	80 93 77 02 	sts	0x0277, r24
    2460:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
    2462:	28 e0       	ldi	r18, 0x08	; 8
    2464:	44 e0       	ldi	r20, 0x04	; 4
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	84 e4       	ldi	r24, 0x44	; 68
    246a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
    246e:	20 e1       	ldi	r18, 0x10	; 16
    2470:	43 e0       	ldi	r20, 0x03	; 3
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	83 e4       	ldi	r24, 0x43	; 67
    2476:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
    247a:	24 e0       	ldi	r18, 0x04	; 4
    247c:	44 e0       	ldi	r20, 0x04	; 4
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	84 e4       	ldi	r24, 0x44	; 68
    2482:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
    2486:	24 e0       	ldi	r18, 0x04	; 4
    2488:	43 e0       	ldi	r20, 0x03	; 3
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	82 e4       	ldi	r24, 0x42	; 66
    248e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
    2492:	27 e0       	ldi	r18, 0x07	; 7
    2494:	43 e0       	ldi	r20, 0x03	; 3
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	81 e4       	ldi	r24, 0x41	; 65
    249a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
    249e:	24 e0       	ldi	r18, 0x04	; 4
    24a0:	44 e0       	ldi	r20, 0x04	; 4
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	86 e4       	ldi	r24, 0x46	; 70
    24a6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
    24aa:	20 e1       	ldi	r18, 0x10	; 16
    24ac:	42 e0       	ldi	r20, 0x02	; 2
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	82 e4       	ldi	r24, 0x42	; 66
    24b2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
    24b6:	20 e1       	ldi	r18, 0x10	; 16
    24b8:	43 e0       	ldi	r20, 0x03	; 3
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	81 e4       	ldi	r24, 0x41	; 65
    24be:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
    24c2:	28 e0       	ldi	r18, 0x08	; 8
    24c4:	44 e0       	ldi	r20, 0x04	; 4
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	83 e4       	ldi	r24, 0x43	; 67
    24ca:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
    24ce:	20 e1       	ldi	r18, 0x10	; 16
    24d0:	43 e0       	ldi	r20, 0x03	; 3
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	84 e4       	ldi	r24, 0x44	; 68
    24d6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
    24da:	20 e1       	ldi	r18, 0x10	; 16
    24dc:	43 e0       	ldi	r20, 0x03	; 3
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	85 e4       	ldi	r24, 0x45	; 69
    24e2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    24e6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    24e8:	10 92 80 02 	sts	0x0280, r1
    24ec:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    24f0:	88 e0       	ldi	r24, 0x08	; 8
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	90 93 78 02 	sts	0x0278, r25
    24f8:	80 93 77 02 	sts	0x0277, r24
    24fc:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
    24fe:	27 e0       	ldi	r18, 0x07	; 7
    2500:	43 e0       	ldi	r20, 0x03	; 3
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	82 e4       	ldi	r24, 0x42	; 66
    2506:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
    250a:	2c e0       	ldi	r18, 0x0C	; 12
    250c:	43 e0       	ldi	r20, 0x03	; 3
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	82 e4       	ldi	r24, 0x42	; 66
    2512:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
    2516:	20 e1       	ldi	r18, 0x10	; 16
    2518:	43 e0       	ldi	r20, 0x03	; 3
    251a:	61 e0       	ldi	r22, 0x01	; 1
    251c:	81 e4       	ldi	r24, 0x41	; 65
    251e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2522:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2524:	10 92 80 02 	sts	0x0280, r1
    2528:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    252c:	80 e1       	ldi	r24, 0x10	; 16
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	90 93 78 02 	sts	0x0278, r25
    2534:	80 93 77 02 	sts	0x0277, r24
    2538:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
    253a:	24 e0       	ldi	r18, 0x04	; 4
    253c:	44 e0       	ldi	r20, 0x04	; 4
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	87 e4       	ldi	r24, 0x47	; 71
    2542:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
    2546:	28 e0       	ldi	r18, 0x08	; 8
    2548:	42 e0       	ldi	r20, 0x02	; 2
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	82 e4       	ldi	r24, 0x42	; 66
    254e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
    2552:	20 e1       	ldi	r18, 0x10	; 16
    2554:	42 e0       	ldi	r20, 0x02	; 2
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	81 e4       	ldi	r24, 0x41	; 65
    255a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
    255e:	20 e1       	ldi	r18, 0x10	; 16
    2560:	42 e0       	ldi	r20, 0x02	; 2
    2562:	61 e0       	ldi	r22, 0x01	; 1
    2564:	81 e4       	ldi	r24, 0x41	; 65
    2566:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
    256a:	2c e0       	ldi	r18, 0x0C	; 12
    256c:	44 e0       	ldi	r20, 0x04	; 4
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	85 e4       	ldi	r24, 0x45	; 69
    2572:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
    2576:	22 e0       	ldi	r18, 0x02	; 2
    2578:	44 e0       	ldi	r20, 0x04	; 4
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	84 e4       	ldi	r24, 0x44	; 68
    257e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
    2582:	22 e0       	ldi	r18, 0x02	; 2
    2584:	44 e0       	ldi	r20, 0x04	; 4
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	85 e4       	ldi	r24, 0x45	; 69
    258a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
    258e:	28 e0       	ldi	r18, 0x08	; 8
    2590:	43 e0       	ldi	r20, 0x03	; 3
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	83 e4       	ldi	r24, 0x43	; 67
    2596:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
    259a:	24 e0       	ldi	r18, 0x04	; 4
    259c:	43 e0       	ldi	r20, 0x03	; 3
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	81 e4       	ldi	r24, 0x41	; 65
    25a2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
    25a6:	28 e0       	ldi	r18, 0x08	; 8
    25a8:	43 e0       	ldi	r20, 0x03	; 3
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	85 e4       	ldi	r24, 0x45	; 69
    25ae:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
    25b2:	28 e0       	ldi	r18, 0x08	; 8
    25b4:	43 e0       	ldi	r20, 0x03	; 3
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	81 e4       	ldi	r24, 0x41	; 65
    25ba:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25be:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    25c0:	10 92 80 02 	sts	0x0280, r1
    25c4:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    25c8:	84 e0       	ldi	r24, 0x04	; 4
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	90 93 78 02 	sts	0x0278, r25
    25d0:	80 93 77 02 	sts	0x0277, r24
    25d4:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
    25d6:	28 e0       	ldi	r18, 0x08	; 8
    25d8:	44 e0       	ldi	r20, 0x04	; 4
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	81 e4       	ldi	r24, 0x41	; 65
    25de:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>

000025e2 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    25e2:	85 39       	cpi	r24, 0x95	; 149
    25e4:	91 05       	cpc	r25, r1
    25e6:	20 f0       	brcs	.+8      	; 0x25f0 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	80 93 73 02 	sts	0x0273, r24
    25ee:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    25f0:	fc 01       	movw	r30, r24
    25f2:	ec 59       	subi	r30, 0x9C	; 156
    25f4:	fe 4f       	sbci	r31, 0xFE	; 254
    25f6:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
    25fa:	24 e0       	ldi	r18, 0x04	; 4
    25fc:	43 e0       	ldi	r20, 0x03	; 3
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	87 e4       	ldi	r24, 0x47	; 71
    2602:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
    2606:	22 e0       	ldi	r18, 0x02	; 2
    2608:	43 e0       	ldi	r20, 0x03	; 3
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	81 e4       	ldi	r24, 0x41	; 65
    260e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2612:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2614:	10 92 80 02 	sts	0x0280, r1
    2618:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	90 93 78 02 	sts	0x0278, r25
    2624:	80 93 77 02 	sts	0x0277, r24
    2628:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
    262a:	22 e0       	ldi	r18, 0x02	; 2
    262c:	44 e0       	ldi	r20, 0x04	; 4
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	83 e4       	ldi	r24, 0x43	; 67
    2632:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
    2636:	22 e0       	ldi	r18, 0x02	; 2
    2638:	44 e0       	ldi	r20, 0x04	; 4
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	85 e4       	ldi	r24, 0x45	; 69
    263e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
    2642:	24 e0       	ldi	r18, 0x04	; 4
    2644:	44 e0       	ldi	r20, 0x04	; 4
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	84 e4       	ldi	r24, 0x44	; 68
    264a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
    264e:	22 e0       	ldi	r18, 0x02	; 2
    2650:	44 e0       	ldi	r20, 0x04	; 4
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	83 e4       	ldi	r24, 0x43	; 67
    2656:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    265a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    265c:	10 92 80 02 	sts	0x0280, r1
    2660:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	90 93 78 02 	sts	0x0278, r25
    266c:	80 93 77 02 	sts	0x0277, r24
    2670:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
    2672:	22 e0       	ldi	r18, 0x02	; 2
    2674:	44 e0       	ldi	r20, 0x04	; 4
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	83 e4       	ldi	r24, 0x43	; 67
    267a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    267e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2680:	10 92 80 02 	sts	0x0280, r1
    2684:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	90 93 78 02 	sts	0x0278, r25
    2690:	80 93 77 02 	sts	0x0277, r24
    2694:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
    2696:	22 e0       	ldi	r18, 0x02	; 2
    2698:	44 e0       	ldi	r20, 0x04	; 4
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	83 e4       	ldi	r24, 0x43	; 67
    269e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26a2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26a4:	10 92 80 02 	sts	0x0280, r1
    26a8:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	90 93 78 02 	sts	0x0278, r25
    26b4:	80 93 77 02 	sts	0x0277, r24
    26b8:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
    26ba:	22 e0       	ldi	r18, 0x02	; 2
    26bc:	44 e0       	ldi	r20, 0x04	; 4
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	83 e4       	ldi	r24, 0x43	; 67
    26c2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26c6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    26c8:	10 92 80 02 	sts	0x0280, r1
    26cc:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    26d0:	80 e1       	ldi	r24, 0x10	; 16
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	90 93 78 02 	sts	0x0278, r25
    26d8:	80 93 77 02 	sts	0x0277, r24
    26dc:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
    26de:	22 e0       	ldi	r18, 0x02	; 2
    26e0:	44 e0       	ldi	r20, 0x04	; 4
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	85 e4       	ldi	r24, 0x45	; 69
    26e6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
    26ea:	22 e0       	ldi	r18, 0x02	; 2
    26ec:	44 e0       	ldi	r20, 0x04	; 4
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	84 e4       	ldi	r24, 0x44	; 68
    26f2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
    26f6:	22 e0       	ldi	r18, 0x02	; 2
    26f8:	44 e0       	ldi	r20, 0x04	; 4
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	83 e4       	ldi	r24, 0x43	; 67
    26fe:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2702:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2704:	10 92 80 02 	sts	0x0280, r1
    2708:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	90 93 78 02 	sts	0x0278, r25
    2714:	80 93 77 02 	sts	0x0277, r24
    2718:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
    271a:	22 e0       	ldi	r18, 0x02	; 2
    271c:	44 e0       	ldi	r20, 0x04	; 4
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	83 e4       	ldi	r24, 0x43	; 67
    2722:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2726:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2728:	10 92 80 02 	sts	0x0280, r1
    272c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	90 93 78 02 	sts	0x0278, r25
    2738:	80 93 77 02 	sts	0x0277, r24
    273c:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
    273e:	22 e0       	ldi	r18, 0x02	; 2
    2740:	44 e0       	ldi	r20, 0x04	; 4
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	83 e4       	ldi	r24, 0x43	; 67
    2746:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    274a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    274c:	10 92 80 02 	sts	0x0280, r1
    2750:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	90 93 78 02 	sts	0x0278, r25
    275c:	80 93 77 02 	sts	0x0277, r24
    2760:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
    2762:	22 e0       	ldi	r18, 0x02	; 2
    2764:	44 e0       	ldi	r20, 0x04	; 4
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	83 e4       	ldi	r24, 0x43	; 67
    276a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    276e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2770:	10 92 80 02 	sts	0x0280, r1
    2774:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2778:	84 e0       	ldi	r24, 0x04	; 4
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	90 93 78 02 	sts	0x0278, r25
    2780:	80 93 77 02 	sts	0x0277, r24
    2784:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
    2786:	24 e0       	ldi	r18, 0x04	; 4
    2788:	43 e0       	ldi	r20, 0x03	; 3
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	87 e4       	ldi	r24, 0x47	; 71
    278e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
    2792:	22 e0       	ldi	r18, 0x02	; 2
    2794:	43 e0       	ldi	r20, 0x03	; 3
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	81 e4       	ldi	r24, 0x41	; 65
    279a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    279e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27a0:	10 92 80 02 	sts	0x0280, r1
    27a4:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    27a8:	82 e0       	ldi	r24, 0x02	; 2
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	90 93 78 02 	sts	0x0278, r25
    27b0:	80 93 77 02 	sts	0x0277, r24
    27b4:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
    27b6:	22 e0       	ldi	r18, 0x02	; 2
    27b8:	44 e0       	ldi	r20, 0x04	; 4
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	83 e4       	ldi	r24, 0x43	; 67
    27be:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
    27c2:	22 e0       	ldi	r18, 0x02	; 2
    27c4:	44 e0       	ldi	r20, 0x04	; 4
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	85 e4       	ldi	r24, 0x45	; 69
    27ca:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
    27ce:	24 e0       	ldi	r18, 0x04	; 4
    27d0:	44 e0       	ldi	r20, 0x04	; 4
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	84 e4       	ldi	r24, 0x44	; 68
    27d6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
    27da:	22 e0       	ldi	r18, 0x02	; 2
    27dc:	44 e0       	ldi	r20, 0x04	; 4
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	83 e4       	ldi	r24, 0x43	; 67
    27e2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27e6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    27e8:	10 92 80 02 	sts	0x0280, r1
    27ec:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	90 93 78 02 	sts	0x0278, r25
    27f8:	80 93 77 02 	sts	0x0277, r24
    27fc:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
    27fe:	22 e0       	ldi	r18, 0x02	; 2
    2800:	44 e0       	ldi	r20, 0x04	; 4
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	83 e4       	ldi	r24, 0x43	; 67
    2806:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    280a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    280c:	10 92 80 02 	sts	0x0280, r1
    2810:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	90 93 78 02 	sts	0x0278, r25
    281c:	80 93 77 02 	sts	0x0277, r24
    2820:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
    2822:	22 e0       	ldi	r18, 0x02	; 2
    2824:	44 e0       	ldi	r20, 0x04	; 4
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	83 e4       	ldi	r24, 0x43	; 67
    282a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    282e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2830:	10 92 80 02 	sts	0x0280, r1
    2834:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	90 93 78 02 	sts	0x0278, r25
    2840:	80 93 77 02 	sts	0x0277, r24
    2844:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
    2846:	22 e0       	ldi	r18, 0x02	; 2
    2848:	44 e0       	ldi	r20, 0x04	; 4
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	83 e4       	ldi	r24, 0x43	; 67
    284e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2852:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2854:	10 92 80 02 	sts	0x0280, r1
    2858:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    285c:	8a e0       	ldi	r24, 0x0A	; 10
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	90 93 78 02 	sts	0x0278, r25
    2864:	80 93 77 02 	sts	0x0277, r24
    2868:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    286a:	24 e0       	ldi	r18, 0x04	; 4
    286c:	44 e0       	ldi	r20, 0x04	; 4
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	83 e4       	ldi	r24, 0x43	; 67
    2872:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2876:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2878:	10 92 80 02 	sts	0x0280, r1
    287c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2880:	84 e0       	ldi	r24, 0x04	; 4
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	90 93 78 02 	sts	0x0278, r25
    2888:	80 93 77 02 	sts	0x0277, r24
    288c:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    288e:	22 e0       	ldi	r18, 0x02	; 2
    2890:	44 e0       	ldi	r20, 0x04	; 4
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	84 e4       	ldi	r24, 0x44	; 68
    2896:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    289a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    289c:	10 92 80 02 	sts	0x0280, r1
    28a0:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	90 93 78 02 	sts	0x0278, r25
    28ac:	80 93 77 02 	sts	0x0277, r24
    28b0:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    28b2:	24 e0       	ldi	r18, 0x04	; 4
    28b4:	44 e0       	ldi	r20, 0x04	; 4
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	85 e4       	ldi	r24, 0x45	; 69
    28ba:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28be:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28c0:	10 92 80 02 	sts	0x0280, r1
    28c4:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    28c8:	84 e0       	ldi	r24, 0x04	; 4
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	90 93 78 02 	sts	0x0278, r25
    28d0:	80 93 77 02 	sts	0x0277, r24
    28d4:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    28d6:	22 e0       	ldi	r18, 0x02	; 2
    28d8:	44 e0       	ldi	r20, 0x04	; 4
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	84 e4       	ldi	r24, 0x44	; 68
    28de:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	44 e0       	ldi	r20, 0x04	; 4
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	83 e4       	ldi	r24, 0x43	; 67
    28ea:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    28ee:	22 e0       	ldi	r18, 0x02	; 2
    28f0:	43 e0       	ldi	r20, 0x03	; 3
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	81 e4       	ldi	r24, 0x41	; 65
    28f6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28fa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    28fc:	10 92 80 02 	sts	0x0280, r1
    2900:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	90 93 78 02 	sts	0x0278, r25
    290c:	80 93 77 02 	sts	0x0277, r24
    2910:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    2912:	22 e0       	ldi	r18, 0x02	; 2
    2914:	44 e0       	ldi	r20, 0x04	; 4
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	83 e4       	ldi	r24, 0x43	; 67
    291a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    291e:	22 e0       	ldi	r18, 0x02	; 2
    2920:	43 e0       	ldi	r20, 0x03	; 3
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	81 e4       	ldi	r24, 0x41	; 65
    2926:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    292a:	22 e0       	ldi	r18, 0x02	; 2
    292c:	43 e0       	ldi	r20, 0x03	; 3
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	81 e4       	ldi	r24, 0x41	; 65
    2932:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2936:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2938:	10 92 80 02 	sts	0x0280, r1
    293c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	90 93 78 02 	sts	0x0278, r25
    2948:	80 93 77 02 	sts	0x0277, r24
    294c:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    294e:	22 e0       	ldi	r18, 0x02	; 2
    2950:	44 e0       	ldi	r20, 0x04	; 4
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	85 e4       	ldi	r24, 0x45	; 69
    2956:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    295a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    295c:	10 92 80 02 	sts	0x0280, r1
    2960:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	90 93 78 02 	sts	0x0278, r25
    296c:	80 93 77 02 	sts	0x0277, r24
    2970:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    2972:	22 e0       	ldi	r18, 0x02	; 2
    2974:	44 e0       	ldi	r20, 0x04	; 4
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	85 e4       	ldi	r24, 0x45	; 69
    297a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    297e:	22 e0       	ldi	r18, 0x02	; 2
    2980:	44 e0       	ldi	r20, 0x04	; 4
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	86 e4       	ldi	r24, 0x46	; 70
    2986:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    298a:	22 e0       	ldi	r18, 0x02	; 2
    298c:	44 e0       	ldi	r20, 0x04	; 4
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	87 e4       	ldi	r24, 0x47	; 71
    2992:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    2996:	22 e0       	ldi	r18, 0x02	; 2
    2998:	44 e0       	ldi	r20, 0x04	; 4
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	87 e4       	ldi	r24, 0x47	; 71
    299e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    29a2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    29a4:	10 92 80 02 	sts	0x0280, r1
    29a8:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    29ac:	88 e0       	ldi	r24, 0x08	; 8
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	90 93 78 02 	sts	0x0278, r25
    29b4:	80 93 77 02 	sts	0x0277, r24
    29b8:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    29ba:	24 e0       	ldi	r18, 0x04	; 4
    29bc:	44 e0       	ldi	r20, 0x04	; 4
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	87 e4       	ldi	r24, 0x47	; 71
    29c2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    29c6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    29c8:	10 92 80 02 	sts	0x0280, r1
    29cc:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	90 93 78 02 	sts	0x0278, r25
    29d8:	80 93 77 02 	sts	0x0277, r24
    29dc:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    29de:	21 e0       	ldi	r18, 0x01	; 1
    29e0:	44 e0       	ldi	r20, 0x04	; 4
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	87 e4       	ldi	r24, 0x47	; 71
    29e6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    29ea:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    29ec:	10 92 80 02 	sts	0x0280, r1
    29f0:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	90 93 78 02 	sts	0x0278, r25
    29fc:	80 93 77 02 	sts	0x0277, r24
    2a00:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    2a02:	22 e0       	ldi	r18, 0x02	; 2
    2a04:	44 e0       	ldi	r20, 0x04	; 4
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	87 e4       	ldi	r24, 0x47	; 71
    2a0a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2a0e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2a10:	10 92 80 02 	sts	0x0280, r1
    2a14:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	90 93 78 02 	sts	0x0278, r25
    2a20:	80 93 77 02 	sts	0x0277, r24
    2a24:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    2a26:	22 e0       	ldi	r18, 0x02	; 2
    2a28:	43 e0       	ldi	r20, 0x03	; 3
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	85 e4       	ldi	r24, 0x45	; 69
    2a2e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2a32:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2a34:	10 92 80 02 	sts	0x0280, r1
    2a38:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	90 93 78 02 	sts	0x0278, r25
    2a44:	80 93 77 02 	sts	0x0277, r24
    2a48:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    2a4a:	22 e0       	ldi	r18, 0x02	; 2
    2a4c:	43 e0       	ldi	r20, 0x03	; 3
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
    2a50:	85 e4       	ldi	r24, 0x45	; 69
    2a52:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    2a56:	22 e0       	ldi	r18, 0x02	; 2
    2a58:	43 e0       	ldi	r20, 0x03	; 3
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	86 e4       	ldi	r24, 0x46	; 70
    2a5e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    2a62:	22 e0       	ldi	r18, 0x02	; 2
    2a64:	43 e0       	ldi	r20, 0x03	; 3
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	87 e4       	ldi	r24, 0x47	; 71
    2a6a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    2a6e:	22 e0       	ldi	r18, 0x02	; 2
    2a70:	43 e0       	ldi	r20, 0x03	; 3
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	87 e4       	ldi	r24, 0x47	; 71
    2a76:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2a7a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2a7c:	10 92 80 02 	sts	0x0280, r1
    2a80:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2a84:	84 e0       	ldi	r24, 0x04	; 4
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	90 93 78 02 	sts	0x0278, r25
    2a8c:	80 93 77 02 	sts	0x0277, r24
    2a90:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    2a92:	22 e0       	ldi	r18, 0x02	; 2
    2a94:	44 e0       	ldi	r20, 0x04	; 4
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	84 e4       	ldi	r24, 0x44	; 68
    2a9a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    2a9e:	22 e0       	ldi	r18, 0x02	; 2
    2aa0:	44 e0       	ldi	r20, 0x04	; 4
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	83 e4       	ldi	r24, 0x43	; 67
    2aa6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    2aaa:	22 e0       	ldi	r18, 0x02	; 2
    2aac:	43 e0       	ldi	r20, 0x03	; 3
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	81 e4       	ldi	r24, 0x41	; 65
    2ab2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2ab6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2ab8:	10 92 80 02 	sts	0x0280, r1
    2abc:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	90 93 78 02 	sts	0x0278, r25
    2ac8:	80 93 77 02 	sts	0x0277, r24
    2acc:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    2ace:	22 e0       	ldi	r18, 0x02	; 2
    2ad0:	44 e0       	ldi	r20, 0x04	; 4
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	83 e4       	ldi	r24, 0x43	; 67
    2ad6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    2ada:	22 e0       	ldi	r18, 0x02	; 2
    2adc:	43 e0       	ldi	r20, 0x03	; 3
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	81 e4       	ldi	r24, 0x41	; 65
    2ae2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    2ae6:	22 e0       	ldi	r18, 0x02	; 2
    2ae8:	43 e0       	ldi	r20, 0x03	; 3
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	81 e4       	ldi	r24, 0x41	; 65
    2aee:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2af2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2af4:	10 92 80 02 	sts	0x0280, r1
    2af8:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	90 93 78 02 	sts	0x0278, r25
    2b04:	80 93 77 02 	sts	0x0277, r24
    2b08:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    2b0a:	22 e0       	ldi	r18, 0x02	; 2
    2b0c:	44 e0       	ldi	r20, 0x04	; 4
    2b0e:	60 e0       	ldi	r22, 0x00	; 0
    2b10:	85 e4       	ldi	r24, 0x45	; 69
    2b12:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2b16:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2b18:	10 92 80 02 	sts	0x0280, r1
    2b1c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	90 93 78 02 	sts	0x0278, r25
    2b28:	80 93 77 02 	sts	0x0277, r24
    2b2c:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    2b2e:	22 e0       	ldi	r18, 0x02	; 2
    2b30:	44 e0       	ldi	r20, 0x04	; 4
    2b32:	61 e0       	ldi	r22, 0x01	; 1
    2b34:	85 e4       	ldi	r24, 0x45	; 69
    2b36:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    2b3a:	22 e0       	ldi	r18, 0x02	; 2
    2b3c:	44 e0       	ldi	r20, 0x04	; 4
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	86 e4       	ldi	r24, 0x46	; 70
    2b42:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    2b46:	22 e0       	ldi	r18, 0x02	; 2
    2b48:	44 e0       	ldi	r20, 0x04	; 4
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	87 e4       	ldi	r24, 0x47	; 71
    2b4e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    2b52:	22 e0       	ldi	r18, 0x02	; 2
    2b54:	44 e0       	ldi	r20, 0x04	; 4
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	87 e4       	ldi	r24, 0x47	; 71
    2b5a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2b5e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2b60:	10 92 80 02 	sts	0x0280, r1
    2b64:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2b68:	88 e0       	ldi	r24, 0x08	; 8
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	90 93 78 02 	sts	0x0278, r25
    2b70:	80 93 77 02 	sts	0x0277, r24
    2b74:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    2b76:	22 e0       	ldi	r18, 0x02	; 2
    2b78:	43 e0       	ldi	r20, 0x03	; 3
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	82 e4       	ldi	r24, 0x42	; 66
    2b7e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    2b82:	22 e0       	ldi	r18, 0x02	; 2
    2b84:	44 e0       	ldi	r20, 0x04	; 4
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	84 e4       	ldi	r24, 0x44	; 68
    2b8a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    2b8e:	22 e0       	ldi	r18, 0x02	; 2
    2b90:	44 e0       	ldi	r20, 0x04	; 4
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	83 e4       	ldi	r24, 0x43	; 67
    2b96:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2b9a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2b9c:	10 92 80 02 	sts	0x0280, r1
    2ba0:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	90 93 78 02 	sts	0x0278, r25
    2bac:	80 93 77 02 	sts	0x0277, r24
    2bb0:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    2bb2:	22 e0       	ldi	r18, 0x02	; 2
    2bb4:	44 e0       	ldi	r20, 0x04	; 4
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	85 e4       	ldi	r24, 0x45	; 69
    2bba:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2bbe:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2bc0:	10 92 80 02 	sts	0x0280, r1
    2bc4:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	90 93 78 02 	sts	0x0278, r25
    2bd0:	80 93 77 02 	sts	0x0277, r24
    2bd4:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    2bd6:	22 e0       	ldi	r18, 0x02	; 2
    2bd8:	44 e0       	ldi	r20, 0x04	; 4
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	87 e4       	ldi	r24, 0x47	; 71
    2bde:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    2be2:	22 e0       	ldi	r18, 0x02	; 2
    2be4:	44 e0       	ldi	r20, 0x04	; 4
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	86 e4       	ldi	r24, 0x46	; 70
    2bea:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    2bee:	24 e0       	ldi	r18, 0x04	; 4
    2bf0:	44 e0       	ldi	r20, 0x04	; 4
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	81 e4       	ldi	r24, 0x41	; 65
    2bf6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    2bfa:	22 e0       	ldi	r18, 0x02	; 2
    2bfc:	44 e0       	ldi	r20, 0x04	; 4
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	87 e4       	ldi	r24, 0x47	; 71
    2c02:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2c06:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2c08:	10 92 80 02 	sts	0x0280, r1
    2c0c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	90 93 78 02 	sts	0x0278, r25
    2c18:	80 93 77 02 	sts	0x0277, r24
    2c1c:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    2c1e:	22 e0       	ldi	r18, 0x02	; 2
    2c20:	44 e0       	ldi	r20, 0x04	; 4
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	85 e4       	ldi	r24, 0x45	; 69
    2c26:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    2c2a:	23 e0       	ldi	r18, 0x03	; 3
    2c2c:	43 e0       	ldi	r20, 0x03	; 3
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	87 e4       	ldi	r24, 0x47	; 71
    2c32:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    2c36:	24 e0       	ldi	r18, 0x04	; 4
    2c38:	43 e0       	ldi	r20, 0x03	; 3
    2c3a:	60 e0       	ldi	r22, 0x00	; 0
    2c3c:	81 e4       	ldi	r24, 0x41	; 65
    2c3e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    2c42:	22 e0       	ldi	r18, 0x02	; 2
    2c44:	43 e0       	ldi	r20, 0x03	; 3
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	82 e4       	ldi	r24, 0x42	; 66
    2c4a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2c4e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2c50:	10 92 80 02 	sts	0x0280, r1
    2c54:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	90 93 78 02 	sts	0x0278, r25
    2c60:	80 93 77 02 	sts	0x0277, r24
    2c64:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    2c66:	22 e0       	ldi	r18, 0x02	; 2
    2c68:	43 e0       	ldi	r20, 0x03	; 3
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	82 e4       	ldi	r24, 0x42	; 66
    2c6e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2c72:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2c74:	10 92 80 02 	sts	0x0280, r1
    2c78:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	90 93 78 02 	sts	0x0278, r25
    2c84:	80 93 77 02 	sts	0x0277, r24
    2c88:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    2c8a:	22 e0       	ldi	r18, 0x02	; 2
    2c8c:	43 e0       	ldi	r20, 0x03	; 3
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	81 e4       	ldi	r24, 0x41	; 65
    2c92:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2c96:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2c98:	10 92 80 02 	sts	0x0280, r1
    2c9c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2ca0:	82 e0       	ldi	r24, 0x02	; 2
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	90 93 78 02 	sts	0x0278, r25
    2ca8:	80 93 77 02 	sts	0x0277, r24
    2cac:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    2cae:	24 e0       	ldi	r18, 0x04	; 4
    2cb0:	43 e0       	ldi	r20, 0x03	; 3
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	85 e4       	ldi	r24, 0x45	; 69
    2cb6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2cba:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2cbc:	10 92 80 02 	sts	0x0280, r1
    2cc0:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	90 93 78 02 	sts	0x0278, r25
    2ccc:	80 93 77 02 	sts	0x0277, r24
    2cd0:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    2cd2:	22 e0       	ldi	r18, 0x02	; 2
    2cd4:	43 e0       	ldi	r20, 0x03	; 3
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	87 e4       	ldi	r24, 0x47	; 71
    2cda:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2cde:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2ce0:	10 92 80 02 	sts	0x0280, r1
    2ce4:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2ce8:	82 e0       	ldi	r24, 0x02	; 2
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	90 93 78 02 	sts	0x0278, r25
    2cf0:	80 93 77 02 	sts	0x0277, r24
    2cf4:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    2cf6:	25 e0       	ldi	r18, 0x05	; 5
    2cf8:	44 e0       	ldi	r20, 0x04	; 4
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	83 e4       	ldi	r24, 0x43	; 67
    2cfe:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2d02:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2d04:	10 92 80 02 	sts	0x0280, r1
    2d08:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2d0c:	84 e0       	ldi	r24, 0x04	; 4
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	90 93 78 02 	sts	0x0278, r25
    2d14:	80 93 77 02 	sts	0x0277, r24
    2d18:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    2d1a:	22 e0       	ldi	r18, 0x02	; 2
    2d1c:	43 e0       	ldi	r20, 0x03	; 3
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	82 e4       	ldi	r24, 0x42	; 66
    2d22:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    2d26:	22 e0       	ldi	r18, 0x02	; 2
    2d28:	44 e0       	ldi	r20, 0x04	; 4
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	84 e4       	ldi	r24, 0x44	; 68
    2d2e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    2d32:	22 e0       	ldi	r18, 0x02	; 2
    2d34:	44 e0       	ldi	r20, 0x04	; 4
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	83 e4       	ldi	r24, 0x43	; 67
    2d3a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2d3e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2d40:	10 92 80 02 	sts	0x0280, r1
    2d44:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	90 93 78 02 	sts	0x0278, r25
    2d50:	80 93 77 02 	sts	0x0277, r24
    2d54:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    2d56:	22 e0       	ldi	r18, 0x02	; 2
    2d58:	44 e0       	ldi	r20, 0x04	; 4
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	85 e4       	ldi	r24, 0x45	; 69
    2d5e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2d62:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2d64:	10 92 80 02 	sts	0x0280, r1
    2d68:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	90 93 78 02 	sts	0x0278, r25
    2d74:	80 93 77 02 	sts	0x0277, r24
    2d78:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    2d7a:	22 e0       	ldi	r18, 0x02	; 2
    2d7c:	44 e0       	ldi	r20, 0x04	; 4
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	87 e4       	ldi	r24, 0x47	; 71
    2d82:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    2d86:	22 e0       	ldi	r18, 0x02	; 2
    2d88:	44 e0       	ldi	r20, 0x04	; 4
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	86 e4       	ldi	r24, 0x46	; 70
    2d8e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    2d92:	24 e0       	ldi	r18, 0x04	; 4
    2d94:	44 e0       	ldi	r20, 0x04	; 4
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	81 e4       	ldi	r24, 0x41	; 65
    2d9a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    2d9e:	22 e0       	ldi	r18, 0x02	; 2
    2da0:	44 e0       	ldi	r20, 0x04	; 4
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	87 e4       	ldi	r24, 0x47	; 71
    2da6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2daa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2dac:	10 92 80 02 	sts	0x0280, r1
    2db0:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	90 93 78 02 	sts	0x0278, r25
    2dbc:	80 93 77 02 	sts	0x0277, r24
    2dc0:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    2dc2:	22 e0       	ldi	r18, 0x02	; 2
    2dc4:	44 e0       	ldi	r20, 0x04	; 4
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	85 e4       	ldi	r24, 0x45	; 69
    2dca:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    2dce:	23 e0       	ldi	r18, 0x03	; 3
    2dd0:	43 e0       	ldi	r20, 0x03	; 3
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	87 e4       	ldi	r24, 0x47	; 71
    2dd6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    2dda:	24 e0       	ldi	r18, 0x04	; 4
    2ddc:	43 e0       	ldi	r20, 0x03	; 3
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	81 e4       	ldi	r24, 0x41	; 65
    2de2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    2de6:	22 e0       	ldi	r18, 0x02	; 2
    2de8:	43 e0       	ldi	r20, 0x03	; 3
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	82 e4       	ldi	r24, 0x42	; 66
    2dee:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2df2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2df4:	10 92 80 02 	sts	0x0280, r1
    2df8:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	90 93 78 02 	sts	0x0278, r25
    2e04:	80 93 77 02 	sts	0x0277, r24
    2e08:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    2e0a:	22 e0       	ldi	r18, 0x02	; 2
    2e0c:	43 e0       	ldi	r20, 0x03	; 3
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	82 e4       	ldi	r24, 0x42	; 66
    2e12:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2e16:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2e18:	10 92 80 02 	sts	0x0280, r1
    2e1c:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	90 93 78 02 	sts	0x0278, r25
    2e28:	80 93 77 02 	sts	0x0277, r24
    2e2c:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    2e2e:	22 e0       	ldi	r18, 0x02	; 2
    2e30:	43 e0       	ldi	r20, 0x03	; 3
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	81 e4       	ldi	r24, 0x41	; 65
    2e36:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2e3a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2e3c:	10 92 80 02 	sts	0x0280, r1
    2e40:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	90 93 78 02 	sts	0x0278, r25
    2e4c:	80 93 77 02 	sts	0x0277, r24
    2e50:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    2e52:	24 e0       	ldi	r18, 0x04	; 4
    2e54:	43 e0       	ldi	r20, 0x03	; 3
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	85 e4       	ldi	r24, 0x45	; 69
    2e5a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2e5e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2e60:	10 92 80 02 	sts	0x0280, r1
    2e64:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2e68:	84 e0       	ldi	r24, 0x04	; 4
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	90 93 78 02 	sts	0x0278, r25
    2e70:	80 93 77 02 	sts	0x0277, r24
    2e74:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    2e76:	22 e0       	ldi	r18, 0x02	; 2
    2e78:	43 e0       	ldi	r20, 0x03	; 3
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	87 e4       	ldi	r24, 0x47	; 71
    2e7e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    2e82:	25 e0       	ldi	r18, 0x05	; 5
    2e84:	44 e0       	ldi	r20, 0x04	; 4
    2e86:	60 e0       	ldi	r22, 0x00	; 0
    2e88:	83 e4       	ldi	r24, 0x43	; 67
    2e8a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2e8e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2e90:	10 92 80 02 	sts	0x0280, r1
    2e94:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2e98:	88 e0       	ldi	r24, 0x08	; 8
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	90 93 78 02 	sts	0x0278, r25
    2ea0:	80 93 77 02 	sts	0x0277, r24
    2ea4:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    2ea6:	28 e0       	ldi	r18, 0x08	; 8
    2ea8:	42 e0       	ldi	r20, 0x02	; 2
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	87 e4       	ldi	r24, 0x47	; 71
    2eae:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    2eb2:	28 e0       	ldi	r18, 0x08	; 8
    2eb4:	44 e0       	ldi	r20, 0x04	; 4
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	87 e4       	ldi	r24, 0x47	; 71
    2eba:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    2ebe:	24 e0       	ldi	r18, 0x04	; 4
    2ec0:	44 e0       	ldi	r20, 0x04	; 4
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	85 e4       	ldi	r24, 0x45	; 69
    2ec6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    2eca:	22 e0       	ldi	r18, 0x02	; 2
    2ecc:	44 e0       	ldi	r20, 0x04	; 4
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	83 e4       	ldi	r24, 0x43	; 67
    2ed2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2ed6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2ed8:	10 92 80 02 	sts	0x0280, r1
    2edc:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2ee0:	82 e0       	ldi	r24, 0x02	; 2
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	90 93 78 02 	sts	0x0278, r25
    2ee8:	80 93 77 02 	sts	0x0277, r24
    2eec:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    2eee:	22 e0       	ldi	r18, 0x02	; 2
    2ef0:	44 e0       	ldi	r20, 0x04	; 4
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	85 e4       	ldi	r24, 0x45	; 69
    2ef6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2efa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2efc:	10 92 80 02 	sts	0x0280, r1
    2f00:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	90 93 78 02 	sts	0x0278, r25
    2f0c:	80 93 77 02 	sts	0x0277, r24
    2f10:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    2f12:	23 e0       	ldi	r18, 0x03	; 3
    2f14:	44 e0       	ldi	r20, 0x04	; 4
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	85 e4       	ldi	r24, 0x45	; 69
    2f1a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2f1e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2f20:	10 92 80 02 	sts	0x0280, r1
    2f24:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	90 93 78 02 	sts	0x0278, r25
    2f30:	80 93 77 02 	sts	0x0277, r24
    2f34:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    2f36:	21 e0       	ldi	r18, 0x01	; 1
    2f38:	44 e0       	ldi	r20, 0x04	; 4
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	85 e4       	ldi	r24, 0x45	; 69
    2f3e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2f42:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2f44:	10 92 80 02 	sts	0x0280, r1
    2f48:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2f4c:	88 e0       	ldi	r24, 0x08	; 8
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	90 93 78 02 	sts	0x0278, r25
    2f54:	80 93 77 02 	sts	0x0277, r24
    2f58:	08 95       	ret

00002f5a <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    2f5a:	8f 31       	cpi	r24, 0x1F	; 31
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	20 f0       	brcs	.+8      	; 0x2f68 <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	80 93 73 02 	sts	0x0273, r24
    2f66:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    2f68:	fc 01       	movw	r30, r24
    2f6a:	e7 50       	subi	r30, 0x07	; 7
    2f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6e:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2f72:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2f74:	10 92 80 02 	sts	0x0280, r1
    2f78:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	90 93 78 02 	sts	0x0278, r25
    2f84:	80 93 77 02 	sts	0x0277, r24
    2f88:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    2f8a:	24 e0       	ldi	r18, 0x04	; 4
    2f8c:	45 e0       	ldi	r20, 0x05	; 5
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	85 e4       	ldi	r24, 0x45	; 69
    2f92:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    2f96:	27 e0       	ldi	r18, 0x07	; 7
    2f98:	44 e0       	ldi	r20, 0x04	; 4
    2f9a:	60 e0       	ldi	r22, 0x00	; 0
    2f9c:	85 e4       	ldi	r24, 0x45	; 69
    2f9e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    2fa2:	27 e0       	ldi	r18, 0x07	; 7
    2fa4:	44 e0       	ldi	r20, 0x04	; 4
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	85 e4       	ldi	r24, 0x45	; 69
    2faa:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2fae:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    2fb0:	10 92 80 02 	sts	0x0280, r1
    2fb4:	10 92 7f 02 	sts	0x027F, r1
  max_beat = duration;
    2fb8:	85 e0       	ldi	r24, 0x05	; 5
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	90 93 78 02 	sts	0x0278, r25
    2fc0:	80 93 77 02 	sts	0x0277, r24
    2fc4:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    2fc6:	28 e0       	ldi	r18, 0x08	; 8
    2fc8:	45 e0       	ldi	r20, 0x05	; 5
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	85 e4       	ldi	r24, 0x45	; 69
    2fce:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    2fd2:	23 e0       	ldi	r18, 0x03	; 3
    2fd4:	44 e0       	ldi	r20, 0x04	; 4
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	85 e4       	ldi	r24, 0x45	; 69
    2fda:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    2fde:	23 e0       	ldi	r18, 0x03	; 3
    2fe0:	44 e0       	ldi	r20, 0x04	; 4
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	85 e4       	ldi	r24, 0x45	; 69
    2fe6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    2fea:	28 e0       	ldi	r18, 0x08	; 8
    2fec:	45 e0       	ldi	r20, 0x05	; 5
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	87 e4       	ldi	r24, 0x47	; 71
    2ff2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    2ff6:	24 e0       	ldi	r18, 0x04	; 4
    2ff8:	45 e0       	ldi	r20, 0x05	; 5
    2ffa:	61 e0       	ldi	r22, 0x01	; 1
    2ffc:	85 e4       	ldi	r24, 0x45	; 69
    2ffe:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    3002:	23 e0       	ldi	r18, 0x03	; 3
    3004:	45 e0       	ldi	r20, 0x05	; 5
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	85 e4       	ldi	r24, 0x45	; 69
    300a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    300e:	24 e0       	ldi	r18, 0x04	; 4
    3010:	45 e0       	ldi	r20, 0x05	; 5
    3012:	61 e0       	ldi	r22, 0x01	; 1
    3014:	87 e4       	ldi	r24, 0x47	; 71
    3016:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    301a:	28 e0       	ldi	r18, 0x08	; 8
    301c:	45 e0       	ldi	r20, 0x05	; 5
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	87 e4       	ldi	r24, 0x47	; 71
    3022:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <play_note>

00003026 <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    3026:	81 30       	cpi	r24, 0x01	; 1
    3028:	89 f0       	breq	.+34     	; 0x304c <play_song+0x26>
    302a:	60 f0       	brcs	.+24     	; 0x3044 <play_song+0x1e>
    302c:	82 30       	cpi	r24, 0x02	; 2
    302e:	31 f0       	breq	.+12     	; 0x303c <play_song+0x16>
    3030:	83 30       	cpi	r24, 0x03	; 3
    3032:	41 f4       	brne	.+16     	; 0x3044 <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    3034:	86 2f       	mov	r24, r22
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    303c:	86 2f       	mov	r24, r22
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    3044:	86 2f       	mov	r24, r22
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0c 94 29 11 	jmp	0x2252	; 0x2252 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    304c:	86 2f       	mov	r24, r22
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0c 94 0d 12 	jmp	0x241a	; 0x241a <song1>

00003054 <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    3054:	10 92 73 02 	sts	0x0273, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    3058:	8e b5       	in	r24, 0x2e	; 46
    305a:	8c 7f       	andi	r24, 0xFC	; 252
    305c:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    305e:	92 9a       	sbi	0x12, 2	; 18
    3060:	08 95       	ret

00003062 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    3062:	10 92 73 02 	sts	0x0273, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    3066:	8e b5       	in	r24, 0x2e	; 46
    3068:	83 60       	ori	r24, 0x03	; 3
    306a:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    306c:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    306e:	60 91 73 02 	lds	r22, 0x0273
    3072:	80 91 74 02 	lds	r24, 0x0274
    3076:	0c 94 13 18 	jmp	0x3026	; 0x3026 <play_song>

0000307a <music_init>:
    307a:	87 b7       	in	r24, 0x37	; 55
    307c:	80 61       	ori	r24, 0x10	; 16
    307e:	87 bf       	out	0x37, r24	; 55
    3080:	1f bc       	out	0x2f, r1	; 47
    3082:	8e b5       	in	r24, 0x2e	; 46
    3084:	88 60       	ori	r24, 0x08	; 8
    3086:	8e bd       	out	0x2e, r24	; 46
    3088:	10 92 7a 00 	sts	0x007A, r1
    308c:	81 e3       	ldi	r24, 0x31	; 49
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9b bd       	out	0x2b, r25	; 43
    3092:	8a bd       	out	0x2a, r24	; 42
    3094:	10 92 73 02 	sts	0x0273, r1
    3098:	8e b5       	in	r24, 0x2e	; 46
    309a:	8c 7f       	andi	r24, 0xFC	; 252
    309c:	8e bd       	out	0x2e, r24	; 46
    309e:	92 9a       	sbi	0x12, 2	; 18
    30a0:	10 92 80 02 	sts	0x0280, r1
    30a4:	10 92 7f 02 	sts	0x027F, r1
    30a8:	10 92 78 02 	sts	0x0278, r1
    30ac:	10 92 77 02 	sts	0x0277, r1
    30b0:	10 92 73 02 	sts	0x0273, r1
    30b4:	10 92 74 02 	sts	0x0274, r1
    30b8:	08 95       	ret

000030ba <main>:
    30ba:	80 91 61 00 	lds	r24, 0x0061
    30be:	88 60       	ori	r24, 0x08	; 8
    30c0:	80 93 61 00 	sts	0x0061, r24
    30c4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <uart_init>
    30c8:	87 b3       	in	r24, 0x17	; 23
    30ca:	87 60       	ori	r24, 0x07	; 7
    30cc:	87 bb       	out	0x17, r24	; 23
    30ce:	8d b1       	in	r24, 0x0d	; 13
    30d0:	80 65       	ori	r24, 0x50	; 80
    30d2:	8d b9       	out	0x0d, r24	; 13
    30d4:	70 9a       	sbi	0x0e, 0	; 14
    30d6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <clear_display>
    30da:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <cursor_home>
    30de:	0e 94 a9 0a 	call	0x1552	; 0x1552 <init_twi>
    30e2:	13 9a       	sbi	0x02, 3	; 2
    30e4:	1b 9a       	sbi	0x03, 3	; 3
    30e6:	12 9a       	sbi	0x02, 2	; 2
    30e8:	1a 9a       	sbi	0x03, 2	; 3
    30ea:	8a b7       	in	r24, 0x3a	; 58
    30ec:	81 68       	ori	r24, 0x81	; 129
    30ee:	8a bf       	out	0x3a, r24	; 58
    30f0:	89 b7       	in	r24, 0x39	; 57
    30f2:	80 68       	ori	r24, 0x80	; 128
    30f4:	89 bf       	out	0x39, r24	; 57
    30f6:	1f 98       	cbi	0x03, 7	; 3
    30f8:	17 9a       	sbi	0x02, 7	; 2
    30fa:	1a 9a       	sbi	0x03, 2	; 3
    30fc:	82 e4       	ldi	r24, 0x42	; 66
    30fe:	8a 95       	dec	r24
    3100:	f1 f7       	brne	.-4      	; 0x30fe <main+0x44>
    3102:	00 c0       	rjmp	.+0      	; 0x3104 <main+0x4a>
    3104:	1a 98       	cbi	0x03, 2	; 3
    3106:	9a e0       	ldi	r25, 0x0A	; 10
    3108:	9a 95       	dec	r25
    310a:	f1 f7       	brne	.-4      	; 0x3108 <main+0x4e>
    310c:	17 98       	cbi	0x02, 7	; 2
    310e:	80 e9       	ldi	r24, 0x90	; 144
    3110:	80 93 70 03 	sts	0x0370, r24
    3114:	42 e0       	ldi	r20, 0x02	; 2
    3116:	60 e7       	ldi	r22, 0x70	; 112
    3118:	73 e0       	ldi	r23, 0x03	; 3
    311a:	0e 94 87 0a 	call	0x150e	; 0x150e <twi_start_wr>
    311e:	83 ef       	ldi	r24, 0xF3	; 243
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <main+0x68>
    3126:	00 c0       	rjmp	.+0      	; 0x3128 <main+0x6e>
    3128:	00 00       	nop
    312a:	cf ef       	ldi	r28, 0xFF	; 255
    312c:	ca bb       	out	0x1a, r28	; 26
    312e:	87 ef       	ldi	r24, 0xF7	; 247
    3130:	87 bb       	out	0x17, r24	; 23
    3132:	80 ec       	ldi	r24, 0xC0	; 192
    3134:	82 b9       	out	0x02, r24	; 2
    3136:	90 e4       	ldi	r25, 0x40	; 64
    3138:	93 b9       	out	0x03, r25	; 3
    313a:	87 b7       	in	r24, 0x37	; 55
    313c:	81 60       	ori	r24, 0x01	; 1
    313e:	87 bf       	out	0x37, r24	; 55
    3140:	83 b7       	in	r24, 0x33	; 51
    3142:	81 60       	ori	r24, 0x01	; 1
    3144:	83 bf       	out	0x33, r24	; 51
    3146:	80 b7       	in	r24, 0x30	; 48
    3148:	88 60       	ori	r24, 0x08	; 8
    314a:	80 bf       	out	0x30, r24	; 48
    314c:	85 b5       	in	r24, 0x25	; 37
    314e:	8b 66       	ori	r24, 0x6B	; 107
    3150:	85 bd       	out	0x25, r24	; 37
    3152:	80 91 61 00 	lds	r24, 0x0061
    3156:	81 60       	ori	r24, 0x01	; 1
    3158:	80 93 61 00 	sts	0x0061, r24
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	80 93 62 00 	sts	0x0062, r24
    3162:	97 b9       	out	0x07, r25	; 7
    3164:	8f e8       	ldi	r24, 0x8F	; 143
    3166:	86 b9       	out	0x06, r24	; 6
    3168:	80 e5       	ldi	r24, 0x50	; 80
    316a:	8d b9       	out	0x0d, r24	; 13
    316c:	c1 bb       	out	0x11, r28	; 17
    316e:	0e 94 3d 18 	call	0x307a	; 0x307a <music_init>
    3172:	13 9a       	sbi	0x02, 3	; 2
    3174:	80 91 8b 00 	lds	r24, 0x008B
    3178:	82 68       	ori	r24, 0x82	; 130
    317a:	80 93 8b 00 	sts	0x008B, r24
    317e:	80 91 8a 00 	lds	r24, 0x008A
    3182:	8a 60       	ori	r24, 0x0A	; 10
    3184:	80 93 8a 00 	sts	0x008A, r24
    3188:	80 91 8c 00 	lds	r24, 0x008C
    318c:	80 93 8c 00 	sts	0x008C, r24
    3190:	88 ee       	ldi	r24, 0xE8	; 232
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	90 93 87 00 	sts	0x0087, r25
    3198:	80 93 86 00 	sts	0x0086, r24
    319c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <lcd_init>
    31a0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <clear_display>
    31a4:	8b e2       	ldi	r24, 0x2B	; 43
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	0e 94 07 0c 	call	0x180e	; 0x180e <string2lcd>
    31ac:	78 94       	sei
    31ae:	ca bb       	out	0x1a, r28	; 26
    31b0:	80 e7       	ldi	r24, 0x70	; 112
    31b2:	88 bb       	out	0x18, r24	; 24
    31b4:	78 94       	sei
    31b6:	06 e0       	ldi	r16, 0x06	; 6
    31b8:	17 e2       	ldi	r17, 0x27	; 39
    31ba:	c1 e0       	ldi	r28, 0x01	; 1
    31bc:	d0 e0       	ldi	r29, 0x00	; 0
    31be:	8c e0       	ldi	r24, 0x0C	; 12
    31c0:	d8 2e       	mov	r13, r24
    31c2:	98 e0       	ldi	r25, 0x08	; 8
    31c4:	b9 2e       	mov	r11, r25
    31c6:	2c eb       	ldi	r18, 0xBC	; 188
    31c8:	e2 2e       	mov	r14, r18
    31ca:	22 e0       	ldi	r18, 0x02	; 2
    31cc:	f2 2e       	mov	r15, r18
    31ce:	aa 24       	eor	r10, r10
    31d0:	a3 94       	inc	r10
    31d2:	3a e0       	ldi	r19, 0x0A	; 10
    31d4:	c3 2e       	mov	r12, r19
    31d6:	22 c0       	rjmp	.+68     	; 0x321c <main+0x162>
    31d8:	90 91 4f 02 	lds	r25, 0x024F
    31dc:	91 11       	cpse	r25, r1
    31de:	5d c0       	rjmp	.+186    	; 0x329a <main+0x1e0>
    31e0:	81 30       	cpi	r24, 0x01	; 1
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <main+0x12c>
    31e4:	72 c0       	rjmp	.+228    	; 0x32ca <main+0x210>
    31e6:	0e 94 c7 03 	call	0x78e	; 0x78e <display_digits>
    31ea:	e7 ec       	ldi	r30, 0xC7	; 199
    31ec:	f1 e0       	ldi	r31, 0x01	; 1
    31ee:	af e5       	ldi	r26, 0x5F	; 95
    31f0:	b2 e0       	ldi	r27, 0x02	; 2
    31f2:	8d 2d       	mov	r24, r13
    31f4:	01 90       	ld	r0, Z+
    31f6:	0d 92       	st	X+, r0
    31f8:	8a 95       	dec	r24
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <main+0x13a>
    31fc:	0e 94 2a 18 	call	0x3054	; 0x3054 <music_off>
    3200:	10 92 4a 02 	sts	0x024A, r1
    3204:	0e 94 a8 05 	call	0xb50	; 0xb50 <lcd_control>
    3208:	90 91 25 01 	lds	r25, 0x0125
    320c:	80 91 24 01 	lds	r24, 0x0124
    3210:	98 17       	cp	r25, r24
    3212:	d1 f1       	breq	.+116    	; 0x3288 <main+0x1ce>
    3214:	10 92 4f 02 	sts	0x024F, r1
    3218:	0e 94 65 05 	call	0xaca	; 0xaca <checker>
    321c:	80 91 47 02 	lds	r24, 0x0247
    3220:	20 91 45 02 	lds	r18, 0x0245
    3224:	30 91 46 02 	lds	r19, 0x0246
    3228:	23 2b       	or	r18, r19
    322a:	81 f4       	brne	.+32     	; 0x324c <main+0x192>
    322c:	81 30       	cpi	r24, 0x01	; 1
    322e:	71 f4       	brne	.+28     	; 0x324c <main+0x192>
    3230:	0e 94 87 08 	call	0x110e	; 0x110e <fm_pwr_up>
    3234:	10 93 ff 02 	sts	0x02FF, r17
    3238:	00 93 fe 02 	sts	0x02FE, r16
    323c:	0e 94 67 07 	call	0xece	; 0xece <fm_tune_freq>
    3240:	d0 93 46 02 	sts	0x0246, r29
    3244:	c0 93 45 02 	sts	0x0245, r28
    3248:	80 91 47 02 	lds	r24, 0x0247
    324c:	81 11       	cpse	r24, r1
    324e:	04 c0       	rjmp	.+8      	; 0x3258 <main+0x19e>
    3250:	10 92 46 02 	sts	0x0246, r1
    3254:	10 92 45 02 	sts	0x0245, r1
    3258:	90 91 79 02 	lds	r25, 0x0279
    325c:	99 23       	and	r25, r25
    325e:	09 f4       	brne	.+2      	; 0x3262 <main+0x1a8>
    3260:	bb cf       	rjmp	.-138    	; 0x31d8 <main+0x11e>
    3262:	0e 94 0e 03 	call	0x61c	; 0x61c <display_alarm>
    3266:	e4 e3       	ldi	r30, 0x34	; 52
    3268:	f1 e0       	ldi	r31, 0x01	; 1
    326a:	af e5       	ldi	r26, 0x5F	; 95
    326c:	b2 e0       	ldi	r27, 0x02	; 2
    326e:	8c 2d       	mov	r24, r12
    3270:	01 90       	ld	r0, Z+
    3272:	0d 92       	st	X+, r0
    3274:	8a 95       	dec	r24
    3276:	e1 f7       	brne	.-8      	; 0x3270 <main+0x1b6>
    3278:	0e 94 a8 05 	call	0xb50	; 0xb50 <lcd_control>
    327c:	90 91 25 01 	lds	r25, 0x0125
    3280:	80 91 24 01 	lds	r24, 0x0124
    3284:	98 13       	cpse	r25, r24
    3286:	c6 cf       	rjmp	.-116    	; 0x3214 <main+0x15a>
    3288:	90 91 50 02 	lds	r25, 0x0250
    328c:	80 91 23 01 	lds	r24, 0x0123
    3290:	98 13       	cpse	r25, r24
    3292:	c0 cf       	rjmp	.-128    	; 0x3214 <main+0x15a>
    3294:	a0 92 4f 02 	sts	0x024F, r10
    3298:	bf cf       	rjmp	.-130    	; 0x3218 <main+0x15e>
    329a:	0e 94 c7 03 	call	0x78e	; 0x78e <display_digits>
    329e:	ee e3       	ldi	r30, 0x3E	; 62
    32a0:	f1 e0       	ldi	r31, 0x01	; 1
    32a2:	af e5       	ldi	r26, 0x5F	; 95
    32a4:	b2 e0       	ldi	r27, 0x02	; 2
    32a6:	8b 2d       	mov	r24, r11
    32a8:	01 90       	ld	r0, Z+
    32aa:	0d 92       	st	X+, r0
    32ac:	8a 95       	dec	r24
    32ae:	e1 f7       	brne	.-8      	; 0x32a8 <main+0x1ee>
    32b0:	f0 92 21 01 	sts	0x0121, r15
    32b4:	e0 92 20 01 	sts	0x0120, r14
    32b8:	80 91 4a 02 	lds	r24, 0x024A
    32bc:	81 11       	cpse	r24, r1
    32be:	a2 cf       	rjmp	.-188    	; 0x3204 <main+0x14a>
    32c0:	0e 94 31 18 	call	0x3062	; 0x3062 <music_on>
    32c4:	a0 92 4a 02 	sts	0x024A, r10
    32c8:	9d cf       	rjmp	.-198    	; 0x3204 <main+0x14a>
    32ca:	0e 94 a1 02 	call	0x542	; 0x542 <display_freq>
    32ce:	9a cf       	rjmp	.-204    	; 0x3204 <main+0x14a>

000032d0 <__divmodhi4>:
    32d0:	97 fb       	bst	r25, 7
    32d2:	07 2e       	mov	r0, r23
    32d4:	16 f4       	brtc	.+4      	; 0x32da <__divmodhi4+0xa>
    32d6:	00 94       	com	r0
    32d8:	07 d0       	rcall	.+14     	; 0x32e8 <__divmodhi4_neg1>
    32da:	77 fd       	sbrc	r23, 7
    32dc:	09 d0       	rcall	.+18     	; 0x32f0 <__divmodhi4_neg2>
    32de:	0e 94 b3 19 	call	0x3366	; 0x3366 <__udivmodhi4>
    32e2:	07 fc       	sbrc	r0, 7
    32e4:	05 d0       	rcall	.+10     	; 0x32f0 <__divmodhi4_neg2>
    32e6:	3e f4       	brtc	.+14     	; 0x32f6 <__divmodhi4_exit>

000032e8 <__divmodhi4_neg1>:
    32e8:	90 95       	com	r25
    32ea:	81 95       	neg	r24
    32ec:	9f 4f       	sbci	r25, 0xFF	; 255
    32ee:	08 95       	ret

000032f0 <__divmodhi4_neg2>:
    32f0:	70 95       	com	r23
    32f2:	61 95       	neg	r22
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255

000032f6 <__divmodhi4_exit>:
    32f6:	08 95       	ret

000032f8 <__divmodsi4>:
    32f8:	05 2e       	mov	r0, r21
    32fa:	97 fb       	bst	r25, 7
    32fc:	1e f4       	brtc	.+6      	; 0x3304 <__divmodsi4+0xc>
    32fe:	00 94       	com	r0
    3300:	0e 94 93 19 	call	0x3326	; 0x3326 <__negsi2>
    3304:	57 fd       	sbrc	r21, 7
    3306:	07 d0       	rcall	.+14     	; 0x3316 <__divmodsi4_neg2>
    3308:	0e 94 c7 19 	call	0x338e	; 0x338e <__udivmodsi4>
    330c:	07 fc       	sbrc	r0, 7
    330e:	03 d0       	rcall	.+6      	; 0x3316 <__divmodsi4_neg2>
    3310:	4e f4       	brtc	.+18     	; 0x3324 <__divmodsi4_exit>
    3312:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__negsi2>

00003316 <__divmodsi4_neg2>:
    3316:	50 95       	com	r21
    3318:	40 95       	com	r20
    331a:	30 95       	com	r19
    331c:	21 95       	neg	r18
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	4f 4f       	sbci	r20, 0xFF	; 255
    3322:	5f 4f       	sbci	r21, 0xFF	; 255

00003324 <__divmodsi4_exit>:
    3324:	08 95       	ret

00003326 <__negsi2>:
    3326:	90 95       	com	r25
    3328:	80 95       	com	r24
    332a:	70 95       	com	r23
    332c:	61 95       	neg	r22
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	8f 4f       	sbci	r24, 0xFF	; 255
    3332:	9f 4f       	sbci	r25, 0xFF	; 255
    3334:	08 95       	ret

00003336 <__tablejump2__>:
    3336:	ee 0f       	add	r30, r30
    3338:	ff 1f       	adc	r31, r31
    333a:	00 24       	eor	r0, r0
    333c:	00 1c       	adc	r0, r0
    333e:	0b be       	out	0x3b, r0	; 59
    3340:	07 90       	elpm	r0, Z+
    3342:	f6 91       	elpm	r31, Z
    3344:	e0 2d       	mov	r30, r0
    3346:	09 94       	ijmp

00003348 <__umulhisi3>:
    3348:	a2 9f       	mul	r26, r18
    334a:	b0 01       	movw	r22, r0
    334c:	b3 9f       	mul	r27, r19
    334e:	c0 01       	movw	r24, r0
    3350:	a3 9f       	mul	r26, r19
    3352:	70 0d       	add	r23, r0
    3354:	81 1d       	adc	r24, r1
    3356:	11 24       	eor	r1, r1
    3358:	91 1d       	adc	r25, r1
    335a:	b2 9f       	mul	r27, r18
    335c:	70 0d       	add	r23, r0
    335e:	81 1d       	adc	r24, r1
    3360:	11 24       	eor	r1, r1
    3362:	91 1d       	adc	r25, r1
    3364:	08 95       	ret

00003366 <__udivmodhi4>:
    3366:	aa 1b       	sub	r26, r26
    3368:	bb 1b       	sub	r27, r27
    336a:	51 e1       	ldi	r21, 0x11	; 17
    336c:	07 c0       	rjmp	.+14     	; 0x337c <__udivmodhi4_ep>

0000336e <__udivmodhi4_loop>:
    336e:	aa 1f       	adc	r26, r26
    3370:	bb 1f       	adc	r27, r27
    3372:	a6 17       	cp	r26, r22
    3374:	b7 07       	cpc	r27, r23
    3376:	10 f0       	brcs	.+4      	; 0x337c <__udivmodhi4_ep>
    3378:	a6 1b       	sub	r26, r22
    337a:	b7 0b       	sbc	r27, r23

0000337c <__udivmodhi4_ep>:
    337c:	88 1f       	adc	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	5a 95       	dec	r21
    3382:	a9 f7       	brne	.-22     	; 0x336e <__udivmodhi4_loop>
    3384:	80 95       	com	r24
    3386:	90 95       	com	r25
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	08 95       	ret

0000338e <__udivmodsi4>:
    338e:	a1 e2       	ldi	r26, 0x21	; 33
    3390:	1a 2e       	mov	r1, r26
    3392:	aa 1b       	sub	r26, r26
    3394:	bb 1b       	sub	r27, r27
    3396:	fd 01       	movw	r30, r26
    3398:	0d c0       	rjmp	.+26     	; 0x33b4 <__udivmodsi4_ep>

0000339a <__udivmodsi4_loop>:
    339a:	aa 1f       	adc	r26, r26
    339c:	bb 1f       	adc	r27, r27
    339e:	ee 1f       	adc	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	a2 17       	cp	r26, r18
    33a4:	b3 07       	cpc	r27, r19
    33a6:	e4 07       	cpc	r30, r20
    33a8:	f5 07       	cpc	r31, r21
    33aa:	20 f0       	brcs	.+8      	; 0x33b4 <__udivmodsi4_ep>
    33ac:	a2 1b       	sub	r26, r18
    33ae:	b3 0b       	sbc	r27, r19
    33b0:	e4 0b       	sbc	r30, r20
    33b2:	f5 0b       	sbc	r31, r21

000033b4 <__udivmodsi4_ep>:
    33b4:	66 1f       	adc	r22, r22
    33b6:	77 1f       	adc	r23, r23
    33b8:	88 1f       	adc	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	1a 94       	dec	r1
    33be:	69 f7       	brne	.-38     	; 0x339a <__udivmodsi4_loop>
    33c0:	60 95       	com	r22
    33c2:	70 95       	com	r23
    33c4:	80 95       	com	r24
    33c6:	90 95       	com	r25
    33c8:	9b 01       	movw	r18, r22
    33ca:	ac 01       	movw	r20, r24
    33cc:	bd 01       	movw	r22, r26
    33ce:	cf 01       	movw	r24, r30
    33d0:	08 95       	ret

000033d2 <strcmp>:
    33d2:	fb 01       	movw	r30, r22
    33d4:	dc 01       	movw	r26, r24
    33d6:	8d 91       	ld	r24, X+
    33d8:	01 90       	ld	r0, Z+
    33da:	80 19       	sub	r24, r0
    33dc:	01 10       	cpse	r0, r1
    33de:	d9 f3       	breq	.-10     	; 0x33d6 <strcmp+0x4>
    33e0:	99 0b       	sbc	r25, r25
    33e2:	08 95       	ret

000033e4 <strcpy>:
    33e4:	fb 01       	movw	r30, r22
    33e6:	dc 01       	movw	r26, r24
    33e8:	01 90       	ld	r0, Z+
    33ea:	0d 92       	st	X+, r0
    33ec:	00 20       	and	r0, r0
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <strcpy+0x4>
    33f0:	08 95       	ret

000033f2 <__itoa_ncheck>:
    33f2:	bb 27       	eor	r27, r27
    33f4:	4a 30       	cpi	r20, 0x0A	; 10
    33f6:	31 f4       	brne	.+12     	; 0x3404 <__itoa_ncheck+0x12>
    33f8:	99 23       	and	r25, r25
    33fa:	22 f4       	brpl	.+8      	; 0x3404 <__itoa_ncheck+0x12>
    33fc:	bd e2       	ldi	r27, 0x2D	; 45
    33fe:	90 95       	com	r25
    3400:	81 95       	neg	r24
    3402:	9f 4f       	sbci	r25, 0xFF	; 255
    3404:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__utoa_common>

00003408 <__utoa_ncheck>:
    3408:	bb 27       	eor	r27, r27

0000340a <__utoa_common>:
    340a:	fb 01       	movw	r30, r22
    340c:	55 27       	eor	r21, r21
    340e:	aa 27       	eor	r26, r26
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	aa 1f       	adc	r26, r26
    3416:	a4 17       	cp	r26, r20
    3418:	10 f0       	brcs	.+4      	; 0x341e <__utoa_common+0x14>
    341a:	a4 1b       	sub	r26, r20
    341c:	83 95       	inc	r24
    341e:	50 51       	subi	r21, 0x10	; 16
    3420:	b9 f7       	brne	.-18     	; 0x3410 <__utoa_common+0x6>
    3422:	a0 5d       	subi	r26, 0xD0	; 208
    3424:	aa 33       	cpi	r26, 0x3A	; 58
    3426:	08 f0       	brcs	.+2      	; 0x342a <__utoa_common+0x20>
    3428:	a9 5d       	subi	r26, 0xD9	; 217
    342a:	a1 93       	st	Z+, r26
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	79 f7       	brne	.-34     	; 0x340e <__utoa_common+0x4>
    3430:	b1 11       	cpse	r27, r1
    3432:	b1 93       	st	Z+, r27
    3434:	11 92       	st	Z+, r1
    3436:	cb 01       	movw	r24, r22
    3438:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <strrev>

0000343c <strrev>:
    343c:	dc 01       	movw	r26, r24
    343e:	fc 01       	movw	r30, r24
    3440:	67 2f       	mov	r22, r23
    3442:	71 91       	ld	r23, Z+
    3444:	77 23       	and	r23, r23
    3446:	e1 f7       	brne	.-8      	; 0x3440 <strrev+0x4>
    3448:	32 97       	sbiw	r30, 0x02	; 2
    344a:	04 c0       	rjmp	.+8      	; 0x3454 <strrev+0x18>
    344c:	7c 91       	ld	r23, X
    344e:	6d 93       	st	X+, r22
    3450:	70 83       	st	Z, r23
    3452:	62 91       	ld	r22, -Z
    3454:	ae 17       	cp	r26, r30
    3456:	bf 07       	cpc	r27, r31
    3458:	c8 f3       	brcs	.-14     	; 0x344c <strrev+0x10>
    345a:	08 95       	ret

0000345c <eeprom_read_byte>:
    345c:	e1 99       	sbic	0x1c, 1	; 28
    345e:	fe cf       	rjmp	.-4      	; 0x345c <eeprom_read_byte>
    3460:	9f bb       	out	0x1f, r25	; 31
    3462:	8e bb       	out	0x1e, r24	; 30
    3464:	e0 9a       	sbi	0x1c, 0	; 28
    3466:	99 27       	eor	r25, r25
    3468:	8d b3       	in	r24, 0x1d	; 29
    346a:	08 95       	ret

0000346c <eeprom_read_word>:
    346c:	a8 e1       	ldi	r26, 0x18	; 24
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	42 e0       	ldi	r20, 0x02	; 2
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <eeprom_read_blraw>

00003478 <eeprom_write_byte>:
    3478:	26 2f       	mov	r18, r22

0000347a <eeprom_write_r18>:
    347a:	e1 99       	sbic	0x1c, 1	; 28
    347c:	fe cf       	rjmp	.-4      	; 0x347a <eeprom_write_r18>
    347e:	9f bb       	out	0x1f, r25	; 31
    3480:	8e bb       	out	0x1e, r24	; 30
    3482:	2d bb       	out	0x1d, r18	; 29
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	e2 9a       	sbi	0x1c, 2	; 28
    348a:	e1 9a       	sbi	0x1c, 1	; 28
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	01 96       	adiw	r24, 0x01	; 1
    3490:	08 95       	ret

00003492 <eeprom_write_word>:
    3492:	0e 94 3c 1a 	call	0x3478	; 0x3478 <eeprom_write_byte>
    3496:	27 2f       	mov	r18, r23
    3498:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <eeprom_write_r18>

0000349c <eeprom_read_block>:
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22

000034a0 <eeprom_read_blraw>:
    34a0:	fc 01       	movw	r30, r24
    34a2:	e1 99       	sbic	0x1c, 1	; 28
    34a4:	fe cf       	rjmp	.-4      	; 0x34a2 <eeprom_read_blraw+0x2>
    34a6:	06 c0       	rjmp	.+12     	; 0x34b4 <eeprom_read_blraw+0x14>
    34a8:	ff bb       	out	0x1f, r31	; 31
    34aa:	ee bb       	out	0x1e, r30	; 30
    34ac:	e0 9a       	sbi	0x1c, 0	; 28
    34ae:	31 96       	adiw	r30, 0x01	; 1
    34b0:	0d b2       	in	r0, 0x1d	; 29
    34b2:	0d 92       	st	X+, r0
    34b4:	41 50       	subi	r20, 0x01	; 1
    34b6:	50 40       	sbci	r21, 0x00	; 0
    34b8:	b8 f7       	brcc	.-18     	; 0x34a8 <eeprom_read_blraw+0x8>
    34ba:	08 95       	ret

000034bc <_exit>:
    34bc:	f8 94       	cli

000034be <__stop_program>:
    34be:	ff cf       	rjmp	.-2      	; 0x34be <__stop_program>
