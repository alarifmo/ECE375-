
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  00002238  000022cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  008001c8  008001c8  00002394  2**0
                  ALLOC
  3 .stab         000042a8  00000000  00000000  00002394  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001881  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007ebd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007ed0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e3       	ldi	r30, 0x38	; 56
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3c       	cpi	r26, 0xC8	; 200
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 ec       	ldi	r26, 0xC8	; 200
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 38       	cpi	r26, 0x8C	; 140
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <main>
      c6:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SET_DIGIT_DOT>:
uint8_t randoTest = 0;
uint8_t inc2Bool = 0x00;
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
      ce:	c5 9a       	sbi	0x18, 5	; 24
      d0:	88 b3       	in	r24, 0x18	; 24
      d2:	8f 7a       	andi	r24, 0xAF	; 175
      d4:	88 bb       	out	0x18, r24	; 24
      d6:	08 95       	ret

000000d8 <SET_DIGIT_ONE>:
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
      d8:	c6 9a       	sbi	0x18, 6	; 24
      da:	88 b3       	in	r24, 0x18	; 24
      dc:	8f 7c       	andi	r24, 0xCF	; 207
      de:	88 bb       	out	0x18, r24	; 24
      e0:	08 95       	ret

000000e2 <SET_DIGIT_TWO>:
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
      e2:	88 b3       	in	r24, 0x18	; 24
      e4:	80 63       	ori	r24, 0x30	; 48
      e6:	88 bb       	out	0x18, r24	; 24
      e8:	c6 98       	cbi	0x18, 6	; 24
      ea:	08 95       	ret

000000ec <SET_DIGIT_THREE>:
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
      ec:	c4 9a       	sbi	0x18, 4	; 24
      ee:	88 b3       	in	r24, 0x18	; 24
      f0:	8f 79       	andi	r24, 0x9F	; 159
      f2:	88 bb       	out	0x18, r24	; 24
      f4:	08 95       	ret

000000f6 <SET_DIGIT_FOUR>:
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}
      f6:	88 b3       	in	r24, 0x18	; 24
      f8:	8f 78       	andi	r24, 0x8F	; 143
      fa:	88 bb       	out	0x18, r24	; 24
      fc:	08 95       	ret

000000fe <ENABLE_BUFFER>:

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}
      fe:	88 b3       	in	r24, 0x18	; 24
     100:	80 67       	ori	r24, 0x70	; 112
     102:	88 bb       	out	0x18, r24	; 24
     104:	08 95       	ret

00000106 <ENABLE_LED_CONTROL>:

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     10a:	c4 9a       	sbi	0x18, 4	; 24
     10c:	88 b3       	in	r24, 0x18	; 24
     10e:	8f 79       	andi	r24, 0x9F	; 159
     110:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     112:	c6 9a       	sbi	0x18, 6	; 24
     114:	08 95       	ret

00000116 <ENABLE_BUTTON_READ>:
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	8b bb       	out	0x1b, r24	; 27
     11a:	1a ba       	out	0x1a, r1	; 26
     11c:	08 95       	ret

0000011e <ENC_CLK_ENABLE>:

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
     11e:	1e 98       	cbi	0x03, 6	; 3
     120:	08 95       	ret

00000122 <ENC_CLK_DISABLE>:
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
     122:	1e 9a       	sbi	0x03, 6	; 3
     124:	08 95       	ret

00000126 <ENC_PARALLEL_ENABLE>:

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
     126:	1f 98       	cbi	0x03, 7	; 3
     128:	08 95       	ret

0000012a <ENC_PARALLEL_DISABLE>:
void inline ENC_PARALLEL_DISABLE(void) {PORTE |=   0x80 ;}
     12a:	1f 9a       	sbi	0x03, 7	; 3
     12c:	08 95       	ret

0000012e <SET_VOLUME>:

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     12e:	68 2f       	mov	r22, r24
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 1a 10 	call	0x2034	; 0x2034 <__floatsisf>
     13a:	2a e9       	ldi	r18, 0x9A	; 154
     13c:	39 e9       	ldi	r19, 0x99	; 153
     13e:	49 e8       	ldi	r20, 0x89	; 137
     140:	50 e4       	ldi	r21, 0x40	; 64
     142:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__addsf3>
     150:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fixunssfsi>
     154:	70 93 87 00 	sts	0x0087, r23
     158:	60 93 86 00 	sts	0x0086, r22
     15c:	08 95       	ret

0000015e <SET_HZ>:
void inline SET_HZ(uint16_t targetHz) {OCR1A = targetHz * 50;}
     15e:	22 e3       	ldi	r18, 0x32	; 50
     160:	ac 01       	movw	r20, r24
     162:	24 9f       	mul	r18, r20
     164:	c0 01       	movw	r24, r0
     166:	25 9f       	mul	r18, r21
     168:	90 0d       	add	r25, r0
     16a:	11 24       	eor	r1, r1
     16c:	9b bd       	out	0x2b, r25	; 43
     16e:	8a bd       	out	0x2a, r24	; 42
     170:	08 95       	ret

00000172 <setLEDBrightness>:
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     172:	83 bd       	out	0x23, r24	; 35
     174:	08 95       	ret

00000176 <START_ADC_READ>:
void inline START_ADC_READ(void){ADCSRA |= (1<<ADSC);}  //Starts the read from the ADC (takes ~108uS)
     176:	36 9a       	sbi	0x06, 6	; 6
     178:	08 95       	ret

0000017a <FINISH_ADC_READ>:
void inline FINISH_ADC_READ(void){while(bit_is_clear(ADCSRA, ADIF)); ADCSRA |= (1<<ADIF); lastADCread = ADC;}
     17a:	34 9b       	sbis	0x06, 4	; 6
     17c:	fe cf       	rjmp	.-4      	; 0x17a <FINISH_ADC_READ>
     17e:	34 9a       	sbi	0x06, 4	; 6
     180:	84 b1       	in	r24, 0x04	; 4
     182:	95 b1       	in	r25, 0x05	; 5
     184:	90 93 3e 01 	sts	0x013E, r25
     188:	80 93 3d 01 	sts	0x013D, r24
     18c:	08 95       	ret

0000018e <processLCD>:
//This was a function used by me to async update the LCD, however I ended up
//using a modified version of the code that Traylor provided on his GitHub
void inline processLCD(){

    //Output to LCD
    ++lcdCounter;
     18e:	e0 91 ca 01 	lds	r30, 0x01CA
     192:	ef 5f       	subi	r30, 0xFF	; 255
     194:	e0 93 ca 01 	sts	0x01CA, r30
    if(lcdCounter == 16){
     198:	e0 31       	cpi	r30, 0x10	; 16
     19a:	99 f0       	breq	.+38     	; 0x1c2 <processLCD+0x34>
      line2_col1();
      char2lcd('7');
      char2lcd('7');
      //cursor_home();
    }
    else if(lcdCounter == 33){
     19c:	e1 32       	cpi	r30, 0x21	; 33
     19e:	31 f0       	breq	.+12     	; 0x1ac <processLCD+0x1e>
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
      cursor_home();//line1_col1();
      lcdCounter = 0;
    }
    

    char2lcd(lcdOutput[lcdCounter]);
     1a2:	e1 5d       	subi	r30, 0xD1	; 209
     1a4:	fd 4f       	sbci	r31, 0xFD	; 253
     1a6:	80 81       	ld	r24, Z
     1a8:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <char2lcd>
      char2lcd('7');
      char2lcd('7');
      //cursor_home();
    }
    else if(lcdCounter == 33){
      cursor_home();//line1_col1();
     1ac:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <cursor_home>
      lcdCounter = 0;
     1b0:	10 92 ca 01 	sts	0x01CA, r1
     1b4:	e0 e0       	ldi	r30, 0x00	; 0
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
    }
    

    char2lcd(lcdOutput[lcdCounter]);
     1b8:	e1 5d       	subi	r30, 0xD1	; 209
     1ba:	fd 4f       	sbci	r31, 0xFD	; 253
     1bc:	80 81       	ld	r24, Z
     1be:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <char2lcd>

    //Output to LCD
    ++lcdCounter;
    if(lcdCounter == 16){
      //lcdCounter = 0;
      line2_col1();
     1c2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <line2_col1>
      char2lcd('7');
     1c6:	87 e3       	ldi	r24, 0x37	; 55
     1c8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <char2lcd>
      char2lcd('7');
     1cc:	87 e3       	ldi	r24, 0x37	; 55
     1ce:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <char2lcd>
     1d2:	e0 91 ca 01 	lds	r30, 0x01CA
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	e4 cf       	rjmp	.-56     	; 0x1a2 <processLCD+0x14>

000001da <configureIO>:

    char2lcd(lcdOutput[lcdCounter]);
}

//Configures the device IO (port directions and intializes some outputs)
void configureIO( void ){
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     1e2:	c4 9a       	sbi	0x18, 4	; 24
     1e4:	88 b3       	in	r24, 0x18	; 24
     1e6:	8f 79       	andi	r24, 0x9F	; 159
     1e8:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
     1ea:	c6 9a       	sbi	0x18, 6	; 24
void configureIO( void ){

  ENABLE_LED_CONTROL(); 

  //DDRA = 0xFF; //Initialize DDRA as if we want to control the LEDs
  DDRB  = 0xF0; //Upper nibble of the B register is for controlling the decoder / PWM Transistor
     1ec:	80 ef       	ldi	r24, 0xF0	; 240
     1ee:	87 bb       	out	0x17, r24	; 23

  DDRB |= 0x07;  //Setup the SPI pins as outputs
     1f0:	87 b3       	in	r24, 0x17	; 23
     1f2:	87 60       	ori	r24, 0x07	; 7
     1f4:	87 bb       	out	0x17, r24	; 23

  //Setup ADC input
  DDRF  &= ~0x01;  //Setup pin 0 as an input (just in case)
     1f6:	c1 e6       	ldi	r28, 0x61	; 97
     1f8:	d0 e0       	ldi	r29, 0x00	; 0
     1fa:	88 81       	ld	r24, Y
     1fc:	8e 7f       	andi	r24, 0xFE	; 254
     1fe:	88 83       	st	Y, r24
  PORTF &= ~0x01;  //Pullups must be off     (just in case)
     200:	a2 e6       	ldi	r26, 0x62	; 98
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	8c 91       	ld	r24, X
     206:	8e 7f       	andi	r24, 0xFE	; 254
     208:	8c 93       	st	X, r24

  //Audio output pin
  DDRD |= AUDIO_OUT;    //Pin 4 as an output
     20a:	8c 9a       	sbi	0x11, 4	; 17

  //Volume control pin
  DDRE |= 0x08;
     20c:	13 9a       	sbi	0x02, 3	; 2

  uint8_t i;

  //Init output to 0
  for(i = 0; i < 5; ++i){
    output[i] = 0;
     20e:	ef ee       	ldi	r30, 0xEF	; 239
     210:	f1 e0       	ldi	r31, 0x01	; 1
     212:	10 82       	st	Z, r1
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	12 82       	std	Z+2, r1	; 0x02
     218:	13 82       	std	Z+3, r1	; 0x03
     21a:	14 82       	std	Z+4, r1	; 0x04
     21c:	15 82       	std	Z+5, r1	; 0x05
     21e:	16 82       	std	Z+6, r1	; 0x06
     220:	17 82       	std	Z+7, r1	; 0x07
     222:	10 86       	std	Z+8, r1	; 0x08
     224:	11 86       	std	Z+9, r1	; 0x09
     226:	12 86       	std	Z+10, r1	; 0x0a
     228:	13 86       	std	Z+11, r1	; 0x0b
     22a:	14 86       	std	Z+12, r1	; 0x0c
     22c:	15 86       	std	Z+13, r1	; 0x0d
     22e:	16 86       	std	Z+14, r1	; 0x0e
     230:	17 86       	std	Z+15, r1	; 0x0f
     232:	10 8a       	std	Z+16, r1	; 0x10
     234:	11 8a       	std	Z+17, r1	; 0x11
     236:	12 8a       	std	Z+18, r1	; 0x12
     238:	13 8a       	std	Z+19, r1	; 0x13
  }

  DDRE |= 0xC0;  //Enable Clk inhibit pin and async pin as outputs
     23a:	82 b1       	in	r24, 0x02	; 2
     23c:	80 6c       	ori	r24, 0xC0	; 192
     23e:	82 b9       	out	0x02, r24	; 2
//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
     240:	1e 9a       	sbi	0x03, 6	; 3

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
     242:	1f 98       	cbi	0x03, 7	; 3
  DDRE |= 0xC0;  //Enable Clk inhibit pin and async pin as outputs
  ENC_CLK_DISABLE();
  ENC_PARALLEL_ENABLE();


  DDRF |=   DEBUG_PIN; //Enable PORTF PINX as a debug output
     244:	88 81       	ld	r24, Y
     246:	82 60       	ori	r24, 0x02	; 2
     248:	88 83       	st	Y, r24
  DEBUG_LOW();  //Set the pin low to start
     24a:	8c 91       	ld	r24, X
     24c:	8d 7f       	andi	r24, 0xFD	; 253
     24e:	8c 93       	st	X, r24
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <configureTimers>:

//Configures all timer/counters on the device
void configureTimers( void ){
  ////Polling loop
  //Enable TCC0 to be clocked from an external osc,
  ASSR |= (1<<AS0);
     256:	80 b7       	in	r24, 0x30	; 48
     258:	88 60       	ori	r24, 0x08	; 8
     25a:	80 bf       	out	0x30, r24	; 48
  //Enable coutner in normal mode with no prescaler
  TCCR0 = (0<<CS02) | (0<<CS01) | (1<<CS00);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	83 bf       	out	0x33, r24	; 51

  //Wait for all ascynch warning bits to clear
  while(bit_is_set(ASSR, TCN0UB));
     260:	00 b6       	in	r0, 0x30	; 48
     262:	02 fc       	sbrc	r0, 2
     264:	fd cf       	rjmp	.-6      	; 0x260 <configureTimers+0xa>
  while(bit_is_set(ASSR, OCR0UB));
     266:	00 b6       	in	r0, 0x30	; 48
     268:	01 fc       	sbrc	r0, 1
     26a:	fd cf       	rjmp	.-6      	; 0x266 <configureTimers+0x10>
  while(bit_is_set(ASSR, TCR0UB));
     26c:	00 b6       	in	r0, 0x30	; 48
     26e:	00 fc       	sbrc	r0, 0
     270:	fd cf       	rjmp	.-6      	; 0x26c <configureTimers+0x16>

  //Enable overflow interrupts for T/C 0
  TIMSK |= (1<<TOIE0);
     272:	87 b7       	in	r24, 0x37	; 55
     274:	81 60       	ori	r24, 0x01	; 1
     276:	87 bf       	out	0x37, r24	; 55

  ////Sound Generation (TCNT1)  (currently desire between 200 and 600 and 1500 Hz
  //CTC mode
  TCCR1A |= 0x00;
     278:	8f b5       	in	r24, 0x2f	; 47
     27a:	8f bd       	out	0x2f, r24	; 47
  //CTC mode, no prescaler
  TCCR1B |= (1<<WGM12) | (1<<CS10);
     27c:	8e b5       	in	r24, 0x2e	; 46
     27e:	89 60       	ori	r24, 0x09	; 9
     280:	8e bd       	out	0x2e, r24	; 46
  //No forced compare
  TCCR1C |= 0x00;
     282:	80 91 7a 00 	lds	r24, 0x007A
     286:	80 93 7a 00 	sts	0x007A, r24
  //Initial compare value
  OCR1A   = 20000; //About 400Hz?
     28a:	80 e2       	ldi	r24, 0x20	; 32
     28c:	9e e4       	ldi	r25, 0x4E	; 78
     28e:	9b bd       	out	0x2b, r25	; 43
     290:	8a bd       	out	0x2a, r24	; 42
  //Enable interrupt
  TIMSK  |= (1<<OCIE1A);
     292:	87 b7       	in	r24, 0x37	; 55
     294:	80 61       	ori	r24, 0x10	; 16
     296:	87 bf       	out	0x37, r24	; 55

  ////LED Dimming Control (TCNT2)
  //Enable fast PWM, non-inverting output mode
  //64 prescaler (goal is 967Hz)
  TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS21) | (1<<CS20);
     298:	8b e6       	ldi	r24, 0x6B	; 107
     29a:	85 bd       	out	0x25, r24	; 37
  //Default PWM value of half brightness
  OCR2 = 0xFF / 7;
     29c:	84 e2       	ldi	r24, 0x24	; 36
     29e:	83 bd       	out	0x23, r24	; 35

  ////Volume control (TCNT3)
  //9bit Fast PWM Mode, non-inverting output on OC3A
  //8 prescaler, frequency is 3.906KHz
  TCCR3A |= (1<<COM3A1) | (1<<WGM31);
     2a0:	80 91 8b 00 	lds	r24, 0x008B
     2a4:	82 68       	ori	r24, 0x82	; 130
     2a6:	80 93 8b 00 	sts	0x008B, r24
  TCCR3B |= (1<<WGM32) | (1<<CS31);
     2aa:	80 91 8a 00 	lds	r24, 0x008A
     2ae:	8a 60       	ori	r24, 0x0A	; 10
     2b0:	80 93 8a 00 	sts	0x008A, r24
  //No forced compare
  TCCR3C |= 0x00;
     2b4:	80 91 8c 00 	lds	r24, 0x008C
     2b8:	80 93 8c 00 	sts	0x008C, r24

  //Initialize with a 50% duty cycle
  OCR3A = 512/2;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	90 93 87 00 	sts	0x0087, r25
     2c4:	80 93 86 00 	sts	0x0086, r24

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     2c8:	86 e5       	ldi	r24, 0x56	; 86
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	90 93 87 00 	sts	0x0087, r25
     2d0:	80 93 86 00 	sts	0x0086, r24
     2d4:	08 95       	ret

000002d6 <__vector_16>:
//Timer 0 overflow vector
//Polls the buttons / interfaces with SPI
//Counts seconds
//Updates values
//This ISR is invoked every 255 clock cycles of the 32.768kHz oscillator (~128Hz)
ISR(TIMER0_OVF_vect){
     2d6:	1f 92       	push	r1
     2d8:	0f 92       	push	r0
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	0f 92       	push	r0
     2de:	11 24       	eor	r1, r1
     2e0:	0b b6       	in	r0, 0x3b	; 59
     2e2:	0f 92       	push	r0
     2e4:	2f 93       	push	r18
     2e6:	3f 93       	push	r19
     2e8:	4f 93       	push	r20
     2ea:	5f 93       	push	r21
     2ec:	6f 93       	push	r22
     2ee:	7f 93       	push	r23
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
     2f4:	af 93       	push	r26
     2f6:	bf 93       	push	r27
     2f8:	ef 93       	push	r30
     2fa:	ff 93       	push	r31
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
     2fc:	80 91 de 01 	lds	r24, 0x01DE
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	80 93 de 01 	sts	0x01DE, r24
     306:	80 38       	cpi	r24, 0x80	; 128
     308:	09 f4       	brne	.+2      	; 0x30c <__vector_16+0x36>
     30a:	58 c0       	rjmp	.+176    	; 0x3bc <__vector_16+0xe6>
 //Exectued 128Hz
  if (secondsCounter % 1 == 0){
//DEBUG_HIGH();
    //Check the buttons for input
//    checkButtons();
    NOP();
     30c:	00 00       	nop
    NOP();
     30e:	00 00       	nop
//Processed the ADC count and adjusts the output brighness for the screen
//Calculations courtesy of: http://academics.triton.edu/faculty/mlarosa/slope.htm
void inline processOutputBrightness( void ){


  if(lastADCread < 480)
     310:	80 91 3d 01 	lds	r24, 0x013D
     314:	90 91 3e 01 	lds	r25, 0x013E
     318:	80 3e       	cpi	r24, 0xE0	; 224
     31a:	91 40       	sbci	r25, 0x01	; 1
     31c:	b8 f5       	brcc	.+110    	; 0x38c <__vector_16+0xb6>
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     31e:	8c ed       	ldi	r24, 0xDC	; 220
     320:	83 bd       	out	0x23, r24	; 35
void inline START_ADC_READ(void){ADCSRA |= (1<<ADSC);}  //Starts the read from the ADC (takes ~108uS)
     322:	36 9a       	sbi	0x06, 6	; 6

    //processEncoders();
  }

  //Executed 4Hz
  if(secondsCounter % 32 == 0){  //Fast cycle
     324:	80 91 de 01 	lds	r24, 0x01DE
     328:	98 2f       	mov	r25, r24
     32a:	9f 71       	andi	r25, 0x1F	; 31
     32c:	99 f4       	brne	.+38     	; 0x354 <__vector_16+0x7e>

    //START_ADC_READ(); 

    quickToggle ^= 1;
     32e:	20 91 dd 01 	lds	r18, 0x01DD
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	92 27       	eor	r25, r18
     336:	90 93 dd 01 	sts	0x01DD, r25
    
    ++musicCounter;
     33a:	20 91 db 01 	lds	r18, 0x01DB
     33e:	30 91 dc 01 	lds	r19, 0x01DC
     342:	2f 5f       	subi	r18, 0xFF	; 255
     344:	3f 4f       	sbci	r19, 0xFF	; 255

    if(musicCounter >= NUM_MUSIC_NOTES)
     346:	2f 30       	cpi	r18, 0x0F	; 15
     348:	31 05       	cpc	r19, r1
     34a:	d8 f0       	brcs	.+54     	; 0x382 <__vector_16+0xac>
      musicCounter = 0;
     34c:	10 92 dc 01 	sts	0x01DC, r1
     350:	10 92 db 01 	sts	0x01DB, r1
  }

  if(secondsCounter == 128)
     354:	80 38       	cpi	r24, 0x80	; 128
     356:	11 f4       	brne	.+4      	; 0x35c <__vector_16+0x86>
    secondsCounter = 0;
     358:	10 92 de 01 	sts	0x01DE, r1
}
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	7f 91       	pop	r23
     36a:	6f 91       	pop	r22
     36c:	5f 91       	pop	r21
     36e:	4f 91       	pop	r20
     370:	3f 91       	pop	r19
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0b be       	out	0x3b, r0	; 59
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

    //START_ADC_READ(); 

    quickToggle ^= 1;
    
    ++musicCounter;
     382:	30 93 dc 01 	sts	0x01DC, r19
     386:	20 93 db 01 	sts	0x01DB, r18
     38a:	e4 cf       	rjmp	.-56     	; 0x354 <__vector_16+0x7e>


  if(lastADCread < 480)
    setLEDBrightness(MIN_BRT);
  else
    setLEDBrightness((lastADCread * -.4) + 410);
     38c:	60 91 3d 01 	lds	r22, 0x013D
     390:	70 91 3e 01 	lds	r23, 0x013E
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
     39c:	2d ec       	ldi	r18, 0xCD	; 205
     39e:	3c ec       	ldi	r19, 0xCC	; 204
     3a0:	4c ec       	ldi	r20, 0xCC	; 204
     3a2:	5e eb       	ldi	r21, 0xBE	; 190
     3a4:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	4d ec       	ldi	r20, 0xCD	; 205
     3ae:	53 e4       	ldi	r21, 0x43	; 67
     3b0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__addsf3>
     3b4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fixunssfsi>
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     3b8:	63 bd       	out	0x23, r22	; 35
     3ba:	b3 cf       	rjmp	.-154    	; 0x322 <__vector_16+0x4c>
//Updates values
//This ISR is invoked every 255 clock cycles of the 32.768kHz oscillator (~128Hz)
ISR(TIMER0_OVF_vect){
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
     3bc:	80 91 d9 01 	lds	r24, 0x01D9
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
    if(seconds == 60){
     3c2:	8c 33       	cpi	r24, 0x3C	; 60
     3c4:	79 f0       	breq	.+30     	; 0x3e4 <__vector_16+0x10e>
//Updates values
//This ISR is invoked every 255 clock cycles of the 32.768kHz oscillator (~128Hz)
ISR(TIMER0_OVF_vect){
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
     3c6:	80 93 d9 01 	sts	0x01D9, r24
	if(hours >= 24)
	  hours = 0;
      }
    }

    if(snoozeCount > 0){//If a snooze has been activated
     3ca:	80 91 d3 01 	lds	r24, 0x01D3
     3ce:	90 91 d4 01 	lds	r25, 0x01D4
     3d2:	00 97       	sbiw	r24, 0x00	; 0
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <__vector_16+0x102>
     3d6:	9a cf       	rjmp	.-204    	; 0x30c <__vector_16+0x36>
      ++snoozeCount;
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	90 93 d4 01 	sts	0x01D4, r25
     3de:	80 93 d3 01 	sts	0x01D3, r24
     3e2:	94 cf       	rjmp	.-216    	; 0x30c <__vector_16+0x36>
ISR(TIMER0_OVF_vect){
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
    if(seconds == 60){
      seconds = 0;
     3e4:	10 92 d9 01 	sts	0x01D9, r1
      minutes += 1;
     3e8:	80 91 d8 01 	lds	r24, 0x01D8
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
      if(minutes == 60){
     3ee:	8c 33       	cpi	r24, 0x3C	; 60
     3f0:	19 f0       	breq	.+6      	; 0x3f8 <__vector_16+0x122>
  //Executed every second
  if(++secondsCounter == 128){//128){  //Make faster using 16
    seconds += 1;
    if(seconds == 60){
      seconds = 0;
      minutes += 1;
     3f2:	80 93 d8 01 	sts	0x01D8, r24
     3f6:	e9 cf       	rjmp	.-46     	; 0x3ca <__vector_16+0xf4>
      if(minutes == 60){
        minutes = 0;
     3f8:	10 92 d8 01 	sts	0x01D8, r1
        hours += 1;
     3fc:	80 91 d7 01 	lds	r24, 0x01D7
     400:	8f 5f       	subi	r24, 0xFF	; 255
	if(hours >= 24)
     402:	88 31       	cpi	r24, 0x18	; 24
     404:	18 f4       	brcc	.+6      	; 0x40c <__vector_16+0x136>
    if(seconds == 60){
      seconds = 0;
      minutes += 1;
      if(minutes == 60){
        minutes = 0;
        hours += 1;
     406:	80 93 d7 01 	sts	0x01D7, r24
     40a:	df cf       	rjmp	.-66     	; 0x3ca <__vector_16+0xf4>
	if(hours >= 24)
	  hours = 0;
     40c:	10 92 d7 01 	sts	0x01D7, r1
     410:	dc cf       	rjmp	.-72     	; 0x3ca <__vector_16+0xf4>

00000412 <__vector_12>:
    secondsCounter = 0;
}


//Audio generation interrupt
ISR(TIMER1_COMPA_vect){
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
   //Toggle audio output bit
   PORTD ^= AUDIO_OUT; 
     420:	92 b3       	in	r25, 0x12	; 18
     422:	80 e1       	ldi	r24, 0x10	; 16
     424:	89 27       	eor	r24, r25
     426:	82 bb       	out	0x12, r24	; 18
}
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <configureSPI>:

//Setup SPI on the interface
void configureSPI( void ){
  //Configure SPI
  //Master mode, clk low on idle, leading edge sample
  SPCR = (1 << SPE) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA);   
     436:	80 e5       	ldi	r24, 0x50	; 80
     438:	8d b9       	out	0x0d, r24	; 13
     43a:	08 95       	ret

0000043c <configureADC>:
}

//Configures the ADC
void configureADC( void ){
  //Configure the MUX for single-ended input on PORTF pin 0, right adjusted, 10 bits
  ADMUX  = (1<<REFS0);
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	87 b9       	out	0x07, r24	; 7

  //Enable the ADC, don't start yet, single shot mode
  //division factor is 128 (125khz)
  //enable interrupts on conversion
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADIE);
     440:	8f e8       	ldi	r24, 0x8F	; 143
     442:	86 b9       	out	0x06, r24	; 6
     444:	08 95       	ret

00000446 <__vector_21>:
}


//Stores the result of the ADC conversion
ISR(ADC_vect){
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
  lastADCread = ADC; 
     454:	84 b1       	in	r24, 0x04	; 4
     456:	95 b1       	in	r25, 0x05	; 5
     458:	90 93 3e 01 	sts	0x013E, r25
     45c:	80 93 3d 01 	sts	0x013D, r24
}
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <setSegment>:

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     46e:	85 30       	cpi	r24, 0x05	; 5
     470:	91 05       	cpc	r25, r1
     472:	91 f1       	breq	.+100    	; 0x4d8 <setSegment+0x6a>
     474:	60 f4       	brcc	.+24     	; 0x48e <setSegment+0x20>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	91 05       	cpc	r25, r1
     47a:	29 f1       	breq	.+74     	; 0x4c6 <setSegment+0x58>
     47c:	a8 f0       	brcs	.+42     	; 0x4a8 <setSegment+0x3a>
     47e:	83 30       	cpi	r24, 0x03	; 3
     480:	91 05       	cpc	r25, r1
     482:	69 f1       	breq	.+90     	; 0x4de <setSegment+0x70>
     484:	04 97       	sbiw	r24, 0x04	; 4
     486:	b9 f5       	brne	.+110    	; 0x4f6 <setSegment+0x88>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     488:	89 e9       	ldi	r24, 0x99	; 153
     48a:	8b bb       	out	0x1b, r24	; 27
       break;
     48c:	08 95       	ret
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     48e:	88 30       	cpi	r24, 0x08	; 8
     490:	91 05       	cpc	r25, r1
     492:	41 f1       	breq	.+80     	; 0x4e4 <setSegment+0x76>
     494:	80 f0       	brcs	.+32     	; 0x4b6 <setSegment+0x48>
     496:	89 30       	cpi	r24, 0x09	; 9
     498:	91 05       	cpc	r25, r1
     49a:	d9 f0       	breq	.+54     	; 0x4d2 <setSegment+0x64>
     49c:	8f 3f       	cpi	r24, 0xFF	; 255
     49e:	91 05       	cpc	r25, r1
     4a0:	41 f5       	brne	.+80     	; 0x4f2 <setSegment+0x84>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	8b bb       	out	0x1b, r24	; 27
     4a6:	08 95       	ret
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	81 f0       	breq	.+32     	; 0x4cc <setSegment+0x5e>
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	01 f5       	brne	.+64     	; 0x4f0 <setSegment+0x82>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     4b0:	89 ef       	ldi	r24, 0xF9	; 249
     4b2:	8b bb       	out	0x1b, r24	; 27
       break;
     4b4:	08 95       	ret
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     4b6:	86 30       	cpi	r24, 0x06	; 6
     4b8:	91 05       	cpc	r25, r1
     4ba:	b9 f0       	breq	.+46     	; 0x4ea <setSegment+0x7c>
     4bc:	07 97       	sbiw	r24, 0x07	; 7
     4be:	d1 f4       	brne	.+52     	; 0x4f4 <setSegment+0x86>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     4c0:	88 ef       	ldi	r24, 0xF8	; 248
     4c2:	8b bb       	out	0x1b, r24	; 27
       break;
     4c4:	08 95       	ret
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     4c6:	84 ea       	ldi	r24, 0xA4	; 164
     4c8:	8b bb       	out	0x1b, r24	; 27
       break;
     4ca:	08 95       	ret
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     4cc:	80 ec       	ldi	r24, 0xC0	; 192
     4ce:	8b bb       	out	0x1b, r24	; 27
       break;
     4d0:	08 95       	ret
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     4d2:	88 e9       	ldi	r24, 0x98	; 152
     4d4:	8b bb       	out	0x1b, r24	; 27
       break;
     4d6:	08 95       	ret
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     4d8:	82 e9       	ldi	r24, 0x92	; 146
     4da:	8b bb       	out	0x1b, r24	; 27
       break;
     4dc:	08 95       	ret
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     4de:	80 eb       	ldi	r24, 0xB0	; 176
     4e0:	8b bb       	out	0x1b, r24	; 27
       break;
     4e2:	08 95       	ret
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     4e4:	80 e8       	ldi	r24, 0x80	; 128
     4e6:	8b bb       	out	0x1b, r24	; 27
       break;
     4e8:	08 95       	ret
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     4ea:	82 e8       	ldi	r24, 0x82	; 130
     4ec:	8b bb       	out	0x1b, r24	; 27
       break;
     4ee:	08 95       	ret
     4f0:	08 95       	ret
     4f2:	08 95       	ret
     4f4:	08 95       	ret
     4f6:	08 95       	ret

000004f8 <clearSegment>:
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     4f8:	8f ef       	ldi	r24, 0xFF	; 255
     4fa:	8b bb       	out	0x1b, r24	; 27
     4fc:	08 95       	ret

000004fe <setDigit>:
     4fe:	9f ef       	ldi	r25, 0xFF	; 255
     500:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     502:	2a e1       	ldi	r18, 0x1A	; 26
     504:	2a 95       	dec	r18
     506:	f1 f7       	brne	.-4      	; 0x504 <setDigit+0x6>
     508:	00 c0       	rjmp	.+0      	; 0x50a <setDigit+0xc>
//It also sets the appropriate segment outputs.
//NOTE: There is an inherient 100uS delay with any call of this function
void setDigit( uint8_t targetDigit ){
  clearSegment();
  _delay_us(5);
  NOP();
     50a:	00 00       	nop
  NOP();
     50c:	00 00       	nop
  switch(targetDigit){
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	09 f4       	brne	.+2      	; 0x514 <setDigit+0x16>
     512:	8e c0       	rjmp	.+284    	; 0x630 <setDigit+0x132>
     514:	08 f0       	brcs	.+2      	; 0x518 <setDigit+0x1a>
     516:	43 c0       	rjmp	.+134    	; 0x59e <setDigit+0xa0>
     518:	88 23       	and	r24, r24
     51a:	09 f4       	brne	.+2      	; 0x51e <setDigit+0x20>
     51c:	5c c0       	rjmp	.+184    	; 0x5d6 <setDigit+0xd8>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	09 f0       	breq	.+2      	; 0x524 <setDigit+0x26>
     522:	57 c0       	rjmp	.+174    	; 0x5d2 <setDigit+0xd4>
uint8_t inc2Bool = 0x00;
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
     524:	c6 9a       	sbi	0x18, 6	; 24
     526:	88 b3       	in	r24, 0x18	; 24
     528:	8f 7c       	andi	r24, 0xCF	; 207
     52a:	88 bb       	out	0x18, r24	; 24
        PORTA |= SEG_C;
      break;
    case 1:
      SET_DIGIT_ONE();
      //_delay_us(P_SET_DEL);
      NOP();
     52c:	00 00       	nop
      NOP();
     52e:	00 00       	nop
      if((settings & SET_HR) && quickToggle)
     530:	20 91 c8 01 	lds	r18, 0x01C8
     534:	30 91 c9 01 	lds	r19, 0x01C9
     538:	21 ff       	sbrs	r18, 1
     53a:	04 c0       	rjmp	.+8      	; 0x544 <setDigit+0x46>
     53c:	80 91 dd 01 	lds	r24, 0x01DD
     540:	81 11       	cpse	r24, r1
     542:	27 c1       	rjmp	.+590    	; 0x792 <setDigit+0x294>
        clearSegment();
      //else
      //  setSegment(output[1]);
      //Check if we want to remove a leading zero
      else if(((hours > 0) && (hours < 10)) || ((hours > 12) && (hours < 22)) && !(settings & TIME24)){ //Then we want to remove 0
     544:	80 91 d7 01 	lds	r24, 0x01D7
     548:	9f ef       	ldi	r25, 0xFF	; 255
     54a:	98 0f       	add	r25, r24
     54c:	99 30       	cpi	r25, 0x09	; 9
     54e:	08 f4       	brcc	.+2      	; 0x552 <setDigit+0x54>
     550:	e3 c0       	rjmp	.+454    	; 0x718 <setDigit+0x21a>
     552:	8d 50       	subi	r24, 0x0D	; 13
     554:	89 30       	cpi	r24, 0x09	; 9
     556:	30 f4       	brcc	.+12     	; 0x564 <setDigit+0x66>
     558:	80 91 c8 01 	lds	r24, 0x01C8
     55c:	90 91 c9 01 	lds	r25, 0x01C9
     560:	82 ff       	sbrs	r24, 2
     562:	da c0       	rjmp	.+436    	; 0x718 <setDigit+0x21a>
        clearSegment();
      }
      else
        setSegment(output[1]);
     564:	80 91 f3 01 	lds	r24, 0x01F3
     568:	90 91 f4 01 	lds	r25, 0x01F4
     56c:	a0 91 f5 01 	lds	r26, 0x01F5
     570:	b0 91 f6 01 	lds	r27, 0x01F6
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     574:	85 30       	cpi	r24, 0x05	; 5
     576:	91 05       	cpc	r25, r1
     578:	09 f4       	brne	.+2      	; 0x57c <setDigit+0x7e>
     57a:	a4 c1       	rjmp	.+840    	; 0x8c4 <setDigit+0x3c6>
     57c:	08 f0       	brcs	.+2      	; 0x580 <setDigit+0x82>
     57e:	4a c1       	rjmp	.+660    	; 0x814 <setDigit+0x316>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	91 05       	cpc	r25, r1
     584:	09 f4       	brne	.+2      	; 0x588 <setDigit+0x8a>
     586:	a1 c1       	rjmp	.+834    	; 0x8ca <setDigit+0x3cc>
     588:	08 f0       	brcs	.+2      	; 0x58c <setDigit+0x8e>
     58a:	93 c1       	rjmp	.+806    	; 0x8b2 <setDigit+0x3b4>
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	09 f4       	brne	.+2      	; 0x592 <setDigit+0x94>
     590:	a5 c1       	rjmp	.+842    	; 0x8dc <setDigit+0x3de>
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	09 f0       	breq	.+2      	; 0x598 <setDigit+0x9a>
     596:	c2 c0       	rjmp	.+388    	; 0x71c <setDigit+0x21e>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     598:	89 ef       	ldi	r24, 0xF9	; 249
     59a:	8b bb       	out	0x1b, r24	; 27
     59c:	bf c0       	rjmp	.+382    	; 0x71c <setDigit+0x21e>
void setDigit( uint8_t targetDigit ){
  clearSegment();
  _delay_us(5);
  NOP();
  NOP();
  switch(targetDigit){
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	79 f1       	breq	.+94     	; 0x600 <setDigit+0x102>
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	b9 f4       	brne	.+46     	; 0x5d4 <setDigit+0xd6>
//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}
     5a6:	88 b3       	in	r24, 0x18	; 24
     5a8:	8f 78       	andi	r24, 0x8F	; 143
     5aa:	88 bb       	out	0x18, r24	; 24
        PORTA = PORTA & ~(SEG_DP);
      break;
    case 4:
      SET_DIGIT_FOUR();
      //_delay_us(P_SET_DEL);
      NOP();
     5ac:	00 00       	nop
      NOP();
     5ae:	00 00       	nop
      if((settings & SET_MIN) && quickToggle)
     5b0:	20 91 c8 01 	lds	r18, 0x01C8
     5b4:	30 91 c9 01 	lds	r19, 0x01C9
     5b8:	20 ff       	sbrs	r18, 0
     5ba:	52 c0       	rjmp	.+164    	; 0x660 <setDigit+0x162>
     5bc:	80 91 dd 01 	lds	r24, 0x01DD
     5c0:	88 23       	and	r24, r24
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <setDigit+0xc8>
     5c4:	4d c0       	rjmp	.+154    	; 0x660 <setDigit+0x162>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     5c6:	9b bb       	out	0x1b, r25	; 27
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
     5c8:	80 91 d2 01 	lds	r24, 0x01D2
     5cc:	81 11       	cpse	r24, r1
        PORTA = PORTA & ~(SEG_DP);
     5ce:	df 98       	cbi	0x1b, 7	; 27
     5d0:	08 95       	ret
     5d2:	08 95       	ret
     5d4:	08 95       	ret
uint8_t randoTest = 0;
uint8_t inc2Bool = 0x00;
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
     5d6:	c5 9a       	sbi	0x18, 5	; 24
     5d8:	88 b3       	in	r24, 0x18	; 24
     5da:	8f 7a       	andi	r24, 0xAF	; 175
     5dc:	88 bb       	out	0x18, r24	; 24
  switch(targetDigit){

    case 0: //colon control
      SET_DIGIT_DOT();  //Digit control
      //_delay_us(P_SET_DEL);
      NOP();
     5de:	00 00       	nop
      NOP();
     5e0:	00 00       	nop
      
      if(colon)
     5e2:	80 91 cc 01 	lds	r24, 0x01CC
     5e6:	88 23       	and	r24, r24
     5e8:	09 f4       	brne	.+2      	; 0x5ec <setDigit+0xee>
     5ea:	a1 c0       	rjmp	.+322    	; 0x72e <setDigit+0x230>
	PORTA = PORTA & ~(SEG_A | SEG_B);
     5ec:	8b b3       	in	r24, 0x1b	; 27
     5ee:	8c 7f       	andi	r24, 0xFC	; 252
     5f0:	8b bb       	out	0x1b, r24	; 27
      else
        PORTA |= SEG_A | SEG_B; 
      
      if(upperDot)
     5f2:	80 91 cd 01 	lds	r24, 0x01CD
     5f6:	88 23       	and	r24, r24
     5f8:	09 f4       	brne	.+2      	; 0x5fc <setDigit+0xfe>
     5fa:	97 c0       	rjmp	.+302    	; 0x72a <setDigit+0x22c>
        PORTA = PORTA & ~(SEG_C);
     5fc:	da 98       	cbi	0x1b, 2	; 27
     5fe:	08 95       	ret

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
     600:	c4 9a       	sbi	0x18, 4	; 24
     602:	88 b3       	in	r24, 0x18	; 24
     604:	8f 79       	andi	r24, 0x9F	; 159
     606:	88 bb       	out	0x18, r24	; 24
        PORTA = PORTA & ~(SEG_DP);
      break;
    case 3:
      SET_DIGIT_THREE();
      //_delay_us(P_SET_DEL);
      NOP();
     608:	00 00       	nop
      NOP();
     60a:	00 00       	nop
      if((settings & SET_MIN) && quickToggle)
     60c:	20 91 c8 01 	lds	r18, 0x01C8
     610:	30 91 c9 01 	lds	r19, 0x01C9
     614:	20 ff       	sbrs	r18, 0
     616:	5d c0       	rjmp	.+186    	; 0x6d2 <setDigit+0x1d4>
     618:	80 91 dd 01 	lds	r24, 0x01DD
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <setDigit+0x124>
     620:	58 c0       	rjmp	.+176    	; 0x6d2 <setDigit+0x1d4>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     622:	9b bb       	out	0x1b, r25	; 27
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[3]);
      if(dot[3])
     624:	80 91 d1 01 	lds	r24, 0x01D1
     628:	88 23       	and	r24, r24
     62a:	91 f2       	breq	.-92     	; 0x5d0 <setDigit+0xd2>
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
        PORTA = PORTA & ~(SEG_DP);
     62c:	df 98       	cbi	0x1b, 7	; 27
     62e:	d0 cf       	rjmp	.-96     	; 0x5d0 <setDigit+0xd2>
uint8_t inc4Bool = 0x00;

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
     630:	88 b3       	in	r24, 0x18	; 24
     632:	80 63       	ori	r24, 0x30	; 48
     634:	88 bb       	out	0x18, r24	; 24
     636:	c6 98       	cbi	0x18, 6	; 24
        PORTA = PORTA & ~(SEG_DP);
      break;
    case 2:
      SET_DIGIT_TWO();
      //_delay_us(P_SET_DEL);
      NOP();
     638:	00 00       	nop
      NOP();
     63a:	00 00       	nop
      if((settings & SET_HR) && quickToggle)
     63c:	20 91 c8 01 	lds	r18, 0x01C8
     640:	30 91 c9 01 	lds	r19, 0x01C9
     644:	21 ff       	sbrs	r18, 1
     646:	29 c0       	rjmp	.+82     	; 0x69a <setDigit+0x19c>
     648:	80 91 dd 01 	lds	r24, 0x01DD
     64c:	88 23       	and	r24, r24
     64e:	29 f1       	breq	.+74     	; 0x69a <setDigit+0x19c>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     650:	9b bb       	out	0x1b, r25	; 27
      NOP();
      if((settings & SET_HR) && quickToggle)
        clearSegment();
      else
        setSegment(output[2]);
      if(dot[2])
     652:	80 91 d0 01 	lds	r24, 0x01D0
     656:	88 23       	and	r24, r24
     658:	09 f4       	brne	.+2      	; 0x65c <setDigit+0x15e>
     65a:	ba cf       	rjmp	.-140    	; 0x5d0 <setDigit+0xd2>
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
        PORTA = PORTA & ~(SEG_DP);
     65c:	df 98       	cbi	0x1b, 7	; 27
     65e:	b8 cf       	rjmp	.-144    	; 0x5d0 <setDigit+0xd2>
      NOP();
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
     660:	80 91 ff 01 	lds	r24, 0x01FF
     664:	90 91 00 02 	lds	r25, 0x0200
     668:	a0 91 01 02 	lds	r26, 0x0201
     66c:	b0 91 02 02 	lds	r27, 0x0202
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     670:	85 30       	cpi	r24, 0x05	; 5
     672:	91 05       	cpc	r25, r1
     674:	09 f4       	brne	.+2      	; 0x678 <setDigit+0x17a>
     676:	e4 c0       	rjmp	.+456    	; 0x840 <setDigit+0x342>
     678:	08 f0       	brcs	.+2      	; 0x67c <setDigit+0x17e>
     67a:	7c c0       	rjmp	.+248    	; 0x774 <setDigit+0x276>
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	91 05       	cpc	r25, r1
     680:	09 f4       	brne	.+2      	; 0x684 <setDigit+0x186>
     682:	d8 c0       	rjmp	.+432    	; 0x834 <setDigit+0x336>
     684:	08 f0       	brcs	.+2      	; 0x688 <setDigit+0x18a>
     686:	87 c0       	rjmp	.+270    	; 0x796 <setDigit+0x298>
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	09 f4       	brne	.+2      	; 0x68e <setDigit+0x190>
     68c:	d6 c0       	rjmp	.+428    	; 0x83a <setDigit+0x33c>
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	09 f0       	breq	.+2      	; 0x694 <setDigit+0x196>
     692:	9a cf       	rjmp	.-204    	; 0x5c8 <setDigit+0xca>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     694:	89 ef       	ldi	r24, 0xF9	; 249
     696:	8b bb       	out	0x1b, r24	; 27
     698:	97 cf       	rjmp	.-210    	; 0x5c8 <setDigit+0xca>
      NOP();
      NOP();
      if((settings & SET_HR) && quickToggle)
        clearSegment();
      else
        setSegment(output[2]);
     69a:	80 91 f7 01 	lds	r24, 0x01F7
     69e:	90 91 f8 01 	lds	r25, 0x01F8
     6a2:	a0 91 f9 01 	lds	r26, 0x01F9
     6a6:	b0 91 fa 01 	lds	r27, 0x01FA
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	91 05       	cpc	r25, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <setDigit+0x1b4>
     6b0:	e8 c0       	rjmp	.+464    	; 0x882 <setDigit+0x384>
     6b2:	08 f0       	brcs	.+2      	; 0x6b6 <setDigit+0x1b8>
     6b4:	50 c0       	rjmp	.+160    	; 0x756 <setDigit+0x258>
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	91 05       	cpc	r25, r1
     6ba:	09 f4       	brne	.+2      	; 0x6be <setDigit+0x1c0>
     6bc:	c4 c0       	rjmp	.+392    	; 0x846 <setDigit+0x348>
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <setDigit+0x1c4>
     6c0:	74 c0       	rjmp	.+232    	; 0x7aa <setDigit+0x2ac>
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <setDigit+0x1ca>
     6c6:	c5 c0       	rjmp	.+394    	; 0x852 <setDigit+0x354>
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	19 f6       	brne	.-122    	; 0x652 <setDigit+0x154>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     6cc:	89 ef       	ldi	r24, 0xF9	; 249
     6ce:	8b bb       	out	0x1b, r24	; 27
     6d0:	c0 cf       	rjmp	.-128    	; 0x652 <setDigit+0x154>
      NOP();
      NOP();
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[3]);
     6d2:	80 91 fb 01 	lds	r24, 0x01FB
     6d6:	90 91 fc 01 	lds	r25, 0x01FC
     6da:	a0 91 fd 01 	lds	r26, 0x01FD
     6de:	b0 91 fe 01 	lds	r27, 0x01FE
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	91 05       	cpc	r25, r1
     6e6:	09 f4       	brne	.+2      	; 0x6ea <setDigit+0x1ec>
     6e8:	c0 c0       	rjmp	.+384    	; 0x86a <setDigit+0x36c>
     6ea:	28 f5       	brcc	.+74     	; 0x736 <setDigit+0x238>
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	91 05       	cpc	r25, r1
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <setDigit+0x1f6>
     6f2:	c1 c0       	rjmp	.+386    	; 0x876 <setDigit+0x378>
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <setDigit+0x1fa>
     6f6:	6e c0       	rjmp	.+220    	; 0x7d4 <setDigit+0x2d6>
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	09 f4       	brne	.+2      	; 0x6fe <setDigit+0x200>
     6fc:	b9 c0       	rjmp	.+370    	; 0x870 <setDigit+0x372>
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	09 f0       	breq	.+2      	; 0x704 <setDigit+0x206>
     702:	90 cf       	rjmp	.-224    	; 0x624 <setDigit+0x126>
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
     704:	89 ef       	ldi	r24, 0xF9	; 249
     706:	8b bb       	out	0x1b, r24	; 27
     708:	8d cf       	rjmp	.-230    	; 0x624 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     70a:	89 30       	cpi	r24, 0x09	; 9
     70c:	91 05       	cpc	r25, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <setDigit+0x214>
     710:	df c0       	rjmp	.+446    	; 0x8d0 <setDigit+0x3d2>
     712:	8f 3f       	cpi	r24, 0xFF	; 255
     714:	91 05       	cpc	r25, r1
     716:	11 f4       	brne	.+4      	; 0x71c <setDigit+0x21e>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	8b bb       	out	0x1b, r24	; 27
      else if(((hours > 0) && (hours < 10)) || ((hours > 12) && (hours < 22)) && !(settings & TIME24)){ //Then we want to remove 0
        clearSegment();
      }
      else
        setSegment(output[1]);
      if(dot[1])
     71c:	80 91 cf 01 	lds	r24, 0x01CF
     720:	88 23       	and	r24, r24
     722:	09 f4       	brne	.+2      	; 0x726 <setDigit+0x228>
     724:	55 cf       	rjmp	.-342    	; 0x5d0 <setDigit+0xd2>
      if((settings & SET_MIN) && quickToggle)
        clearSegment();
      else
        setSegment(output[4]);
      if(dot[4])
        PORTA = PORTA & ~(SEG_DP);
     726:	df 98       	cbi	0x1b, 7	; 27
     728:	53 cf       	rjmp	.-346    	; 0x5d0 <setDigit+0xd2>
        PORTA |= SEG_A | SEG_B; 
      
      if(upperDot)
        PORTA = PORTA & ~(SEG_C);
      else
        PORTA |= SEG_C;
     72a:	da 9a       	sbi	0x1b, 2	; 27
     72c:	08 95       	ret
      NOP();
      
      if(colon)
	PORTA = PORTA & ~(SEG_A | SEG_B);
      else
        PORTA |= SEG_A | SEG_B; 
     72e:	8b b3       	in	r24, 0x1b	; 27
     730:	83 60       	ori	r24, 0x03	; 3
     732:	8b bb       	out	0x1b, r24	; 27
     734:	5e cf       	rjmp	.-324    	; 0x5f2 <setDigit+0xf4>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     736:	88 30       	cpi	r24, 0x08	; 8
     738:	91 05       	cpc	r25, r1
     73a:	09 f4       	brne	.+2      	; 0x73e <setDigit+0x240>
     73c:	a8 c0       	rjmp	.+336    	; 0x88e <setDigit+0x390>
     73e:	08 f0       	brcs	.+2      	; 0x742 <setDigit+0x244>
     740:	5e c0       	rjmp	.+188    	; 0x7fe <setDigit+0x300>
     742:	86 30       	cpi	r24, 0x06	; 6
     744:	91 05       	cpc	r25, r1
     746:	09 f4       	brne	.+2      	; 0x74a <setDigit+0x24c>
     748:	9f c0       	rjmp	.+318    	; 0x888 <setDigit+0x38a>
     74a:	07 97       	sbiw	r24, 0x07	; 7
     74c:	09 f0       	breq	.+2      	; 0x750 <setDigit+0x252>
     74e:	6a cf       	rjmp	.-300    	; 0x624 <setDigit+0x126>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     750:	88 ef       	ldi	r24, 0xF8	; 248
     752:	8b bb       	out	0x1b, r24	; 27
     754:	67 cf       	rjmp	.-306    	; 0x624 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     756:	88 30       	cpi	r24, 0x08	; 8
     758:	91 05       	cpc	r25, r1
     75a:	09 f4       	brne	.+2      	; 0x75e <setDigit+0x260>
     75c:	80 c0       	rjmp	.+256    	; 0x85e <setDigit+0x360>
     75e:	78 f5       	brcc	.+94     	; 0x7be <setDigit+0x2c0>
     760:	86 30       	cpi	r24, 0x06	; 6
     762:	91 05       	cpc	r25, r1
     764:	09 f4       	brne	.+2      	; 0x768 <setDigit+0x26a>
     766:	78 c0       	rjmp	.+240    	; 0x858 <setDigit+0x35a>
     768:	07 97       	sbiw	r24, 0x07	; 7
     76a:	09 f0       	breq	.+2      	; 0x76e <setDigit+0x270>
     76c:	72 cf       	rjmp	.-284    	; 0x652 <setDigit+0x154>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     76e:	88 ef       	ldi	r24, 0xF8	; 248
     770:	8b bb       	out	0x1b, r24	; 27
     772:	6f cf       	rjmp	.-290    	; 0x652 <setDigit+0x154>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     774:	88 30       	cpi	r24, 0x08	; 8
     776:	91 05       	cpc	r25, r1
     778:	09 f4       	brne	.+2      	; 0x77c <setDigit+0x27e>
     77a:	92 c0       	rjmp	.+292    	; 0x8a0 <setDigit+0x3a2>
     77c:	a8 f5       	brcc	.+106    	; 0x7e8 <setDigit+0x2ea>
     77e:	86 30       	cpi	r24, 0x06	; 6
     780:	91 05       	cpc	r25, r1
     782:	09 f4       	brne	.+2      	; 0x786 <setDigit+0x288>
     784:	8a c0       	rjmp	.+276    	; 0x89a <setDigit+0x39c>
     786:	07 97       	sbiw	r24, 0x07	; 7
     788:	09 f0       	breq	.+2      	; 0x78c <setDigit+0x28e>
     78a:	1e cf       	rjmp	.-452    	; 0x5c8 <setDigit+0xca>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     78c:	88 ef       	ldi	r24, 0xF8	; 248
     78e:	8b bb       	out	0x1b, r24	; 27
     790:	1b cf       	rjmp	.-458    	; 0x5c8 <setDigit+0xca>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     792:	9b bb       	out	0x1b, r25	; 27
     794:	c3 cf       	rjmp	.-122    	; 0x71c <setDigit+0x21e>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     796:	83 30       	cpi	r24, 0x03	; 3
     798:	91 05       	cpc	r25, r1
     79a:	09 f4       	brne	.+2      	; 0x79e <setDigit+0x2a0>
     79c:	57 c0       	rjmp	.+174    	; 0x84c <setDigit+0x34e>
     79e:	04 97       	sbiw	r24, 0x04	; 4
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <setDigit+0x2a6>
     7a2:	12 cf       	rjmp	.-476    	; 0x5c8 <setDigit+0xca>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     7a4:	89 e9       	ldi	r24, 0x99	; 153
     7a6:	8b bb       	out	0x1b, r24	; 27
     7a8:	0f cf       	rjmp	.-482    	; 0x5c8 <setDigit+0xca>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	91 05       	cpc	r25, r1
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <setDigit+0x2b4>
     7b0:	59 c0       	rjmp	.+178    	; 0x864 <setDigit+0x366>
     7b2:	04 97       	sbiw	r24, 0x04	; 4
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <setDigit+0x2ba>
     7b6:	4d cf       	rjmp	.-358    	; 0x652 <setDigit+0x154>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     7b8:	89 e9       	ldi	r24, 0x99	; 153
     7ba:	8b bb       	out	0x1b, r24	; 27
     7bc:	4a cf       	rjmp	.-364    	; 0x652 <setDigit+0x154>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7be:	89 30       	cpi	r24, 0x09	; 9
     7c0:	91 05       	cpc	r25, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <setDigit+0x2c8>
     7c4:	5b c0       	rjmp	.+182    	; 0x87c <setDigit+0x37e>
     7c6:	8f 3f       	cpi	r24, 0xFF	; 255
     7c8:	91 05       	cpc	r25, r1
     7ca:	09 f0       	breq	.+2      	; 0x7ce <setDigit+0x2d0>
     7cc:	42 cf       	rjmp	.-380    	; 0x652 <setDigit+0x154>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	8b bb       	out	0x1b, r24	; 27
     7d2:	3f cf       	rjmp	.-386    	; 0x652 <setDigit+0x154>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <setDigit+0x2de>
     7da:	65 c0       	rjmp	.+202    	; 0x8a6 <setDigit+0x3a8>
     7dc:	04 97       	sbiw	r24, 0x04	; 4
     7de:	09 f0       	breq	.+2      	; 0x7e2 <setDigit+0x2e4>
     7e0:	21 cf       	rjmp	.-446    	; 0x624 <setDigit+0x126>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     7e2:	89 e9       	ldi	r24, 0x99	; 153
     7e4:	8b bb       	out	0x1b, r24	; 27
     7e6:	1e cf       	rjmp	.-452    	; 0x624 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7e8:	89 30       	cpi	r24, 0x09	; 9
     7ea:	91 05       	cpc	r25, r1
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <setDigit+0x2f2>
     7ee:	52 c0       	rjmp	.+164    	; 0x894 <setDigit+0x396>
     7f0:	8f 3f       	cpi	r24, 0xFF	; 255
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <setDigit+0x2fa>
     7f6:	e8 ce       	rjmp	.-560    	; 0x5c8 <setDigit+0xca>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	8b bb       	out	0x1b, r24	; 27
     7fc:	e5 ce       	rjmp	.-566    	; 0x5c8 <setDigit+0xca>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     7fe:	89 30       	cpi	r24, 0x09	; 9
     800:	91 05       	cpc	r25, r1
     802:	09 f4       	brne	.+2      	; 0x806 <setDigit+0x308>
     804:	53 c0       	rjmp	.+166    	; 0x8ac <setDigit+0x3ae>
     806:	8f 3f       	cpi	r24, 0xFF	; 255
     808:	91 05       	cpc	r25, r1
     80a:	09 f0       	breq	.+2      	; 0x80e <setDigit+0x310>
     80c:	0b cf       	rjmp	.-490    	; 0x624 <setDigit+0x126>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	8b bb       	out	0x1b, r24	; 27
     812:	08 cf       	rjmp	.-496    	; 0x624 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	91 05       	cpc	r25, r1
     818:	09 f4       	brne	.+2      	; 0x81c <setDigit+0x31e>
     81a:	63 c0       	rjmp	.+198    	; 0x8e2 <setDigit+0x3e4>
     81c:	08 f0       	brcs	.+2      	; 0x820 <setDigit+0x322>
     81e:	75 cf       	rjmp	.-278    	; 0x70a <setDigit+0x20c>
     820:	86 30       	cpi	r24, 0x06	; 6
     822:	91 05       	cpc	r25, r1
     824:	09 f4       	brne	.+2      	; 0x828 <setDigit+0x32a>
     826:	57 c0       	rjmp	.+174    	; 0x8d6 <setDigit+0x3d8>
     828:	07 97       	sbiw	r24, 0x07	; 7
     82a:	09 f0       	breq	.+2      	; 0x82e <setDigit+0x330>
     82c:	77 cf       	rjmp	.-274    	; 0x71c <setDigit+0x21e>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
     82e:	88 ef       	ldi	r24, 0xF8	; 248
     830:	8b bb       	out	0x1b, r24	; 27
     832:	74 cf       	rjmp	.-280    	; 0x71c <setDigit+0x21e>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     834:	84 ea       	ldi	r24, 0xA4	; 164
     836:	8b bb       	out	0x1b, r24	; 27
     838:	c7 ce       	rjmp	.-626    	; 0x5c8 <setDigit+0xca>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     83a:	80 ec       	ldi	r24, 0xC0	; 192
     83c:	8b bb       	out	0x1b, r24	; 27
     83e:	c4 ce       	rjmp	.-632    	; 0x5c8 <setDigit+0xca>
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     840:	82 e9       	ldi	r24, 0x92	; 146
     842:	8b bb       	out	0x1b, r24	; 27
     844:	c1 ce       	rjmp	.-638    	; 0x5c8 <setDigit+0xca>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     846:	84 ea       	ldi	r24, 0xA4	; 164
     848:	8b bb       	out	0x1b, r24	; 27
     84a:	03 cf       	rjmp	.-506    	; 0x652 <setDigit+0x154>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     84c:	80 eb       	ldi	r24, 0xB0	; 176
     84e:	8b bb       	out	0x1b, r24	; 27
     850:	bb ce       	rjmp	.-650    	; 0x5c8 <setDigit+0xca>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     852:	80 ec       	ldi	r24, 0xC0	; 192
     854:	8b bb       	out	0x1b, r24	; 27
     856:	fd ce       	rjmp	.-518    	; 0x652 <setDigit+0x154>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     858:	82 e8       	ldi	r24, 0x82	; 130
     85a:	8b bb       	out	0x1b, r24	; 27
     85c:	fa ce       	rjmp	.-524    	; 0x652 <setDigit+0x154>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     85e:	80 e8       	ldi	r24, 0x80	; 128
     860:	8b bb       	out	0x1b, r24	; 27
     862:	f7 ce       	rjmp	.-530    	; 0x652 <setDigit+0x154>
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     864:	80 eb       	ldi	r24, 0xB0	; 176
     866:	8b bb       	out	0x1b, r24	; 27
     868:	f4 ce       	rjmp	.-536    	; 0x652 <setDigit+0x154>
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     86a:	82 e9       	ldi	r24, 0x92	; 146
     86c:	8b bb       	out	0x1b, r24	; 27
     86e:	da ce       	rjmp	.-588    	; 0x624 <setDigit+0x126>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     870:	80 ec       	ldi	r24, 0xC0	; 192
     872:	8b bb       	out	0x1b, r24	; 27
     874:	d7 ce       	rjmp	.-594    	; 0x624 <setDigit+0x126>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     876:	84 ea       	ldi	r24, 0xA4	; 164
     878:	8b bb       	out	0x1b, r24	; 27
     87a:	d4 ce       	rjmp	.-600    	; 0x624 <setDigit+0x126>
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     87c:	88 e9       	ldi	r24, 0x98	; 152
     87e:	8b bb       	out	0x1b, r24	; 27
     880:	e8 ce       	rjmp	.-560    	; 0x652 <setDigit+0x154>
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     882:	82 e9       	ldi	r24, 0x92	; 146
     884:	8b bb       	out	0x1b, r24	; 27
     886:	e5 ce       	rjmp	.-566    	; 0x652 <setDigit+0x154>
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     888:	82 e8       	ldi	r24, 0x82	; 130
     88a:	8b bb       	out	0x1b, r24	; 27
     88c:	cb ce       	rjmp	.-618    	; 0x624 <setDigit+0x126>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	8b bb       	out	0x1b, r24	; 27
     892:	c8 ce       	rjmp	.-624    	; 0x624 <setDigit+0x126>
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     894:	88 e9       	ldi	r24, 0x98	; 152
     896:	8b bb       	out	0x1b, r24	; 27
     898:	97 ce       	rjmp	.-722    	; 0x5c8 <setDigit+0xca>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     89a:	82 e8       	ldi	r24, 0x82	; 130
     89c:	8b bb       	out	0x1b, r24	; 27
     89e:	94 ce       	rjmp	.-728    	; 0x5c8 <setDigit+0xca>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     8a0:	80 e8       	ldi	r24, 0x80	; 128
     8a2:	8b bb       	out	0x1b, r24	; 27
     8a4:	91 ce       	rjmp	.-734    	; 0x5c8 <setDigit+0xca>
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     8a6:	80 eb       	ldi	r24, 0xB0	; 176
     8a8:	8b bb       	out	0x1b, r24	; 27
     8aa:	bc ce       	rjmp	.-648    	; 0x624 <setDigit+0x126>
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     8ac:	88 e9       	ldi	r24, 0x98	; 152
     8ae:	8b bb       	out	0x1b, r24	; 27
     8b0:	b9 ce       	rjmp	.-654    	; 0x624 <setDigit+0x126>
}

//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	91 05       	cpc	r25, r1
     8b6:	c1 f0       	breq	.+48     	; 0x8e8 <setDigit+0x3ea>
     8b8:	04 97       	sbiw	r24, 0x04	; 4
     8ba:	09 f0       	breq	.+2      	; 0x8be <setDigit+0x3c0>
     8bc:	2f cf       	rjmp	.-418    	; 0x71c <setDigit+0x21e>
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
       break;
     case 4:
       PORTA = ~(SEG_B | SEG_C | SEG_F | SEG_G);
     8be:	89 e9       	ldi	r24, 0x99	; 153
     8c0:	8b bb       	out	0x1b, r24	; 27
     8c2:	2c cf       	rjmp	.-424    	; 0x71c <setDigit+0x21e>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
     8c4:	82 e9       	ldi	r24, 0x92	; 146
     8c6:	8b bb       	out	0x1b, r24	; 27
     8c8:	29 cf       	rjmp	.-430    	; 0x71c <setDigit+0x21e>
       break;
     case 1:
       PORTA = ~(SEG_B | SEG_C);
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
     8ca:	84 ea       	ldi	r24, 0xA4	; 164
     8cc:	8b bb       	out	0x1b, r24	; 27
     8ce:	26 cf       	rjmp	.-436    	; 0x71c <setDigit+0x21e>
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
       break;
     case 9:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_F | SEG_G);
     8d0:	88 e9       	ldi	r24, 0x98	; 152
     8d2:	8b bb       	out	0x1b, r24	; 27
     8d4:	23 cf       	rjmp	.-442    	; 0x71c <setDigit+0x21e>
       break;
     case 5:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_F | SEG_G);
       break;
     case 6:
       PORTA = ~(SEG_A | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     8d6:	82 e8       	ldi	r24, 0x82	; 130
     8d8:	8b bb       	out	0x1b, r24	; 27
     8da:	20 cf       	rjmp	.-448    	; 0x71c <setDigit+0x21e>
//Outputs the proper segment based on the input number
//Note: This function only currently supports 0-9 (as alphas were not needed for the assignment)
void inline setSegment( uint16_t targetOutput ){
  switch(targetOutput){
     case 0:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F);
     8dc:	80 ec       	ldi	r24, 0xC0	; 192
     8de:	8b bb       	out	0x1b, r24	; 27
     8e0:	1d cf       	rjmp	.-454    	; 0x71c <setDigit+0x21e>
       break;
     case 7:
       PORTA = ~(SEG_A | SEG_B | SEG_C);
       break;
     case 8:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G);
     8e2:	80 e8       	ldi	r24, 0x80	; 128
     8e4:	8b bb       	out	0x1b, r24	; 27
     8e6:	1a cf       	rjmp	.-460    	; 0x71c <setDigit+0x21e>
       break;
     case 2:
       PORTA = ~(SEG_A | SEG_B | SEG_D | SEG_E | SEG_G);
       break;
     case 3:
       PORTA = ~(SEG_A | SEG_B | SEG_C | SEG_D | SEG_G);  //Changed G to E
     8e8:	80 eb       	ldi	r24, 0xB0	; 176
     8ea:	8b bb       	out	0x1b, r24	; 27
     8ec:	17 cf       	rjmp	.-466    	; 0x71c <setDigit+0x21e>

000008ee <processButtonPress>:

//This function is called when a button is pressed, and handles processing the press, as well as
//changing tne numbers that are to be outputted.
void processButtonPress( void ){
  
  uint8_t temp = 0xFF - PINA;
     8ee:	89 b3       	in	r24, 0x19	; 25
     8f0:	80 95       	com	r24

  switch(temp){
     8f2:	88 30       	cpi	r24, 0x08	; 8
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <processButtonPress+0xa>
     8f6:	89 c0       	rjmp	.+274    	; 0xa0a <processButtonPress+0x11c>
     8f8:	f0 f0       	brcs	.+60     	; 0x936 <processButtonPress+0x48>
     8fa:	80 32       	cpi	r24, 0x20	; 32
     8fc:	09 f4       	brne	.+2      	; 0x900 <processButtonPress+0x12>
     8fe:	71 c0       	rjmp	.+226    	; 0x9e2 <processButtonPress+0xf4>
     900:	08 f4       	brcc	.+2      	; 0x904 <processButtonPress+0x16>
     902:	53 c0       	rjmp	.+166    	; 0x9aa <processButtonPress+0xbc>
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	e9 f1       	breq	.+122    	; 0x982 <processButtonPress+0x94>
     908:	80 38       	cpi	r24, 0x80	; 128
     90a:	09 f0       	breq	.+2      	; 0x90e <processButtonPress+0x20>
     90c:	b6 c0       	rjmp	.+364    	; 0xa7a <processButtonPress+0x18c>
    case 0x40: //Toggle Set minutes
      settings ^= SET_MIN;
      settings &= ~(SET_HR);
      break;
    case 0x80:
      settings ^= SET_HR;
     90e:	80 91 c8 01 	lds	r24, 0x01C8
     912:	90 91 c9 01 	lds	r25, 0x01C9
     916:	22 e0       	ldi	r18, 0x02	; 2
     918:	82 27       	eor	r24, r18
     91a:	90 93 c9 01 	sts	0x01C9, r25
     91e:	80 93 c8 01 	sts	0x01C8, r24
      settings &= ~(SET_MIN);
     922:	80 91 c8 01 	lds	r24, 0x01C8
     926:	90 91 c9 01 	lds	r25, 0x01C9
     92a:	8e 7f       	andi	r24, 0xFE	; 254
     92c:	90 93 c9 01 	sts	0x01C9, r25
     930:	80 93 c8 01 	sts	0x01C8, r24
     934:	08 95       	ret
//changing tne numbers that are to be outputted.
void processButtonPress( void ){
  
  uint8_t temp = 0xFF - PINA;

  switch(temp){
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	09 f4       	brne	.+2      	; 0x93c <processButtonPress+0x4e>
     93a:	45 c0       	rjmp	.+138    	; 0x9c6 <processButtonPress+0xd8>
     93c:	84 30       	cpi	r24, 0x04	; 4
     93e:	d1 f0       	breq	.+52     	; 0x974 <processButtonPress+0x86>
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	c1 f7       	brne	.-16     	; 0x934 <processButtonPress+0x46>
    case 0x01: //Add to alarm minutes
      if(settings & SET_MIN){
     944:	80 91 c8 01 	lds	r24, 0x01C8
     948:	90 91 c9 01 	lds	r25, 0x01C9
     94c:	80 fd       	sbrc	r24, 0
     94e:	87 c0       	rjmp	.+270    	; 0xa5e <processButtonPress+0x170>
        minutes = (minutes + 1) % 60;
	seconds = 0;
      }
      else{
        alarmMinutes += 5;
     950:	80 91 0a 01 	lds	r24, 0x010A
     954:	8b 5f       	subi	r24, 0xFB	; 251
        if(alarmMinutes >= 60){
     956:	8c 33       	cpi	r24, 0x3C	; 60
     958:	08 f4       	brcc	.+2      	; 0x95c <processButtonPress+0x6e>
     95a:	71 c0       	rjmp	.+226    	; 0xa3e <processButtonPress+0x150>
          alarmMinutes = 0;
     95c:	10 92 0a 01 	sts	0x010A, r1
  	  ++alarmHours;
     960:	80 91 d6 01 	lds	r24, 0x01D6
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 d6 01 	sts	0x01D6, r24
  	  if(alarmHours >= 24)
     96a:	88 31       	cpi	r24, 0x18	; 24
     96c:	18 f3       	brcs	.-58     	; 0x934 <processButtonPress+0x46>
  	    alarmHours = 0;
     96e:	10 92 d6 01 	sts	0x01D6, r1
     972:	08 95       	ret
        if(alarmHours >= 24)
          alarmHours = 0;
      }
      break;
    case 0x04: //Kill alarm
      currentlyAlarming = 0;
     974:	10 92 d5 01 	sts	0x01D5, r1
      snoozeCount = 0;      //We also want to get rid of snooze
     978:	10 92 d4 01 	sts	0x01D4, r1
     97c:	10 92 d3 01 	sts	0x01D3, r1
      break;
     980:	08 95       	ret
        upperDot = TRUE;
      else
        upperDot = FALSE;
      break;
    case 0x40: //Toggle Set minutes
      settings ^= SET_MIN;
     982:	80 91 c8 01 	lds	r24, 0x01C8
     986:	90 91 c9 01 	lds	r25, 0x01C9
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	82 27       	eor	r24, r18
     98e:	90 93 c9 01 	sts	0x01C9, r25
     992:	80 93 c8 01 	sts	0x01C8, r24
      settings &= ~(SET_HR);
     996:	80 91 c8 01 	lds	r24, 0x01C8
     99a:	90 91 c9 01 	lds	r25, 0x01C9
     99e:	8d 7f       	andi	r24, 0xFD	; 253
     9a0:	90 93 c9 01 	sts	0x01C9, r25
     9a4:	80 93 c8 01 	sts	0x01C8, r24
      break;
     9a8:	08 95       	ret
//changing tne numbers that are to be outputted.
void processButtonPress( void ){
  
  uint8_t temp = 0xFF - PINA;

  switch(temp){
     9aa:	80 31       	cpi	r24, 0x10	; 16
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <processButtonPress+0xc2>
     9ae:	64 c0       	rjmp	.+200    	; 0xa78 <processButtonPress+0x18a>
        settings &= ~(ALARM_ARMED); //Disarm the alarm
        snoozeCount = 1;       //This starts the snooze counter
      }
      break;
    case 0x10: //Arm alarm button
      settings ^= ALARM_ARMED;
     9b0:	80 91 c8 01 	lds	r24, 0x01C8
     9b4:	90 91 c9 01 	lds	r25, 0x01C9
     9b8:	28 e0       	ldi	r18, 0x08	; 8
     9ba:	82 27       	eor	r24, r18
     9bc:	90 93 c9 01 	sts	0x01C9, r25
     9c0:	80 93 c8 01 	sts	0x01C8, r24
      break;
     9c4:	08 95       	ret
  	    alarmHours = 0;
        }
      }
      break;
    case 0x02: //Add to alarm hours
      if(settings & SET_HR){
     9c6:	80 91 c8 01 	lds	r24, 0x01C8
     9ca:	90 91 c9 01 	lds	r25, 0x01C9
     9ce:	81 fd       	sbrc	r24, 1
     9d0:	39 c0       	rjmp	.+114    	; 0xa44 <processButtonPress+0x156>
        hours = (hours + 1) % 24;
	seconds = 0;
      }
      else {
        ++alarmHours;
     9d2:	80 91 d6 01 	lds	r24, 0x01D6
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	80 93 d6 01 	sts	0x01D6, r24
        if(alarmHours >= 24)
     9dc:	88 31       	cpi	r24, 0x18	; 24
     9de:	38 f6       	brcc	.-114    	; 0x96e <processButtonPress+0x80>
     9e0:	08 95       	ret
      break;
    case 0x10: //Arm alarm button
      settings ^= ALARM_ARMED;
      break;
    case 0x20: //Set military time button
      settings ^= TIME24;
     9e2:	80 91 c8 01 	lds	r24, 0x01C8
     9e6:	90 91 c9 01 	lds	r25, 0x01C9
     9ea:	24 e0       	ldi	r18, 0x04	; 4
     9ec:	82 27       	eor	r24, r18
     9ee:	90 93 c9 01 	sts	0x01C9, r25
     9f2:	80 93 c8 01 	sts	0x01C8, r24
      if(settings & TIME24)
     9f6:	80 91 c8 01 	lds	r24, 0x01C8
     9fa:	90 91 c9 01 	lds	r25, 0x01C9
     9fe:	82 ff       	sbrs	r24, 2
     a00:	1b c0       	rjmp	.+54     	; 0xa38 <processButtonPress+0x14a>
        upperDot = TRUE;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 cd 01 	sts	0x01CD, r24
     a08:	08 95       	ret
    case 0x04: //Kill alarm
      currentlyAlarming = 0;
      snoozeCount = 0;      //We also want to get rid of snooze
      break;
    case 0x08: //Snooze alarm
      if(currentlyAlarming){
     a0a:	80 91 d5 01 	lds	r24, 0x01D5
     a0e:	88 23       	and	r24, r24
     a10:	09 f4       	brne	.+2      	; 0xa14 <processButtonPress+0x126>
     a12:	90 cf       	rjmp	.-224    	; 0x934 <processButtonPress+0x46>
        currentlyAlarming = 0; //Kill the alarm
     a14:	10 92 d5 01 	sts	0x01D5, r1
        settings &= ~(ALARM_ARMED); //Disarm the alarm
     a18:	80 91 c8 01 	lds	r24, 0x01C8
     a1c:	90 91 c9 01 	lds	r25, 0x01C9
     a20:	87 7f       	andi	r24, 0xF7	; 247
     a22:	90 93 c9 01 	sts	0x01C9, r25
     a26:	80 93 c8 01 	sts	0x01C8, r24
        snoozeCount = 1;       //This starts the snooze counter
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 d4 01 	sts	0x01D4, r25
     a32:	80 93 d3 01 	sts	0x01D3, r24
     a36:	08 95       	ret
    case 0x20: //Set military time button
      settings ^= TIME24;
      if(settings & TIME24)
        upperDot = TRUE;
      else
        upperDot = FALSE;
     a38:	10 92 cd 01 	sts	0x01CD, r1
     a3c:	08 95       	ret
      if(settings & SET_MIN){
        minutes = (minutes + 1) % 60;
	seconds = 0;
      }
      else{
        alarmMinutes += 5;
     a3e:	80 93 0a 01 	sts	0x010A, r24
     a42:	08 95       	ret
        }
      }
      break;
    case 0x02: //Add to alarm hours
      if(settings & SET_HR){
        hours = (hours + 1) % 24;
     a44:	80 91 d7 01 	lds	r24, 0x01D7
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	68 e1       	ldi	r22, 0x18	; 24
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
     a54:	80 93 d7 01 	sts	0x01D7, r24
	seconds = 0;
     a58:	10 92 d9 01 	sts	0x01D9, r1
     a5c:	08 95       	ret
  uint8_t temp = 0xFF - PINA;

  switch(temp){
    case 0x01: //Add to alarm minutes
      if(settings & SET_MIN){
        minutes = (minutes + 1) % 60;
     a5e:	80 91 d8 01 	lds	r24, 0x01D8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	6c e3       	ldi	r22, 0x3C	; 60
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
     a6e:	80 93 d8 01 	sts	0x01D8, r24
	seconds = 0;
     a72:	10 92 d9 01 	sts	0x01D9, r1
     a76:	08 95       	ret
     a78:	08 95       	ret
     a7a:	08 95       	ret

00000a7c <processCounterOutput>:

}  
 
//This function processess the output of the counter variable.
//It checks for overflow conditions, and then calculates the numbers to be outputted on each 7 segment digit
void processCounterOutput( void ){
     a7c:	cf 92       	push	r12
     a7e:	df 92       	push	r13
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
  //We want to check for overflow/underflow here
  if(counter < 10000 && counter > 1023) //Check for simple overflow
     a84:	80 91 e8 01 	lds	r24, 0x01E8
     a88:	90 91 e9 01 	lds	r25, 0x01E9
     a8c:	9c 01       	movw	r18, r24
     a8e:	34 50       	subi	r19, 0x04	; 4
     a90:	20 31       	cpi	r18, 0x10	; 16
     a92:	33 42       	sbci	r19, 0x23	; 35
     a94:	08 f0       	brcs	.+2      	; 0xa98 <processCounterOutput+0x1c>
     a96:	d0 c0       	rjmp	.+416    	; 0xc38 <processCounterOutput+0x1bc>
    counter = (counter % 1024) + 1;
     a98:	93 70       	andi	r25, 0x03	; 3
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	90 93 e9 01 	sts	0x01E9, r25
     aa0:	80 93 e8 01 	sts	0x01E8, r24
  uint16_t tempCounter = counter;
  //calculate new output values

  //Calculate output due for minutes
  //Note: Output 1 is leftmost output
  tempCounter = minutes;
     aa4:	40 91 d8 01 	lds	r20, 0x01D8
     aa8:	50 e0       	ldi	r21, 0x00	; 0
  output[4] = tempCounter % 10;
     aaa:	9a 01       	movw	r18, r20
     aac:	ad ec       	ldi	r26, 0xCD	; 205
     aae:	bc ec       	ldi	r27, 0xCC	; 204
     ab0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__umulhisi3>
     ab4:	fc 01       	movw	r30, r24
     ab6:	f6 95       	lsr	r31
     ab8:	e7 95       	ror	r30
     aba:	f6 95       	lsr	r31
     abc:	e7 95       	ror	r30
     abe:	f6 95       	lsr	r31
     ac0:	e7 95       	ror	r30
     ac2:	9f 01       	movw	r18, r30
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	cf 01       	movw	r24, r30
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	82 0f       	add	r24, r18
     ad8:	93 1f       	adc	r25, r19
     ada:	48 1b       	sub	r20, r24
     adc:	59 0b       	sbc	r21, r25
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	40 93 ff 01 	sts	0x01FF, r20
     ae6:	50 93 00 02 	sts	0x0200, r21
     aea:	60 93 01 02 	sts	0x0201, r22
     aee:	70 93 02 02 	sts	0x0202, r23
  tempCounter /= 10;
  output[3] = tempCounter % 10;
     af2:	9f 01       	movw	r18, r30
     af4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__umulhisi3>
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	96 95       	lsr	r25
     afe:	87 95       	ror	r24
     b00:	96 95       	lsr	r25
     b02:	87 95       	ror	r24
     b04:	9c 01       	movw	r18, r24
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	9f 01       	movw	r18, r30
     b1c:	28 1b       	sub	r18, r24
     b1e:	39 0b       	sbc	r19, r25
     b20:	c9 01       	movw	r24, r18
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	80 93 fb 01 	sts	0x01FB, r24
     b2a:	90 93 fc 01 	sts	0x01FC, r25
     b2e:	a0 93 fd 01 	sts	0x01FD, r26
     b32:	b0 93 fe 01 	sts	0x01FE, r27

  //Calculate the output due for hours
  if(settings & TIME24)  //Check if we want to output military time
     b36:	80 91 c8 01 	lds	r24, 0x01C8
     b3a:	90 91 c9 01 	lds	r25, 0x01C9
    tempCounter = hours;
     b3e:	e0 91 d7 01 	lds	r30, 0x01D7
  output[4] = tempCounter % 10;
  tempCounter /= 10;
  output[3] = tempCounter % 10;

  //Calculate the output due for hours
  if(settings & TIME24)  //Check if we want to output military time
     b42:	82 ff       	sbrs	r24, 2
     b44:	5e c0       	rjmp	.+188    	; 0xc02 <processCounterOutput+0x186>
    tempCounter = hours;
     b46:	ce 2e       	mov	r12, r30
  else { //Otherwise, output "civilian time"
    tempCounter = hours % 12;
     b48:	d1 2c       	mov	r13, r1
     b4a:	96 01       	movw	r18, r12
     b4c:	ad ec       	ldi	r26, 0xCD	; 205
     b4e:	bc ec       	ldi	r27, 0xCC	; 204
     b50:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__umulhisi3>
     b54:	ac 01       	movw	r20, r24
     b56:	56 95       	lsr	r21
     b58:	47 95       	ror	r20
     b5a:	56 95       	lsr	r21
     b5c:	47 95       	ror	r20
     b5e:	56 95       	lsr	r21
     b60:	47 95       	ror	r20
     b62:	9a 01       	movw	r18, r20
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	ca 01       	movw	r24, r20
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	c8 1a       	sub	r12, r24
     b7c:	d9 0a       	sbc	r13, r25
     b7e:	e1 2c       	mov	r14, r1
     b80:	f1 2c       	mov	r15, r1
     b82:	9a 01       	movw	r18, r20
     b84:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__umulhisi3>
     b88:	96 95       	lsr	r25
     b8a:	87 95       	ror	r24
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	9c 01       	movw	r18, r24
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	82 0f       	add	r24, r18
     ba8:	93 1f       	adc	r25, r19
     baa:	9a 01       	movw	r18, r20
     bac:	28 1b       	sub	r18, r24
     bae:	39 0b       	sbc	r19, r25
     bb0:	c9 01       	movw	r24, r18
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
    if(tempCounter == 0)
      tempCounter = 12;
  }
  
  output[2] = tempCounter % 10;
     bb6:	c0 92 f7 01 	sts	0x01F7, r12
     bba:	d0 92 f8 01 	sts	0x01F8, r13
     bbe:	e0 92 f9 01 	sts	0x01F9, r14
     bc2:	f0 92 fa 01 	sts	0x01FA, r15
  tempCounter /= 10;
  output[1] = tempCounter % 10;
     bc6:	80 93 f3 01 	sts	0x01F3, r24
     bca:	90 93 f4 01 	sts	0x01F4, r25
     bce:	a0 93 f5 01 	sts	0x01F5, r26
     bd2:	b0 93 f6 01 	sts	0x01F6, r27

  //We want to output a dot to indicate "PM" if the time is over 11 and we're not in 24 hour mode
  if((hours > 11) && !(settings & TIME24))
     bd6:	ec 30       	cpi	r30, 0x0C	; 12
     bd8:	30 f0       	brcs	.+12     	; 0xbe6 <processCounterOutput+0x16a>
     bda:	80 91 c8 01 	lds	r24, 0x01C8
     bde:	90 91 c9 01 	lds	r25, 0x01C9
     be2:	82 ff       	sbrs	r24, 2
     be4:	34 c0       	rjmp	.+104    	; 0xc4e <processCounterOutput+0x1d2>
    dot[2] = 1;
  else
    dot[2] = 0;
     be6:	10 92 d0 01 	sts	0x01D0, r1

  //Blink the colon for seconds
  if(seconds % 2) //If seconds are odd
     bea:	80 91 d9 01 	lds	r24, 0x01D9
     bee:	80 fd       	sbrc	r24, 0
     bf0:	35 c0       	rjmp	.+106    	; 0xc5c <processCounterOutput+0x1e0>
    colon = FALSE;
  else
    colon = TRUE;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 cc 01 	sts	0x01CC, r24
  

}
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	08 95       	ret

  //Calculate the output due for hours
  if(settings & TIME24)  //Check if we want to output military time
    tempCounter = hours;
  else { //Otherwise, output "civilian time"
    tempCounter = hours % 12;
     c02:	8b ea       	ldi	r24, 0xAB	; 171
     c04:	e8 9f       	mul	r30, r24
     c06:	c1 2c       	mov	r12, r1
     c08:	11 24       	eor	r1, r1
     c0a:	c6 94       	lsr	r12
     c0c:	c6 94       	lsr	r12
     c0e:	c6 94       	lsr	r12
     c10:	8c 2d       	mov	r24, r12
     c12:	88 0f       	add	r24, r24
     c14:	c8 0e       	add	r12, r24
     c16:	cc 0c       	add	r12, r12
     c18:	cc 0c       	add	r12, r12
     c1a:	3e 2f       	mov	r19, r30
     c1c:	3c 19       	sub	r19, r12
     c1e:	c3 2e       	mov	r12, r19
    if(tempCounter == 0)
     c20:	09 f0       	breq	.+2      	; 0xc24 <processCounterOutput+0x1a8>
     c22:	92 cf       	rjmp	.-220    	; 0xb48 <processCounterOutput+0xcc>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	22 e0       	ldi	r18, 0x02	; 2
     c2e:	c2 2e       	mov	r12, r18
     c30:	d1 2c       	mov	r13, r1
     c32:	e1 2c       	mov	r14, r1
     c34:	f1 2c       	mov	r15, r1
     c36:	bf cf       	rjmp	.-130    	; 0xbb6 <processCounterOutput+0x13a>
void processCounterOutput( void ){
  //We want to check for overflow/underflow here
  if(counter < 10000 && counter > 1023) //Check for simple overflow
    counter = (counter % 1024) + 1;
 
  if(counter > 10000) //Check for overflow, because variable is a uint, it will wrap around
     c38:	81 31       	cpi	r24, 0x11	; 17
     c3a:	97 42       	sbci	r25, 0x27	; 39
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <processCounterOutput+0x1c4>
     c3e:	32 cf       	rjmp	.-412    	; 0xaa4 <processCounterOutput+0x28>
    counter = 1023;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	90 93 e9 01 	sts	0x01E9, r25
     c48:	80 93 e8 01 	sts	0x01E8, r24
     c4c:	2b cf       	rjmp	.-426    	; 0xaa4 <processCounterOutput+0x28>
  tempCounter /= 10;
  output[1] = tempCounter % 10;

  //We want to output a dot to indicate "PM" if the time is over 11 and we're not in 24 hour mode
  if((hours > 11) && !(settings & TIME24))
    dot[2] = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 d0 01 	sts	0x01D0, r24
  else
    dot[2] = 0;

  //Blink the colon for seconds
  if(seconds % 2) //If seconds are odd
     c54:	80 91 d9 01 	lds	r24, 0x01D9
     c58:	80 ff       	sbrs	r24, 0
     c5a:	cb cf       	rjmp	.-106    	; 0xbf2 <processCounterOutput+0x176>
    colon = FALSE;
     c5c:	10 92 cc 01 	sts	0x01CC, r1
  else
    colon = TRUE;
  

}
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	cf 90       	pop	r12
     c68:	08 95       	ret

00000c6a <processAlarm>:
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
     c6a:	80 91 c8 01 	lds	r24, 0x01C8
     c6e:	90 91 c9 01 	lds	r25, 0x01C9
     c72:	80 fd       	sbrc	r24, 0
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <processAlarm+0x18>
     c76:	80 91 c8 01 	lds	r24, 0x01C8
     c7a:	90 91 c9 01 	lds	r25, 0x01C9
     c7e:	81 ff       	sbrs	r24, 1
     c80:	84 c0       	rjmp	.+264    	; 0xd8a <processAlarm+0x120>
    settings &= ~ALARM_ARMED; //Unarm alarm
    currentlyAlarming = 1;    //Trigger alarm
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
     c82:	80 91 d3 01 	lds	r24, 0x01D3
     c86:	90 91 d4 01 	lds	r25, 0x01D4
     c8a:	8b 30       	cpi	r24, 0x0B	; 11
     c8c:	91 05       	cpc	r25, r1
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <processAlarm+0x28>
     c90:	52 c0       	rjmp	.+164    	; 0xd36 <processAlarm+0xcc>
    settings &= ~ALARM_ARMED;  //Disarm alarm
     c92:	80 91 c8 01 	lds	r24, 0x01C8
     c96:	90 91 c9 01 	lds	r25, 0x01C9
     c9a:	87 7f       	andi	r24, 0xF7	; 247
     c9c:	90 93 c9 01 	sts	0x01C9, r25
     ca0:	80 93 c8 01 	sts	0x01C8, r24
    currentlyAlarming = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 d5 01 	sts	0x01D5, r24
    snoozeCount = 0; //Stop the snooze count
     caa:	10 92 d4 01 	sts	0x01D4, r1
     cae:	10 92 d3 01 	sts	0x01D3, r1
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	ec e5       	ldi	r30, 0x5C	; 92
     cb6:	f2 e0       	ldi	r31, 0x02	; 2

  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
     cb8:	90 e2       	ldi	r25, 0x20	; 32
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	91 93       	st	Z+, r25


  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
     cbe:	32 e0       	ldi	r19, 0x02	; 2
     cc0:	ec 36       	cpi	r30, 0x6C	; 108
     cc2:	f3 07       	cpc	r31, r19
     cc4:	d1 f7       	brne	.-12     	; 0xcba <processAlarm+0x50>
      lcd_string_array[k] = ' ';
    lcd_string_array[17] = 'W';
     cc6:	97 e5       	ldi	r25, 0x57	; 87
     cc8:	90 93 6d 02 	sts	0x026D, r25
    lcd_string_array[18] = 'A';
     ccc:	91 e4       	ldi	r25, 0x41	; 65
     cce:	90 93 6e 02 	sts	0x026E, r25
    lcd_string_array[19] = 'K';
     cd2:	9b e4       	ldi	r25, 0x4B	; 75
     cd4:	90 93 6f 02 	sts	0x026F, r25
    lcd_string_array[20] = 'E';
     cd8:	95 e4       	ldi	r25, 0x45	; 69
     cda:	90 93 70 02 	sts	0x0270, r25
    lcd_string_array[21] = ' ';
     cde:	80 93 71 02 	sts	0x0271, r24
    lcd_string_array[22] = 'U';
     ce2:	95 e5       	ldi	r25, 0x55	; 85
     ce4:	90 93 72 02 	sts	0x0272, r25
    lcd_string_array[23] = 'P';
     ce8:	90 e5       	ldi	r25, 0x50	; 80
     cea:	90 93 73 02 	sts	0x0273, r25
    lcd_string_array[24] = ' ';
     cee:	80 93 74 02 	sts	0x0274, r24
    lcd_string_array[25] = ':';
     cf2:	8a e3       	ldi	r24, 0x3A	; 58
     cf4:	80 93 75 02 	sts	0x0275, r24
    lcd_string_array[26] = ')';
     cf8:	89 e2       	ldi	r24, 0x29	; 41
     cfa:	80 93 76 02 	sts	0x0276, r24
    for(i = 0; i < 20; ++i)
      lcd_string_array[i+8] = ' ';
  }

  //lcd_string_array[5] is blank
  if(!currentlyAlarming){
     cfe:	22 23       	and	r18, r18
     d00:	09 f4       	brne	.+2      	; 0xd04 <processAlarm+0x9a>
     d02:	3e c0       	rjmp	.+124    	; 0xd80 <processAlarm+0x116>

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	90 93 87 00 	sts	0x0087, r25
     d0c:	80 93 86 00 	sts	0x0086, r24
    SET_VOLUME(0);
  }
  else {
    //SET_HZ(400);
    SET_VOLUME(ALARM_VOLUME);
    SET_HZ(music[musicCounter]);
     d10:	e0 91 db 01 	lds	r30, 0x01DB
     d14:	f0 91 dc 01 	lds	r31, 0x01DC
     d18:	ee 0f       	add	r30, r30
     d1a:	ff 1f       	adc	r31, r31
     d1c:	e5 5f       	subi	r30, 0xF5	; 245
     d1e:	fe 4f       	sbci	r31, 0xFE	; 254
//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
void inline SET_HZ(uint16_t targetHz) {OCR1A = targetHz * 50;}
     d20:	20 81       	ld	r18, Z
     d22:	31 81       	ldd	r19, Z+1	; 0x01
     d24:	42 e3       	ldi	r20, 0x32	; 50
     d26:	42 9f       	mul	r20, r18
     d28:	c0 01       	movw	r24, r0
     d2a:	43 9f       	mul	r20, r19
     d2c:	90 0d       	add	r25, r0
     d2e:	11 24       	eor	r1, r1
     d30:	9b bd       	out	0x2b, r25	; 43
     d32:	8a bd       	out	0x2a, r24	; 42
     d34:	08 95       	ret
    snoozeCount = 0; //Stop the snooze count
  }


  //Detecting Alarm output
  if(currentlyAlarming){
     d36:	20 91 d5 01 	lds	r18, 0x01D5
     d3a:	21 11       	cpse	r18, r1
     d3c:	bb cf       	rjmp	.-138    	; 0xcb4 <processAlarm+0x4a>
    lcd_string_array[24] = ' ';
    lcd_string_array[25] = ':';
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
     d3e:	02 97       	sbiw	r24, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <processAlarm+0xda>
     d42:	49 c0       	rjmp	.+146    	; 0xdd6 <processAlarm+0x16c>
     d44:	ec e5       	ldi	r30, 0x5C	; 92
     d46:	f2 e0       	ldi	r31, 0x02	; 2
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
     d48:	80 e2       	ldi	r24, 0x20	; 32
     d4a:	81 93       	st	Z+, r24
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
    uint8_t k;
    for(k = 0; k < 16; ++k)
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	ec 36       	cpi	r30, 0x6C	; 108
     d50:	f9 07       	cpc	r31, r25
     d52:	d9 f7       	brne	.-10     	; 0xd4a <processAlarm+0xe0>
      lcd_string_array[k] = ' ';

    lcd_string_array[17] = 'Z';
     d54:	9a e5       	ldi	r25, 0x5A	; 90
     d56:	90 93 6d 02 	sts	0x026D, r25
    lcd_string_array[18] = 'z';
     d5a:	8a e7       	ldi	r24, 0x7A	; 122
     d5c:	80 93 6e 02 	sts	0x026E, r24
    lcd_string_array[19] = 'Z';
     d60:	90 93 6f 02 	sts	0x026F, r25
    lcd_string_array[20] = 'z';
     d64:	80 93 70 02 	sts	0x0270, r24
    lcd_string_array[21] = 'Z';
     d68:	90 93 71 02 	sts	0x0271, r25
    lcd_string_array[22] = 'z';
     d6c:	80 93 72 02 	sts	0x0272, r24
    lcd_string_array[23] = 'Z';
     d70:	90 93 73 02 	sts	0x0273, r25
    lcd_string_array[24] = 'z';
     d74:	80 93 74 02 	sts	0x0274, r24
    lcd_string_array[25] = 'Z';
     d78:	90 93 75 02 	sts	0x0275, r25
    lcd_string_array[26] = 'z';
     d7c:	80 93 76 02 	sts	0x0276, r24

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
     d80:	10 92 87 00 	sts	0x0087, r1
     d84:	10 92 86 00 	sts	0x0086, r1
     d88:	08 95       	ret
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
     d8a:	80 91 c8 01 	lds	r24, 0x01C8
     d8e:	90 91 c9 01 	lds	r25, 0x01C9
     d92:	83 ff       	sbrs	r24, 3
     d94:	76 cf       	rjmp	.-276    	; 0xc82 <processAlarm+0x18>
     d96:	90 91 d6 01 	lds	r25, 0x01D6
     d9a:	80 91 d7 01 	lds	r24, 0x01D7
     d9e:	98 13       	cpse	r25, r24
     da0:	70 cf       	rjmp	.-288    	; 0xc82 <processAlarm+0x18>
     da2:	90 91 0a 01 	lds	r25, 0x010A
     da6:	80 91 d8 01 	lds	r24, 0x01D8
     daa:	98 13       	cpse	r25, r24
     dac:	6a cf       	rjmp	.-300    	; 0xc82 <processAlarm+0x18>
    settings &= ~ALARM_ARMED; //Unarm alarm
     dae:	80 91 c8 01 	lds	r24, 0x01C8
     db2:	90 91 c9 01 	lds	r25, 0x01C9
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	90 93 c9 01 	sts	0x01C9, r25
     dbc:	80 93 c8 01 	sts	0x01C8, r24
    currentlyAlarming = 1;    //Trigger alarm
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 d5 01 	sts	0x01D5, r24
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
     dc6:	80 91 d3 01 	lds	r24, 0x01D3
     dca:	90 91 d4 01 	lds	r25, 0x01D4
     dce:	0b 97       	sbiw	r24, 0x0b	; 11
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <processAlarm+0x16a>
     dd2:	6f cf       	rjmp	.-290    	; 0xcb2 <processAlarm+0x48>
     dd4:	5e cf       	rjmp	.-324    	; 0xc92 <processAlarm+0x28>
    lcd_string_array[24] = 'z';
    lcd_string_array[25] = 'Z';
    lcd_string_array[26] = 'z';

  }
  else if(settings & ALARM_ARMED){  //If no alarm, no snooze, but alarm is set, we want to output when we are going to alarm
     dd6:	80 91 c8 01 	lds	r24, 0x01C8
     dda:	90 91 c9 01 	lds	r25, 0x01C9
     dde:	83 fd       	sbrc	r24, 3
     de0:	22 c0       	rjmp	.+68     	; 0xe26 <processAlarm+0x1bc>
    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
  }
  else{  //The alarm isn't armed, so we want to output that fact
    dot[4] = 0;
     de2:	10 92 d2 01 	sts	0x01D2, r1
    lcd_string_array[0] = 'n';
     de6:	8e e6       	ldi	r24, 0x6E	; 110
     de8:	80 93 5c 02 	sts	0x025C, r24
    lcd_string_array[1] = 'o';
     dec:	8f e6       	ldi	r24, 0x6F	; 111
     dee:	80 93 5d 02 	sts	0x025D, r24
    lcd_string_array[2] = ' ';
     df2:	80 e2       	ldi	r24, 0x20	; 32
     df4:	80 93 5e 02 	sts	0x025E, r24
    lcd_string_array[3] = 'a';
     df8:	81 e6       	ldi	r24, 0x61	; 97
     dfa:	80 93 5f 02 	sts	0x025F, r24
    lcd_string_array[4] = 'l';
     dfe:	9c e6       	ldi	r25, 0x6C	; 108
     e00:	90 93 60 02 	sts	0x0260, r25
    lcd_string_array[5] = 'a';
     e04:	80 93 61 02 	sts	0x0261, r24
    lcd_string_array[6] = 'r';
     e08:	82 e7       	ldi	r24, 0x72	; 114
     e0a:	80 93 62 02 	sts	0x0262, r24
    lcd_string_array[7] = 'm';
     e0e:	8d e6       	ldi	r24, 0x6D	; 109
     e10:	80 93 63 02 	sts	0x0263, r24
     e14:	e4 e6       	ldi	r30, 0x64	; 100
     e16:	f2 e0       	ldi	r31, 0x02	; 2

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
      lcd_string_array[i+8] = ' ';
     e18:	80 e2       	ldi	r24, 0x20	; 32
     e1a:	81 93       	st	Z+, r24
    lcd_string_array[6] = 'r';
    lcd_string_array[7] = 'm';

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	e8 37       	cpi	r30, 0x78	; 120
     e20:	f3 07       	cpc	r31, r19
     e22:	d9 f7       	brne	.-10     	; 0xe1a <processAlarm+0x1b0>
     e24:	ad cf       	rjmp	.-166    	; 0xd80 <processAlarm+0x116>
    lcd_string_array[25] = 'Z';
    lcd_string_array[26] = 'z';

  }
  else if(settings & ALARM_ARMED){  //If no alarm, no snooze, but alarm is set, we want to output when we are going to alarm
    dot[4] = 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 93 d2 01 	sts	0x01D2, r24
    lcd_string_array[0] = 'A';
     e2c:	81 e4       	ldi	r24, 0x41	; 65
     e2e:	80 93 5c 02 	sts	0x025C, r24
    lcd_string_array[1] = 'L';
     e32:	9c e4       	ldi	r25, 0x4C	; 76
     e34:	90 93 5d 02 	sts	0x025D, r25
    lcd_string_array[2] = 'A';
     e38:	80 93 5e 02 	sts	0x025E, r24
    lcd_string_array[3] = 'R';
     e3c:	82 e5       	ldi	r24, 0x52	; 82
     e3e:	80 93 5f 02 	sts	0x025F, r24
    lcd_string_array[4] = 'M';
     e42:	8d e4       	ldi	r24, 0x4D	; 77
     e44:	80 93 60 02 	sts	0x0260, r24
    lcd_string_array[5] = ' ';
     e48:	80 e2       	ldi	r24, 0x20	; 32
     e4a:	80 93 61 02 	sts	0x0261, r24
    lcd_string_array[6] = '@';
     e4e:	90 e4       	ldi	r25, 0x40	; 64
     e50:	90 93 62 02 	sts	0x0262, r25
    lcd_string_array[7] = ' ';
     e54:	80 93 63 02 	sts	0x0263, r24
    if(settings & TIME24){ //24 hour mode
     e58:	20 91 c8 01 	lds	r18, 0x01C8
     e5c:	30 91 c9 01 	lds	r19, 0x01C9
     e60:	22 fd       	sbrc	r18, 2
     e62:	5b c0       	rjmp	.+182    	; 0xf1a <processAlarm+0x2b0>
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
     e64:	20 91 d6 01 	lds	r18, 0x01D6
     e68:	22 23       	and	r18, r18
     e6a:	09 f4       	brne	.+2      	; 0xe6e <processAlarm+0x204>
     e6c:	71 c0       	rjmp	.+226    	; 0xf50 <processAlarm+0x2e6>
     e6e:	2c 30       	cpi	r18, 0x0C	; 12
     e70:	09 f4       	brne	.+2      	; 0xe74 <processAlarm+0x20a>
     e72:	6e c0       	rjmp	.+220    	; 0xf50 <processAlarm+0x2e6>
        lcd_string_array[8] = '1';
	lcd_string_array[9] = '2';
      }
      else{ //We have to do actual math
        if((alarmHours % 12) < 10)
     e74:	9b ea       	ldi	r25, 0xAB	; 171
     e76:	29 9f       	mul	r18, r25
     e78:	91 2d       	mov	r25, r1
     e7a:	11 24       	eor	r1, r1
     e7c:	96 95       	lsr	r25
     e7e:	96 95       	lsr	r25
     e80:	96 95       	lsr	r25
     e82:	39 2f       	mov	r19, r25
     e84:	33 0f       	add	r19, r19
     e86:	93 0f       	add	r25, r19
     e88:	99 0f       	add	r25, r25
     e8a:	99 0f       	add	r25, r25
     e8c:	32 2f       	mov	r19, r18
     e8e:	39 1b       	sub	r19, r25
     e90:	93 2f       	mov	r25, r19
     e92:	3a 30       	cpi	r19, 0x0A	; 10
     e94:	08 f0       	brcs	.+2      	; 0xe98 <processAlarm+0x22e>
	  lcd_string_array[8] = ' ';
	else
	  lcd_string_array[8] = ((alarmHours % 12) / 10) + 48;
     e96:	81 e3       	ldi	r24, 0x31	; 49
     e98:	80 93 64 02 	sts	0x0264, r24
	lcd_string_array[9] = ((alarmHours % 12) % 10) + 48;	
     e9c:	8d ec       	ldi	r24, 0xCD	; 205
     e9e:	98 9f       	mul	r25, r24
     ea0:	81 2d       	mov	r24, r1
     ea2:	11 24       	eor	r1, r1
     ea4:	86 95       	lsr	r24
     ea6:	86 95       	lsr	r24
     ea8:	86 95       	lsr	r24
     eaa:	3a e0       	ldi	r19, 0x0A	; 10
     eac:	83 9f       	mul	r24, r19
     eae:	90 19       	sub	r25, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	89 2f       	mov	r24, r25
     eb4:	80 5d       	subi	r24, 0xD0	; 208
     eb6:	80 93 65 02 	sts	0x0265, r24
      }
    }
    lcd_string_array[10] = ':';
     eba:	8a e3       	ldi	r24, 0x3A	; 58
     ebc:	80 93 66 02 	sts	0x0266, r24
    //time for minutes
    if(alarmMinutes < 10)
     ec0:	80 91 0a 01 	lds	r24, 0x010A
     ec4:	8a 30       	cpi	r24, 0x0A	; 10
     ec6:	c8 f5       	brcc	.+114    	; 0xf3a <processAlarm+0x2d0>
      lcd_string_array[11] = '0';
     ec8:	90 e3       	ldi	r25, 0x30	; 48
     eca:	90 93 67 02 	sts	0x0267, r25
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    lcd_string_array[12]  = (alarmMinutes % 10) + 48;
     ece:	9d ec       	ldi	r25, 0xCD	; 205
     ed0:	89 9f       	mul	r24, r25
     ed2:	91 2d       	mov	r25, r1
     ed4:	11 24       	eor	r1, r1
     ed6:	96 95       	lsr	r25
     ed8:	96 95       	lsr	r25
     eda:	96 95       	lsr	r25
     edc:	3a e0       	ldi	r19, 0x0A	; 10
     ede:	93 9f       	mul	r25, r19
     ee0:	80 19       	sub	r24, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	80 5d       	subi	r24, 0xD0	; 208
     ee6:	80 93 68 02 	sts	0x0268, r24
    
    if(!(settings & TIME24)){ //12 hour mode
     eea:	80 91 c8 01 	lds	r24, 0x01C8
     eee:	90 91 c9 01 	lds	r25, 0x01C9
     ef2:	82 fd       	sbrc	r24, 2
     ef4:	1c c0       	rjmp	.+56     	; 0xf2e <processAlarm+0x2c4>
      if(alarmHours > 11){
     ef6:	2c 30       	cpi	r18, 0x0C	; 12
     ef8:	08 f4       	brcc	.+2      	; 0xefc <processAlarm+0x292>
     efa:	3f c0       	rjmp	.+126    	; 0xf7a <processAlarm+0x310>
        lcd_string_array[13] = 'p';
     efc:	80 e7       	ldi	r24, 0x70	; 112
     efe:	80 93 69 02 	sts	0x0269, r24
      }
      else{
        lcd_string_array[13] = 'a';
      }
      lcd_string_array[14] = 'm';
     f02:	8d e6       	ldi	r24, 0x6D	; 109
     f04:	80 93 6a 02 	sts	0x026A, r24
     f08:	ec e6       	ldi	r30, 0x6C	; 108
     f0a:	f2 e0       	ldi	r31, 0x02	; 2
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	81 93       	st	Z+, r24
	lcd_string_array[14] = ' ';
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	ec 37       	cpi	r30, 0x7C	; 124
     f14:	f9 07       	cpc	r31, r25
     f16:	d9 f7       	brne	.-10     	; 0xf0e <processAlarm+0x2a4>
     f18:	33 cf       	rjmp	.-410    	; 0xd80 <processAlarm+0x116>
    lcd_string_array[4] = 'M';
    lcd_string_array[5] = ' ';
    lcd_string_array[6] = '@';
    lcd_string_array[7] = ' ';
    if(settings & TIME24){ //24 hour mode
      if(alarmHours == 0){
     f1a:	20 91 d6 01 	lds	r18, 0x01D6
     f1e:	21 11       	cpse	r18, r1
     f20:	1e c0       	rjmp	.+60     	; 0xf5e <processAlarm+0x2f4>
        lcd_string_array[8] = '0';
     f22:	80 e3       	ldi	r24, 0x30	; 48
     f24:	80 93 64 02 	sts	0x0264, r24
	lcd_string_array[9] = '0';
     f28:	80 93 65 02 	sts	0x0265, r24
     f2c:	c6 cf       	rjmp	.-116    	; 0xeba <processAlarm+0x250>
      }
      lcd_string_array[14] = 'm';
      
    }
    else{
        lcd_string_array[13] = ' ';
     f2e:	80 e2       	ldi	r24, 0x20	; 32
     f30:	80 93 69 02 	sts	0x0269, r24
	lcd_string_array[14] = ' ';
     f34:	80 93 6a 02 	sts	0x026A, r24
     f38:	e7 cf       	rjmp	.-50     	; 0xf08 <processAlarm+0x29e>
    lcd_string_array[10] = ':';
    //time for minutes
    if(alarmMinutes < 10)
      lcd_string_array[11] = '0';
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
     f3a:	9d ec       	ldi	r25, 0xCD	; 205
     f3c:	89 9f       	mul	r24, r25
     f3e:	91 2d       	mov	r25, r1
     f40:	11 24       	eor	r1, r1
     f42:	96 95       	lsr	r25
     f44:	96 95       	lsr	r25
     f46:	96 95       	lsr	r25
     f48:	90 5d       	subi	r25, 0xD0	; 208
     f4a:	90 93 67 02 	sts	0x0267, r25
     f4e:	bf cf       	rjmp	.-130    	; 0xece <processAlarm+0x264>
        lcd_string_array[9] = (alarmHours % 10) + 48;
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
        lcd_string_array[8] = '1';
     f50:	81 e3       	ldi	r24, 0x31	; 49
     f52:	80 93 64 02 	sts	0x0264, r24
	lcd_string_array[9] = '2';
     f56:	82 e3       	ldi	r24, 0x32	; 50
     f58:	80 93 65 02 	sts	0x0265, r24
     f5c:	ae cf       	rjmp	.-164    	; 0xeba <processAlarm+0x250>
      if(alarmHours == 0){
        lcd_string_array[8] = '0';
	lcd_string_array[9] = '0';
      }
      else{
        if(alarmHours < 10)
     f5e:	2a 30       	cpi	r18, 0x0A	; 10
     f60:	80 f4       	brcc	.+32     	; 0xf82 <processAlarm+0x318>
	  lcd_string_array[8] = '0';
     f62:	80 e3       	ldi	r24, 0x30	; 48
     f64:	80 93 64 02 	sts	0x0264, r24
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
     f68:	8d ec       	ldi	r24, 0xCD	; 205
     f6a:	28 9f       	mul	r18, r24
     f6c:	81 2d       	mov	r24, r1
     f6e:	11 24       	eor	r1, r1
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	86 95       	lsr	r24
     f76:	92 2f       	mov	r25, r18
     f78:	98 cf       	rjmp	.-208    	; 0xeaa <processAlarm+0x240>
    if(!(settings & TIME24)){ //12 hour mode
      if(alarmHours > 11){
        lcd_string_array[13] = 'p';
      }
      else{
        lcd_string_array[13] = 'a';
     f7a:	81 e6       	ldi	r24, 0x61	; 97
     f7c:	80 93 69 02 	sts	0x0269, r24
     f80:	c0 cf       	rjmp	.-128    	; 0xf02 <processAlarm+0x298>
      }
      else{
        if(alarmHours < 10)
	  lcd_string_array[8] = '0';
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
     f82:	8d ec       	ldi	r24, 0xCD	; 205
     f84:	28 9f       	mul	r18, r24
     f86:	81 2d       	mov	r24, r1
     f88:	11 24       	eor	r1, r1
     f8a:	86 95       	lsr	r24
     f8c:	86 95       	lsr	r24
     f8e:	86 95       	lsr	r24
     f90:	80 5d       	subi	r24, 0xD0	; 208
     f92:	80 93 64 02 	sts	0x0264, r24
     f96:	e8 cf       	rjmp	.-48     	; 0xf68 <processAlarm+0x2fe>

00000f98 <processOutputBrightness>:
//Processed the ADC count and adjusts the output brighness for the screen
//Calculations courtesy of: http://academics.triton.edu/faculty/mlarosa/slope.htm
void inline processOutputBrightness( void ){


  if(lastADCread < 480)
     f98:	80 91 3d 01 	lds	r24, 0x013D
     f9c:	90 91 3e 01 	lds	r25, 0x013E
     fa0:	80 3e       	cpi	r24, 0xE0	; 224
     fa2:	91 40       	sbci	r25, 0x01	; 1
     fa4:	c0 f0       	brcs	.+48     	; 0xfd6 <processOutputBrightness+0x3e>
    setLEDBrightness(MIN_BRT);
  else
    setLEDBrightness((lastADCread * -.4) + 410);
     fa6:	60 91 3d 01 	lds	r22, 0x013D
     faa:	70 91 3e 01 	lds	r23, 0x013E
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5e eb       	ldi	r21, 0xBE	; 190
     fbe:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4d ec       	ldi	r20, 0xCD	; 205
     fc8:	53 e4       	ldi	r21, 0x43	; 67
     fca:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__addsf3>
     fce:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fixunssfsi>
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
     fd2:	63 bd       	out	0x23, r22	; 35
     fd4:	08 95       	ret
     fd6:	8c ed       	ldi	r24, 0xDC	; 220
     fd8:	83 bd       	out	0x23, r24	; 35
     fda:	08 95       	ret

00000fdc <checkButtons>:
//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	8b bb       	out	0x1b, r24	; 27
     fe0:	1a ba       	out	0x1a, r1	; 26
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}
     fe2:	88 b3       	in	r24, 0x18	; 24
     fe4:	80 67       	ori	r24, 0x70	; 112
     fe6:	88 bb       	out	0x18, r24	; 24
	...
  NOP();

  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
     ff0:	89 b3       	in	r24, 0x19	; 25
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	61 f1       	breq	.+88     	; 0x104e <checkButtons+0x72>
    if(unpressed){
     ff6:	80 91 40 01 	lds	r24, 0x0140
     ffa:	81 11       	cpse	r24, r1
     ffc:	2c c0       	rjmp	.+88     	; 0x1056 <checkButtons+0x7a>
      processButtonPress();
      unpressed = 0; //Latches the button press
    }
    else if(PINA == lastEntered){ //Don't preform any action
     ffe:	89 b3       	in	r24, 0x19	; 25
    1000:	20 91 e3 01 	lds	r18, 0x01E3
    1004:	30 91 e4 01 	lds	r19, 0x01E4
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	82 17       	cp	r24, r18
    100c:	93 07       	cpc	r25, r19
    100e:	41 f1       	breq	.+80     	; 0x1060 <checkButtons+0x84>
      ++debounceCounter;
    }
    else if(PINA != lastEntered){
    1010:	89 b3       	in	r24, 0x19	; 25
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	41 f0       	breq	.+16     	; 0x102a <checkButtons+0x4e>
      processButtonPress();
    101a:	0e 94 77 04 	call	0x8ee	; 0x8ee <processButtonPress>
      debounceCounter = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	90 93 e2 01 	sts	0x01E2, r25
    1026:	80 93 e1 01 	sts	0x01E1, r24
    }

    lastEntered = PINA;
    102a:	89 b3       	in	r24, 0x19	; 25
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 e4 01 	sts	0x01E4, r25
    1032:	80 93 e3 01 	sts	0x01E3, r24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	8a bb       	out	0x1a, r24	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
    103a:	c4 9a       	sbi	0x18, 4	; 24
    103c:	88 b3       	in	r24, 0x18	; 24
    103e:	8f 79       	andi	r24, 0x9F	; 159
    1040:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1042:	c6 9a       	sbi	0x18, 6	; 24
	...

  //Wait for voltages to settle before moving on
  NOP();
  NOP();
  NOP();
  NOP();
    104c:	08 95       	ret
    }

    lastEntered = PINA;
  }
  else {
    unpressed = 1;  //Release the latch
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 40 01 	sts	0x0140, r24
    1054:	f0 cf       	rjmp	.-32     	; 0x1036 <checkButtons+0x5a>
  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    if(unpressed){
      processButtonPress();
    1056:	0e 94 77 04 	call	0x8ee	; 0x8ee <processButtonPress>
      unpressed = 0; //Latches the button press
    105a:	10 92 40 01 	sts	0x0140, r1
    105e:	e5 cf       	rjmp	.-54     	; 0x102a <checkButtons+0x4e>
    }
    else if(PINA == lastEntered){ //Don't preform any action
      ++debounceCounter;
    1060:	80 91 e1 01 	lds	r24, 0x01E1
    1064:	90 91 e2 01 	lds	r25, 0x01E2
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	90 93 e2 01 	sts	0x01E2, r25
    106e:	80 93 e1 01 	sts	0x01E1, r24
    1072:	db cf       	rjmp	.-74     	; 0x102a <checkButtons+0x4e>

00001074 <updateSPI>:

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
    1074:	1e 98       	cbi	0x03, 6	; 3
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
void inline ENC_PARALLEL_DISABLE(void) {PORTE |=   0x80 ;}
    1076:	1f 9a       	sbi	0x03, 7	; 3
  
  ENC_CLK_ENABLE();        //Allow us to read in serial data
  ENC_PARALLEL_DISABLE();  //Allow us to read in serial data

  //NOPs required for electrical propogation
  NOP();
    1078:	00 00       	nop
  NOP();
    107a:	00 00       	nop

  //Write to the bar graph and read from the encoders
  SPDR = bargraphOutput;
    107c:	80 91 df 01 	lds	r24, 0x01DF
    1080:	8f b9       	out	0x0f, r24	; 15
  lastEncoderValue = SPDR;
    1082:	8f b1       	in	r24, 0x0f	; 15
    1084:	80 93 3f 01 	sts	0x013F, r24

  //Wait for SPI operation
  while (bit_is_clear(SPSR, SPIF)){};
    1088:	77 9b       	sbis	0x0e, 7	; 14
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <updateSPI+0x14>

  upToDateEncoderValue = 1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 e0 01 	sts	0x01E0, r24
//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
    1092:	1e 9a       	sbi	0x03, 6	; 3

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
    1094:	1f 98       	cbi	0x03, 7	; 3

  ENC_CLK_DISABLE();
  ENC_PARALLEL_ENABLE();

  //Output the bar graph info
  PORTB |=  0x01;
    1096:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;
    1098:	c0 98       	cbi	0x18, 0	; 24
    109a:	08 95       	ret

0000109c <processEncoders>:
  uint8_t static lEncoderPrev = 0;
  uint8_t static rEncoderPrev = 0;
  uint8_t static lEncoder = 0;
  uint8_t static rEncoder = 0;
  
  lEncoderPrev = lEncoder;
    109c:	80 91 ed 01 	lds	r24, 0x01ED
    10a0:	80 93 ec 01 	sts	0x01EC, r24
  rEncoderPrev = rEncoder;
    10a4:	20 91 eb 01 	lds	r18, 0x01EB
    10a8:	20 93 ea 01 	sts	0x01EA, r18

  //Save previous values
  lEncoder =  (lastEncoderValue & 0x03);
    10ac:	80 91 3f 01 	lds	r24, 0x013F
    10b0:	98 2f       	mov	r25, r24
    10b2:	93 70       	andi	r25, 0x03	; 3
    10b4:	90 93 ed 01 	sts	0x01ED, r25
  rEncoder = ((lastEncoderValue & 0x0C) >> 2);
    10b8:	8c 70       	andi	r24, 0x0C	; 12
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	95 95       	asr	r25
    10be:	87 95       	ror	r24
    10c0:	95 95       	asr	r25
    10c2:	87 95       	ror	r24
    10c4:	80 93 eb 01 	sts	0x01EB, r24
      ENC_L_COUNTUP();
    if((lEncoderPrev == 0x02) && (lEncoder == 0x03))
      ENC_L_COUNTDOWN();
  }

  if(rEncoder != rEncoderPrev){
    10c8:	28 17       	cp	r18, r24
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <processEncoders+0x3c>
    if((rEncoderPrev == 0x01) && (rEncoder == 0x03))
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	29 f0       	breq	.+10     	; 0x10da <processEncoders+0x3e>
      ENC_R_COUNTUP();
    if((rEncoderPrev == 0x02) && (rEncoder == 0x03))
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <processEncoders+0x3c>
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	41 f1       	breq	.+80     	; 0x1128 <__stack+0x29>
    10d8:	08 95       	ret
    if((lEncoderPrev == 0x02) && (lEncoder == 0x03))
      ENC_L_COUNTDOWN();
  }

  if(rEncoder != rEncoderPrev){
    if((rEncoderPrev == 0x01) && (rEncoder == 0x03))
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <processEncoders+0x3c>
void inline ENC_L_COUNTDOWN(void){
  //ENC_R_COUNTDOWN();
}
void inline ENC_R_COUNTUP(void){
  
  if(settings & SET_MIN){
    10de:	80 91 c8 01 	lds	r24, 0x01C8
    10e2:	90 91 c9 01 	lds	r25, 0x01C9
    10e6:	80 ff       	sbrs	r24, 0
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <__stack+0x3>
      minutes = (minutes + 1) % 60;
    10ea:	80 91 d8 01 	lds	r24, 0x01D8
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	6c e3       	ldi	r22, 0x3C	; 60
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
    10fa:	80 93 d8 01 	sts	0x01D8, r24
      seconds = 0;
    10fe:	10 92 d9 01 	sts	0x01D9, r1
  }
  if(settings & SET_HR){
    1102:	80 91 c8 01 	lds	r24, 0x01C8
    1106:	90 91 c9 01 	lds	r25, 0x01C9
    110a:	81 ff       	sbrs	r24, 1
    110c:	e5 cf       	rjmp	.-54     	; 0x10d8 <processEncoders+0x3c>
    hours = (hours + 1) % 24;
    110e:	80 91 d7 01 	lds	r24, 0x01D7
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	68 e1       	ldi	r22, 0x18	; 24
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
    111e:	80 93 d7 01 	sts	0x01D7, r24
    seconds = 0;
    1122:	10 92 d9 01 	sts	0x01D9, r1
    1126:	08 95       	ret
  }
}
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    1128:	80 91 c8 01 	lds	r24, 0x01C8
    112c:	90 91 c9 01 	lds	r25, 0x01C9
    1130:	80 ff       	sbrs	r24, 0
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <__stack+0x47>
    if(minutes == 0)
    1134:	80 91 d8 01 	lds	r24, 0x01D8
    1138:	81 11       	cpse	r24, r1
    113a:	19 c0       	rjmp	.+50     	; 0x116e <__stack+0x6f>
      minutes = 59;
    113c:	8b e3       	ldi	r24, 0x3B	; 59
    113e:	80 93 d8 01 	sts	0x01D8, r24
    else
      minutes -= 1;
    seconds = 0;
    1142:	10 92 d9 01 	sts	0x01D9, r1
  }
  if(settings & SET_HR){
    1146:	80 91 c8 01 	lds	r24, 0x01C8
    114a:	90 91 c9 01 	lds	r25, 0x01C9
    114e:	81 ff       	sbrs	r24, 1
    1150:	c3 cf       	rjmp	.-122    	; 0x10d8 <processEncoders+0x3c>
    if(hours == 0)
    1152:	80 91 d7 01 	lds	r24, 0x01D7
    1156:	81 11       	cpse	r24, r1
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <__stack+0x67>
      hours = 23;
    115a:	87 e1       	ldi	r24, 0x17	; 23
    115c:	80 93 d7 01 	sts	0x01D7, r24
    else
      hours -= 1;
    seconds = 0;
    1160:	10 92 d9 01 	sts	0x01D9, r1
    1164:	08 95       	ret
  }
  if(settings & SET_HR){
    if(hours == 0)
      hours = 23;
    else
      hours -= 1;
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	80 93 d7 01 	sts	0x01D7, r24
    116c:	f9 cf       	rjmp	.-14     	; 0x1160 <__stack+0x61>
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    if(minutes == 0)
      minutes = 59;
    else
      minutes -= 1;
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	80 93 d8 01 	sts	0x01D8, r24
    1174:	e6 cf       	rjmp	.-52     	; 0x1142 <__stack+0x43>

00001176 <incrementCounter>:
  
}

//Called to increment the counter variable
void inline incrementCounter( void ){
  if(inc2Bool & inc4Bool)
    1176:	80 91 e6 01 	lds	r24, 0x01E6
    117a:	90 91 e5 01 	lds	r25, 0x01E5
    117e:	29 2f       	mov	r18, r25
    1180:	28 23       	and	r18, r24
    1182:	c1 f4       	brne	.+48     	; 0x11b4 <incrementCounter+0x3e>
    NOP();
  else if (inc2Bool)
    1184:	81 11       	cpse	r24, r1
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <incrementCounter+0x2a>
    counter += 2;
  else if (inc4Bool)
    1188:	91 11       	cpse	r25, r1
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <incrementCounter+0x42>
    counter += 4;
  else
    counter += 1;
    118c:	80 91 e8 01 	lds	r24, 0x01E8
    1190:	90 91 e9 01 	lds	r25, 0x01E9
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	90 93 e9 01 	sts	0x01E9, r25
    119a:	80 93 e8 01 	sts	0x01E8, r24
    119e:	08 95       	ret
//Called to increment the counter variable
void inline incrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
  else if (inc2Bool)
    counter += 2;
    11a0:	80 91 e8 01 	lds	r24, 0x01E8
    11a4:	90 91 e9 01 	lds	r25, 0x01E9
    11a8:	02 96       	adiw	r24, 0x02	; 2
    11aa:	90 93 e9 01 	sts	0x01E9, r25
    11ae:	80 93 e8 01 	sts	0x01E8, r24
    11b2:	08 95       	ret
}

//Called to increment the counter variable
void inline incrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
    11b4:	00 00       	nop
    11b6:	08 95       	ret
  else if (inc2Bool)
    counter += 2;
  else if (inc4Bool)
    counter += 4;
    11b8:	80 91 e8 01 	lds	r24, 0x01E8
    11bc:	90 91 e9 01 	lds	r25, 0x01E9
    11c0:	04 96       	adiw	r24, 0x04	; 4
    11c2:	90 93 e9 01 	sts	0x01E9, r25
    11c6:	80 93 e8 01 	sts	0x01E8, r24
    11ca:	08 95       	ret

000011cc <decrementCounter>:
    
}

//Called to decrement the counter variable
void inline decrementCounter( void ){
  if(inc2Bool & inc4Bool)
    11cc:	80 91 e6 01 	lds	r24, 0x01E6
    11d0:	90 91 e5 01 	lds	r25, 0x01E5
    11d4:	29 2f       	mov	r18, r25
    11d6:	28 23       	and	r18, r24
    11d8:	c1 f4       	brne	.+48     	; 0x120a <decrementCounter+0x3e>
    NOP();
  else if (inc2Bool)
    11da:	81 11       	cpse	r24, r1
    11dc:	0c c0       	rjmp	.+24     	; 0x11f6 <decrementCounter+0x2a>
    counter -= 2;
  else if (inc4Bool)
    11de:	91 11       	cpse	r25, r1
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <decrementCounter+0x42>
    counter -= 4;
  else
    counter -= 1;
    11e2:	80 91 e8 01 	lds	r24, 0x01E8
    11e6:	90 91 e9 01 	lds	r25, 0x01E9
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	90 93 e9 01 	sts	0x01E9, r25
    11f0:	80 93 e8 01 	sts	0x01E8, r24
    11f4:	08 95       	ret
//Called to decrement the counter variable
void inline decrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
  else if (inc2Bool)
    counter -= 2;
    11f6:	80 91 e8 01 	lds	r24, 0x01E8
    11fa:	90 91 e9 01 	lds	r25, 0x01E9
    11fe:	02 97       	sbiw	r24, 0x02	; 2
    1200:	90 93 e9 01 	sts	0x01E9, r25
    1204:	80 93 e8 01 	sts	0x01E8, r24
    1208:	08 95       	ret
}

//Called to decrement the counter variable
void inline decrementCounter( void ){
  if(inc2Bool & inc4Bool)
    NOP();
    120a:	00 00       	nop
    120c:	08 95       	ret
  else if (inc2Bool)
    counter -= 2;
  else if (inc4Bool)
    counter -= 4;
    120e:	80 91 e8 01 	lds	r24, 0x01E8
    1212:	90 91 e9 01 	lds	r25, 0x01E9
    1216:	04 97       	sbiw	r24, 0x04	; 4
    1218:	90 93 e9 01 	sts	0x01E9, r25
    121c:	80 93 e8 01 	sts	0x01E8, r24
    1220:	08 95       	ret

00001222 <ENC_L_COUNTUP>:
    counter -= 1;
}


//Parsed commands from the encoders (parsed to one call per detent)
void inline ENC_L_COUNTUP(void){
    1222:	08 95       	ret

00001224 <ENC_L_COUNTDOWN>:
  //ENC_R_COUNTUP();
}
void inline ENC_L_COUNTDOWN(void){
    1224:	08 95       	ret

00001226 <ENC_R_COUNTUP>:
  //ENC_R_COUNTDOWN();
}
void inline ENC_R_COUNTUP(void){
  
  if(settings & SET_MIN){
    1226:	80 91 c8 01 	lds	r24, 0x01C8
    122a:	90 91 c9 01 	lds	r25, 0x01C9
    122e:	80 ff       	sbrs	r24, 0
    1230:	0c c0       	rjmp	.+24     	; 0x124a <ENC_R_COUNTUP+0x24>
      minutes = (minutes + 1) % 60;
    1232:	80 91 d8 01 	lds	r24, 0x01D8
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	6c e3       	ldi	r22, 0x3C	; 60
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
    1242:	80 93 d8 01 	sts	0x01D8, r24
      seconds = 0;
    1246:	10 92 d9 01 	sts	0x01D9, r1
  }
  if(settings & SET_HR){
    124a:	80 91 c8 01 	lds	r24, 0x01C8
    124e:	90 91 c9 01 	lds	r25, 0x01C9
    1252:	81 ff       	sbrs	r24, 1
    1254:	0c c0       	rjmp	.+24     	; 0x126e <ENC_R_COUNTUP+0x48>
    hours = (hours + 1) % 24;
    1256:	80 91 d7 01 	lds	r24, 0x01D7
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	68 e1       	ldi	r22, 0x18	; 24
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
    1266:	80 93 d7 01 	sts	0x01D7, r24
    seconds = 0;
    126a:	10 92 d9 01 	sts	0x01D9, r1
    126e:	08 95       	ret

00001270 <ENC_R_COUNTDOWN>:
  }
}
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    1270:	80 91 c8 01 	lds	r24, 0x01C8
    1274:	90 91 c9 01 	lds	r25, 0x01C9
    1278:	80 ff       	sbrs	r24, 0
    127a:	09 c0       	rjmp	.+18     	; 0x128e <ENC_R_COUNTDOWN+0x1e>
    if(minutes == 0)
    127c:	80 91 d8 01 	lds	r24, 0x01D8
    1280:	88 23       	and	r24, r24
    1282:	c9 f0       	breq	.+50     	; 0x12b6 <ENC_R_COUNTDOWN+0x46>
      minutes = 59;
    else
      minutes -= 1;
    1284:	81 50       	subi	r24, 0x01	; 1
    1286:	80 93 d8 01 	sts	0x01D8, r24
    seconds = 0;
    128a:	10 92 d9 01 	sts	0x01D9, r1
  }
  if(settings & SET_HR){
    128e:	80 91 c8 01 	lds	r24, 0x01C8
    1292:	90 91 c9 01 	lds	r25, 0x01C9
    1296:	81 ff       	sbrs	r24, 1
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <ENC_R_COUNTDOWN+0x3c>
    if(hours == 0)
    129a:	80 91 d7 01 	lds	r24, 0x01D7
    129e:	88 23       	and	r24, r24
    12a0:	31 f0       	breq	.+12     	; 0x12ae <ENC_R_COUNTDOWN+0x3e>
      hours = 23;
    else
      hours -= 1;
    12a2:	81 50       	subi	r24, 0x01	; 1
    12a4:	80 93 d7 01 	sts	0x01D7, r24
    seconds = 0;
    12a8:	10 92 d9 01 	sts	0x01D9, r1
    12ac:	08 95       	ret
      minutes -= 1;
    seconds = 0;
  }
  if(settings & SET_HR){
    if(hours == 0)
      hours = 23;
    12ae:	87 e1       	ldi	r24, 0x17	; 23
    12b0:	80 93 d7 01 	sts	0x01D7, r24
    12b4:	f9 cf       	rjmp	.-14     	; 0x12a8 <ENC_R_COUNTDOWN+0x38>
  }
}
void inline ENC_R_COUNTDOWN(void){
  if(settings & SET_MIN){
    if(minutes == 0)
      minutes = 59;
    12b6:	8b e3       	ldi	r24, 0x3B	; 59
    12b8:	80 93 d8 01 	sts	0x01D8, r24
    12bc:	e6 cf       	rjmp	.-52     	; 0x128a <ENC_R_COUNTDOWN+0x1a>

000012be <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	81 11       	cpse	r24, r1
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <send_lcd+0x8>
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c8:	77 9b       	sbis	0x0e, 7	; 14
    12ca:	fe cf       	rjmp	.-4      	; 0x12c8 <send_lcd+0xa>
  SPDR = byte;                        //send payload
    12cc:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12ce:	77 9b       	sbis	0x0e, 7	; 14
    12d0:	fe cf       	rjmp	.-4      	; 0x12ce <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12d2:	80 91 62 00 	lds	r24, 0x0062
    12d6:	88 60       	ori	r24, 0x08	; 8
    12d8:	80 93 62 00 	sts	0x0062, r24
    12dc:	80 91 62 00 	lds	r24, 0x0062
    12e0:	87 7f       	andi	r24, 0xF7	; 247
    12e2:	80 93 62 00 	sts	0x0062, r24
    12e6:	08 95       	ret

000012e8 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
    12e8:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    12ea:	c0 91 ee 01 	lds	r28, 0x01EE
    12ee:	8c 0f       	add	r24, r28
    12f0:	91 1d       	adc	r25, r1
    12f2:	fc 01       	movw	r30, r24
    12f4:	60 81       	ld	r22, Z
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
 i++;   //increment to next character
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8c 0f       	add	r24, r28
    1300:	80 93 ee 01 	sts	0x01EE, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    1304:	80 31       	cpi	r24, 0x10	; 16
    1306:	89 f0       	breq	.+34     	; 0x132a <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1308:	80 32       	cpi	r24, 0x20	; 32
    130a:	11 f0       	breq	.+4      	; 0x1310 <refresh_lcd+0x28>

 return i;
}//refresh_lcd
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret
    1310:	85 ed       	ldi	r24, 0xD5	; 213
    1312:	8a 95       	dec	r24
    1314:	f1 f7       	brne	.-4      	; 0x1312 <refresh_lcd+0x2a>
    1316:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1318:	60 e8       	ldi	r22, 0x80	; 128
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1320:	10 92 ee 01 	sts	0x01EE, r1
    1324:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret
    132a:	f5 ed       	ldi	r31, 0xD5	; 213
    132c:	fa 95       	dec	r31
    132e:	f1 f7       	brne	.-4      	; 0x132c <refresh_lcd+0x44>
    1330:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1332:	60 ec       	ldi	r22, 0xC0	; 192
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    133a:	80 91 ee 01 	lds	r24, 0x01EE
    133e:	e4 cf       	rjmp	.-56     	; 0x1308 <refresh_lcd+0x20>

00001340 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	1f 92       	push	r1
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    1354:	66 0f       	add	r22, r22
    1356:	66 0f       	add	r22, r22
    1358:	66 0f       	add	r22, r22
    135a:	60 5c       	subi	r22, 0xC0	; 192
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	99 83       	std	Y+1, r25	; 0x01
    1360:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1364:	85 ed       	ldi	r24, 0xD5	; 213
    1366:	8a 95       	dec	r24
    1368:	f1 f7       	brne	.-4      	; 0x1366 <set_custom_character+0x26>
    136a:	00 00       	nop
    136c:	e1 2e       	mov	r14, r17
    136e:	99 81       	ldd	r25, Y+1	; 0x01
    1370:	f9 2e       	mov	r15, r25
    1372:	87 01       	movw	r16, r14
    1374:	08 5f       	subi	r16, 0xF8	; 248
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    1378:	f7 01       	movw	r30, r14
    137a:	61 91       	ld	r22, Z+
    137c:	7f 01       	movw	r14, r30
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1384:	f5 ed       	ldi	r31, 0xD5	; 213
    1386:	fa 95       	dec	r31
    1388:	f1 f7       	brne	.-4      	; 0x1386 <set_custom_character+0x46>
    138a:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    138c:	e0 16       	cp	r14, r16
    138e:	f1 06       	cpc	r15, r17
    1390:	99 f7       	brne	.-26     	; 0x1378 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    1392:	0f 90       	pop	r0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    13a2:	90 e4       	ldi	r25, 0x40	; 64
    13a4:	89 9f       	mul	r24, r25
    13a6:	60 0d       	add	r22, r0
    13a8:	11 24       	eor	r1, r1
    13aa:	60 5c       	subi	r22, 0xC0	; 192
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

000013b2 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    13b2:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    13b4:	88 23       	and	r24, r24
    13b6:	b9 f1       	breq	.+110    	; 0x1426 <uint2lcd+0x74>
    13b8:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    13ba:	84 36       	cpi	r24, 0x64	; 100
    13bc:	98 f4       	brcc	.+38     	; 0x13e4 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    13be:	8a 30       	cpi	r24, 0x0A	; 10
    13c0:	d8 f4       	brcc	.+54     	; 0x13f8 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    13c2:	8d ec       	ldi	r24, 0xCD	; 205
    13c4:	c8 9f       	mul	r28, r24
    13c6:	81 2d       	mov	r24, r1
    13c8:	11 24       	eor	r1, r1
    13ca:	86 95       	lsr	r24
    13cc:	86 95       	lsr	r24
    13ce:	86 95       	lsr	r24
    13d0:	6c 2f       	mov	r22, r28
    13d2:	2a e0       	ldi	r18, 0x0A	; 10
    13d4:	82 9f       	mul	r24, r18
    13d6:	60 19       	sub	r22, r0
    13d8:	11 24       	eor	r1, r1
    13da:	60 5d       	subi	r22, 0xD0	; 208
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    13de:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    13e0:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    13e4:	69 e2       	ldi	r22, 0x29	; 41
    13e6:	86 9f       	mul	r24, r22
    13e8:	61 2d       	mov	r22, r1
    13ea:	11 24       	eor	r1, r1
    13ec:	62 95       	swap	r22
    13ee:	6f 70       	andi	r22, 0x0F	; 15
    13f0:	60 5d       	subi	r22, 0xD0	; 208
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    13f8:	89 e2       	ldi	r24, 0x29	; 41
    13fa:	c8 9f       	mul	r28, r24
    13fc:	81 2d       	mov	r24, r1
    13fe:	11 24       	eor	r1, r1
    1400:	82 95       	swap	r24
    1402:	8f 70       	andi	r24, 0x0F	; 15
    1404:	9c 2f       	mov	r25, r28
    1406:	24 e6       	ldi	r18, 0x64	; 100
    1408:	82 9f       	mul	r24, r18
    140a:	90 19       	sub	r25, r0
    140c:	11 24       	eor	r1, r1
    140e:	6d ec       	ldi	r22, 0xCD	; 205
    1410:	96 9f       	mul	r25, r22
    1412:	61 2d       	mov	r22, r1
    1414:	11 24       	eor	r1, r1
    1416:	66 95       	lsr	r22
    1418:	66 95       	lsr	r22
    141a:	66 95       	lsr	r22
    141c:	60 5d       	subi	r22, 0xD0	; 208
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1424:	ce cf       	rjmp	.-100    	; 0x13c2 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1426:	60 e3       	ldi	r22, 0x30	; 48
    1428:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    142a:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    142c:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

00001430 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    1430:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1432:	87 fd       	sbrc	r24, 7
    1434:	03 c0       	rjmp	.+6      	; 0x143c <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    1436:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    1438:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <uint2lcd>
    143c:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    143e:	6d e2       	ldi	r22, 0x2D	; 45
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1446:	85 ed       	ldi	r24, 0xD5	; 213
    1448:	8a 95       	dec	r24
    144a:	f1 f7       	brne	.-4      	; 0x1448 <int2lcd+0x18>
    144c:	00 00       	nop
    144e:	8c 2f       	mov	r24, r28
    1450:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    1452:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1454:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <uint2lcd>

00001458 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    1458:	6e e0       	ldi	r22, 0x0E	; 14
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

00001460 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    1460:	6c e0       	ldi	r22, 0x0C	; 12
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

00001468 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    1468:	6e e1       	ldi	r22, 0x1E	; 30
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

00001470 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    1470:	68 e1       	ldi	r22, 0x18	; 24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

00001478 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1478:	e2 e6       	ldi	r30, 0x62	; 98
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 60       	ori	r24, 0x08	; 8
    1480:	80 83       	st	Z, r24
    1482:	80 81       	ld	r24, Z
    1484:	87 7f       	andi	r24, 0xF7	; 247
    1486:	80 83       	st	Z, r24
    1488:	08 95       	ret

0000148a <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1492:	8f e1       	ldi	r24, 0x1F	; 31
    1494:	9c e1       	ldi	r25, 0x1C	; 28
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <clear_display+0xc>
    149a:	00 c0       	rjmp	.+0      	; 0x149c <clear_display+0x12>
    149c:	00 00       	nop
    149e:	08 95       	ret

000014a0 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    14a0:	62 e0       	ldi	r22, 0x02	; 2
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    14a8:	8f e6       	ldi	r24, 0x6F	; 111
    14aa:	97 e1       	ldi	r25, 0x17	; 23
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <cursor_home+0xc>
    14b0:	00 c0       	rjmp	.+0      	; 0x14b2 <cursor_home+0x12>
    14b2:	00 00       	nop
    14b4:	08 95       	ret

000014b6 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    14b6:	60 ec       	ldi	r22, 0xC0	; 192
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

000014be <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    14be:	60 e8       	ldi	r22, 0x80	; 128
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

000014c6 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    14c6:	cf 93       	push	r28
    14c8:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    14ca:	60 e2       	ldi	r22, 0x20	; 32
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    14d2:	85 ed       	ldi	r24, 0xD5	; 213
    14d4:	8a 95       	dec	r24
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <fill_spaces+0xe>
    14d8:	00 00       	nop
    14da:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    14dc:	b1 f7       	brne	.-20     	; 0x14ca <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    14e2:	68 2f       	mov	r22, r24
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	0c 94 5f 09 	jmp	0x12be	; 0x12be <send_lcd>

000014ea <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	c0 e0       	ldi	r28, 0x00	; 0
    14f8:	f8 01       	movw	r30, r16
    14fa:	e4 0f       	add	r30, r20
    14fc:	f5 1f       	adc	r31, r21
    14fe:	60 81       	ld	r22, Z
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1506:	85 ed       	ldi	r24, 0xD5	; 213
    1508:	8a 95       	dec	r24
    150a:	f1 f7       	brne	.-4      	; 0x1508 <string2lcd+0x1e>
    150c:	00 00       	nop
    150e:	cf 5f       	subi	r28, 0xFF	; 255
    1510:	4c 2f       	mov	r20, r28
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	f8 01       	movw	r30, r16
    1516:	01 90       	ld	r0, Z+
    1518:	00 20       	and	r0, r0
    151a:	e9 f7       	brne	.-6      	; 0x1516 <string2lcd+0x2c>
    151c:	9f 01       	movw	r18, r30
    151e:	20 1b       	sub	r18, r16
    1520:	31 0b       	sbc	r19, r17
    1522:	22 50       	subi	r18, 0x02	; 2
    1524:	31 09       	sbc	r19, r1
    1526:	24 17       	cp	r18, r20
    1528:	35 07       	cpc	r19, r21
    152a:	30 f7       	brcc	.-52     	; 0x14f8 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	99 ef       	ldi	r25, 0xF9	; 249
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <lcd_init+0x4>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <lcd_init+0xa>
    153e:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1540:	88 e0       	ldi	r24, 0x08	; 8
    1542:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    1546:	60 e3       	ldi	r22, 0x30	; 48
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    154e:	8f e5       	ldi	r24, 0x5F	; 95
    1550:	9d e6       	ldi	r25, 0x6D	; 109
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <lcd_init+0x1e>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <lcd_init+0x24>
    1558:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    155a:	60 e3       	ldi	r22, 0x30	; 48
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1562:	8f e5       	ldi	r24, 0x5F	; 95
    1564:	9d e6       	ldi	r25, 0x6D	; 109
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <lcd_init+0x32>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <lcd_init+0x38>
    156c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    156e:	60 e3       	ldi	r22, 0x30	; 48
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    1576:	8f e5       	ldi	r24, 0x5F	; 95
    1578:	9d e6       	ldi	r25, 0x6D	; 109
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <lcd_init+0x46>
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <lcd_init+0x4c>
    1580:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    1582:	68 e3       	ldi	r22, 0x38	; 56
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    158a:	8f e1       	ldi	r24, 0x1F	; 31
    158c:	9e e4       	ldi	r25, 0x4E	; 78
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <lcd_init+0x5a>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <lcd_init+0x60>
    1594:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    1596:	68 e0       	ldi	r22, 0x08	; 8
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    159e:	8f e1       	ldi	r24, 0x1F	; 31
    15a0:	9e e4       	ldi	r25, 0x4E	; 78
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <lcd_init+0x6e>
    15a6:	00 c0       	rjmp	.+0      	; 0x15a8 <lcd_init+0x74>
    15a8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    15b2:	8f e1       	ldi	r24, 0x1F	; 31
    15b4:	9e e4       	ldi	r25, 0x4E	; 78
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <lcd_init+0x82>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <lcd_init+0x88>
    15bc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    15be:	66 e0       	ldi	r22, 0x06	; 6
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    15c6:	8f e1       	ldi	r24, 0x1F	; 31
    15c8:	9e e4       	ldi	r25, 0x4E	; 78
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <lcd_init+0x96>
    15ce:	00 c0       	rjmp	.+0      	; 0x15d0 <lcd_init+0x9c>
    15d0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    15d2:	6c e0       	ldi	r22, 0x0C	; 12
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    15da:	8f e1       	ldi	r24, 0x1F	; 31
    15dc:	9e e4       	ldi	r25, 0x4E	; 78
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <lcd_init+0xaa>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <lcd_init+0xb0>
    15e4:	00 00       	nop
    15e6:	08 95       	ret

000015e8 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	bf 92       	push	r11
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	69 97       	sbiw	r28, 0x19	; 25
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	f4 2e       	mov	r15, r20
    1612:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1614:	00 23       	and	r16, r16
    1616:	59 f0       	breq	.+22     	; 0x162e <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    1618:	4b 01       	movw	r8, r22
    161a:	5c 01       	movw	r10, r24
    161c:	88 24       	eor	r8, r8
    161e:	b7 fc       	sbrc	r11, 7
    1620:	83 94       	inc	r8
    1622:	99 24       	eor	r9, r9
    1624:	aa 24       	eor	r10, r10
    1626:	bb 24       	eor	r11, r11
    1628:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    162a:	97 fd       	sbrc	r25, 7
    162c:	8f c0       	rjmp	.+286    	; 0x174c <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    162e:	11 23       	and	r17, r17
    1630:	09 f4       	brne	.+2      	; 0x1634 <lcd_int32+0x4c>
    1632:	84 c0       	rjmp	.+264    	; 0x173c <lcd_int32+0x154>
    1634:	9e 01       	movw	r18, r28
    1636:	2f 5f       	subi	r18, 0xFF	; 255
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	69 01       	movw	r12, r18
    163c:	59 01       	movw	r10, r18
    163e:	88 24       	eor	r8, r8
    1640:	8a 94       	dec	r8
    1642:	81 0e       	add	r8, r17
    1644:	91 2c       	mov	r9, r1
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	83 1a       	sub	r8, r19
    164a:	93 0a       	sbc	r9, r19
    164c:	8c 0c       	add	r8, r12
    164e:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1650:	2a e0       	ldi	r18, 0x0A	; 10
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__divmodsi4>
    165c:	e6 2f       	mov	r30, r22
    165e:	2a 8b       	std	Y+18, r18	; 0x12
    1660:	3b 8b       	std	Y+19, r19	; 0x13
    1662:	4c 8b       	std	Y+20, r20	; 0x14
    1664:	5d 8b       	std	Y+21, r21	; 0x15
    1666:	6a 89       	ldd	r22, Y+18	; 0x12
    1668:	7b 89       	ldd	r23, Y+19	; 0x13
    166a:	8c 89       	ldd	r24, Y+20	; 0x14
    166c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    166e:	20 e3       	ldi	r18, 0x30	; 48
    1670:	2e 0f       	add	r18, r30
    1672:	f5 01       	movw	r30, r10
    1674:	21 93       	st	Z+, r18
    1676:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1678:	e8 15       	cp	r30, r8
    167a:	f9 05       	cpc	r31, r9
    167c:	49 f7       	brne	.-46     	; 0x1650 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    167e:	bb 24       	eor	r11, r11
    1680:	b3 94       	inc	r11
    1682:	b1 0e       	add	r11, r17
    1684:	f6 01       	movw	r30, r12
    1686:	e1 0f       	add	r30, r17
    1688:	f1 1d       	adc	r31, r1
    168a:	2e e2       	ldi	r18, 0x2E	; 46
    168c:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    168e:	2a e0       	ldi	r18, 0x0A	; 10
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__divmodsi4>
    169a:	e6 2f       	mov	r30, r22
    169c:	2a 8b       	std	Y+18, r18	; 0x12
    169e:	3b 8b       	std	Y+19, r19	; 0x13
    16a0:	4c 8b       	std	Y+20, r20	; 0x14
    16a2:	5d 8b       	std	Y+21, r21	; 0x15
    16a4:	6e 8b       	std	Y+22, r22	; 0x16
    16a6:	7f 8b       	std	Y+23, r23	; 0x17
    16a8:	88 8f       	std	Y+24, r24	; 0x18
    16aa:	99 8f       	std	Y+25, r25	; 0x19
    16ac:	6a 89       	ldd	r22, Y+18	; 0x12
    16ae:	7b 89       	ldd	r23, Y+19	; 0x13
    16b0:	8c 89       	ldd	r24, Y+20	; 0x14
    16b2:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    16b4:	11 e0       	ldi	r17, 0x01	; 1
    16b6:	1b 0d       	add	r17, r11
    16b8:	d6 01       	movw	r26, r12
    16ba:	ab 0d       	add	r26, r11
    16bc:	b1 1d       	adc	r27, r1
    16be:	e0 5d       	subi	r30, 0xD0	; 208
    16c0:	ec 93       	st	X, r30
    16c2:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	81 05       	cpc	r24, r1
    16ca:	91 05       	cpc	r25, r1
    16cc:	01 f7       	brne	.-64     	; 0x168e <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    16ce:	ff 20       	and	r15, r15
    16d0:	61 f0       	breq	.+24     	; 0x16ea <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    16d2:	e1 10       	cpse	r14, r1
    16d4:	39 c0       	rjmp	.+114    	; 0x1748 <lcd_int32+0x160>
    16d6:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    16d8:	1f 15       	cp	r17, r15
    16da:	38 f4       	brcc	.+14     	; 0x16ea <lcd_int32+0x102>
    16dc:	f6 01       	movw	r30, r12
    16de:	e1 0f       	add	r30, r17
    16e0:	f1 1d       	adc	r31, r1
    16e2:	80 83       	st	Z, r24
    16e4:	1f 5f       	subi	r17, 0xFF	; 255
    16e6:	1f 11       	cpse	r17, r15
    16e8:	f9 cf       	rjmp	.-14     	; 0x16dc <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    16ea:	00 23       	and	r16, r16
    16ec:	31 f0       	breq	.+12     	; 0x16fa <lcd_int32+0x112>
    16ee:	f6 01       	movw	r30, r12
    16f0:	e1 0f       	add	r30, r17
    16f2:	f1 1d       	adc	r31, r1
    16f4:	8d e2       	ldi	r24, 0x2D	; 45
    16f6:	80 83       	st	Z, r24
    16f8:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    16fa:	11 50       	subi	r17, 0x01	; 1
    16fc:	f6 01       	movw	r30, r12
    16fe:	e1 0f       	add	r30, r17
    1700:	f1 1d       	adc	r31, r1
    1702:	60 81       	ld	r22, Z
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    170a:	35 ed       	ldi	r19, 0xD5	; 213
    170c:	3a 95       	dec	r19
    170e:	f1 f7       	brne	.-4      	; 0x170c <lcd_int32+0x124>
    1710:	00 00       	nop
    1712:	11 11       	cpse	r17, r1
    1714:	f2 cf       	rjmp	.-28     	; 0x16fa <lcd_int32+0x112>

}
    1716:	69 96       	adiw	r28, 0x19	; 25
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	8f 90       	pop	r8
    173a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    173c:	b1 2c       	mov	r11, r1
    173e:	9e 01       	movw	r18, r28
    1740:	2f 5f       	subi	r18, 0xFF	; 255
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	69 01       	movw	r12, r18
    1746:	a3 cf       	rjmp	.-186    	; 0x168e <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1748:	80 e3       	ldi	r24, 0x30	; 48
    174a:	c6 cf       	rjmp	.-116    	; 0x16d8 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	69 cf       	rjmp	.-302    	; 0x162e <lcd_int32+0x46>

0000175c <lcd_int16>:
    175c:	5f 92       	push	r5
    175e:	6f 92       	push	r6
    1760:	7f 92       	push	r7
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	61 97       	sbiw	r28, 0x11	; 17
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	a6 2e       	mov	r10, r22
    178c:	54 2e       	mov	r5, r20
    178e:	62 2e       	mov	r6, r18
    1790:	79 2e       	mov	r7, r25
    1792:	77 1c       	adc	r7, r7
    1794:	77 24       	eor	r7, r7
    1796:	77 1c       	adc	r7, r7
    1798:	b7 2c       	mov	r11, r7
    179a:	c7 2c       	mov	r12, r7
    179c:	d1 2c       	mov	r13, r1
    179e:	ee 27       	eor	r30, r30
    17a0:	ff 27       	eor	r31, r31
    17a2:	ec 19       	sub	r30, r12
    17a4:	fd 09       	sbc	r31, r13
    17a6:	8e 27       	eor	r24, r30
    17a8:	9f 27       	eor	r25, r31
    17aa:	fc 01       	movw	r30, r24
    17ac:	ec 0d       	add	r30, r12
    17ae:	fd 1d       	adc	r31, r13
    17b0:	44 23       	and	r20, r20
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <lcd_int16+0x5a>
    17b4:	8e c0       	rjmp	.+284    	; 0x18d2 <lcd_int16+0x176>
    17b6:	ce 01       	movw	r24, r28
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	7c 01       	movw	r14, r24
    17bc:	8c 01       	movw	r16, r24
    17be:	88 24       	eor	r8, r8
    17c0:	8a 94       	dec	r8
    17c2:	84 0e       	add	r8, r20
    17c4:	91 2c       	mov	r9, r1
    17c6:	9f ef       	ldi	r25, 0xFF	; 255
    17c8:	89 1a       	sub	r8, r25
    17ca:	99 0a       	sbc	r9, r25
    17cc:	8e 0c       	add	r8, r14
    17ce:	9f 1c       	adc	r9, r15
    17d0:	6a e0       	ldi	r22, 0x0A	; 10
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	cf 01       	movw	r24, r30
    17d6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
    17da:	26 2f       	mov	r18, r22
    17dc:	e2 2f       	mov	r30, r18
    17de:	f7 2f       	mov	r31, r23
    17e0:	80 5d       	subi	r24, 0xD0	; 208
    17e2:	d8 01       	movw	r26, r16
    17e4:	8d 93       	st	X+, r24
    17e6:	8d 01       	movw	r16, r26
    17e8:	a8 15       	cp	r26, r8
    17ea:	b9 05       	cpc	r27, r9
    17ec:	89 f7       	brne	.-30     	; 0x17d0 <lcd_int16+0x74>
    17ee:	01 e0       	ldi	r16, 0x01	; 1
    17f0:	05 0d       	add	r16, r5
    17f2:	d7 01       	movw	r26, r14
    17f4:	a5 0d       	add	r26, r5
    17f6:	b1 1d       	adc	r27, r1
    17f8:	8e e2       	ldi	r24, 0x2E	; 46
    17fa:	8c 93       	st	X, r24
    17fc:	6a e0       	ldi	r22, 0x0A	; 10
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	cf 01       	movw	r24, r30
    1802:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__divmodhi4>
    1806:	26 2f       	mov	r18, r22
    1808:	e2 2f       	mov	r30, r18
    180a:	f7 2f       	mov	r31, r23
    180c:	11 e0       	ldi	r17, 0x01	; 1
    180e:	10 0f       	add	r17, r16
    1810:	d7 01       	movw	r26, r14
    1812:	a0 0f       	add	r26, r16
    1814:	b1 1d       	adc	r27, r1
    1816:	80 5d       	subi	r24, 0xD0	; 208
    1818:	8c 93       	st	X, r24
    181a:	01 2f       	mov	r16, r17
    181c:	30 97       	sbiw	r30, 0x00	; 0
    181e:	71 f7       	brne	.-36     	; 0x17fc <lcd_int16+0xa0>
    1820:	61 10       	cpse	r6, r1
    1822:	15 c0       	rjmp	.+42     	; 0x184e <lcd_int16+0xf2>
    1824:	77 20       	and	r7, r7
    1826:	39 f0       	breq	.+14     	; 0x1836 <lcd_int16+0xda>
    1828:	11 e0       	ldi	r17, 0x01	; 1
    182a:	10 0f       	add	r17, r16
    182c:	f7 01       	movw	r30, r14
    182e:	e0 0f       	add	r30, r16
    1830:	f1 1d       	adc	r31, r1
    1832:	8d e2       	ldi	r24, 0x2D	; 45
    1834:	80 83       	st	Z, r24
    1836:	aa 20       	and	r10, r10
    1838:	41 f1       	breq	.+80     	; 0x188a <lcd_int16+0x12e>
    183a:	81 2f       	mov	r24, r17
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	2a 2d       	mov	r18, r10
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	82 17       	cp	r24, r18
    1844:	93 07       	cpc	r25, r19
    1846:	0c f5       	brge	.+66     	; 0x188a <lcd_int16+0x12e>
    1848:	b1 2c       	mov	r11, r1
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	0c c0       	rjmp	.+24     	; 0x1866 <lcd_int16+0x10a>
    184e:	aa 20       	and	r10, r10
    1850:	a1 f0       	breq	.+40     	; 0x187a <lcd_int16+0x11e>
    1852:	81 2f       	mov	r24, r17
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	2a 2d       	mov	r18, r10
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	2c 19       	sub	r18, r12
    185c:	3d 09       	sbc	r19, r13
    185e:	82 17       	cp	r24, r18
    1860:	93 07       	cpc	r25, r19
    1862:	5c f4       	brge	.+22     	; 0x187a <lcd_int16+0x11e>
    1864:	40 e3       	ldi	r20, 0x30	; 48
    1866:	1f 5f       	subi	r17, 0xFF	; 255
    1868:	f7 01       	movw	r30, r14
    186a:	e8 0f       	add	r30, r24
    186c:	f9 1f       	adc	r31, r25
    186e:	40 83       	st	Z, r20
    1870:	81 2f       	mov	r24, r17
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	82 17       	cp	r24, r18
    1876:	93 07       	cpc	r25, r19
    1878:	b4 f3       	brlt	.-20     	; 0x1866 <lcd_int16+0x10a>
    187a:	bb 20       	and	r11, r11
    187c:	31 f0       	breq	.+12     	; 0x188a <lcd_int16+0x12e>
    187e:	f7 01       	movw	r30, r14
    1880:	e1 0f       	add	r30, r17
    1882:	f1 1d       	adc	r31, r1
    1884:	8d e2       	ldi	r24, 0x2D	; 45
    1886:	80 83       	st	Z, r24
    1888:	1f 5f       	subi	r17, 0xFF	; 255
    188a:	11 50       	subi	r17, 0x01	; 1
    188c:	f7 01       	movw	r30, r14
    188e:	e1 0f       	add	r30, r17
    1890:	f1 1d       	adc	r31, r1
    1892:	60 81       	ld	r22, Z
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	0e 94 5f 09 	call	0x12be	; 0x12be <send_lcd>
    189a:	95 ed       	ldi	r25, 0xD5	; 213
    189c:	9a 95       	dec	r25
    189e:	f1 f7       	brne	.-4      	; 0x189c <lcd_int16+0x140>
    18a0:	00 00       	nop
    18a2:	11 11       	cpse	r17, r1
    18a4:	f2 cf       	rjmp	.-28     	; 0x188a <lcd_int16+0x12e>
    18a6:	61 96       	adiw	r28, 0x11	; 17
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	df 90       	pop	r13
    18c0:	cf 90       	pop	r12
    18c2:	bf 90       	pop	r11
    18c4:	af 90       	pop	r10
    18c6:	9f 90       	pop	r9
    18c8:	8f 90       	pop	r8
    18ca:	7f 90       	pop	r7
    18cc:	6f 90       	pop	r6
    18ce:	5f 90       	pop	r5
    18d0:	08 95       	ret
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	7c 01       	movw	r14, r24
    18da:	90 cf       	rjmp	.-224    	; 0x17fc <lcd_int16+0xa0>

000018dc <main>:
//Main function call
int main()
{
//set port bits 4-7 B as outputs
while(1){
  configureIO();
    18dc:	0e 94 ed 00 	call	0x1da	; 0x1da <configureIO>
  configureTimers();
    18e0:	0e 94 2b 01 	call	0x256	; 0x256 <configureTimers>

//Setup SPI on the interface
void configureSPI( void ){
  //Configure SPI
  //Master mode, clk low on idle, leading edge sample
  SPCR = (1 << SPE) | (1 << MSTR) | (0 << CPOL) | (0 << CPHA);   
    18e4:	80 e5       	ldi	r24, 0x50	; 80
    18e6:	8d b9       	out	0x0d, r24	; 13
}

//Configures the ADC
void configureADC( void ){
  //Configure the MUX for single-ended input on PORTF pin 0, right adjusted, 10 bits
  ADMUX  = (1<<REFS0);
    18e8:	80 e4       	ldi	r24, 0x40	; 64
    18ea:	87 b9       	out	0x07, r24	; 7

  //Enable the ADC, don't start yet, single shot mode
  //division factor is 128 (125khz)
  //enable interrupts on conversion
  ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADIE);
    18ec:	8f e8       	ldi	r24, 0x8F	; 143
    18ee:	86 b9       	out	0x06, r24	; 6
while(1){
  configureIO();
  configureTimers();
  configureSPI();
  configureADC();
  lcd_init();
    18f0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <lcd_init>
  clear_display();
    18f4:	0e 94 45 0a 	call	0x148a	; 0x148a <clear_display>
  sei();
    18f8:	78 94       	sei
  int j, k;

  uint16_t temp_adcResult = 0;
  char lcd_str_l[16];

  string2lcd("Nick McComb     ");
    18fa:	81 e4       	ldi	r24, 0x41	; 65
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string2lcd>
  line2_col1();
    1902:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <line2_col1>
  string2lcd(" ECE 473        ");
    1906:	82 e5       	ldi	r24, 0x52	; 82
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	39 e6       	ldi	r19, 0x69	; 105
    1912:	88 e1       	ldi	r24, 0x18	; 24
    1914:	21 50       	subi	r18, 0x01	; 1
    1916:	30 40       	sbci	r19, 0x00	; 0
    1918:	80 40       	sbci	r24, 0x00	; 0
    191a:	e1 f7       	brne	.-8      	; 0x1914 <main+0x38>
    191c:	00 c0       	rjmp	.+0      	; 0x191e <main+0x42>
    191e:	00 00       	nop

  _delay_ms(500);

  strcpy(lcdOutput, "Hello, friend :)11234567890123459");
    1920:	82 e2       	ldi	r24, 0x22	; 34
    1922:	e3 e6       	ldi	r30, 0x63	; 99
    1924:	f1 e0       	ldi	r31, 0x01	; 1
    1926:	af e2       	ldi	r26, 0x2F	; 47
    1928:	b2 e0       	ldi	r27, 0x02	; 2
    192a:	01 90       	ld	r0, Z+
    192c:	0d 92       	st	X+, r0
    192e:	8a 95       	dec	r24
    1930:	e1 f7       	brne	.-8      	; 0x192a <main+0x4e>
  strcpy(lcd_string_array, "                                ");
    1932:	81 e2       	ldi	r24, 0x21	; 33
    1934:	e5 e8       	ldi	r30, 0x85	; 133
    1936:	f1 e0       	ldi	r31, 0x01	; 1
    1938:	ac e5       	ldi	r26, 0x5C	; 92
    193a:	b2 e0       	ldi	r27, 0x02	; 2
    193c:	01 90       	ld	r0, Z+
    193e:	0d 92       	st	X+, r0
    1940:	8a 95       	dec	r24
    1942:	e1 f7       	brne	.-8      	; 0x193c <main+0x60>

  strcpy(lcd_string_array, "Nick McComb      ECE473          ");
    1944:	82 e2       	ldi	r24, 0x22	; 34
    1946:	e6 ea       	ldi	r30, 0xA6	; 166
    1948:	f1 e0       	ldi	r31, 0x01	; 1
    194a:	ac e5       	ldi	r26, 0x5C	; 92
    194c:	b2 e0       	ldi	r27, 0x02	; 2
    194e:	01 90       	ld	r0, Z+
    1950:	0d 92       	st	X+, r0
    1952:	8a 95       	dec	r24
    1954:	e1 f7       	brne	.-8      	; 0x194e <main+0x72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1956:	ef ea       	ldi	r30, 0xAF	; 175
    1958:	f4 e0       	ldi	r31, 0x04	; 4
    195a:	31 97       	sbiw	r30, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0x7e>
    195e:	00 c0       	rjmp	.+0      	; 0x1960 <main+0x84>
    1960:	00 00       	nop

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	9a bb       	out	0x1a, r25	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
    1966:	c4 9a       	sbi	0x18, 4	; 24
    1968:	88 b3       	in	r24, 0x18	; 24
    196a:	8f 79       	andi	r24, 0x9F	; 159
    196c:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    196e:	c6 9a       	sbi	0x18, 6	; 24
uint8_t volatile colon = 0;

//Brightness management
uint8_t  lux[10] = { 0x01, 0x20, 0x70, 0xA0, 0xC0, 0xD0, 0xD8, 0xDF, 0xE0, 0xEF };
uint8_t  brightnessControl = 0;
void inline setLEDBrightness(uint8_t targetBrightness){OCR2 = targetBrightness;} //0 to 255 control, lower is brigher
    1970:	93 bd       	out	0x23, r25	; 35
//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
    1972:	dd 24       	eor	r13, r13
    1974:	da 94       	dec	r13
    1976:	bb 24       	eor	r11, r11
    1978:	ba 94       	dec	r11
    }

    lastEntered = PINA;
  }
  else {
    unpressed = 1;  //Release the latch
    197a:	aa 24       	eor	r10, r10
    197c:	a3 94       	inc	r10
    197e:	cc 24       	eor	r12, r12
    1980:	c3 94       	inc	r12
    else if(PINA == lastEntered){ //Don't preform any action
      ++debounceCounter;
    }
    else if(PINA != lastEntered){
      processButtonPress();
      debounceCounter = 1;
    1982:	ee 24       	eor	r14, r14
    1984:	e3 94       	inc	r14
    1986:	f1 2c       	mov	r15, r1
    for(k = 0; k < 3; ++k){
      for(j = 0; j < 5; ++j){
        //Check the buttons for input
        checkButtons(); 
	setDigit(j);  //At last measure takes ~9uS to run (varies 400nS)
        global_targetDigit = j;	
    1988:	03 e0       	ldi	r16, 0x03	; 3
    198a:	10 e0       	ldi	r17, 0x00	; 0
  }
}

//Main function call
int main()
{
    198c:	c0 e0       	ldi	r28, 0x00	; 0
    198e:	d0 e0       	ldi	r29, 0x00	; 0
//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA
    1990:	bb ba       	out	0x1b, r11	; 27
    1992:	1a ba       	out	0x1a, r1	; 26
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
void inline SET_DIGIT_FOUR(void)  {PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3);}

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}
    1994:	88 b3       	in	r24, 0x18	; 24
    1996:	80 67       	ori	r24, 0x70	; 112
    1998:	88 bb       	out	0x18, r24	; 24
	...
  NOP();

  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    19a2:	89 b3       	in	r24, 0x19	; 25
    19a4:	8f 3f       	cpi	r24, 0xFF	; 255
    19a6:	09 f4       	brne	.+2      	; 0x19aa <main+0xce>
    19a8:	e1 c0       	rjmp	.+450    	; 0x1b6c <main+0x290>
    if(unpressed){
    19aa:	80 91 40 01 	lds	r24, 0x0140
    19ae:	81 11       	cpse	r24, r1
    19b0:	e0 c0       	rjmp	.+448    	; 0x1b72 <main+0x296>
      processButtonPress();
      unpressed = 0; //Latches the button press
    }
    else if(PINA == lastEntered){ //Don't preform any action
    19b2:	89 b3       	in	r24, 0x19	; 25
    19b4:	20 91 e3 01 	lds	r18, 0x01E3
    19b8:	30 91 e4 01 	lds	r19, 0x01E4
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	82 17       	cp	r24, r18
    19c0:	93 07       	cpc	r25, r19
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <main+0xea>
    19c4:	db c0       	rjmp	.+438    	; 0x1b7c <main+0x2a0>
      ++debounceCounter;
    }
    else if(PINA != lastEntered){
    19c6:	89 b3       	in	r24, 0x19	; 25
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	28 17       	cp	r18, r24
    19cc:	39 07       	cpc	r19, r25
    19ce:	31 f0       	breq	.+12     	; 0x19dc <main+0x100>
      processButtonPress();
    19d0:	0e 94 77 04 	call	0x8ee	; 0x8ee <processButtonPress>
      debounceCounter = 1;
    19d4:	f0 92 e2 01 	sts	0x01E2, r15
    19d8:	e0 92 e1 01 	sts	0x01E1, r14
    }

    lastEntered = PINA;
    19dc:	89 b3       	in	r24, 0x19	; 25
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	90 93 e4 01 	sts	0x01E4, r25
    19e4:	80 93 e3 01 	sts	0x01E3, r24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    19e8:	da ba       	out	0x1a, r13	; 26

//Digit control low-level code
void inline SET_DIGIT_DOT(void)   {PORTB |= DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_3);} //Untested, TODO: test!
void inline SET_DIGIT_ONE(void)   {PORTB |= DIG_SEL_3; PORTB = PORTB & ~(DIG_SEL_1 | DIG_SEL_2);}
void inline SET_DIGIT_TWO(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2; PORTB = PORTB & ~(DIG_SEL_3);}
void inline SET_DIGIT_THREE(void) {PORTB |= DIG_SEL_1; PORTB = PORTB & ~(DIG_SEL_2 | DIG_SEL_3);}
    19ea:	c4 9a       	sbi	0x18, 4	; 24
    19ec:	88 b3       	in	r24, 0x18	; 24
    19ee:	8f 79       	andi	r24, 0x9F	; 159
    19f0:	88 bb       	out	0x18, r24	; 24

//Tri-State Buffer Enable
void inline ENABLE_BUFFER(void)   {PORTB |= DIG_SEL_1 | DIG_SEL_2 | DIG_SEL_3;}

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
    19f2:	c6 9a       	sbi	0x18, 6	; 24
	...
  while(1){  //Main control loop
    for(k = 0; k < 3; ++k){
      for(j = 0; j < 5; ++j){
        //Check the buttons for input
        checkButtons(); 
	setDigit(j);  //At last measure takes ~9uS to run (varies 400nS)
    19fc:	8c 2f       	mov	r24, r28
    19fe:	0e 94 7f 02 	call	0x4fe	; 0x4fe <setDigit>
        global_targetDigit = j;	
    1a02:	c0 93 da 01 	sts	0x01DA, r28
    1a06:	8a e0       	ldi	r24, 0x0A	; 10
    1a08:	ef e8       	ldi	r30, 0x8F	; 143
    1a0a:	f1 e0       	ldi	r31, 0x01	; 1
    1a0c:	31 97       	sbiw	r30, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <main+0x130>
    1a10:	00 c0       	rjmp	.+0      	; 0x1a12 <main+0x136>
    1a12:	00 00       	nop
    1a14:	81 50       	subi	r24, 0x01	; 1

	for(z = 0; z < 10; ++z){_delay_us(100);}
    1a16:	c1 f7       	brne	.-16     	; 0x1a08 <main+0x12c>
	
        //Update everything on the SPI bus (minus the LCD)
	//This means we're reading the encoders and writing to the bar graph
	if(j != 0){
    1a18:	20 97       	sbiw	r28, 0x00	; 0
    1a1a:	a1 f0       	breq	.+40     	; 0x1a44 <main+0x168>

//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
    1a1c:	1e 98       	cbi	0x03, 6	; 3
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
void inline ENC_PARALLEL_DISABLE(void) {PORTE |=   0x80 ;}
    1a1e:	1f 9a       	sbi	0x03, 7	; 3
  
  ENC_CLK_ENABLE();        //Allow us to read in serial data
  ENC_PARALLEL_DISABLE();  //Allow us to read in serial data

  //NOPs required for electrical propogation
  NOP();
    1a20:	00 00       	nop
  NOP();
    1a22:	00 00       	nop

  //Write to the bar graph and read from the encoders
  SPDR = bargraphOutput;
    1a24:	80 91 df 01 	lds	r24, 0x01DF
    1a28:	8f b9       	out	0x0f, r24	; 15
  lastEncoderValue = SPDR;
    1a2a:	8f b1       	in	r24, 0x0f	; 15
    1a2c:	80 93 3f 01 	sts	0x013F, r24

  //Wait for SPI operation
  while (bit_is_clear(SPSR, SPIF)){};
    1a30:	77 9b       	sbis	0x0e, 7	; 14
    1a32:	fe cf       	rjmp	.-4      	; 0x1a30 <main+0x154>

  upToDateEncoderValue = 1;
    1a34:	c0 92 e0 01 	sts	0x01E0, r12
//Port A Control
void inline ENABLE_LED_CONTROL(void) {DDRA = 0xFF; SET_DIGIT_THREE(); PORTB |= DIG_SEL_3;} //Enables PORTA as an output, while also ensuring the Tri-state buffer is disabled by selecting digit one
void inline ENABLE_BUTTON_READ(void) {PORTA = 0xFF; DDRA = 0x00;}  //Enable inputs/pullups on PORTA

void inline ENC_CLK_ENABLE(void)  {PORTE &= ~(0x40);}
void inline ENC_CLK_DISABLE(void) {PORTE |=   0x40 ;}
    1a38:	1e 9a       	sbi	0x03, 6	; 3

void inline ENC_PARALLEL_ENABLE(void)  {PORTE &= ~(0x80);}
    1a3a:	1f 98       	cbi	0x03, 7	; 3

  ENC_CLK_DISABLE();
  ENC_PARALLEL_ENABLE();

  //Output the bar graph info
  PORTB |=  0x01;
    1a3c:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;
    1a3e:	c0 98       	cbi	0x18, 0	; 24
	
        //Update everything on the SPI bus (minus the LCD)
	//This means we're reading the encoders and writing to the bar graph
	if(j != 0){
	updateSPI();
	processEncoders();
    1a40:	0e 94 4e 08 	call	0x109c	; 0x109c <processEncoders>
  }
}

//Clears the segments so nothing is being outputted on the port
void inline clearSegment( void ){
  PORTA = 0xFF;
    1a44:	db ba       	out	0x1b, r13	; 27
	//_delay_us(100);

        clearSegment();
//DEBUG_LOW();
//	_delay_us(5);
	NOP();
    1a46:	00 00       	nop

  uint8_t z;

  while(1){  //Main control loop
    for(k = 0; k < 3; ++k){
      for(j = 0; j < 5; ++j){
    1a48:	21 96       	adiw	r28, 0x01	; 1
    1a4a:	c5 30       	cpi	r28, 0x05	; 5
    1a4c:	d1 05       	cpc	r29, r1
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <main+0x176>
    1a50:	9f cf       	rjmp	.-194    	; 0x1990 <main+0xb4>
    1a52:	01 50       	subi	r16, 0x01	; 1
    1a54:	11 09       	sbc	r17, r1
  setLEDBrightness(0xff);

  uint8_t z;

  while(1){  //Main control loop
    for(k = 0; k < 3; ++k){
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <main+0x17e>
    1a58:	99 cf       	rjmp	.-206    	; 0x198c <main+0xb0>
//	_delay_us(5);
	NOP();
      }
    }

    processCounterOutput();  //Doesn't have to happen all of the time, so it's called here.
    1a5a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <processCounterOutput>
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
    1a5e:	80 91 c8 01 	lds	r24, 0x01C8
    1a62:	90 91 c9 01 	lds	r25, 0x01C9
    1a66:	80 fd       	sbrc	r24, 0
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <main+0x1b4>
    1a6a:	80 91 c8 01 	lds	r24, 0x01C8
    1a6e:	90 91 c9 01 	lds	r25, 0x01C9
    1a72:	81 fd       	sbrc	r24, 1
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <main+0x1b4>
    1a76:	80 91 c8 01 	lds	r24, 0x01C8
    1a7a:	90 91 c9 01 	lds	r25, 0x01C9
    1a7e:	83 ff       	sbrs	r24, 3
    1a80:	07 c0       	rjmp	.+14     	; 0x1a90 <main+0x1b4>
    1a82:	90 91 d6 01 	lds	r25, 0x01D6
    1a86:	80 91 d7 01 	lds	r24, 0x01D7
    1a8a:	98 17       	cp	r25, r24
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <main+0x1b4>
    1a8e:	3b c1       	rjmp	.+630    	; 0x1d06 <main+0x42a>
    settings &= ~ALARM_ARMED; //Unarm alarm
    currentlyAlarming = 1;    //Trigger alarm
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
    1a90:	80 91 d3 01 	lds	r24, 0x01D3
    1a94:	90 91 d4 01 	lds	r25, 0x01D4
    1a98:	8b 30       	cpi	r24, 0x0B	; 11
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <main+0x1c4>
    1a9e:	78 c0       	rjmp	.+240    	; 0x1b90 <main+0x2b4>
    settings &= ~ALARM_ARMED;  //Disarm alarm
    1aa0:	80 91 c8 01 	lds	r24, 0x01C8
    1aa4:	90 91 c9 01 	lds	r25, 0x01C9
    1aa8:	87 7f       	andi	r24, 0xF7	; 247
    1aaa:	90 93 c9 01 	sts	0x01C9, r25
    1aae:	80 93 c8 01 	sts	0x01C8, r24
    currentlyAlarming = 1;
    1ab2:	a0 92 d5 01 	sts	0x01D5, r10
    snoozeCount = 0; //Stop the snooze count
    1ab6:	10 92 d4 01 	sts	0x01D4, r1
    1aba:	10 92 d3 01 	sts	0x01D3, r1
    1abe:	21 e0       	ldi	r18, 0x01	; 1
    1ac0:	ec e5       	ldi	r30, 0x5C	; 92
    1ac2:	f2 e0       	ldi	r31, 0x02	; 2

  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
    1ac4:	90 e2       	ldi	r25, 0x20	; 32
    1ac6:	80 e2       	ldi	r24, 0x20	; 32
    1ac8:	91 93       	st	Z+, r25


  //Detecting Alarm output
  if(currentlyAlarming){
    uint8_t k;
    for(k = 0; k < 16; ++k)
    1aca:	32 e0       	ldi	r19, 0x02	; 2
    1acc:	ec 36       	cpi	r30, 0x6C	; 108
    1ace:	f3 07       	cpc	r31, r19
    1ad0:	d1 f7       	brne	.-12     	; 0x1ac6 <main+0x1ea>
      lcd_string_array[k] = ' ';
    lcd_string_array[17] = 'W';
    1ad2:	97 e5       	ldi	r25, 0x57	; 87
    1ad4:	90 93 6d 02 	sts	0x026D, r25
    lcd_string_array[18] = 'A';
    1ad8:	91 e4       	ldi	r25, 0x41	; 65
    1ada:	90 93 6e 02 	sts	0x026E, r25
    lcd_string_array[19] = 'K';
    1ade:	9b e4       	ldi	r25, 0x4B	; 75
    1ae0:	90 93 6f 02 	sts	0x026F, r25
    lcd_string_array[20] = 'E';
    1ae4:	95 e4       	ldi	r25, 0x45	; 69
    1ae6:	90 93 70 02 	sts	0x0270, r25
    lcd_string_array[21] = ' ';
    1aea:	80 93 71 02 	sts	0x0271, r24
    lcd_string_array[22] = 'U';
    1aee:	95 e5       	ldi	r25, 0x55	; 85
    1af0:	90 93 72 02 	sts	0x0272, r25
    lcd_string_array[23] = 'P';
    1af4:	90 e5       	ldi	r25, 0x50	; 80
    1af6:	90 93 73 02 	sts	0x0273, r25
    lcd_string_array[24] = ' ';
    1afa:	80 93 74 02 	sts	0x0274, r24
    lcd_string_array[25] = ':';
    1afe:	8a e3       	ldi	r24, 0x3A	; 58
    1b00:	80 93 75 02 	sts	0x0275, r24
    lcd_string_array[26] = ')';
    1b04:	89 e2       	ldi	r24, 0x29	; 41
    1b06:	80 93 76 02 	sts	0x0276, r24
    for(i = 0; i < 20; ++i)
      lcd_string_array[i+8] = ' ';
  }

  //lcd_string_array[5] is blank
  if(!currentlyAlarming){
    1b0a:	22 23       	and	r18, r18
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <main+0x234>
    1b0e:	64 c0       	rjmp	.+200    	; 0x1bd8 <main+0x2fc>

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	90 93 87 00 	sts	0x0087, r25
    1b18:	80 93 86 00 	sts	0x0086, r24
    SET_VOLUME(0);
  }
  else {
    //SET_HZ(400);
    SET_VOLUME(ALARM_VOLUME);
    SET_HZ(music[musicCounter]);
    1b1c:	e0 91 db 01 	lds	r30, 0x01DB
    1b20:	f0 91 dc 01 	lds	r31, 0x01DC
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	e5 5f       	subi	r30, 0xF5	; 245
    1b2a:	fe 4f       	sbci	r31, 0xFE	; 254
//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
void inline SET_HZ(uint16_t targetHz) {OCR1A = targetHz * 50;}
    1b2c:	20 81       	ld	r18, Z
    1b2e:	31 81       	ldd	r19, Z+1	; 0x01
    1b30:	42 e3       	ldi	r20, 0x32	; 50
    1b32:	42 9f       	mul	r20, r18
    1b34:	c0 01       	movw	r24, r0
    1b36:	43 9f       	mul	r20, r19
    1b38:	90 0d       	add	r25, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	9b bd       	out	0x2b, r25	; 43
    1b3e:	8a bd       	out	0x2a, r24	; 42
    processCounterOutput();  //Doesn't have to happen all of the time, so it's called here.
    processAlarm();          //This processes the alarm outputs (incl the LCD)

    //Refresh the LCD and when the string has been outputted, copy the queued string into
    //the string to be outputted. This prevents weird artifacts from appearing on the screen.
    if(!refresh_lcd(lcd_final))
    1b40:	8f e0       	ldi	r24, 0x0F	; 15
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	0e 94 74 09 	call	0x12e8	; 0x12e8 <refresh_lcd>
    1b48:	88 23       	and	r24, r24
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <main+0x272>
    1b4c:	4f c0       	rjmp	.+158    	; 0x1bec <main+0x310>
      strcpy(lcd_final, lcd_string_array);

DEBUG_HIGH();
    1b4e:	80 91 62 00 	lds	r24, 0x0062
    1b52:	82 60       	ori	r24, 0x02	; 2
    1b54:	80 93 62 00 	sts	0x0062, r24
    1b58:	8a e0       	ldi	r24, 0x0A	; 10
    1b5a:	ef e8       	ldi	r30, 0x8F	; 143
    1b5c:	f1 e0       	ldi	r31, 0x01	; 1
    1b5e:	31 97       	sbiw	r30, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <main+0x282>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <main+0x288>
    1b64:	00 00       	nop
    1b66:	81 50       	subi	r24, 0x01	; 1

    for(z = 0; z < 10; ++z){_delay_us(100);}
    1b68:	c1 f7       	brne	.-16     	; 0x1b5a <main+0x27e>
    1b6a:	0e cf       	rjmp	.-484    	; 0x1988 <main+0xac>
    }

    lastEntered = PINA;
  }
  else {
    unpressed = 1;  //Release the latch
    1b6c:	c0 92 40 01 	sts	0x0140, r12
    1b70:	3b cf       	rjmp	.-394    	; 0x19e8 <main+0x10c>
  //Latching button debounce
  //The delay from the for loop at the beginning of this while(1) block will handle
  //most of the important debouncing delay, so we can just use a latch here.
  if(PINA != 0xFF){ //If the buttons read anything
    if(unpressed){
      processButtonPress();
    1b72:	0e 94 77 04 	call	0x8ee	; 0x8ee <processButtonPress>
      unpressed = 0; //Latches the button press
    1b76:	10 92 40 01 	sts	0x0140, r1
    1b7a:	30 cf       	rjmp	.-416    	; 0x19dc <main+0x100>
    }
    else if(PINA == lastEntered){ //Don't preform any action
      ++debounceCounter;
    1b7c:	80 91 e1 01 	lds	r24, 0x01E1
    1b80:	90 91 e2 01 	lds	r25, 0x01E2
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	90 93 e2 01 	sts	0x01E2, r25
    1b8a:	80 93 e1 01 	sts	0x01E1, r24
    1b8e:	26 cf       	rjmp	.-436    	; 0x19dc <main+0x100>
    snoozeCount = 0; //Stop the snooze count
  }


  //Detecting Alarm output
  if(currentlyAlarming){
    1b90:	20 91 d5 01 	lds	r18, 0x01D5
    1b94:	21 11       	cpse	r18, r1
    1b96:	94 cf       	rjmp	.-216    	; 0x1ac0 <main+0x1e4>
    lcd_string_array[24] = ' ';
    lcd_string_array[25] = ':';
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
    1b98:	02 97       	sbiw	r24, 0x02	; 2
    1b9a:	78 f1       	brcs	.+94     	; 0x1bfa <main+0x31e>
    1b9c:	ec e5       	ldi	r30, 0x5C	; 92
    1b9e:	f2 e0       	ldi	r31, 0x02	; 2
    uint8_t k;
    for(k = 0; k < 16; ++k)
      lcd_string_array[k] = ' ';
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	81 93       	st	Z+, r24
    lcd_string_array[26] = ')';

  }
  else if(snoozeCount > 1){
    uint8_t k;
    for(k = 0; k < 16; ++k)
    1ba4:	92 e0       	ldi	r25, 0x02	; 2
    1ba6:	ec 36       	cpi	r30, 0x6C	; 108
    1ba8:	f9 07       	cpc	r31, r25
    1baa:	d9 f7       	brne	.-10     	; 0x1ba2 <main+0x2c6>
      lcd_string_array[k] = ' ';

    lcd_string_array[17] = 'Z';
    1bac:	9a e5       	ldi	r25, 0x5A	; 90
    1bae:	90 93 6d 02 	sts	0x026D, r25
    lcd_string_array[18] = 'z';
    1bb2:	8a e7       	ldi	r24, 0x7A	; 122
    1bb4:	80 93 6e 02 	sts	0x026E, r24
    lcd_string_array[19] = 'Z';
    1bb8:	90 93 6f 02 	sts	0x026F, r25
    lcd_string_array[20] = 'z';
    1bbc:	80 93 70 02 	sts	0x0270, r24
    lcd_string_array[21] = 'Z';
    1bc0:	90 93 71 02 	sts	0x0271, r25
    lcd_string_array[22] = 'z';
    1bc4:	80 93 72 02 	sts	0x0272, r24
    lcd_string_array[23] = 'Z';
    1bc8:	90 93 73 02 	sts	0x0273, r25
    lcd_string_array[24] = 'z';
    1bcc:	80 93 74 02 	sts	0x0274, r24
    lcd_string_array[25] = 'Z';
    1bd0:	90 93 75 02 	sts	0x0275, r25
    lcd_string_array[26] = 'z';
    1bd4:	80 93 76 02 	sts	0x0276, r24

//Audio shortcuts
#define ALARM_VOLUME 60//%
//Volume control (OCR3A needs to range from 85 to 430 to be within working parameters),
//but we actually want the alarm to turn off, so we go a bit below that: 0 to 430.
void inline SET_VOLUME(uint8_t volumePercentage){ OCR3A = volumePercentage * 4.3 + 0; }
    1bd8:	10 92 87 00 	sts	0x0087, r1
    1bdc:	10 92 86 00 	sts	0x0086, r1
    processCounterOutput();  //Doesn't have to happen all of the time, so it's called here.
    processAlarm();          //This processes the alarm outputs (incl the LCD)

    //Refresh the LCD and when the string has been outputted, copy the queued string into
    //the string to be outputted. This prevents weird artifacts from appearing on the screen.
    if(!refresh_lcd(lcd_final))
    1be0:	8f e0       	ldi	r24, 0x0F	; 15
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <refresh_lcd>
    1be8:	81 11       	cpse	r24, r1
    1bea:	b1 cf       	rjmp	.-158    	; 0x1b4e <main+0x272>
      strcpy(lcd_final, lcd_string_array);
    1bec:	6c e5       	ldi	r22, 0x5C	; 92
    1bee:	72 e0       	ldi	r23, 0x02	; 2
    1bf0:	8f e0       	ldi	r24, 0x0F	; 15
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	0e 94 13 11 	call	0x2226	; 0x2226 <strcpy>
    1bf8:	aa cf       	rjmp	.-172    	; 0x1b4e <main+0x272>
    lcd_string_array[24] = 'z';
    lcd_string_array[25] = 'Z';
    lcd_string_array[26] = 'z';

  }
  else if(settings & ALARM_ARMED){  //If no alarm, no snooze, but alarm is set, we want to output when we are going to alarm
    1bfa:	80 91 c8 01 	lds	r24, 0x01C8
    1bfe:	90 91 c9 01 	lds	r25, 0x01C9
    1c02:	83 ff       	sbrs	r24, 3
    1c04:	58 c0       	rjmp	.+176    	; 0x1cb6 <main+0x3da>
    dot[4] = 1;
    1c06:	a0 92 d2 01 	sts	0x01D2, r10
    lcd_string_array[0] = 'A';
    1c0a:	81 e4       	ldi	r24, 0x41	; 65
    1c0c:	80 93 5c 02 	sts	0x025C, r24
    lcd_string_array[1] = 'L';
    1c10:	9c e4       	ldi	r25, 0x4C	; 76
    1c12:	90 93 5d 02 	sts	0x025D, r25
    lcd_string_array[2] = 'A';
    1c16:	80 93 5e 02 	sts	0x025E, r24
    lcd_string_array[3] = 'R';
    1c1a:	82 e5       	ldi	r24, 0x52	; 82
    1c1c:	80 93 5f 02 	sts	0x025F, r24
    lcd_string_array[4] = 'M';
    1c20:	8d e4       	ldi	r24, 0x4D	; 77
    1c22:	80 93 60 02 	sts	0x0260, r24
    lcd_string_array[5] = ' ';
    1c26:	20 e2       	ldi	r18, 0x20	; 32
    1c28:	20 93 61 02 	sts	0x0261, r18
    lcd_string_array[6] = '@';
    1c2c:	80 e4       	ldi	r24, 0x40	; 64
    1c2e:	80 93 62 02 	sts	0x0262, r24
    lcd_string_array[7] = ' ';
    1c32:	20 93 63 02 	sts	0x0263, r18
    if(settings & TIME24){ //24 hour mode
    1c36:	80 91 c8 01 	lds	r24, 0x01C8
    1c3a:	90 91 c9 01 	lds	r25, 0x01C9
      if(alarmHours == 0){
    1c3e:	90 91 d6 01 	lds	r25, 0x01D6
    lcd_string_array[3] = 'R';
    lcd_string_array[4] = 'M';
    lcd_string_array[5] = ' ';
    lcd_string_array[6] = '@';
    lcd_string_array[7] = ' ';
    if(settings & TIME24){ //24 hour mode
    1c42:	82 ff       	sbrs	r24, 2
    1c44:	7a c0       	rjmp	.+244    	; 0x1d3a <main+0x45e>
      if(alarmHours == 0){
    1c46:	91 11       	cpse	r25, r1
    1c48:	b3 c0       	rjmp	.+358    	; 0x1db0 <main+0x4d4>
        lcd_string_array[8] = '0';
    1c4a:	80 e3       	ldi	r24, 0x30	; 48
    1c4c:	80 93 64 02 	sts	0x0264, r24
	lcd_string_array[9] = '0';
    1c50:	80 93 65 02 	sts	0x0265, r24
	else
	  lcd_string_array[8] = ((alarmHours % 12) / 10) + 48;
	lcd_string_array[9] = ((alarmHours % 12) % 10) + 48;	
      }
    }
    lcd_string_array[10] = ':';
    1c54:	8a e3       	ldi	r24, 0x3A	; 58
    1c56:	80 93 66 02 	sts	0x0266, r24
    //time for minutes
    if(alarmMinutes < 10)
    1c5a:	80 91 0a 01 	lds	r24, 0x010A
    1c5e:	8a 30       	cpi	r24, 0x0A	; 10
    1c60:	08 f0       	brcs	.+2      	; 0x1c64 <main+0x388>
    1c62:	9b c0       	rjmp	.+310    	; 0x1d9a <main+0x4be>
      lcd_string_array[11] = '0';
    1c64:	20 e3       	ldi	r18, 0x30	; 48
    1c66:	20 93 67 02 	sts	0x0267, r18
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    lcd_string_array[12]  = (alarmMinutes % 10) + 48;
    1c6a:	2d ec       	ldi	r18, 0xCD	; 205
    1c6c:	82 9f       	mul	r24, r18
    1c6e:	21 2d       	mov	r18, r1
    1c70:	11 24       	eor	r1, r1
    1c72:	26 95       	lsr	r18
    1c74:	26 95       	lsr	r18
    1c76:	26 95       	lsr	r18
    1c78:	fa e0       	ldi	r31, 0x0A	; 10
    1c7a:	2f 9f       	mul	r18, r31
    1c7c:	80 19       	sub	r24, r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	80 5d       	subi	r24, 0xD0	; 208
    1c82:	80 93 68 02 	sts	0x0268, r24
    
    if(!(settings & TIME24)){ //12 hour mode
    1c86:	20 91 c8 01 	lds	r18, 0x01C8
    1c8a:	30 91 c9 01 	lds	r19, 0x01C9
    1c8e:	22 fd       	sbrc	r18, 2
    1c90:	34 c0       	rjmp	.+104    	; 0x1cfa <main+0x41e>
      if(alarmHours > 11){
    1c92:	9c 30       	cpi	r25, 0x0C	; 12
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <main+0x3bc>
    1c96:	a9 c0       	rjmp	.+338    	; 0x1dea <main+0x50e>
        lcd_string_array[13] = 'p';
    1c98:	80 e7       	ldi	r24, 0x70	; 112
    1c9a:	80 93 69 02 	sts	0x0269, r24
      }
      else{
        lcd_string_array[13] = 'a';
      }
      lcd_string_array[14] = 'm';
    1c9e:	8d e6       	ldi	r24, 0x6D	; 109
    1ca0:	80 93 6a 02 	sts	0x026A, r24
    1ca4:	ec e6       	ldi	r30, 0x6C	; 108
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
      lcd_string_array[p] = ' ';
    1ca8:	80 e2       	ldi	r24, 0x20	; 32
    1caa:	81 93       	st	Z+, r24
	lcd_string_array[14] = ' ';
    }
    uint8_t p;

    //Clean up the second line
    for(p = 16; p < 32; ++p)
    1cac:	22 e0       	ldi	r18, 0x02	; 2
    1cae:	ec 37       	cpi	r30, 0x7C	; 124
    1cb0:	f2 07       	cpc	r31, r18
    1cb2:	d9 f7       	brne	.-10     	; 0x1caa <main+0x3ce>
    1cb4:	91 cf       	rjmp	.-222    	; 0x1bd8 <main+0x2fc>
      lcd_string_array[p] = ' ';
  }
  else{  //The alarm isn't armed, so we want to output that fact
    dot[4] = 0;
    1cb6:	10 92 d2 01 	sts	0x01D2, r1
    lcd_string_array[0] = 'n';
    1cba:	8e e6       	ldi	r24, 0x6E	; 110
    1cbc:	80 93 5c 02 	sts	0x025C, r24
    lcd_string_array[1] = 'o';
    1cc0:	8f e6       	ldi	r24, 0x6F	; 111
    1cc2:	80 93 5d 02 	sts	0x025D, r24
    lcd_string_array[2] = ' ';
    1cc6:	80 e2       	ldi	r24, 0x20	; 32
    1cc8:	80 93 5e 02 	sts	0x025E, r24
    lcd_string_array[3] = 'a';
    1ccc:	81 e6       	ldi	r24, 0x61	; 97
    1cce:	80 93 5f 02 	sts	0x025F, r24
    lcd_string_array[4] = 'l';
    1cd2:	9c e6       	ldi	r25, 0x6C	; 108
    1cd4:	90 93 60 02 	sts	0x0260, r25
    lcd_string_array[5] = 'a';
    1cd8:	80 93 61 02 	sts	0x0261, r24
    lcd_string_array[6] = 'r';
    1cdc:	82 e7       	ldi	r24, 0x72	; 114
    1cde:	80 93 62 02 	sts	0x0262, r24
    lcd_string_array[7] = 'm';
    1ce2:	8d e6       	ldi	r24, 0x6D	; 109
    1ce4:	80 93 63 02 	sts	0x0263, r24
    1ce8:	e4 e6       	ldi	r30, 0x64	; 100
    1cea:	f2 e0       	ldi	r31, 0x02	; 2

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
      lcd_string_array[i+8] = ' ';
    1cec:	80 e2       	ldi	r24, 0x20	; 32
    1cee:	81 93       	st	Z+, r24
    lcd_string_array[6] = 'r';
    lcd_string_array[7] = 'm';

    uint8_t i;
 
    for(i = 0; i < 20; ++i)
    1cf0:	32 e0       	ldi	r19, 0x02	; 2
    1cf2:	e8 37       	cpi	r30, 0x78	; 120
    1cf4:	f3 07       	cpc	r31, r19
    1cf6:	d9 f7       	brne	.-10     	; 0x1cee <main+0x412>
    1cf8:	6f cf       	rjmp	.-290    	; 0x1bd8 <main+0x2fc>
      }
      lcd_string_array[14] = 'm';
      
    }
    else{
        lcd_string_array[13] = ' ';
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	80 93 69 02 	sts	0x0269, r24
	lcd_string_array[14] = ' ';
    1d00:	80 93 6a 02 	sts	0x026A, r24
    1d04:	cf cf       	rjmp	.-98     	; 0x1ca4 <main+0x3c8>
//This function has two main parts: detecting alarm triggers and parsing alarm output (LCD and Audio)
void inline processAlarm( void ){
  //Detecting Alarm Triggers

  //Check if the alarm is armed and the time is right...
  if(!(settings & SET_MIN) && !(settings & SET_HR) && (settings & ALARM_ARMED) && alarmHours == hours && alarmMinutes == minutes){
    1d06:	90 91 0a 01 	lds	r25, 0x010A
    1d0a:	80 91 d8 01 	lds	r24, 0x01D8
    1d0e:	98 13       	cpse	r25, r24
    1d10:	bf ce       	rjmp	.-642    	; 0x1a90 <main+0x1b4>
    settings &= ~ALARM_ARMED; //Unarm alarm
    1d12:	80 91 c8 01 	lds	r24, 0x01C8
    1d16:	90 91 c9 01 	lds	r25, 0x01C9
    1d1a:	87 7f       	andi	r24, 0xF7	; 247
    1d1c:	90 93 c9 01 	sts	0x01C9, r25
    1d20:	80 93 c8 01 	sts	0x01C8, r24
    currentlyAlarming = 1;    //Trigger alarm
    1d24:	a0 92 d5 01 	sts	0x01D5, r10
  }

  //Check the snooze condition
  if(snoozeCount >= (SNOOZE_SECONDS + 1)){
    1d28:	80 91 d3 01 	lds	r24, 0x01D3
    1d2c:	90 91 d4 01 	lds	r25, 0x01D4
    1d30:	0b 97       	sbiw	r24, 0x0b	; 11
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <main+0x45a>
    1d34:	b5 ce       	rjmp	.-662    	; 0x1aa0 <main+0x1c4>
    1d36:	2a 2d       	mov	r18, r10
    1d38:	c3 ce       	rjmp	.-634    	; 0x1ac0 <main+0x1e4>
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
    1d3a:	99 23       	and	r25, r25
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <main+0x464>
    1d3e:	4e c0       	rjmp	.+156    	; 0x1ddc <main+0x500>
    1d40:	9c 30       	cpi	r25, 0x0C	; 12
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <main+0x46a>
    1d44:	4b c0       	rjmp	.+150    	; 0x1ddc <main+0x500>
        lcd_string_array[8] = '1';
	lcd_string_array[9] = '2';
      }
      else{ //We have to do actual math
        if((alarmHours % 12) < 10)
    1d46:	8b ea       	ldi	r24, 0xAB	; 171
    1d48:	98 9f       	mul	r25, r24
    1d4a:	81 2d       	mov	r24, r1
    1d4c:	11 24       	eor	r1, r1
    1d4e:	86 95       	lsr	r24
    1d50:	86 95       	lsr	r24
    1d52:	86 95       	lsr	r24
    1d54:	38 2f       	mov	r19, r24
    1d56:	33 0f       	add	r19, r19
    1d58:	83 0f       	add	r24, r19
    1d5a:	88 0f       	add	r24, r24
    1d5c:	88 0f       	add	r24, r24
    1d5e:	39 2f       	mov	r19, r25
    1d60:	38 1b       	sub	r19, r24
    1d62:	83 2f       	mov	r24, r19
    1d64:	3a 30       	cpi	r19, 0x0A	; 10
    1d66:	08 f0       	brcs	.+2      	; 0x1d6a <main+0x48e>
	  lcd_string_array[8] = ' ';
	else
	  lcd_string_array[8] = ((alarmHours % 12) / 10) + 48;
    1d68:	21 e3       	ldi	r18, 0x31	; 49
    1d6a:	20 93 64 02 	sts	0x0264, r18
	lcd_string_array[9] = ((alarmHours % 12) % 10) + 48;	
    1d6e:	2d ec       	ldi	r18, 0xCD	; 205
    1d70:	82 9f       	mul	r24, r18
    1d72:	21 2d       	mov	r18, r1
    1d74:	11 24       	eor	r1, r1
    1d76:	26 95       	lsr	r18
    1d78:	26 95       	lsr	r18
    1d7a:	26 95       	lsr	r18
    1d7c:	ea e0       	ldi	r30, 0x0A	; 10
    1d7e:	2e 9f       	mul	r18, r30
    1d80:	80 19       	sub	r24, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	80 5d       	subi	r24, 0xD0	; 208
    1d86:	80 93 65 02 	sts	0x0265, r24
      }
    }
    lcd_string_array[10] = ':';
    1d8a:	8a e3       	ldi	r24, 0x3A	; 58
    1d8c:	80 93 66 02 	sts	0x0266, r24
    //time for minutes
    if(alarmMinutes < 10)
    1d90:	80 91 0a 01 	lds	r24, 0x010A
    1d94:	8a 30       	cpi	r24, 0x0A	; 10
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <main+0x4be>
    1d98:	65 cf       	rjmp	.-310    	; 0x1c64 <main+0x388>
      lcd_string_array[11] = '0';
    else
      lcd_string_array[11] = (alarmMinutes / 10) + 48;
    1d9a:	2d ec       	ldi	r18, 0xCD	; 205
    1d9c:	82 9f       	mul	r24, r18
    1d9e:	21 2d       	mov	r18, r1
    1da0:	11 24       	eor	r1, r1
    1da2:	26 95       	lsr	r18
    1da4:	26 95       	lsr	r18
    1da6:	26 95       	lsr	r18
    1da8:	20 5d       	subi	r18, 0xD0	; 208
    1daa:	20 93 67 02 	sts	0x0267, r18
    1dae:	5d cf       	rjmp	.-326    	; 0x1c6a <main+0x38e>
      if(alarmHours == 0){
        lcd_string_array[8] = '0';
	lcd_string_array[9] = '0';
      }
      else{
        if(alarmHours < 10)
    1db0:	9a 30       	cpi	r25, 0x0A	; 10
    1db2:	f8 f4       	brcc	.+62     	; 0x1df2 <main+0x516>
	  lcd_string_array[8] = '0';
    1db4:	80 e3       	ldi	r24, 0x30	; 48
    1db6:	80 93 64 02 	sts	0x0264, r24
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
        lcd_string_array[9] = (alarmHours % 10) + 48;
    1dba:	8d ec       	ldi	r24, 0xCD	; 205
    1dbc:	98 9f       	mul	r25, r24
    1dbe:	81 2d       	mov	r24, r1
    1dc0:	11 24       	eor	r1, r1
    1dc2:	86 95       	lsr	r24
    1dc4:	86 95       	lsr	r24
    1dc6:	86 95       	lsr	r24
    1dc8:	f9 2f       	mov	r31, r25
    1dca:	ea e0       	ldi	r30, 0x0A	; 10
    1dcc:	8e 9f       	mul	r24, r30
    1dce:	f0 19       	sub	r31, r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	8f 2f       	mov	r24, r31
    1dd4:	80 5d       	subi	r24, 0xD0	; 208
    1dd6:	80 93 65 02 	sts	0x0265, r24
    1dda:	3c cf       	rjmp	.-392    	; 0x1c54 <main+0x378>
      }
    }
    else{ //12 hour mode
      if(alarmHours == 0 || alarmHours == 12){
        lcd_string_array[8] = '1';
    1ddc:	81 e3       	ldi	r24, 0x31	; 49
    1dde:	80 93 64 02 	sts	0x0264, r24
	lcd_string_array[9] = '2';
    1de2:	82 e3       	ldi	r24, 0x32	; 50
    1de4:	80 93 65 02 	sts	0x0265, r24
    1de8:	35 cf       	rjmp	.-406    	; 0x1c54 <main+0x378>
    if(!(settings & TIME24)){ //12 hour mode
      if(alarmHours > 11){
        lcd_string_array[13] = 'p';
      }
      else{
        lcd_string_array[13] = 'a';
    1dea:	81 e6       	ldi	r24, 0x61	; 97
    1dec:	80 93 69 02 	sts	0x0269, r24
    1df0:	56 cf       	rjmp	.-340    	; 0x1c9e <main+0x3c2>
      }
      else{
        if(alarmHours < 10)
	  lcd_string_array[8] = '0';
	else
	  lcd_string_array[8] = (alarmHours / 10) + 48;
    1df2:	8d ec       	ldi	r24, 0xCD	; 205
    1df4:	98 9f       	mul	r25, r24
    1df6:	81 2d       	mov	r24, r1
    1df8:	11 24       	eor	r1, r1
    1dfa:	86 95       	lsr	r24
    1dfc:	86 95       	lsr	r24
    1dfe:	86 95       	lsr	r24
    1e00:	80 5d       	subi	r24, 0xD0	; 208
    1e02:	80 93 64 02 	sts	0x0264, r24
    1e06:	d9 cf       	rjmp	.-78     	; 0x1dba <main+0x4de>

00001e08 <__divmodhi4>:
    1e08:	97 fb       	bst	r25, 7
    1e0a:	07 2e       	mov	r0, r23
    1e0c:	16 f4       	brtc	.+4      	; 0x1e12 <__divmodhi4+0xa>
    1e0e:	00 94       	com	r0
    1e10:	07 d0       	rcall	.+14     	; 0x1e20 <__divmodhi4_neg1>
    1e12:	77 fd       	sbrc	r23, 7
    1e14:	09 d0       	rcall	.+18     	; 0x1e28 <__divmodhi4_neg2>
    1e16:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__udivmodhi4>
    1e1a:	07 fc       	sbrc	r0, 7
    1e1c:	05 d0       	rcall	.+10     	; 0x1e28 <__divmodhi4_neg2>
    1e1e:	3e f4       	brtc	.+14     	; 0x1e2e <__divmodhi4_exit>

00001e20 <__divmodhi4_neg1>:
    1e20:	90 95       	com	r25
    1e22:	81 95       	neg	r24
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	08 95       	ret

00001e28 <__divmodhi4_neg2>:
    1e28:	70 95       	com	r23
    1e2a:	61 95       	neg	r22
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001e2e <__divmodhi4_exit>:
    1e2e:	08 95       	ret

00001e30 <__divmodsi4>:
    1e30:	05 2e       	mov	r0, r21
    1e32:	97 fb       	bst	r25, 7
    1e34:	1e f4       	brtc	.+6      	; 0x1e3c <__divmodsi4+0xc>
    1e36:	00 94       	com	r0
    1e38:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__negsi2>
    1e3c:	57 fd       	sbrc	r21, 7
    1e3e:	07 d0       	rcall	.+14     	; 0x1e4e <__divmodsi4_neg2>
    1e40:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    1e44:	07 fc       	sbrc	r0, 7
    1e46:	03 d0       	rcall	.+6      	; 0x1e4e <__divmodsi4_neg2>
    1e48:	4e f4       	brtc	.+18     	; 0x1e5c <__divmodsi4_exit>
    1e4a:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__negsi2>

00001e4e <__divmodsi4_neg2>:
    1e4e:	50 95       	com	r21
    1e50:	40 95       	com	r20
    1e52:	30 95       	com	r19
    1e54:	21 95       	neg	r18
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	4f 4f       	sbci	r20, 0xFF	; 255
    1e5a:	5f 4f       	sbci	r21, 0xFF	; 255

00001e5c <__divmodsi4_exit>:
    1e5c:	08 95       	ret

00001e5e <__negsi2>:
    1e5e:	90 95       	com	r25
    1e60:	80 95       	com	r24
    1e62:	70 95       	com	r23
    1e64:	61 95       	neg	r22
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	08 95       	ret

00001e6e <__umulhisi3>:
    1e6e:	a2 9f       	mul	r26, r18
    1e70:	b0 01       	movw	r22, r0
    1e72:	b3 9f       	mul	r27, r19
    1e74:	c0 01       	movw	r24, r0
    1e76:	a3 9f       	mul	r26, r19
    1e78:	70 0d       	add	r23, r0
    1e7a:	81 1d       	adc	r24, r1
    1e7c:	11 24       	eor	r1, r1
    1e7e:	91 1d       	adc	r25, r1
    1e80:	b2 9f       	mul	r27, r18
    1e82:	70 0d       	add	r23, r0
    1e84:	81 1d       	adc	r24, r1
    1e86:	11 24       	eor	r1, r1
    1e88:	91 1d       	adc	r25, r1
    1e8a:	08 95       	ret

00001e8c <__udivmodhi4>:
    1e8c:	aa 1b       	sub	r26, r26
    1e8e:	bb 1b       	sub	r27, r27
    1e90:	51 e1       	ldi	r21, 0x11	; 17
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <__udivmodhi4_ep>

00001e94 <__udivmodhi4_loop>:
    1e94:	aa 1f       	adc	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	a6 17       	cp	r26, r22
    1e9a:	b7 07       	cpc	r27, r23
    1e9c:	10 f0       	brcs	.+4      	; 0x1ea2 <__udivmodhi4_ep>
    1e9e:	a6 1b       	sub	r26, r22
    1ea0:	b7 0b       	sbc	r27, r23

00001ea2 <__udivmodhi4_ep>:
    1ea2:	88 1f       	adc	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	5a 95       	dec	r21
    1ea8:	a9 f7       	brne	.-22     	; 0x1e94 <__udivmodhi4_loop>
    1eaa:	80 95       	com	r24
    1eac:	90 95       	com	r25
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	08 95       	ret

00001eb4 <__udivmodsi4>:
    1eb4:	a1 e2       	ldi	r26, 0x21	; 33
    1eb6:	1a 2e       	mov	r1, r26
    1eb8:	aa 1b       	sub	r26, r26
    1eba:	bb 1b       	sub	r27, r27
    1ebc:	fd 01       	movw	r30, r26
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <__udivmodsi4_ep>

00001ec0 <__udivmodsi4_loop>:
    1ec0:	aa 1f       	adc	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	ee 1f       	adc	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	a2 17       	cp	r26, r18
    1eca:	b3 07       	cpc	r27, r19
    1ecc:	e4 07       	cpc	r30, r20
    1ece:	f5 07       	cpc	r31, r21
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <__udivmodsi4_ep>
    1ed2:	a2 1b       	sub	r26, r18
    1ed4:	b3 0b       	sbc	r27, r19
    1ed6:	e4 0b       	sbc	r30, r20
    1ed8:	f5 0b       	sbc	r31, r21

00001eda <__udivmodsi4_ep>:
    1eda:	66 1f       	adc	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	1a 94       	dec	r1
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <__udivmodsi4_loop>
    1ee6:	60 95       	com	r22
    1ee8:	70 95       	com	r23
    1eea:	80 95       	com	r24
    1eec:	90 95       	com	r25
    1eee:	9b 01       	movw	r18, r22
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	bd 01       	movw	r22, r26
    1ef4:	cf 01       	movw	r24, r30
    1ef6:	08 95       	ret

00001ef8 <__subsf3>:
    1ef8:	50 58       	subi	r21, 0x80	; 128

00001efa <__addsf3>:
    1efa:	bb 27       	eor	r27, r27
    1efc:	aa 27       	eor	r26, r26
    1efe:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__addsf3x>
    1f02:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    1f06:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    1f0a:	38 f0       	brcs	.+14     	; 0x1f1a <__addsf3+0x20>
    1f0c:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <__addsf3+0x20>
    1f12:	39 f4       	brne	.+14     	; 0x1f22 <__addsf3+0x28>
    1f14:	9f 3f       	cpi	r25, 0xFF	; 255
    1f16:	19 f4       	brne	.+6      	; 0x1f1e <__addsf3+0x24>
    1f18:	26 f4       	brtc	.+8      	; 0x1f22 <__addsf3+0x28>
    1f1a:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_nan>
    1f1e:	0e f4       	brtc	.+2      	; 0x1f22 <__addsf3+0x28>
    1f20:	e0 95       	com	r30
    1f22:	e7 fb       	bst	r30, 7
    1f24:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>

00001f28 <__addsf3x>:
    1f28:	e9 2f       	mov	r30, r25
    1f2a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    1f2e:	58 f3       	brcs	.-42     	; 0x1f06 <__addsf3+0xc>
    1f30:	ba 17       	cp	r27, r26
    1f32:	62 07       	cpc	r22, r18
    1f34:	73 07       	cpc	r23, r19
    1f36:	84 07       	cpc	r24, r20
    1f38:	95 07       	cpc	r25, r21
    1f3a:	20 f0       	brcs	.+8      	; 0x1f44 <__addsf3x+0x1c>
    1f3c:	79 f4       	brne	.+30     	; 0x1f5c <__addsf3x+0x34>
    1f3e:	a6 f5       	brtc	.+104    	; 0x1fa8 <__addsf3x+0x80>
    1f40:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__fp_zero>
    1f44:	0e f4       	brtc	.+2      	; 0x1f48 <__addsf3x+0x20>
    1f46:	e0 95       	com	r30
    1f48:	0b 2e       	mov	r0, r27
    1f4a:	ba 2f       	mov	r27, r26
    1f4c:	a0 2d       	mov	r26, r0
    1f4e:	0b 01       	movw	r0, r22
    1f50:	b9 01       	movw	r22, r18
    1f52:	90 01       	movw	r18, r0
    1f54:	0c 01       	movw	r0, r24
    1f56:	ca 01       	movw	r24, r20
    1f58:	a0 01       	movw	r20, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	ff 27       	eor	r31, r31
    1f5e:	59 1b       	sub	r21, r25
    1f60:	99 f0       	breq	.+38     	; 0x1f88 <__addsf3x+0x60>
    1f62:	59 3f       	cpi	r21, 0xF9	; 249
    1f64:	50 f4       	brcc	.+20     	; 0x1f7a <__addsf3x+0x52>
    1f66:	50 3e       	cpi	r21, 0xE0	; 224
    1f68:	68 f1       	brcs	.+90     	; 0x1fc4 <__addsf3x+0x9c>
    1f6a:	1a 16       	cp	r1, r26
    1f6c:	f0 40       	sbci	r31, 0x00	; 0
    1f6e:	a2 2f       	mov	r26, r18
    1f70:	23 2f       	mov	r18, r19
    1f72:	34 2f       	mov	r19, r20
    1f74:	44 27       	eor	r20, r20
    1f76:	58 5f       	subi	r21, 0xF8	; 248
    1f78:	f3 cf       	rjmp	.-26     	; 0x1f60 <__addsf3x+0x38>
    1f7a:	46 95       	lsr	r20
    1f7c:	37 95       	ror	r19
    1f7e:	27 95       	ror	r18
    1f80:	a7 95       	ror	r26
    1f82:	f0 40       	sbci	r31, 0x00	; 0
    1f84:	53 95       	inc	r21
    1f86:	c9 f7       	brne	.-14     	; 0x1f7a <__addsf3x+0x52>
    1f88:	7e f4       	brtc	.+30     	; 0x1fa8 <__addsf3x+0x80>
    1f8a:	1f 16       	cp	r1, r31
    1f8c:	ba 0b       	sbc	r27, r26
    1f8e:	62 0b       	sbc	r22, r18
    1f90:	73 0b       	sbc	r23, r19
    1f92:	84 0b       	sbc	r24, r20
    1f94:	ba f0       	brmi	.+46     	; 0x1fc4 <__addsf3x+0x9c>
    1f96:	91 50       	subi	r25, 0x01	; 1
    1f98:	a1 f0       	breq	.+40     	; 0x1fc2 <__addsf3x+0x9a>
    1f9a:	ff 0f       	add	r31, r31
    1f9c:	bb 1f       	adc	r27, r27
    1f9e:	66 1f       	adc	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	c2 f7       	brpl	.-16     	; 0x1f96 <__addsf3x+0x6e>
    1fa6:	0e c0       	rjmp	.+28     	; 0x1fc4 <__addsf3x+0x9c>
    1fa8:	ba 0f       	add	r27, r26
    1faa:	62 1f       	adc	r22, r18
    1fac:	73 1f       	adc	r23, r19
    1fae:	84 1f       	adc	r24, r20
    1fb0:	48 f4       	brcc	.+18     	; 0x1fc4 <__addsf3x+0x9c>
    1fb2:	87 95       	ror	r24
    1fb4:	77 95       	ror	r23
    1fb6:	67 95       	ror	r22
    1fb8:	b7 95       	ror	r27
    1fba:	f7 95       	ror	r31
    1fbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <__addsf3x+0x9a>
    1fc0:	b0 cf       	rjmp	.-160    	; 0x1f22 <__addsf3+0x28>
    1fc2:	93 95       	inc	r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	08 f0       	brcs	.+2      	; 0x1fca <__addsf3x+0xa2>
    1fc8:	99 27       	eor	r25, r25
    1fca:	ee 0f       	add	r30, r30
    1fcc:	97 95       	ror	r25
    1fce:	87 95       	ror	r24
    1fd0:	08 95       	ret

00001fd2 <__fixunssfsi>:
    1fd2:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_splitA>
    1fd6:	88 f0       	brcs	.+34     	; 0x1ffa <__fixunssfsi+0x28>
    1fd8:	9f 57       	subi	r25, 0x7F	; 127
    1fda:	98 f0       	brcs	.+38     	; 0x2002 <__fixunssfsi+0x30>
    1fdc:	b9 2f       	mov	r27, r25
    1fde:	99 27       	eor	r25, r25
    1fe0:	b7 51       	subi	r27, 0x17	; 23
    1fe2:	b0 f0       	brcs	.+44     	; 0x2010 <__fixunssfsi+0x3e>
    1fe4:	e1 f0       	breq	.+56     	; 0x201e <__fixunssfsi+0x4c>
    1fe6:	66 0f       	add	r22, r22
    1fe8:	77 1f       	adc	r23, r23
    1fea:	88 1f       	adc	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	1a f0       	brmi	.+6      	; 0x1ff6 <__fixunssfsi+0x24>
    1ff0:	ba 95       	dec	r27
    1ff2:	c9 f7       	brne	.-14     	; 0x1fe6 <__fixunssfsi+0x14>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <__fixunssfsi+0x4c>
    1ff6:	b1 30       	cpi	r27, 0x01	; 1
    1ff8:	91 f0       	breq	.+36     	; 0x201e <__fixunssfsi+0x4c>
    1ffa:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_zero>
    1ffe:	b1 e0       	ldi	r27, 0x01	; 1
    2000:	08 95       	ret
    2002:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__fp_zero>
    2006:	67 2f       	mov	r22, r23
    2008:	78 2f       	mov	r23, r24
    200a:	88 27       	eor	r24, r24
    200c:	b8 5f       	subi	r27, 0xF8	; 248
    200e:	39 f0       	breq	.+14     	; 0x201e <__fixunssfsi+0x4c>
    2010:	b9 3f       	cpi	r27, 0xF9	; 249
    2012:	cc f3       	brlt	.-14     	; 0x2006 <__fixunssfsi+0x34>
    2014:	86 95       	lsr	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	b3 95       	inc	r27
    201c:	d9 f7       	brne	.-10     	; 0x2014 <__fixunssfsi+0x42>
    201e:	3e f4       	brtc	.+14     	; 0x202e <__fixunssfsi+0x5c>
    2020:	90 95       	com	r25
    2022:	80 95       	com	r24
    2024:	70 95       	com	r23
    2026:	61 95       	neg	r22
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	8f 4f       	sbci	r24, 0xFF	; 255
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	08 95       	ret

00002030 <__floatunsisf>:
    2030:	e8 94       	clt
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <__floatsisf+0x12>

00002034 <__floatsisf>:
    2034:	97 fb       	bst	r25, 7
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__floatsisf+0x12>
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	99 23       	and	r25, r25
    2048:	a9 f0       	breq	.+42     	; 0x2074 <__floatsisf+0x40>
    204a:	f9 2f       	mov	r31, r25
    204c:	96 e9       	ldi	r25, 0x96	; 150
    204e:	bb 27       	eor	r27, r27
    2050:	93 95       	inc	r25
    2052:	f6 95       	lsr	r31
    2054:	87 95       	ror	r24
    2056:	77 95       	ror	r23
    2058:	67 95       	ror	r22
    205a:	b7 95       	ror	r27
    205c:	f1 11       	cpse	r31, r1
    205e:	f8 cf       	rjmp	.-16     	; 0x2050 <__floatsisf+0x1c>
    2060:	fa f4       	brpl	.+62     	; 0x20a0 <__floatsisf+0x6c>
    2062:	bb 0f       	add	r27, r27
    2064:	11 f4       	brne	.+4      	; 0x206a <__floatsisf+0x36>
    2066:	60 ff       	sbrs	r22, 0
    2068:	1b c0       	rjmp	.+54     	; 0x20a0 <__floatsisf+0x6c>
    206a:	6f 5f       	subi	r22, 0xFF	; 255
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	8f 4f       	sbci	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	16 c0       	rjmp	.+44     	; 0x20a0 <__floatsisf+0x6c>
    2074:	88 23       	and	r24, r24
    2076:	11 f0       	breq	.+4      	; 0x207c <__floatsisf+0x48>
    2078:	96 e9       	ldi	r25, 0x96	; 150
    207a:	11 c0       	rjmp	.+34     	; 0x209e <__floatsisf+0x6a>
    207c:	77 23       	and	r23, r23
    207e:	21 f0       	breq	.+8      	; 0x2088 <__floatsisf+0x54>
    2080:	9e e8       	ldi	r25, 0x8E	; 142
    2082:	87 2f       	mov	r24, r23
    2084:	76 2f       	mov	r23, r22
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <__floatsisf+0x5e>
    2088:	66 23       	and	r22, r22
    208a:	71 f0       	breq	.+28     	; 0x20a8 <__floatsisf+0x74>
    208c:	96 e8       	ldi	r25, 0x86	; 134
    208e:	86 2f       	mov	r24, r22
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	2a f0       	brmi	.+10     	; 0x20a0 <__floatsisf+0x6c>
    2096:	9a 95       	dec	r25
    2098:	66 0f       	add	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	88 1f       	adc	r24, r24
    209e:	da f7       	brpl	.-10     	; 0x2096 <__floatsisf+0x62>
    20a0:	88 0f       	add	r24, r24
    20a2:	96 95       	lsr	r25
    20a4:	87 95       	ror	r24
    20a6:	97 f9       	bld	r25, 7
    20a8:	08 95       	ret

000020aa <__fp_inf>:
    20aa:	97 f9       	bld	r25, 7
    20ac:	9f 67       	ori	r25, 0x7F	; 127
    20ae:	80 e8       	ldi	r24, 0x80	; 128
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	08 95       	ret

000020b6 <__fp_nan>:
    20b6:	9f ef       	ldi	r25, 0xFF	; 255
    20b8:	80 ec       	ldi	r24, 0xC0	; 192
    20ba:	08 95       	ret

000020bc <__fp_pscA>:
    20bc:	00 24       	eor	r0, r0
    20be:	0a 94       	dec	r0
    20c0:	16 16       	cp	r1, r22
    20c2:	17 06       	cpc	r1, r23
    20c4:	18 06       	cpc	r1, r24
    20c6:	09 06       	cpc	r0, r25
    20c8:	08 95       	ret

000020ca <__fp_pscB>:
    20ca:	00 24       	eor	r0, r0
    20cc:	0a 94       	dec	r0
    20ce:	12 16       	cp	r1, r18
    20d0:	13 06       	cpc	r1, r19
    20d2:	14 06       	cpc	r1, r20
    20d4:	05 06       	cpc	r0, r21
    20d6:	08 95       	ret

000020d8 <__fp_round>:
    20d8:	09 2e       	mov	r0, r25
    20da:	03 94       	inc	r0
    20dc:	00 0c       	add	r0, r0
    20de:	11 f4       	brne	.+4      	; 0x20e4 <__fp_round+0xc>
    20e0:	88 23       	and	r24, r24
    20e2:	52 f0       	brmi	.+20     	; 0x20f8 <__fp_round+0x20>
    20e4:	bb 0f       	add	r27, r27
    20e6:	40 f4       	brcc	.+16     	; 0x20f8 <__fp_round+0x20>
    20e8:	bf 2b       	or	r27, r31
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <__fp_round+0x18>
    20ec:	60 ff       	sbrs	r22, 0
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <__fp_round+0x20>
    20f0:	6f 5f       	subi	r22, 0xFF	; 255
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	8f 4f       	sbci	r24, 0xFF	; 255
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	08 95       	ret

000020fa <__fp_split3>:
    20fa:	57 fd       	sbrc	r21, 7
    20fc:	90 58       	subi	r25, 0x80	; 128
    20fe:	44 0f       	add	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	59 f0       	breq	.+22     	; 0x211a <__fp_splitA+0x10>
    2104:	5f 3f       	cpi	r21, 0xFF	; 255
    2106:	71 f0       	breq	.+28     	; 0x2124 <__fp_splitA+0x1a>
    2108:	47 95       	ror	r20

0000210a <__fp_splitA>:
    210a:	88 0f       	add	r24, r24
    210c:	97 fb       	bst	r25, 7
    210e:	99 1f       	adc	r25, r25
    2110:	61 f0       	breq	.+24     	; 0x212a <__fp_splitA+0x20>
    2112:	9f 3f       	cpi	r25, 0xFF	; 255
    2114:	79 f0       	breq	.+30     	; 0x2134 <__fp_splitA+0x2a>
    2116:	87 95       	ror	r24
    2118:	08 95       	ret
    211a:	12 16       	cp	r1, r18
    211c:	13 06       	cpc	r1, r19
    211e:	14 06       	cpc	r1, r20
    2120:	55 1f       	adc	r21, r21
    2122:	f2 cf       	rjmp	.-28     	; 0x2108 <__fp_split3+0xe>
    2124:	46 95       	lsr	r20
    2126:	f1 df       	rcall	.-30     	; 0x210a <__fp_splitA>
    2128:	08 c0       	rjmp	.+16     	; 0x213a <__fp_splitA+0x30>
    212a:	16 16       	cp	r1, r22
    212c:	17 06       	cpc	r1, r23
    212e:	18 06       	cpc	r1, r24
    2130:	99 1f       	adc	r25, r25
    2132:	f1 cf       	rjmp	.-30     	; 0x2116 <__fp_splitA+0xc>
    2134:	86 95       	lsr	r24
    2136:	71 05       	cpc	r23, r1
    2138:	61 05       	cpc	r22, r1
    213a:	08 94       	sec
    213c:	08 95       	ret

0000213e <__fp_zero>:
    213e:	e8 94       	clt

00002140 <__fp_szero>:
    2140:	bb 27       	eor	r27, r27
    2142:	66 27       	eor	r22, r22
    2144:	77 27       	eor	r23, r23
    2146:	cb 01       	movw	r24, r22
    2148:	97 f9       	bld	r25, 7
    214a:	08 95       	ret

0000214c <__mulsf3>:
    214c:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulsf3x>
    2150:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    2154:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    2158:	38 f0       	brcs	.+14     	; 0x2168 <__mulsf3+0x1c>
    215a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    215e:	20 f0       	brcs	.+8      	; 0x2168 <__mulsf3+0x1c>
    2160:	95 23       	and	r25, r21
    2162:	11 f0       	breq	.+4      	; 0x2168 <__mulsf3+0x1c>
    2164:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    2168:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_nan>
    216c:	11 24       	eor	r1, r1
    216e:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>

00002172 <__mulsf3x>:
    2172:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    2176:	70 f3       	brcs	.-36     	; 0x2154 <__mulsf3+0x8>

00002178 <__mulsf3_pse>:
    2178:	95 9f       	mul	r25, r21
    217a:	c1 f3       	breq	.-16     	; 0x216c <__mulsf3+0x20>
    217c:	95 0f       	add	r25, r21
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	55 1f       	adc	r21, r21
    2182:	62 9f       	mul	r22, r18
    2184:	f0 01       	movw	r30, r0
    2186:	72 9f       	mul	r23, r18
    2188:	bb 27       	eor	r27, r27
    218a:	f0 0d       	add	r31, r0
    218c:	b1 1d       	adc	r27, r1
    218e:	63 9f       	mul	r22, r19
    2190:	aa 27       	eor	r26, r26
    2192:	f0 0d       	add	r31, r0
    2194:	b1 1d       	adc	r27, r1
    2196:	aa 1f       	adc	r26, r26
    2198:	64 9f       	mul	r22, r20
    219a:	66 27       	eor	r22, r22
    219c:	b0 0d       	add	r27, r0
    219e:	a1 1d       	adc	r26, r1
    21a0:	66 1f       	adc	r22, r22
    21a2:	82 9f       	mul	r24, r18
    21a4:	22 27       	eor	r18, r18
    21a6:	b0 0d       	add	r27, r0
    21a8:	a1 1d       	adc	r26, r1
    21aa:	62 1f       	adc	r22, r18
    21ac:	73 9f       	mul	r23, r19
    21ae:	b0 0d       	add	r27, r0
    21b0:	a1 1d       	adc	r26, r1
    21b2:	62 1f       	adc	r22, r18
    21b4:	83 9f       	mul	r24, r19
    21b6:	a0 0d       	add	r26, r0
    21b8:	61 1d       	adc	r22, r1
    21ba:	22 1f       	adc	r18, r18
    21bc:	74 9f       	mul	r23, r20
    21be:	33 27       	eor	r19, r19
    21c0:	a0 0d       	add	r26, r0
    21c2:	61 1d       	adc	r22, r1
    21c4:	23 1f       	adc	r18, r19
    21c6:	84 9f       	mul	r24, r20
    21c8:	60 0d       	add	r22, r0
    21ca:	21 1d       	adc	r18, r1
    21cc:	82 2f       	mov	r24, r18
    21ce:	76 2f       	mov	r23, r22
    21d0:	6a 2f       	mov	r22, r26
    21d2:	11 24       	eor	r1, r1
    21d4:	9f 57       	subi	r25, 0x7F	; 127
    21d6:	50 40       	sbci	r21, 0x00	; 0
    21d8:	9a f0       	brmi	.+38     	; 0x2200 <__mulsf3_pse+0x88>
    21da:	f1 f0       	breq	.+60     	; 0x2218 <__mulsf3_pse+0xa0>
    21dc:	88 23       	and	r24, r24
    21de:	4a f0       	brmi	.+18     	; 0x21f2 <__mulsf3_pse+0x7a>
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	bb 1f       	adc	r27, r27
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	91 50       	subi	r25, 0x01	; 1
    21ee:	50 40       	sbci	r21, 0x00	; 0
    21f0:	a9 f7       	brne	.-22     	; 0x21dc <__mulsf3_pse+0x64>
    21f2:	9e 3f       	cpi	r25, 0xFE	; 254
    21f4:	51 05       	cpc	r21, r1
    21f6:	80 f0       	brcs	.+32     	; 0x2218 <__mulsf3_pse+0xa0>
    21f8:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    21fc:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>
    2200:	5f 3f       	cpi	r21, 0xFF	; 255
    2202:	e4 f3       	brlt	.-8      	; 0x21fc <__mulsf3_pse+0x84>
    2204:	98 3e       	cpi	r25, 0xE8	; 232
    2206:	d4 f3       	brlt	.-12     	; 0x21fc <__mulsf3_pse+0x84>
    2208:	86 95       	lsr	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f7 95       	ror	r31
    2212:	e7 95       	ror	r30
    2214:	9f 5f       	subi	r25, 0xFF	; 255
    2216:	c1 f7       	brne	.-16     	; 0x2208 <__mulsf3_pse+0x90>
    2218:	fe 2b       	or	r31, r30
    221a:	88 0f       	add	r24, r24
    221c:	91 1d       	adc	r25, r1
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <strcpy>:
    2226:	fb 01       	movw	r30, r22
    2228:	dc 01       	movw	r26, r24
    222a:	01 90       	ld	r0, Z+
    222c:	0d 92       	st	X+, r0
    222e:	00 20       	and	r0, r0
    2230:	e1 f7       	brne	.-8      	; 0x222a <strcpy+0x4>
    2232:	08 95       	ret

00002234 <_exit>:
    2234:	f8 94       	cli

00002236 <__stop_program>:
    2236:	ff cf       	rjmp	.-2      	; 0x2236 <__stop_program>
