
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000207c  00002110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800100  00800100  00002110  2**0
                  ALLOC
  3 .stab         00003678  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f4  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000697c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006990  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__ctors_end>
       4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
       8:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
       c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      10:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      14:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      18:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      1c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      20:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      24:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      28:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      2c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      30:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_12>
      34:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      38:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      3c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      40:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_16>
      44:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      48:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      4c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      50:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      54:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      58:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      5c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      60:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      64:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      68:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      6c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      70:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      74:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      78:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      7c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      80:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      84:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      88:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      8c:	17 02       	muls	r17, r23
      8e:	21 02       	muls	r18, r17
      90:	2b 02       	muls	r18, r27
      92:	35 02       	muls	r19, r21
      94:	40 02       	muls	r20, r16
      96:	4b 02       	muls	r20, r27
      98:	56 02       	muls	r21, r22
      9a:	03 02       	muls	r16, r19
      9c:	0d 02       	muls	r16, r29
      9e:	ac 03       	fmulsu	r18, r20
      a0:	a4 03       	fmuls	r18, r20
      a2:	9f 03       	fmulsu	r17, r23
      a4:	c9 03       	fmulsu	r20, r17
      a6:	bc 03       	fmulsu	r19, r20
      a8:	c4 03       	fmuls	r20, r20
      aa:	b4 03       	fmuls	r19, r20
      ac:	7d 03       	fmul	r23, r21
      ae:	75 03       	mulsu	r23, r21
      b0:	70 03       	mulsu	r23, r16
      b2:	68 03       	fmul	r22, r16
      b4:	d1 03       	fmuls	r21, r17
      b6:	85 03       	fmuls	r16, r21
      b8:	5b 03       	fmul	r21, r19
      ba:	43 03       	mulsu	r20, r19
      bc:	f1 03       	fmuls	r23, r17
      be:	9a 03       	fmulsu	r17, r18
      c0:	92 03       	fmuls	r17, r18
      c2:	8a 03       	fmulsu	r16, r18
      c4:	11 04       	cpc	r1, r1
      c6:	4b 03       	fmul	r20, r19
      c8:	01 04       	cpc	r0, r1
      ca:	53 03       	mulsu	r21, r19
      cc:	1e 04       	cpc	r1, r14
      ce:	e9 03       	fmulsu	r22, r17
      d0:	09 04       	cpc	r0, r9
      d2:	63 03       	mulsu	r22, r19
      d4:	e1 03       	fmuls	r22, r17
      d6:	d9 03       	fmulsu	r21, r17
      d8:	f9 03       	fmulsu	r23, r17
      da:	3e 03       	fmul	r19, r22
      dc:	0c 03       	fmul	r16, r20
      de:	04 03       	mulsu	r16, r20
      e0:	14 03       	mulsu	r17, r20
      e2:	16 04       	cpc	r1, r6
      e4:	f7 02       	muls	r31, r23
      e6:	ef 02       	muls	r30, r31
      e8:	19 03       	fmul	r17, r17
      ea:	d2 02       	muls	r29, r18
      ec:	36 03       	mulsu	r19, r22
      ee:	ff 02       	muls	r31, r31
      f0:	e2 02       	muls	r30, r18
      f2:	da 02       	muls	r29, r26
      f4:	26 03       	mulsu	r18, r22
      f6:	ea 02       	muls	r30, r26
      f8:	1e 03       	fmul	r17, r22
      fa:	ca 02       	muls	r28, r26
      fc:	b0 02       	muls	r27, r16
      fe:	2e 03       	fmul	r18, r22
     100:	a0 02       	muls	r26, r16
     102:	98 02       	muls	r25, r24
     104:	bd 02       	muls	r27, r29
     106:	b5 02       	muls	r27, r21
     108:	c2 02       	muls	r28, r18
     10a:	93 02       	muls	r25, r19
     10c:	a8 02       	muls	r26, r24
     10e:	7b 02       	muls	r23, r27
     110:	8b 02       	muls	r24, r27
     112:	76 02       	muls	r23, r22
     114:	6e 02       	muls	r22, r30
     116:	66 02       	muls	r22, r22
     118:	61 02       	muls	r22, r17
     11a:	83 02       	muls	r24, r19
     11c:	28 05       	cpc	r18, r8
     11e:	46 05       	cpc	r20, r6
     120:	22 05       	cpc	r18, r2
     122:	34 05       	cpc	r19, r4
     124:	16 05       	cpc	r17, r6
     126:	1c 05       	cpc	r17, r12
     128:	16 05       	cpc	r17, r6
     12a:	1c 05       	cpc	r17, r12
     12c:	4c 05       	cpc	r20, r12
     12e:	28 05       	cpc	r18, r8
     130:	46 05       	cpc	r20, r6
     132:	22 05       	cpc	r18, r2
     134:	34 05       	cpc	r19, r4
     136:	2e 05       	cpc	r18, r14
     138:	10 05       	cpc	r17, r0
     13a:	2e 05       	cpc	r18, r14
     13c:	10 05       	cpc	r17, r0
     13e:	76 05       	cpc	r23, r6
     140:	b2 05       	cpc	r27, r2
     142:	6a 05       	cpc	r22, r10
     144:	e2 05       	cpc	r30, r2
     146:	6a 05       	cpc	r22, r10
     148:	a6 05       	cpc	r26, r6
     14a:	a0 05       	cpc	r26, r0
     14c:	10 05       	cpc	r17, r0
     14e:	7c 05       	cpc	r23, r12
     150:	10 05       	cpc	r17, r0
     152:	8e 05       	cpc	r24, r14
     154:	3a 05       	cpc	r19, r10
     156:	d0 05       	cpc	r29, r0
     158:	16 05       	cpc	r17, r6
     15a:	c4 05       	cpc	r28, r4
     15c:	52 05       	cpc	r21, r2
     15e:	ca 05       	cpc	r28, r10
     160:	58 05       	cpc	r21, r8
     162:	d6 05       	cpc	r29, r6
     164:	9a 05       	cpc	r25, r10
     166:	40 05       	cpc	r20, r0
     168:	3a 05       	cpc	r19, r10
     16a:	82 05       	cpc	r24, r2
     16c:	5e 05       	cpc	r21, r14
     16e:	28 05       	cpc	r18, r8
     170:	46 05       	cpc	r20, r6
     172:	22 05       	cpc	r18, r2
     174:	34 05       	cpc	r19, r4
     176:	16 05       	cpc	r17, r6
     178:	1c 05       	cpc	r17, r12
     17a:	16 05       	cpc	r17, r6
     17c:	1c 05       	cpc	r17, r12
     17e:	4c 05       	cpc	r20, r12
     180:	28 05       	cpc	r18, r8
     182:	ac 05       	cpc	r26, r12
     184:	40 05       	cpc	r20, r0
     186:	22 05       	cpc	r18, r2
     188:	2e 05       	cpc	r18, r14
     18a:	10 05       	cpc	r17, r0
     18c:	2e 05       	cpc	r18, r14
     18e:	10 05       	cpc	r17, r0
     190:	76 05       	cpc	r23, r6
     192:	b8 05       	cpc	r27, r8
     194:	88 05       	cpc	r24, r8
     196:	4c 05       	cpc	r20, r12
     198:	be 05       	cpc	r27, r14
     19a:	7c 05       	cpc	r23, r12
     19c:	52 05       	cpc	r21, r2
     19e:	58 05       	cpc	r21, r8
     1a0:	3a 05       	cpc	r19, r10
     1a2:	40 05       	cpc	r20, r0
     1a4:	dc 05       	cpc	r29, r12
     1a6:	5e 05       	cpc	r21, r14
     1a8:	fa 05       	cpc	r31, r10
     1aa:	1e 06       	cpc	r1, r30
     1ac:	f4 05       	cpc	r31, r4
     1ae:	18 06       	cpc	r1, r24
     1b0:	9c 06       	cpc	r9, r28
     1b2:	96 06       	cpc	r9, r22
     1b4:	f4 05       	cpc	r31, r4
     1b6:	1e 06       	cpc	r1, r30
     1b8:	24 06       	cpc	r2, r20
     1ba:	00 06       	cpc	r0, r16
     1bc:	a8 06       	cpc	r10, r24
     1be:	f4 05       	cpc	r31, r4
     1c0:	fa 05       	cpc	r31, r10
     1c2:	18 06       	cpc	r1, r24
     1c4:	f4 05       	cpc	r31, r4
     1c6:	60 06       	cpc	r6, r16
     1c8:	f4 05       	cpc	r31, r4
     1ca:	0c 06       	cpc	r0, r28
     1cc:	fa 05       	cpc	r31, r10
     1ce:	3c 06       	cpc	r3, r28
     1d0:	24 06       	cpc	r2, r20
     1d2:	00 06       	cpc	r0, r16
     1d4:	36 06       	cpc	r3, r22
     1d6:	ba 06       	cpc	r11, r26
     1d8:	0c 06       	cpc	r0, r28
     1da:	2a 06       	cpc	r2, r26
     1dc:	c6 06       	cpc	r12, r22
     1de:	78 06       	cpc	r7, r24
     1e0:	2a 06       	cpc	r2, r26
     1e2:	90 06       	cpc	r9, r16
     1e4:	f4 05       	cpc	r31, r4
     1e6:	fa 05       	cpc	r31, r10
     1e8:	18 06       	cpc	r1, r24
     1ea:	f4 05       	cpc	r31, r4
     1ec:	5a 06       	cpc	r5, r26
     1ee:	00 06       	cpc	r0, r16
     1f0:	1e 06       	cpc	r1, r30
     1f2:	f4 05       	cpc	r31, r4
     1f4:	0c 06       	cpc	r0, r28
     1f6:	fa 05       	cpc	r31, r10
     1f8:	3c 06       	cpc	r3, r28
     1fa:	24 06       	cpc	r2, r20
     1fc:	00 06       	cpc	r0, r16
     1fe:	b4 06       	cpc	r11, r20
     200:	4e 06       	cpc	r4, r30
     202:	48 06       	cpc	r4, r24
     204:	12 06       	cpc	r1, r18
     206:	42 06       	cpc	r4, r18
     208:	30 06       	cpc	r3, r16
     20a:	12 06       	cpc	r1, r18
     20c:	84 06       	cpc	r8, r20
     20e:	8a 06       	cpc	r8, r26
     210:	7e 06       	cpc	r7, r30
     212:	4e 06       	cpc	r4, r30
     214:	48 06       	cpc	r4, r24
     216:	12 06       	cpc	r1, r18
     218:	42 06       	cpc	r4, r18
     21a:	30 06       	cpc	r3, r16
     21c:	a2 06       	cpc	r10, r18
     21e:	ae 06       	cpc	r10, r30
     220:	36 06       	cpc	r3, r22
     222:	66 06       	cpc	r6, r22
     224:	6c 06       	cpc	r6, r28
     226:	76 0b       	sbc	r23, r22
     228:	6a 0b       	sbc	r22, r26
     22a:	64 0b       	sbc	r22, r20
     22c:	58 0b       	sbc	r21, r24
     22e:	52 0b       	sbc	r21, r18
     230:	46 0b       	sbc	r20, r22
     232:	40 0b       	sbc	r20, r16
     234:	3a 0b       	sbc	r19, r26
     236:	34 0b       	sbc	r19, r20
     238:	2e 0b       	sbc	r18, r30
     23a:	22 0b       	sbc	r18, r18
     23c:	1c 0b       	sbc	r17, r28
     23e:	16 0b       	sbc	r17, r22
     240:	0a 0b       	sbc	r16, r26
     242:	04 0b       	sbc	r16, r20
     244:	f8 0a       	sbc	r15, r24
     246:	f2 0a       	sbc	r15, r18
     248:	e6 0a       	sbc	r14, r22
     24a:	e0 0a       	sbc	r14, r16
     24c:	d4 0a       	sbc	r13, r20
     24e:	ce 0a       	sbc	r12, r30
     250:	c8 0a       	sbc	r12, r24
     252:	c2 0a       	sbc	r12, r18
     254:	bc 0a       	sbc	r11, r28
     256:	b0 0a       	sbc	r11, r16
     258:	aa 0a       	sbc	r10, r26
     25a:	a4 0a       	sbc	r10, r20
     25c:	9e 0a       	sbc	r9, r30
     25e:	98 0a       	sbc	r9, r24
     260:	8c 0a       	sbc	r8, r28
     262:	86 0a       	sbc	r8, r22
     264:	7a 0a       	sbc	r7, r26
     266:	74 0a       	sbc	r7, r20
     268:	6e 0a       	sbc	r6, r30
     26a:	68 0a       	sbc	r6, r24
     26c:	5c 0a       	sbc	r5, r28
     26e:	56 0a       	sbc	r5, r22
     270:	4a 0a       	sbc	r4, r26
     272:	44 0a       	sbc	r4, r20
     274:	38 0a       	sbc	r3, r24
     276:	32 0a       	sbc	r3, r18
     278:	26 0a       	sbc	r2, r22
     27a:	20 0a       	sbc	r2, r16
     27c:	14 0a       	sbc	r1, r20
     27e:	0e 0a       	sbc	r0, r30
     280:	02 0a       	sbc	r0, r18
     282:	fc 09       	sbc	r31, r12
     284:	f6 09       	sbc	r31, r6
     286:	f0 09       	sbc	r31, r0
     288:	ea 09       	sbc	r30, r10
     28a:	de 09       	sbc	r29, r14
     28c:	d8 09       	sbc	r29, r8
     28e:	d2 09       	sbc	r29, r2
     290:	cc 09       	sbc	r28, r12
     292:	c6 09       	sbc	r28, r6
     294:	ba 09       	sbc	r27, r10
     296:	b4 09       	sbc	r27, r4
     298:	a8 09       	sbc	r26, r8
     29a:	a2 09       	sbc	r26, r2
     29c:	9c 09       	sbc	r25, r12
     29e:	96 09       	sbc	r25, r6
     2a0:	8a 09       	sbc	r24, r10
     2a2:	84 09       	sbc	r24, r4
     2a4:	7e 09       	sbc	r23, r14
     2a6:	78 09       	sbc	r23, r8
     2a8:	72 09       	sbc	r23, r2
     2aa:	66 09       	sbc	r22, r6
     2ac:	60 09       	sbc	r22, r0
     2ae:	54 09       	sbc	r21, r4
     2b0:	4e 09       	sbc	r20, r14
     2b2:	48 09       	sbc	r20, r8
     2b4:	42 09       	sbc	r20, r2
     2b6:	36 09       	sbc	r19, r6
     2b8:	30 09       	sbc	r19, r0
     2ba:	2a 09       	sbc	r18, r10
     2bc:	24 09       	sbc	r18, r4
     2be:	18 09       	sbc	r17, r8
     2c0:	12 09       	sbc	r17, r2
     2c2:	0c 09       	sbc	r16, r12
     2c4:	06 09       	sbc	r16, r6
     2c6:	00 09       	sbc	r16, r0
     2c8:	f4 08       	sbc	r15, r4
     2ca:	ee 08       	sbc	r14, r14
     2cc:	e2 08       	sbc	r14, r2
     2ce:	dc 08       	sbc	r13, r12
     2d0:	d0 08       	sbc	r13, r0
     2d2:	ca 08       	sbc	r12, r10
     2d4:	be 08       	sbc	r11, r14
     2d6:	b8 08       	sbc	r11, r8
     2d8:	ac 08       	sbc	r10, r12
     2da:	a6 08       	sbc	r10, r6
     2dc:	a0 08       	sbc	r10, r0
     2de:	9a 08       	sbc	r9, r10
     2e0:	94 08       	sbc	r9, r4
     2e2:	88 08       	sbc	r8, r8
     2e4:	82 08       	sbc	r8, r2
     2e6:	76 08       	sbc	r7, r6
     2e8:	70 08       	sbc	r7, r0
     2ea:	6a 08       	sbc	r6, r10
     2ec:	64 08       	sbc	r6, r4
     2ee:	58 08       	sbc	r5, r8
     2f0:	52 08       	sbc	r5, r2
     2f2:	4c 08       	sbc	r4, r12
     2f4:	46 08       	sbc	r4, r6
     2f6:	3a 08       	sbc	r3, r10
     2f8:	34 08       	sbc	r3, r4
     2fa:	28 08       	sbc	r2, r8
     2fc:	22 08       	sbc	r2, r2
     2fe:	16 08       	sbc	r1, r6
     300:	10 08       	sbc	r1, r0
     302:	04 08       	sbc	r0, r4
     304:	fe 07       	cpc	r31, r30
     306:	f2 07       	cpc	r31, r18
     308:	ec 07       	cpc	r30, r28
     30a:	e0 07       	cpc	r30, r16
     30c:	da 07       	cpc	r29, r26
     30e:	ce 07       	cpc	r28, r30
     310:	c8 07       	cpc	r28, r24
     312:	c2 07       	cpc	r28, r18
     314:	bc 07       	cpc	r27, r28
     316:	b6 07       	cpc	r27, r22
     318:	aa 07       	cpc	r26, r26
     31a:	a4 07       	cpc	r26, r20
     31c:	9e 07       	cpc	r25, r30
     31e:	92 07       	cpc	r25, r18
     320:	8c 07       	cpc	r24, r28
     322:	80 07       	cpc	r24, r16
     324:	7a 07       	cpc	r23, r26
     326:	6e 07       	cpc	r22, r30
     328:	68 07       	cpc	r22, r24
     32a:	5c 07       	cpc	r21, r28
     32c:	56 07       	cpc	r21, r22
     32e:	50 07       	cpc	r21, r16
     330:	4a 07       	cpc	r20, r26
     332:	3e 07       	cpc	r19, r30
     334:	38 07       	cpc	r19, r24
     336:	2c 07       	cpc	r18, r28
     338:	26 07       	cpc	r18, r22
     33a:	1a 07       	cpc	r17, r26
     33c:	14 07       	cpc	r17, r20
     33e:	08 07       	cpc	r16, r24
     340:	02 07       	cpc	r16, r18
     342:	fc 06       	cpc	r15, r28
     344:	f6 06       	cpc	r15, r22
     346:	f0 06       	cpc	r15, r16
     348:	e4 06       	cpc	r14, r20
     34a:	de 06       	cpc	r13, r30
     34c:	d8 06       	cpc	r13, r24
     34e:	7c 0b       	sbc	r23, r28
     350:	a6 0b       	sbc	r26, r22
     352:	94 0b       	sbc	r25, r20
     354:	a6 0b       	sbc	r26, r22
     356:	94 0b       	sbc	r25, r20
     358:	a6 0b       	sbc	r26, r22
     35a:	94 0b       	sbc	r25, r20
     35c:	ca 0b       	sbc	r28, r26
     35e:	94 0b       	sbc	r25, r20
     360:	ca 0b       	sbc	r28, r26
     362:	b2 0b       	sbc	r27, r18
     364:	a0 0b       	sbc	r26, r16
     366:	e2 0b       	sbc	r30, r18
     368:	a0 0b       	sbc	r26, r16
     36a:	d0 0b       	sbc	r29, r16
     36c:	be 0b       	sbc	r27, r30
     36e:	ac 0b       	sbc	r26, r28
     370:	94 0b       	sbc	r25, r20
     372:	ac 0b       	sbc	r26, r28
     374:	94 0b       	sbc	r25, r20
     376:	ac 0b       	sbc	r26, r28
     378:	94 0b       	sbc	r25, r20
     37a:	c4 0b       	sbc	r28, r20
     37c:	94 0b       	sbc	r25, r20
     37e:	c4 0b       	sbc	r28, r20
     380:	b2 0b       	sbc	r27, r18
     382:	d6 0b       	sbc	r29, r22
     384:	dc 0b       	sbc	r29, r28
     386:	94 0b       	sbc	r25, r20
     388:	a0 0b       	sbc	r26, r16
     38a:	e8 0b       	sbc	r30, r24
     38c:	be 0b       	sbc	r27, r30

0000038e <__ctors_end>:
     38e:	11 24       	eor	r1, r1
     390:	1f be       	out	0x3f, r1	; 63
     392:	cf ef       	ldi	r28, 0xFF	; 255
     394:	d0 e1       	ldi	r29, 0x10	; 16
     396:	de bf       	out	0x3e, r29	; 62
     398:	cd bf       	out	0x3d, r28	; 61

0000039a <__do_clear_bss>:
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b1 e0       	ldi	r27, 0x01	; 1
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <.do_clear_bss_start>

000003a2 <.do_clear_bss_loop>:
     3a2:	1d 92       	st	X+, r1

000003a4 <.do_clear_bss_start>:
     3a4:	a8 33       	cpi	r26, 0x38	; 56
     3a6:	b2 07       	cpc	r27, r18
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <.do_clear_bss_loop>
     3aa:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <main>
     3ae:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <_exit>

000003b2 <__bad_interrupt>:
     3b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b6 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     3b6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     3b8:	10 92 06 01 	sts	0x0106, r1
     3bc:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	90 93 04 01 	sts	0x0104, r25
     3c6:	80 93 03 01 	sts	0x0103, r24
     3ca:	08 95       	ret

000003cc <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     3cc:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     3ce:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     3d0:	10 92 06 01 	sts	0x0106, r1
     3d4:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;  //set the max beat
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	30 93 04 01 	sts	0x0104, r19
     3de:	20 93 03 01 	sts	0x0103, r18
  switch (octave) {
     3e2:	84 2f       	mov	r24, r20
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	89 30       	cpi	r24, 0x09	; 9
     3e8:	91 05       	cpc	r25, r1
     3ea:	18 f0       	brcs	.+6      	; 0x3f2 <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     3ec:	1b bc       	out	0x2b, r1	; 43
     3ee:	1a bc       	out	0x2a, r1	; 42
     3f0:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     3f2:	8a 5b       	subi	r24, 0xBA	; 186
     3f4:	9f 4f       	sbci	r25, 0xFF	; 255
     3f6:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     3f8:	85 2f       	mov	r24, r21
     3fa:	55 0f       	add	r21, r21
     3fc:	99 0b       	sbc	r25, r25
     3fe:	aa 0b       	sbc	r26, r26
     400:	bb 0b       	sbc	r27, r27
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     402:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     406:	fc 01       	movw	r30, r24
     408:	e1 54       	subi	r30, 0x41	; 65
     40a:	f1 09       	sbc	r31, r1
     40c:	e7 30       	cpi	r30, 0x07	; 7
     40e:	f1 05       	cpc	r31, r1
     410:	78 f7       	brcc	.-34     	; 0x3f0 <play_note+0x24>
     412:	e1 5b       	subi	r30, 0xB1	; 177
     414:	ff 4f       	sbci	r31, 0xFF	; 255
     416:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     41a:	fc 01       	movw	r30, r24
     41c:	e1 54       	subi	r30, 0x41	; 65
     41e:	f1 09       	sbc	r31, r1
     420:	e7 30       	cpi	r30, 0x07	; 7
     422:	f1 05       	cpc	r31, r1
     424:	28 f7       	brcc	.-54     	; 0x3f0 <play_note+0x24>
     426:	ea 5a       	subi	r30, 0xAA	; 170
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     42e:	fc 01       	movw	r30, r24
     430:	e1 54       	subi	r30, 0x41	; 65
     432:	f1 09       	sbc	r31, r1
     434:	e7 30       	cpi	r30, 0x07	; 7
     436:	f1 05       	cpc	r31, r1
     438:	d8 f6       	brcc	.-74     	; 0x3f0 <play_note+0x24>
     43a:	e3 5a       	subi	r30, 0xA3	; 163
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     442:	fc 01       	movw	r30, r24
     444:	e1 54       	subi	r30, 0x41	; 65
     446:	f1 09       	sbc	r31, r1
     448:	e7 30       	cpi	r30, 0x07	; 7
     44a:	f1 05       	cpc	r31, r1
     44c:	88 f6       	brcc	.-94     	; 0x3f0 <play_note+0x24>
     44e:	ec 59       	subi	r30, 0x9C	; 156
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     456:	fc 01       	movw	r30, r24
     458:	e1 54       	subi	r30, 0x41	; 65
     45a:	f1 09       	sbc	r31, r1
     45c:	e7 30       	cpi	r30, 0x07	; 7
     45e:	f1 05       	cpc	r31, r1
     460:	38 f6       	brcc	.-114    	; 0x3f0 <play_note+0x24>
     462:	e5 59       	subi	r30, 0x95	; 149
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     46a:	fc 01       	movw	r30, r24
     46c:	e1 54       	subi	r30, 0x41	; 65
     46e:	f1 09       	sbc	r31, r1
     470:	e7 30       	cpi	r30, 0x07	; 7
     472:	f1 05       	cpc	r31, r1
     474:	08 f0       	brcs	.+2      	; 0x478 <play_note+0xac>
     476:	bc cf       	rjmp	.-136    	; 0x3f0 <play_note+0x24>
     478:	ee 58       	subi	r30, 0x8E	; 142
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     480:	fc 01       	movw	r30, r24
     482:	e1 54       	subi	r30, 0x41	; 65
     484:	f1 09       	sbc	r31, r1
     486:	e7 30       	cpi	r30, 0x07	; 7
     488:	f1 05       	cpc	r31, r1
     48a:	08 f0       	brcs	.+2      	; 0x48e <play_note+0xc2>
     48c:	b1 cf       	rjmp	.-158    	; 0x3f0 <play_note+0x24>
     48e:	e7 58       	subi	r30, 0x87	; 135
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     496:	fc 01       	movw	r30, r24
     498:	e1 54       	subi	r30, 0x41	; 65
     49a:	f1 09       	sbc	r31, r1
     49c:	e7 30       	cpi	r30, 0x07	; 7
     49e:	f1 05       	cpc	r31, r1
     4a0:	08 f0       	brcs	.+2      	; 0x4a4 <play_note+0xd8>
     4a2:	a6 cf       	rjmp	.-180    	; 0x3f0 <play_note+0x24>
     4a4:	e0 58       	subi	r30, 0x80	; 128
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     4ac:	fc 01       	movw	r30, r24
     4ae:	e1 54       	subi	r30, 0x41	; 65
     4b0:	f1 09       	sbc	r31, r1
     4b2:	e7 30       	cpi	r30, 0x07	; 7
     4b4:	f1 05       	cpc	r31, r1
     4b6:	08 f0       	brcs	.+2      	; 0x4ba <play_note+0xee>
     4b8:	9b cf       	rjmp	.-202    	; 0x3f0 <play_note+0x24>
     4ba:	e9 57       	subi	r30, 0x79	; 121
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     4c2:	88 e5       	ldi	r24, 0x58	; 88
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9b bd       	out	0x2b, r25	; 43
     4c8:	8a bd       	out	0x2a, r24	; 42
	break;
     4ca:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     4cc:	66 23       	and	r22, r22
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <play_note+0x106>
     4d0:	0f c2       	rjmp	.+1054   	; 0x8f0 <play_note+0x524>
     4d2:	83 e6       	ldi	r24, 0x63	; 99
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	9b bd       	out	0x2b, r25	; 43
     4d8:	8a bd       	out	0x2a, r24	; 42
     4da:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     4dc:	66 23       	and	r22, r22
     4de:	09 f4       	brne	.+2      	; 0x4e2 <play_note+0x116>
     4e0:	11 c2       	rjmp	.+1058   	; 0x904 <play_note+0x538>
     4e2:	8f e6       	ldi	r24, 0x6F	; 111
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	9b bd       	out	0x2b, r25	; 43
     4e8:	8a bd       	out	0x2a, r24	; 42
     4ea:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     4ec:	86 e7       	ldi	r24, 0x76	; 118
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9b bd       	out	0x2b, r25	; 43
     4f2:	8a bd       	out	0x2a, r24	; 42
	break;
     4f4:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     4f6:	66 23       	and	r22, r22
     4f8:	09 f4       	brne	.+2      	; 0x4fc <play_note+0x130>
     4fa:	ff c1       	rjmp	.+1022   	; 0x8fa <play_note+0x52e>
     4fc:	8a e4       	ldi	r24, 0x4A	; 74
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	9b bd       	out	0x2b, r25	; 43
     502:	8a bd       	out	0x2a, r24	; 42
     504:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     506:	66 23       	and	r22, r22
     508:	09 f4       	brne	.+2      	; 0x50c <play_note+0x140>
     50a:	01 c2       	rjmp	.+1026   	; 0x90e <play_note+0x542>
     50c:	83 e5       	ldi	r24, 0x53	; 83
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9b bd       	out	0x2b, r25	; 43
     512:	8a bd       	out	0x2a, r24	; 42
     514:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     516:	66 23       	and	r22, r22
     518:	09 f4       	brne	.+2      	; 0x51c <play_note+0x150>
     51a:	b8 c1       	rjmp	.+880    	; 0x88c <play_note+0x4c0>
     51c:	82 e4       	ldi	r24, 0x42	; 66
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9b bd       	out	0x2b, r25	; 43
     522:	8a bd       	out	0x2a, r24	; 42
     524:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     526:	81 eb       	ldi	r24, 0xB1	; 177
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9b bd       	out	0x2b, r25	; 43
     52c:	8a bd       	out	0x2a, r24	; 42
	break;
     52e:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     530:	66 23       	and	r22, r22
     532:	09 f4       	brne	.+2      	; 0x536 <play_note+0x16a>
     534:	d3 c1       	rjmp	.+934    	; 0x8dc <play_note+0x510>
     536:	85 e8       	ldi	r24, 0x85	; 133
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9b bd       	out	0x2b, r25	; 43
     53c:	8a bd       	out	0x2a, r24	; 42
     53e:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     540:	66 23       	and	r22, r22
     542:	09 f4       	brne	.+2      	; 0x546 <play_note+0x17a>
     544:	c1 c1       	rjmp	.+898    	; 0x8c8 <play_note+0x4fc>
     546:	85 e9       	ldi	r24, 0x95	; 149
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9b bd       	out	0x2b, r25	; 43
     54c:	8a bd       	out	0x2a, r24	; 42
     54e:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     550:	66 23       	and	r22, r22
     552:	09 f4       	brne	.+2      	; 0x556 <play_note+0x18a>
     554:	be c1       	rjmp	.+892    	; 0x8d2 <play_note+0x506>
     556:	87 ea       	ldi	r24, 0xA7	; 167
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	9b bd       	out	0x2b, r25	; 43
     55c:	8a bd       	out	0x2a, r24	; 42
     55e:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     560:	84 e6       	ldi	r24, 0x64	; 100
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9b bd       	out	0x2b, r25	; 43
     566:	8a bd       	out	0x2a, r24	; 42
	break;
     568:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     56a:	66 23       	and	r22, r22
     56c:	09 f4       	brne	.+2      	; 0x570 <play_note+0x1a4>
     56e:	bb c1       	rjmp	.+886    	; 0x8e6 <play_note+0x51a>
     570:	80 ee       	ldi	r24, 0xE0	; 224
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9b bd       	out	0x2b, r25	; 43
     576:	8a bd       	out	0x2a, r24	; 42
     578:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     57a:	8d ee       	ldi	r24, 0xED	; 237
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9b bd       	out	0x2b, r25	; 43
     580:	8a bd       	out	0x2a, r24	; 42
	break;
     582:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     584:	66 23       	and	r22, r22
     586:	09 f4       	brne	.+2      	; 0x58a <play_note+0x1be>
     588:	8b c1       	rjmp	.+790    	; 0x8a0 <play_note+0x4d4>
     58a:	87 ec       	ldi	r24, 0xC7	; 199
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	9b bd       	out	0x2b, r25	; 43
     590:	8a bd       	out	0x2a, r24	; 42
     592:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     594:	66 23       	and	r22, r22
     596:	09 f4       	brne	.+2      	; 0x59a <play_note+0x1ce>
     598:	74 c1       	rjmp	.+744    	; 0x882 <play_note+0x4b6>
     59a:	80 e9       	ldi	r24, 0x90	; 144
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	9b bd       	out	0x2b, r25	; 43
     5a0:	8a bd       	out	0x2a, r24	; 42
     5a2:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     5a4:	66 23       	and	r22, r22
     5a6:	09 f4       	brne	.+2      	; 0x5aa <play_note+0x1de>
     5a8:	cb c1       	rjmp	.+918    	; 0x940 <play_note+0x574>
     5aa:	84 e8       	ldi	r24, 0x84	; 132
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	9b bd       	out	0x2b, r25	; 43
     5b0:	8a bd       	out	0x2a, r24	; 42
     5b2:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     5b4:	66 23       	and	r22, r22
     5b6:	09 f4       	brne	.+2      	; 0x5ba <play_note+0x1ee>
     5b8:	af c1       	rjmp	.+862    	; 0x918 <play_note+0x54c>
     5ba:	8b e2       	ldi	r24, 0x2B	; 43
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	9b bd       	out	0x2b, r25	; 43
     5c0:	8a bd       	out	0x2a, r24	; 42
     5c2:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     5c4:	66 23       	and	r22, r22
     5c6:	09 f4       	brne	.+2      	; 0x5ca <play_note+0x1fe>
     5c8:	b1 c1       	rjmp	.+866    	; 0x92c <play_note+0x560>
     5ca:	82 ea       	ldi	r24, 0xA2	; 162
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	9b bd       	out	0x2b, r25	; 43
     5d0:	8a bd       	out	0x2a, r24	; 42
     5d2:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     5d4:	8c ed       	ldi	r24, 0xDC	; 220
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	9b bd       	out	0x2b, r25	; 43
     5da:	8a bd       	out	0x2a, r24	; 42
	break;
     5dc:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     5de:	66 23       	and	r22, r22
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <play_note+0x218>
     5e2:	59 c1       	rjmp	.+690    	; 0x896 <play_note+0x4ca>
     5e4:	87 e1       	ldi	r24, 0x17	; 23
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	9b bd       	out	0x2b, r25	; 43
     5ea:	8a bd       	out	0x2a, r24	; 42
     5ec:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     5ee:	66 23       	and	r22, r22
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <play_note+0x228>
     5f2:	b0 c1       	rjmp	.+864    	; 0x954 <play_note+0x588>
     5f4:	88 e5       	ldi	r24, 0x58	; 88
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	9b bd       	out	0x2b, r25	; 43
     5fa:	8a bd       	out	0x2a, r24	; 42
     5fc:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     5fe:	8a ec       	ldi	r24, 0xCA	; 202
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	9b bd       	out	0x2b, r25	; 43
     604:	8a bd       	out	0x2a, r24	; 42
	break;
     606:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     608:	66 23       	and	r22, r22
     60a:	09 f4       	brne	.+2      	; 0x60e <play_note+0x242>
     60c:	35 c1       	rjmp	.+618    	; 0x878 <play_note+0x4ac>
     60e:	86 e4       	ldi	r24, 0x46	; 70
     610:	96 e0       	ldi	r25, 0x06	; 6
     612:	9b bd       	out	0x2b, r25	; 43
     614:	8a bd       	out	0x2a, r24	; 42
     616:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     618:	66 23       	and	r22, r22
     61a:	09 f4       	brne	.+2      	; 0x61e <play_note+0x252>
     61c:	82 c1       	rjmp	.+772    	; 0x922 <play_note+0x556>
     61e:	8a e0       	ldi	r24, 0x0A	; 10
     620:	97 e0       	ldi	r25, 0x07	; 7
     622:	9b bd       	out	0x2b, r25	; 43
     624:	8a bd       	out	0x2a, r24	; 42
     626:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     628:	86 e9       	ldi	r24, 0x96	; 150
     62a:	95 e0       	ldi	r25, 0x05	; 5
     62c:	9b bd       	out	0x2b, r25	; 43
     62e:	8a bd       	out	0x2a, r24	; 42
	break;
     630:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     632:	8a eb       	ldi	r24, 0xBA	; 186
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	9b bd       	out	0x2b, r25	; 43
     638:	8a bd       	out	0x2a, r24	; 42
	break;
     63a:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     63c:	66 23       	and	r22, r22
     63e:	09 f4       	brne	.+2      	; 0x642 <play_note+0x276>
     640:	7a c1       	rjmp	.+756    	; 0x936 <play_note+0x56a>
     642:	81 ec       	ldi	r24, 0xC1	; 193
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	9b bd       	out	0x2b, r25	; 43
     648:	8a bd       	out	0x2a, r24	; 42
     64a:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     64c:	66 23       	and	r22, r22
     64e:	09 f4       	brne	.+2      	; 0x652 <play_note+0x286>
     650:	7c c1       	rjmp	.+760    	; 0x94a <play_note+0x57e>
     652:	8b e0       	ldi	r24, 0x0B	; 11
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	9b bd       	out	0x2b, r25	; 43
     658:	8a bd       	out	0x2a, r24	; 42
     65a:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     65c:	66 23       	and	r22, r22
     65e:	09 f4       	brne	.+2      	; 0x662 <play_note+0x296>
     660:	7e c1       	rjmp	.+764    	; 0x95e <play_note+0x592>
     662:	80 e5       	ldi	r24, 0x50	; 80
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	9b bd       	out	0x2b, r25	; 43
     668:	8a bd       	out	0x2a, r24	; 42
     66a:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     66c:	66 23       	and	r22, r22
     66e:	09 f4       	brne	.+2      	; 0x672 <play_note+0x2a6>
     670:	ad c1       	rjmp	.+858    	; 0x9cc <play_note+0x600>
     672:	82 e2       	ldi	r24, 0x22	; 34
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	9b bd       	out	0x2b, r25	; 43
     678:	8a bd       	out	0x2a, r24	; 42
     67a:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     67c:	86 e7       	ldi	r24, 0x76	; 118
     67e:	97 e0       	ldi	r25, 0x07	; 7
     680:	9b bd       	out	0x2b, r25	; 43
     682:	8a bd       	out	0x2a, r24	; 42
	break;
     684:	08 95       	ret
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     686:	66 23       	and	r22, r22
     688:	09 f4       	brne	.+2      	; 0x68c <play_note+0x2c0>
     68a:	0f c1       	rjmp	.+542    	; 0x8aa <play_note+0x4de>
     68c:	8e ec       	ldi	r24, 0xCE	; 206
     68e:	92 e1       	ldi	r25, 0x12	; 18
     690:	9b bd       	out	0x2b, r25	; 43
     692:	8a bd       	out	0x2a, r24	; 42
     694:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     696:	66 23       	and	r22, r22
     698:	09 f4       	brne	.+2      	; 0x69c <play_note+0x2d0>
     69a:	7a c1       	rjmp	.+756    	; 0x990 <play_note+0x5c4>
     69c:	8d e1       	ldi	r24, 0x1D	; 29
     69e:	95 e1       	ldi	r25, 0x15	; 21
     6a0:	9b bd       	out	0x2b, r25	; 43
     6a2:	8a bd       	out	0x2a, r24	; 42
     6a4:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     6a6:	66 23       	and	r22, r22
     6a8:	09 f4       	brne	.+2      	; 0x6ac <play_note+0x2e0>
     6aa:	dc c0       	rjmp	.+440    	; 0x864 <play_note+0x498>
     6ac:	80 e6       	ldi	r24, 0x60	; 96
     6ae:	98 e0       	ldi	r25, 0x08	; 8
     6b0:	9b bd       	out	0x2b, r25	; 43
     6b2:	8a bd       	out	0x2a, r24	; 42
     6b4:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     6b6:	66 23       	and	r22, r22
     6b8:	09 f4       	brne	.+2      	; 0x6bc <play_note+0x2f0>
     6ba:	92 c1       	rjmp	.+804    	; 0x9e0 <play_note+0x614>
     6bc:	80 e1       	ldi	r24, 0x10	; 16
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	9b bd       	out	0x2b, r25	; 43
     6c2:	8a bd       	out	0x2a, r24	; 42
     6c4:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     6c6:	8e e2       	ldi	r24, 0x2E	; 46
     6c8:	9b e0       	ldi	r25, 0x0B	; 11
     6ca:	9b bd       	out	0x2b, r25	; 43
     6cc:	8a bd       	out	0x2a, r24	; 42
	break;
     6ce:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     6d0:	66 23       	and	r22, r22
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <play_note+0x30a>
     6d4:	49 c1       	rjmp	.+658    	; 0x968 <play_note+0x59c>
     6d6:	8b e1       	ldi	r24, 0x1B	; 27
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9b bd       	out	0x2b, r25	; 43
     6dc:	8a bd       	out	0x2a, r24	; 42
     6de:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     6e0:	8c e1       	ldi	r24, 0x1C	; 28
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9b bd       	out	0x2b, r25	; 43
     6e6:	8a bd       	out	0x2a, r24	; 42
	break;
     6e8:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     6ea:	66 23       	and	r22, r22
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <play_note+0x324>
     6ee:	41 c1       	rjmp	.+642    	; 0x972 <play_note+0x5a6>
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	9b bd       	out	0x2b, r25	; 43
     6f6:	8a bd       	out	0x2a, r24	; 42
     6f8:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     6fa:	66 23       	and	r22, r22
     6fc:	09 f4       	brne	.+2      	; 0x700 <play_note+0x334>
     6fe:	da c0       	rjmp	.+436    	; 0x8b4 <play_note+0x4e8>
     700:	8b e0       	ldi	r24, 0x0B	; 11
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	9b bd       	out	0x2b, r25	; 43
     706:	8a bd       	out	0x2a, r24	; 42
     708:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     70a:	82 e1       	ldi	r24, 0x12	; 18
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9b bd       	out	0x2b, r25	; 43
     710:	8a bd       	out	0x2a, r24	; 42
	break;
     712:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     714:	66 23       	and	r22, r22
     716:	09 f4       	brne	.+2      	; 0x71a <play_note+0x34e>
     718:	9b c0       	rjmp	.+310    	; 0x850 <play_note+0x484>
     71a:	89 e1       	ldi	r24, 0x19	; 25
     71c:	99 e1       	ldi	r25, 0x19	; 25
     71e:	9b bd       	out	0x2b, r25	; 43
     720:	8a bd       	out	0x2a, r24	; 42
     722:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     724:	66 23       	and	r22, r22
     726:	09 f4       	brne	.+2      	; 0x72a <play_note+0x35e>
     728:	29 c1       	rjmp	.+594    	; 0x97c <play_note+0x5b0>
     72a:	80 e3       	ldi	r24, 0x30	; 48
     72c:	9c e1       	ldi	r25, 0x1C	; 28
     72e:	9b bd       	out	0x2b, r25	; 43
     730:	8a bd       	out	0x2a, r24	; 42
     732:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     734:	8c ed       	ldi	r24, 0xDC	; 220
     736:	9d e1       	ldi	r25, 0x1D	; 29
     738:	9b bd       	out	0x2b, r25	; 43
     73a:	8a bd       	out	0x2a, r24	; 42
	break;
     73c:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     73e:	8a e3       	ldi	r24, 0x3A	; 58
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	9b bd       	out	0x2b, r25	; 43
     744:	8a bd       	out	0x2a, r24	; 42
	break;
     746:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     748:	66 23       	and	r22, r22
     74a:	09 f4       	brne	.+2      	; 0x74e <play_note+0x382>
     74c:	35 c1       	rjmp	.+618    	; 0x9b8 <play_note+0x5ec>
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	9b bd       	out	0x2b, r25	; 43
     754:	8a bd       	out	0x2a, r24	; 42
     756:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     758:	66 23       	and	r22, r22
     75a:	09 f4       	brne	.+2      	; 0x75e <play_note+0x392>
     75c:	32 c1       	rjmp	.+612    	; 0x9c2 <play_note+0x5f6>
     75e:	84 e2       	ldi	r24, 0x24	; 36
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	9b bd       	out	0x2b, r25	; 43
     764:	8a bd       	out	0x2a, r24	; 42
     766:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     768:	66 23       	and	r22, r22
     76a:	09 f4       	brne	.+2      	; 0x76e <play_note+0x3a2>
     76c:	76 c0       	rjmp	.+236    	; 0x85a <play_note+0x48e>
     76e:	89 e2       	ldi	r24, 0x29	; 41
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	9b bd       	out	0x2b, r25	; 43
     774:	8a bd       	out	0x2a, r24	; 42
     776:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     778:	66 23       	and	r22, r22
     77a:	09 f4       	brne	.+2      	; 0x77e <play_note+0x3b2>
     77c:	78 c0       	rjmp	.+240    	; 0x86e <play_note+0x4a2>
     77e:	81 e3       	ldi	r24, 0x31	; 49
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	9b bd       	out	0x2b, r25	; 43
     784:	8a bd       	out	0x2a, r24	; 42
     786:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     788:	8b e2       	ldi	r24, 0x2B	; 43
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9b bd       	out	0x2b, r25	; 43
     78e:	8a bd       	out	0x2a, r24	; 42
	break;
     790:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     792:	66 23       	and	r22, r22
     794:	09 f4       	brne	.+2      	; 0x798 <play_note+0x3cc>
     796:	93 c0       	rjmp	.+294    	; 0x8be <play_note+0x4f2>
     798:	87 e3       	ldi	r24, 0x37	; 55
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9b bd       	out	0x2b, r25	; 43
     79e:	8a bd       	out	0x2a, r24	; 42
     7a0:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     7a2:	66 23       	and	r22, r22
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <play_note+0x3dc>
     7a6:	4f c0       	rjmp	.+158    	; 0x846 <play_note+0x47a>
     7a8:	88 e1       	ldi	r24, 0x18	; 24
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	9b bd       	out	0x2b, r25	; 43
     7ae:	8a bd       	out	0x2a, r24	; 42
     7b0:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     7b2:	66 23       	and	r22, r22
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <play_note+0x3ec>
     7b6:	f6 c0       	rjmp	.+492    	; 0x9a4 <play_note+0x5d8>
     7b8:	82 eb       	ldi	r24, 0xB2	; 178
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	9b bd       	out	0x2b, r25	; 43
     7be:	8a bd       	out	0x2a, r24	; 42
     7c0:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     7c2:	66 23       	and	r22, r22
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <play_note+0x3fc>
     7c6:	16 c1       	rjmp	.+556    	; 0x9f4 <play_note+0x628>
     7c8:	8d e8       	ldi	r24, 0x8D	; 141
     7ca:	9a e0       	ldi	r25, 0x0A	; 10
     7cc:	9b bd       	out	0x2b, r25	; 43
     7ce:	8a bd       	out	0x2a, r24	; 42
     7d0:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     7d2:	66 23       	and	r22, r22
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <play_note+0x40c>
     7d6:	d7 c0       	rjmp	.+430    	; 0x986 <play_note+0x5ba>
     7d8:	86 e1       	ldi	r24, 0x16	; 22
     7da:	9e e0       	ldi	r25, 0x0E	; 14
     7dc:	9b bd       	out	0x2b, r25	; 43
     7de:	8a bd       	out	0x2a, r24	; 42
     7e0:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     7e2:	66 23       	and	r22, r22
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <play_note+0x41c>
     7e6:	f7 c0       	rjmp	.+494    	; 0x9d6 <play_note+0x60a>
     7e8:	80 ec       	ldi	r24, 0xC0	; 192
     7ea:	90 e1       	ldi	r25, 0x10	; 16
     7ec:	9b bd       	out	0x2b, r25	; 43
     7ee:	8a bd       	out	0x2a, r24	; 42
     7f0:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     7f2:	66 23       	and	r22, r22
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <play_note+0x42c>
     7f6:	d1 c0       	rjmp	.+418    	; 0x99a <play_note+0x5ce>
     7f8:	8f e2       	ldi	r24, 0x2F	; 47
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	9b bd       	out	0x2b, r25	; 43
     7fe:	8a bd       	out	0x2a, r24	; 42
     800:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     802:	66 23       	and	r22, r22
     804:	09 f4       	brne	.+2      	; 0x808 <play_note+0x43c>
     806:	f1 c0       	rjmp	.+482    	; 0x9ea <play_note+0x61e>
     808:	87 e6       	ldi	r24, 0x67	; 103
     80a:	99 e0       	ldi	r25, 0x09	; 9
     80c:	9b bd       	out	0x2b, r25	; 43
     80e:	8a bd       	out	0x2a, r24	; 42
     810:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     812:	66 23       	and	r22, r22
     814:	09 f4       	brne	.+2      	; 0x818 <play_note+0x44c>
     816:	cb c0       	rjmp	.+406    	; 0x9ae <play_note+0x5e2>
     818:	8d e8       	ldi	r24, 0x8D	; 141
     81a:	9c e0       	ldi	r25, 0x0C	; 12
     81c:	9b bd       	out	0x2b, r25	; 43
     81e:	8a bd       	out	0x2a, r24	; 42
     820:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     822:	8d e5       	ldi	r24, 0x5D	; 93
     824:	96 e1       	ldi	r25, 0x16	; 22
     826:	9b bd       	out	0x2b, r25	; 43
     828:	8a bd       	out	0x2a, r24	; 42
	break;
     82a:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     82c:	66 23       	and	r22, r22
     82e:	09 f4       	brne	.+2      	; 0x832 <play_note+0x466>
     830:	e6 c0       	rjmp	.+460    	; 0x9fe <play_note+0x632>
     832:	86 e4       	ldi	r24, 0x46	; 70
     834:	95 e0       	ldi	r25, 0x05	; 5
     836:	9b bd       	out	0x2b, r25	; 43
     838:	8a bd       	out	0x2a, r24	; 42
     83a:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     83c:	8d ee       	ldi	r24, 0xED	; 237
     83e:	9e e0       	ldi	r25, 0x0E	; 14
     840:	9b bd       	out	0x2b, r25	; 43
     842:	8a bd       	out	0x2a, r24	; 42
	break;
     844:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     846:	85 e1       	ldi	r24, 0x15	; 21
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9b bd       	out	0x2b, r25	; 43
     84c:	8a bd       	out	0x2a, r24	; 42
     84e:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     850:	82 eb       	ldi	r24, 0xB2	; 178
     852:	97 e1       	ldi	r25, 0x17	; 23
     854:	9b bd       	out	0x2b, r25	; 43
     856:	8a bd       	out	0x2a, r24	; 42
     858:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     85a:	86 e2       	ldi	r24, 0x26	; 38
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	9b bd       	out	0x2b, r25	; 43
     860:	8a bd       	out	0x2a, r24	; 42
     862:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     864:	87 ee       	ldi	r24, 0xE7	; 231
     866:	97 e0       	ldi	r25, 0x07	; 7
     868:	9b bd       	out	0x2b, r25	; 43
     86a:	8a bd       	out	0x2a, r24	; 42
     86c:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     86e:	8e e2       	ldi	r24, 0x2E	; 46
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	9b bd       	out	0x2b, r25	; 43
     874:	8a bd       	out	0x2a, r24	; 42
     876:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     878:	8b ee       	ldi	r24, 0xEB	; 235
     87a:	95 e0       	ldi	r25, 0x05	; 5
     87c:	9b bd       	out	0x2b, r25	; 43
     87e:	8a bd       	out	0x2a, r24	; 42
     880:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     882:	8a e7       	ldi	r24, 0x7A	; 122
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9b bd       	out	0x2b, r25	; 43
     888:	8a bd       	out	0x2a, r24	; 42
     88a:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     88c:	8e e3       	ldi	r24, 0x3E	; 62
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9b bd       	out	0x2b, r25	; 43
     892:	8a bd       	out	0x2a, r24	; 42
     894:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     896:	89 ef       	ldi	r24, 0xF9	; 249
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	9b bd       	out	0x2b, r25	; 43
     89c:	8a bd       	out	0x2a, r24	; 42
     89e:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     8a0:	8c eb       	ldi	r24, 0xBC	; 188
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	9b bd       	out	0x2b, r25	; 43
     8a6:	8a bd       	out	0x2a, r24	; 42
     8a8:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     8aa:	80 ec       	ldi	r24, 0xC0	; 192
     8ac:	91 e1       	ldi	r25, 0x11	; 17
     8ae:	9b bd       	out	0x2b, r25	; 43
     8b0:	8a bd       	out	0x2a, r24	; 42
     8b2:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     8b4:	89 e0       	ldi	r24, 0x09	; 9
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	9b bd       	out	0x2b, r25	; 43
     8ba:	8a bd       	out	0x2a, r24	; 42
     8bc:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     8be:	84 e3       	ldi	r24, 0x34	; 52
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9b bd       	out	0x2b, r25	; 43
     8c4:	8a bd       	out	0x2a, r24	; 42
     8c6:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     8c8:	8d e8       	ldi	r24, 0x8D	; 141
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	9b bd       	out	0x2b, r25	; 43
     8ce:	8a bd       	out	0x2a, r24	; 42
     8d0:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     8d2:	8e e9       	ldi	r24, 0x9E	; 158
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	9b bd       	out	0x2b, r25	; 43
     8d8:	8a bd       	out	0x2a, r24	; 42
     8da:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
     8dc:	8d e7       	ldi	r24, 0x7D	; 125
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	9b bd       	out	0x2b, r25	; 43
     8e2:	8a bd       	out	0x2a, r24	; 42
     8e4:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     8e6:	83 ed       	ldi	r24, 0xD3	; 211
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	9b bd       	out	0x2b, r25	; 43
     8ec:	8a bd       	out	0x2a, r24	; 42
     8ee:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
     8f0:	8d e5       	ldi	r24, 0x5D	; 93
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	9b bd       	out	0x2b, r25	; 43
     8f6:	8a bd       	out	0x2a, r24	; 42
     8f8:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
     8fa:	86 e4       	ldi	r24, 0x46	; 70
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9b bd       	out	0x2b, r25	; 43
     900:	8a bd       	out	0x2a, r24	; 42
     902:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
     904:	89 e6       	ldi	r24, 0x69	; 105
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9b bd       	out	0x2b, r25	; 43
     90a:	8a bd       	out	0x2a, r24	; 42
     90c:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
     90e:	8e e4       	ldi	r24, 0x4E	; 78
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	9b bd       	out	0x2b, r25	; 43
     914:	8a bd       	out	0x2a, r24	; 42
     916:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     918:	8b e1       	ldi	r24, 0x1B	; 27
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	9b bd       	out	0x2b, r25	; 43
     91e:	8a bd       	out	0x2a, r24	; 42
     920:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
     922:	85 ea       	ldi	r24, 0xA5	; 165
     924:	96 e0       	ldi	r25, 0x06	; 6
     926:	9b bd       	out	0x2b, r25	; 43
     928:	8a bd       	out	0x2a, r24	; 42
     92a:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
     92c:	8c e7       	ldi	r24, 0x7C	; 124
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	9b bd       	out	0x2b, r25	; 43
     932:	8a bd       	out	0x2a, r24	; 42
     934:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     936:	88 ea       	ldi	r24, 0xA8	; 168
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9b bd       	out	0x2b, r25	; 43
     93c:	8a bd       	out	0x2a, r24	; 42
     93e:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
     940:	82 e5       	ldi	r24, 0x52	; 82
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	9b bd       	out	0x2b, r25	; 43
     946:	8a bd       	out	0x2a, r24	; 42
     948:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     94a:	8c ef       	ldi	r24, 0xFC	; 252
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	9b bd       	out	0x2b, r25	; 43
     950:	8a bd       	out	0x2a, r24	; 42
     952:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
     954:	87 e3       	ldi	r24, 0x37	; 55
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	9b bd       	out	0x2b, r25	; 43
     95a:	8a bd       	out	0x2a, r24	; 42
     95c:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     95e:	8d e3       	ldi	r24, 0x3D	; 61
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	9b bd       	out	0x2b, r25	; 43
     964:	8a bd       	out	0x2a, r24	; 42
     966:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
     968:	89 e1       	ldi	r24, 0x19	; 25
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	9b bd       	out	0x2b, r25	; 43
     96e:	8a bd       	out	0x2a, r24	; 42
     970:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
     972:	85 e0       	ldi	r24, 0x05	; 5
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	9b bd       	out	0x2b, r25	; 43
     978:	8a bd       	out	0x2a, r24	; 42
     97a:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
     97c:	8a e9       	ldi	r24, 0x9A	; 154
     97e:	9a e1       	ldi	r25, 0x1A	; 26
     980:	9b bd       	out	0x2b, r25	; 43
     982:	8a bd       	out	0x2a, r24	; 42
     984:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
     986:	8c e4       	ldi	r24, 0x4C	; 76
     988:	9d e0       	ldi	r25, 0x0D	; 13
     98a:	9b bd       	out	0x2b, r25	; 43
     98c:	8a bd       	out	0x2a, r24	; 42
     98e:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
     990:	8d ee       	ldi	r24, 0xED	; 237
     992:	93 e1       	ldi	r25, 0x13	; 19
     994:	9b bd       	out	0x2b, r25	; 43
     996:	8a bd       	out	0x2a, r24	; 42
     998:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
     99a:	83 ef       	ldi	r24, 0xF3	; 243
     99c:	93 e0       	ldi	r25, 0x03	; 3
     99e:	9b bd       	out	0x2b, r25	; 43
     9a0:	8a bd       	out	0x2a, r24	; 42
     9a2:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
     9a4:	8f e6       	ldi	r24, 0x6F	; 111
     9a6:	94 e0       	ldi	r25, 0x04	; 4
     9a8:	9b bd       	out	0x2b, r25	; 43
     9aa:	8a bd       	out	0x2a, r24	; 42
     9ac:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
     9ae:	88 ed       	ldi	r24, 0xD8	; 216
     9b0:	9b e0       	ldi	r25, 0x0B	; 11
     9b2:	9b bd       	out	0x2b, r25	; 43
     9b4:	8a bd       	out	0x2a, r24	; 42
     9b6:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9b bd       	out	0x2b, r25	; 43
     9be:	8a bd       	out	0x2a, r24	; 42
     9c0:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
     9c2:	82 e2       	ldi	r24, 0x22	; 34
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	9b bd       	out	0x2b, r25	; 43
     9c8:	8a bd       	out	0x2a, r24	; 42
     9ca:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
     9cc:	85 ef       	ldi	r24, 0xF5	; 245
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	9b bd       	out	0x2b, r25	; 43
     9d2:	8a bd       	out	0x2a, r24	; 42
     9d4:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
     9d6:	80 ed       	ldi	r24, 0xD0	; 208
     9d8:	9f e0       	ldi	r25, 0x0F	; 15
     9da:	9b bd       	out	0x2b, r25	; 43
     9dc:	8a bd       	out	0x2a, r24	; 42
     9de:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
     9e0:	8d e0       	ldi	r24, 0x0D	; 13
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9b bd       	out	0x2b, r25	; 43
     9e6:	8a bd       	out	0x2a, r24	; 42
     9e8:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
     9ea:	8f ed       	ldi	r24, 0xDF	; 223
     9ec:	98 e0       	ldi	r25, 0x08	; 8
     9ee:	9b bd       	out	0x2b, r25	; 43
     9f0:	8a bd       	out	0x2a, r24	; 42
     9f2:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
     9f4:	86 ef       	ldi	r24, 0xF6	; 246
     9f6:	99 e0       	ldi	r25, 0x09	; 9
     9f8:	9b bd       	out	0x2b, r25	; 43
     9fa:	8a bd       	out	0x2a, r24	; 42
     9fc:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
     9fe:	8a ef       	ldi	r24, 0xFA	; 250
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	9b bd       	out	0x2b, r25	; 43
     a04:	8a bd       	out	0x2a, r24	; 42
     a06:	08 95       	ret

00000a08 <song0>:
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     a08:	86 34       	cpi	r24, 0x46	; 70
     a0a:	91 05       	cpc	r25, r1
     a0c:	20 f0       	brcs	.+8      	; 0xa16 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	80 93 01 01 	sts	0x0101, r24
     a14:	08 95       	ret
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     a16:	fc 01       	movw	r30, r24
     a18:	e2 57       	subi	r30, 0x72	; 114
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
     a20:	22 e0       	ldi	r18, 0x02	; 2
     a22:	44 e0       	ldi	r20, 0x04	; 4
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	81 e4       	ldi	r24, 0x41	; 65
     a28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
     a2c:	26 e0       	ldi	r18, 0x06	; 6
     a2e:	44 e0       	ldi	r20, 0x04	; 4
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	81 e4       	ldi	r24, 0x41	; 65
     a34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
     a38:	22 e0       	ldi	r18, 0x02	; 2
     a3a:	44 e0       	ldi	r20, 0x04	; 4
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	81 e4       	ldi	r24, 0x41	; 65
     a40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
     a44:	28 e0       	ldi	r18, 0x08	; 8
     a46:	44 e0       	ldi	r20, 0x04	; 4
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	84 e4       	ldi	r24, 0x44	; 68
     a4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
     a50:	28 e0       	ldi	r18, 0x08	; 8
     a52:	44 e0       	ldi	r20, 0x04	; 4
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	86 e4       	ldi	r24, 0x46	; 70
     a58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
     a5c:	26 e0       	ldi	r18, 0x06	; 6
     a5e:	44 e0       	ldi	r20, 0x04	; 4
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	82 e4       	ldi	r24, 0x42	; 66
     a64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
     a68:	28 e0       	ldi	r18, 0x08	; 8
     a6a:	44 e0       	ldi	r20, 0x04	; 4
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	83 e4       	ldi	r24, 0x43	; 67
     a70:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
     a74:	28 e0       	ldi	r18, 0x08	; 8
     a76:	44 e0       	ldi	r20, 0x04	; 4
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	81 e4       	ldi	r24, 0x41	; 65
     a7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
     a80:	28 e0       	ldi	r18, 0x08	; 8
     a82:	44 e0       	ldi	r20, 0x04	; 4
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	87 e4       	ldi	r24, 0x47	; 71
     a88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
     a8c:	28 e0       	ldi	r18, 0x08	; 8
     a8e:	44 e0       	ldi	r20, 0x04	; 4
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	85 e4       	ldi	r24, 0x45	; 69
     a94:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
     a98:	20 e1       	ldi	r18, 0x10	; 16
     a9a:	44 e0       	ldi	r20, 0x04	; 4
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	81 e4       	ldi	r24, 0x41	; 65
     aa0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
     aa4:	24 e0       	ldi	r18, 0x04	; 4
     aa6:	45 e0       	ldi	r20, 0x05	; 5
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	83 e4       	ldi	r24, 0x43	; 67
     aac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
     ab0:	24 e0       	ldi	r18, 0x04	; 4
     ab2:	45 e0       	ldi	r20, 0x05	; 5
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	84 e4       	ldi	r24, 0x44	; 68
     ab8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     abc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     abe:	10 92 06 01 	sts	0x0106, r1
     ac2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	90 93 04 01 	sts	0x0104, r25
     ace:	80 93 03 01 	sts	0x0103, r24
     ad2:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ad4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ad6:	10 92 06 01 	sts	0x0106, r1
     ada:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 04 01 	sts	0x0104, r25
     ae6:	80 93 03 01 	sts	0x0103, r24
     aea:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
     aec:	20 e1       	ldi	r18, 0x10	; 16
     aee:	44 e0       	ldi	r20, 0x04	; 4
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	82 e4       	ldi	r24, 0x42	; 66
     af4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
     af8:	28 e0       	ldi	r18, 0x08	; 8
     afa:	44 e0       	ldi	r20, 0x04	; 4
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	82 e4       	ldi	r24, 0x42	; 66
     b00:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
     b04:	28 e1       	ldi	r18, 0x18	; 24
     b06:	44 e0       	ldi	r20, 0x04	; 4
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	87 e4       	ldi	r24, 0x47	; 71
     b0c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
     b10:	20 e1       	ldi	r18, 0x10	; 16
     b12:	45 e0       	ldi	r20, 0x05	; 5
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	84 e4       	ldi	r24, 0x44	; 68
     b18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     b1c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     b1e:	10 92 06 01 	sts	0x0106, r1
     b22:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 04 01 	sts	0x0104, r25
     b2e:	80 93 03 01 	sts	0x0103, r24
     b32:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
     b34:	24 e0       	ldi	r18, 0x04	; 4
     b36:	44 e0       	ldi	r20, 0x04	; 4
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	81 e4       	ldi	r24, 0x41	; 65
     b3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
     b40:	26 e0       	ldi	r18, 0x06	; 6
     b42:	44 e0       	ldi	r20, 0x04	; 4
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	87 e4       	ldi	r24, 0x47	; 71
     b48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
     b4c:	24 e0       	ldi	r18, 0x04	; 4
     b4e:	44 e0       	ldi	r20, 0x04	; 4
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	87 e4       	ldi	r24, 0x47	; 71
     b54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
     b58:	28 e0       	ldi	r18, 0x08	; 8
     b5a:	44 e0       	ldi	r20, 0x04	; 4
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	87 e4       	ldi	r24, 0x47	; 71
     b60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
     b64:	23 e0       	ldi	r18, 0x03	; 3
     b66:	44 e0       	ldi	r20, 0x04	; 4
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	87 e4       	ldi	r24, 0x47	; 71
     b6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
     b70:	20 e1       	ldi	r18, 0x10	; 16
     b72:	44 e0       	ldi	r20, 0x04	; 4
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	84 e4       	ldi	r24, 0x44	; 68
     b78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
     b7c:	20 e1       	ldi	r18, 0x10	; 16
     b7e:	45 e0       	ldi	r20, 0x05	; 5
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	83 e4       	ldi	r24, 0x43	; 67
     b84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
     b88:	22 e0       	ldi	r18, 0x02	; 2
     b8a:	44 e0       	ldi	r20, 0x04	; 4
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	82 e4       	ldi	r24, 0x42	; 66
     b90:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
     b94:	24 e0       	ldi	r18, 0x04	; 4
     b96:	45 e0       	ldi	r20, 0x05	; 5
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	84 e4       	ldi	r24, 0x44	; 68
     b9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
     ba0:	24 e0       	ldi	r18, 0x04	; 4
     ba2:	44 e0       	ldi	r20, 0x04	; 4
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	81 e4       	ldi	r24, 0x41	; 65
     ba8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
     bac:	28 e0       	ldi	r18, 0x08	; 8
     bae:	44 e0       	ldi	r20, 0x04	; 4
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	82 e4       	ldi	r24, 0x42	; 66
     bb4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
     bb8:	28 e1       	ldi	r18, 0x18	; 24
     bba:	44 e0       	ldi	r20, 0x04	; 4
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	86 e4       	ldi	r24, 0x46	; 70
     bc0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
     bc4:	27 e0       	ldi	r18, 0x07	; 7
     bc6:	44 e0       	ldi	r20, 0x04	; 4
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	87 e4       	ldi	r24, 0x47	; 71
     bcc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>

00000bd0 <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
     bd0:	8f 33       	cpi	r24, 0x3F	; 63
     bd2:	91 05       	cpc	r25, r1
     bd4:	20 f0       	brcs	.+8      	; 0xbde <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	80 93 01 01 	sts	0x0101, r24
     bdc:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
     bde:	fc 01       	movw	r30, r24
     be0:	ec 52       	subi	r30, 0x2C	; 44
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
     be8:	24 e0       	ldi	r18, 0x04	; 4
     bea:	44 e0       	ldi	r20, 0x04	; 4
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	83 e4       	ldi	r24, 0x43	; 67
     bf0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
     bf4:	28 e0       	ldi	r18, 0x08	; 8
     bf6:	44 e0       	ldi	r20, 0x04	; 4
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	85 e4       	ldi	r24, 0x45	; 69
     bfc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     c00:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     c02:	10 92 06 01 	sts	0x0106, r1
     c06:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 04 01 	sts	0x0104, r25
     c12:	80 93 03 01 	sts	0x0103, r24
     c16:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
     c18:	28 e0       	ldi	r18, 0x08	; 8
     c1a:	44 e0       	ldi	r20, 0x04	; 4
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	84 e4       	ldi	r24, 0x44	; 68
     c20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
     c24:	20 e1       	ldi	r18, 0x10	; 16
     c26:	43 e0       	ldi	r20, 0x03	; 3
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	83 e4       	ldi	r24, 0x43	; 67
     c2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
     c30:	24 e0       	ldi	r18, 0x04	; 4
     c32:	44 e0       	ldi	r20, 0x04	; 4
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	84 e4       	ldi	r24, 0x44	; 68
     c38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
     c3c:	24 e0       	ldi	r18, 0x04	; 4
     c3e:	43 e0       	ldi	r20, 0x03	; 3
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	82 e4       	ldi	r24, 0x42	; 66
     c44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
     c48:	27 e0       	ldi	r18, 0x07	; 7
     c4a:	43 e0       	ldi	r20, 0x03	; 3
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	81 e4       	ldi	r24, 0x41	; 65
     c50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
     c54:	24 e0       	ldi	r18, 0x04	; 4
     c56:	44 e0       	ldi	r20, 0x04	; 4
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	86 e4       	ldi	r24, 0x46	; 70
     c5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
     c60:	20 e1       	ldi	r18, 0x10	; 16
     c62:	42 e0       	ldi	r20, 0x02	; 2
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	82 e4       	ldi	r24, 0x42	; 66
     c68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
     c6c:	20 e1       	ldi	r18, 0x10	; 16
     c6e:	43 e0       	ldi	r20, 0x03	; 3
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	81 e4       	ldi	r24, 0x41	; 65
     c74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
     c78:	28 e0       	ldi	r18, 0x08	; 8
     c7a:	44 e0       	ldi	r20, 0x04	; 4
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	83 e4       	ldi	r24, 0x43	; 67
     c80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
     c84:	20 e1       	ldi	r18, 0x10	; 16
     c86:	43 e0       	ldi	r20, 0x03	; 3
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	84 e4       	ldi	r24, 0x44	; 68
     c8c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
     c90:	20 e1       	ldi	r18, 0x10	; 16
     c92:	43 e0       	ldi	r20, 0x03	; 3
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	85 e4       	ldi	r24, 0x45	; 69
     c98:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     c9c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     c9e:	10 92 06 01 	sts	0x0106, r1
     ca2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	90 93 04 01 	sts	0x0104, r25
     cae:	80 93 03 01 	sts	0x0103, r24
     cb2:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
     cb4:	27 e0       	ldi	r18, 0x07	; 7
     cb6:	43 e0       	ldi	r20, 0x03	; 3
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	82 e4       	ldi	r24, 0x42	; 66
     cbc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
     cc0:	2c e0       	ldi	r18, 0x0C	; 12
     cc2:	43 e0       	ldi	r20, 0x03	; 3
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	82 e4       	ldi	r24, 0x42	; 66
     cc8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
     ccc:	20 e1       	ldi	r18, 0x10	; 16
     cce:	43 e0       	ldi	r20, 0x03	; 3
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	81 e4       	ldi	r24, 0x41	; 65
     cd4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     cd8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     cda:	10 92 06 01 	sts	0x0106, r1
     cde:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	90 93 04 01 	sts	0x0104, r25
     cea:	80 93 03 01 	sts	0x0103, r24
     cee:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
     cf0:	24 e0       	ldi	r18, 0x04	; 4
     cf2:	44 e0       	ldi	r20, 0x04	; 4
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	87 e4       	ldi	r24, 0x47	; 71
     cf8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
     cfc:	28 e0       	ldi	r18, 0x08	; 8
     cfe:	42 e0       	ldi	r20, 0x02	; 2
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	82 e4       	ldi	r24, 0x42	; 66
     d04:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
     d08:	20 e1       	ldi	r18, 0x10	; 16
     d0a:	42 e0       	ldi	r20, 0x02	; 2
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	81 e4       	ldi	r24, 0x41	; 65
     d10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
     d14:	20 e1       	ldi	r18, 0x10	; 16
     d16:	42 e0       	ldi	r20, 0x02	; 2
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	81 e4       	ldi	r24, 0x41	; 65
     d1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
     d20:	2c e0       	ldi	r18, 0x0C	; 12
     d22:	44 e0       	ldi	r20, 0x04	; 4
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	85 e4       	ldi	r24, 0x45	; 69
     d28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
     d2c:	22 e0       	ldi	r18, 0x02	; 2
     d2e:	44 e0       	ldi	r20, 0x04	; 4
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	84 e4       	ldi	r24, 0x44	; 68
     d34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
     d38:	22 e0       	ldi	r18, 0x02	; 2
     d3a:	44 e0       	ldi	r20, 0x04	; 4
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	85 e4       	ldi	r24, 0x45	; 69
     d40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
     d44:	28 e0       	ldi	r18, 0x08	; 8
     d46:	43 e0       	ldi	r20, 0x03	; 3
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	83 e4       	ldi	r24, 0x43	; 67
     d4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
     d50:	24 e0       	ldi	r18, 0x04	; 4
     d52:	43 e0       	ldi	r20, 0x03	; 3
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	81 e4       	ldi	r24, 0x41	; 65
     d58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
     d5c:	28 e0       	ldi	r18, 0x08	; 8
     d5e:	43 e0       	ldi	r20, 0x03	; 3
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	85 e4       	ldi	r24, 0x45	; 69
     d64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
     d68:	28 e0       	ldi	r18, 0x08	; 8
     d6a:	43 e0       	ldi	r20, 0x03	; 3
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	81 e4       	ldi	r24, 0x41	; 65
     d70:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     d74:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     d76:	10 92 06 01 	sts	0x0106, r1
     d7a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 04 01 	sts	0x0104, r25
     d86:	80 93 03 01 	sts	0x0103, r24
     d8a:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
     d8c:	28 e0       	ldi	r18, 0x08	; 8
     d8e:	44 e0       	ldi	r20, 0x04	; 4
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	81 e4       	ldi	r24, 0x41	; 65
     d94:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>

00000d98 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
     d98:	85 39       	cpi	r24, 0x95	; 149
     d9a:	91 05       	cpc	r25, r1
     d9c:	20 f0       	brcs	.+8      	; 0xda6 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	80 93 01 01 	sts	0x0101, r24
     da4:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
     da6:	fc 01       	movw	r30, r24
     da8:	ed 5e       	subi	r30, 0xED	; 237
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
     db0:	24 e0       	ldi	r18, 0x04	; 4
     db2:	43 e0       	ldi	r20, 0x03	; 3
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	87 e4       	ldi	r24, 0x47	; 71
     db8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
     dbc:	22 e0       	ldi	r18, 0x02	; 2
     dbe:	43 e0       	ldi	r20, 0x03	; 3
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	81 e4       	ldi	r24, 0x41	; 65
     dc4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     dc8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     dca:	10 92 06 01 	sts	0x0106, r1
     dce:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	90 93 04 01 	sts	0x0104, r25
     dda:	80 93 03 01 	sts	0x0103, r24
     dde:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
     de0:	22 e0       	ldi	r18, 0x02	; 2
     de2:	44 e0       	ldi	r20, 0x04	; 4
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	83 e4       	ldi	r24, 0x43	; 67
     de8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
     dec:	22 e0       	ldi	r18, 0x02	; 2
     dee:	44 e0       	ldi	r20, 0x04	; 4
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	85 e4       	ldi	r24, 0x45	; 69
     df4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
     df8:	24 e0       	ldi	r18, 0x04	; 4
     dfa:	44 e0       	ldi	r20, 0x04	; 4
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	84 e4       	ldi	r24, 0x44	; 68
     e00:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
     e04:	22 e0       	ldi	r18, 0x02	; 2
     e06:	44 e0       	ldi	r20, 0x04	; 4
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	83 e4       	ldi	r24, 0x43	; 67
     e0c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e10:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e12:	10 92 06 01 	sts	0x0106, r1
     e16:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 04 01 	sts	0x0104, r25
     e22:	80 93 03 01 	sts	0x0103, r24
     e26:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
     e28:	22 e0       	ldi	r18, 0x02	; 2
     e2a:	44 e0       	ldi	r20, 0x04	; 4
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	83 e4       	ldi	r24, 0x43	; 67
     e30:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e34:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e36:	10 92 06 01 	sts	0x0106, r1
     e3a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	90 93 04 01 	sts	0x0104, r25
     e46:	80 93 03 01 	sts	0x0103, r24
     e4a:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
     e4c:	22 e0       	ldi	r18, 0x02	; 2
     e4e:	44 e0       	ldi	r20, 0x04	; 4
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	83 e4       	ldi	r24, 0x43	; 67
     e54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e58:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e5a:	10 92 06 01 	sts	0x0106, r1
     e5e:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	90 93 04 01 	sts	0x0104, r25
     e6a:	80 93 03 01 	sts	0x0103, r24
     e6e:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
     e70:	22 e0       	ldi	r18, 0x02	; 2
     e72:	44 e0       	ldi	r20, 0x04	; 4
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	83 e4       	ldi	r24, 0x43	; 67
     e78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e7c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e7e:	10 92 06 01 	sts	0x0106, r1
     e82:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     e86:	80 e1       	ldi	r24, 0x10	; 16
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 04 01 	sts	0x0104, r25
     e8e:	80 93 03 01 	sts	0x0103, r24
     e92:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
     e94:	22 e0       	ldi	r18, 0x02	; 2
     e96:	44 e0       	ldi	r20, 0x04	; 4
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	85 e4       	ldi	r24, 0x45	; 69
     e9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
     ea0:	22 e0       	ldi	r18, 0x02	; 2
     ea2:	44 e0       	ldi	r20, 0x04	; 4
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	84 e4       	ldi	r24, 0x44	; 68
     ea8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
     eac:	22 e0       	ldi	r18, 0x02	; 2
     eae:	44 e0       	ldi	r20, 0x04	; 4
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	83 e4       	ldi	r24, 0x43	; 67
     eb4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     eb8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     eba:	10 92 06 01 	sts	0x0106, r1
     ebe:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	90 93 04 01 	sts	0x0104, r25
     eca:	80 93 03 01 	sts	0x0103, r24
     ece:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
     ed0:	22 e0       	ldi	r18, 0x02	; 2
     ed2:	44 e0       	ldi	r20, 0x04	; 4
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	83 e4       	ldi	r24, 0x43	; 67
     ed8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     edc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ede:	10 92 06 01 	sts	0x0106, r1
     ee2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	90 93 04 01 	sts	0x0104, r25
     eee:	80 93 03 01 	sts	0x0103, r24
     ef2:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
     ef4:	22 e0       	ldi	r18, 0x02	; 2
     ef6:	44 e0       	ldi	r20, 0x04	; 4
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	83 e4       	ldi	r24, 0x43	; 67
     efc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f00:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f02:	10 92 06 01 	sts	0x0106, r1
     f06:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 04 01 	sts	0x0104, r25
     f12:	80 93 03 01 	sts	0x0103, r24
     f16:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
     f18:	22 e0       	ldi	r18, 0x02	; 2
     f1a:	44 e0       	ldi	r20, 0x04	; 4
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	83 e4       	ldi	r24, 0x43	; 67
     f20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f24:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f26:	10 92 06 01 	sts	0x0106, r1
     f2a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 04 01 	sts	0x0104, r25
     f36:	80 93 03 01 	sts	0x0103, r24
     f3a:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
     f3c:	24 e0       	ldi	r18, 0x04	; 4
     f3e:	43 e0       	ldi	r20, 0x03	; 3
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	87 e4       	ldi	r24, 0x47	; 71
     f44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
     f48:	22 e0       	ldi	r18, 0x02	; 2
     f4a:	43 e0       	ldi	r20, 0x03	; 3
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	81 e4       	ldi	r24, 0x41	; 65
     f50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f54:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f56:	10 92 06 01 	sts	0x0106, r1
     f5a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 04 01 	sts	0x0104, r25
     f66:	80 93 03 01 	sts	0x0103, r24
     f6a:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
     f6c:	22 e0       	ldi	r18, 0x02	; 2
     f6e:	44 e0       	ldi	r20, 0x04	; 4
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	83 e4       	ldi	r24, 0x43	; 67
     f74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
     f78:	22 e0       	ldi	r18, 0x02	; 2
     f7a:	44 e0       	ldi	r20, 0x04	; 4
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	85 e4       	ldi	r24, 0x45	; 69
     f80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
     f84:	24 e0       	ldi	r18, 0x04	; 4
     f86:	44 e0       	ldi	r20, 0x04	; 4
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	84 e4       	ldi	r24, 0x44	; 68
     f8c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
     f90:	22 e0       	ldi	r18, 0x02	; 2
     f92:	44 e0       	ldi	r20, 0x04	; 4
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	83 e4       	ldi	r24, 0x43	; 67
     f98:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f9c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f9e:	10 92 06 01 	sts	0x0106, r1
     fa2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 04 01 	sts	0x0104, r25
     fae:	80 93 03 01 	sts	0x0103, r24
     fb2:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
     fb4:	22 e0       	ldi	r18, 0x02	; 2
     fb6:	44 e0       	ldi	r20, 0x04	; 4
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	83 e4       	ldi	r24, 0x43	; 67
     fbc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     fc0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     fc2:	10 92 06 01 	sts	0x0106, r1
     fc6:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	90 93 04 01 	sts	0x0104, r25
     fd2:	80 93 03 01 	sts	0x0103, r24
     fd6:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
     fd8:	22 e0       	ldi	r18, 0x02	; 2
     fda:	44 e0       	ldi	r20, 0x04	; 4
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	83 e4       	ldi	r24, 0x43	; 67
     fe0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     fe4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     fe6:	10 92 06 01 	sts	0x0106, r1
     fea:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 04 01 	sts	0x0104, r25
     ff6:	80 93 03 01 	sts	0x0103, r24
     ffa:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
     ffc:	22 e0       	ldi	r18, 0x02	; 2
     ffe:	44 e0       	ldi	r20, 0x04	; 4
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	83 e4       	ldi	r24, 0x43	; 67
    1004:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1008:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    100a:	10 92 06 01 	sts	0x0106, r1
    100e:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1012:	8a e0       	ldi	r24, 0x0A	; 10
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 04 01 	sts	0x0104, r25
    101a:	80 93 03 01 	sts	0x0103, r24
    101e:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    1020:	24 e0       	ldi	r18, 0x04	; 4
    1022:	44 e0       	ldi	r20, 0x04	; 4
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	83 e4       	ldi	r24, 0x43	; 67
    1028:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    102c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    102e:	10 92 06 01 	sts	0x0106, r1
    1032:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1036:	84 e0       	ldi	r24, 0x04	; 4
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	90 93 04 01 	sts	0x0104, r25
    103e:	80 93 03 01 	sts	0x0103, r24
    1042:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	44 e0       	ldi	r20, 0x04	; 4
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	84 e4       	ldi	r24, 0x44	; 68
    104c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1050:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1052:	10 92 06 01 	sts	0x0106, r1
    1056:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	90 93 04 01 	sts	0x0104, r25
    1062:	80 93 03 01 	sts	0x0103, r24
    1066:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    1068:	24 e0       	ldi	r18, 0x04	; 4
    106a:	44 e0       	ldi	r20, 0x04	; 4
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	85 e4       	ldi	r24, 0x45	; 69
    1070:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1074:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1076:	10 92 06 01 	sts	0x0106, r1
    107a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 04 01 	sts	0x0104, r25
    1086:	80 93 03 01 	sts	0x0103, r24
    108a:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    108c:	22 e0       	ldi	r18, 0x02	; 2
    108e:	44 e0       	ldi	r20, 0x04	; 4
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	84 e4       	ldi	r24, 0x44	; 68
    1094:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    1098:	22 e0       	ldi	r18, 0x02	; 2
    109a:	44 e0       	ldi	r20, 0x04	; 4
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	83 e4       	ldi	r24, 0x43	; 67
    10a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    10a4:	22 e0       	ldi	r18, 0x02	; 2
    10a6:	43 e0       	ldi	r20, 0x03	; 3
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	81 e4       	ldi	r24, 0x41	; 65
    10ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    10b0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    10b2:	10 92 06 01 	sts	0x0106, r1
    10b6:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	90 93 04 01 	sts	0x0104, r25
    10c2:	80 93 03 01 	sts	0x0103, r24
    10c6:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    10c8:	22 e0       	ldi	r18, 0x02	; 2
    10ca:	44 e0       	ldi	r20, 0x04	; 4
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	83 e4       	ldi	r24, 0x43	; 67
    10d0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    10d4:	22 e0       	ldi	r18, 0x02	; 2
    10d6:	43 e0       	ldi	r20, 0x03	; 3
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	81 e4       	ldi	r24, 0x41	; 65
    10dc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    10e0:	22 e0       	ldi	r18, 0x02	; 2
    10e2:	43 e0       	ldi	r20, 0x03	; 3
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	81 e4       	ldi	r24, 0x41	; 65
    10e8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    10ec:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    10ee:	10 92 06 01 	sts	0x0106, r1
    10f2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 04 01 	sts	0x0104, r25
    10fe:	80 93 03 01 	sts	0x0103, r24
    1102:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    1104:	22 e0       	ldi	r18, 0x02	; 2
    1106:	44 e0       	ldi	r20, 0x04	; 4
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	85 e4       	ldi	r24, 0x45	; 69
    110c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1110:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1112:	10 92 06 01 	sts	0x0106, r1
    1116:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 04 01 	sts	0x0104, r25
    1122:	80 93 03 01 	sts	0x0103, r24
    1126:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    1128:	22 e0       	ldi	r18, 0x02	; 2
    112a:	44 e0       	ldi	r20, 0x04	; 4
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	85 e4       	ldi	r24, 0x45	; 69
    1130:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    1134:	22 e0       	ldi	r18, 0x02	; 2
    1136:	44 e0       	ldi	r20, 0x04	; 4
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	86 e4       	ldi	r24, 0x46	; 70
    113c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    1140:	22 e0       	ldi	r18, 0x02	; 2
    1142:	44 e0       	ldi	r20, 0x04	; 4
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	87 e4       	ldi	r24, 0x47	; 71
    1148:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    114c:	22 e0       	ldi	r18, 0x02	; 2
    114e:	44 e0       	ldi	r20, 0x04	; 4
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	87 e4       	ldi	r24, 0x47	; 71
    1154:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1158:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    115a:	10 92 06 01 	sts	0x0106, r1
    115e:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1162:	88 e0       	ldi	r24, 0x08	; 8
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	90 93 04 01 	sts	0x0104, r25
    116a:	80 93 03 01 	sts	0x0103, r24
    116e:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    1170:	24 e0       	ldi	r18, 0x04	; 4
    1172:	44 e0       	ldi	r20, 0x04	; 4
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	87 e4       	ldi	r24, 0x47	; 71
    1178:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    117c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    117e:	10 92 06 01 	sts	0x0106, r1
    1182:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	90 93 04 01 	sts	0x0104, r25
    118e:	80 93 03 01 	sts	0x0103, r24
    1192:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    1194:	21 e0       	ldi	r18, 0x01	; 1
    1196:	44 e0       	ldi	r20, 0x04	; 4
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	87 e4       	ldi	r24, 0x47	; 71
    119c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11a0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11a2:	10 92 06 01 	sts	0x0106, r1
    11a6:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	90 93 04 01 	sts	0x0104, r25
    11b2:	80 93 03 01 	sts	0x0103, r24
    11b6:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    11b8:	22 e0       	ldi	r18, 0x02	; 2
    11ba:	44 e0       	ldi	r20, 0x04	; 4
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	87 e4       	ldi	r24, 0x47	; 71
    11c0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11c4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11c6:	10 92 06 01 	sts	0x0106, r1
    11ca:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	90 93 04 01 	sts	0x0104, r25
    11d6:	80 93 03 01 	sts	0x0103, r24
    11da:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    11dc:	22 e0       	ldi	r18, 0x02	; 2
    11de:	43 e0       	ldi	r20, 0x03	; 3
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	85 e4       	ldi	r24, 0x45	; 69
    11e4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11e8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11ea:	10 92 06 01 	sts	0x0106, r1
    11ee:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	90 93 04 01 	sts	0x0104, r25
    11fa:	80 93 03 01 	sts	0x0103, r24
    11fe:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	43 e0       	ldi	r20, 0x03	; 3
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	85 e4       	ldi	r24, 0x45	; 69
    1208:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    120c:	22 e0       	ldi	r18, 0x02	; 2
    120e:	43 e0       	ldi	r20, 0x03	; 3
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	86 e4       	ldi	r24, 0x46	; 70
    1214:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    1218:	22 e0       	ldi	r18, 0x02	; 2
    121a:	43 e0       	ldi	r20, 0x03	; 3
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	87 e4       	ldi	r24, 0x47	; 71
    1220:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    1224:	22 e0       	ldi	r18, 0x02	; 2
    1226:	43 e0       	ldi	r20, 0x03	; 3
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	87 e4       	ldi	r24, 0x47	; 71
    122c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1230:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1232:	10 92 06 01 	sts	0x0106, r1
    1236:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    123a:	84 e0       	ldi	r24, 0x04	; 4
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	90 93 04 01 	sts	0x0104, r25
    1242:	80 93 03 01 	sts	0x0103, r24
    1246:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    1248:	22 e0       	ldi	r18, 0x02	; 2
    124a:	44 e0       	ldi	r20, 0x04	; 4
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	84 e4       	ldi	r24, 0x44	; 68
    1250:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    1254:	22 e0       	ldi	r18, 0x02	; 2
    1256:	44 e0       	ldi	r20, 0x04	; 4
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	83 e4       	ldi	r24, 0x43	; 67
    125c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    1260:	22 e0       	ldi	r18, 0x02	; 2
    1262:	43 e0       	ldi	r20, 0x03	; 3
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	81 e4       	ldi	r24, 0x41	; 65
    1268:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    126c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    126e:	10 92 06 01 	sts	0x0106, r1
    1272:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	90 93 04 01 	sts	0x0104, r25
    127e:	80 93 03 01 	sts	0x0103, r24
    1282:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    1284:	22 e0       	ldi	r18, 0x02	; 2
    1286:	44 e0       	ldi	r20, 0x04	; 4
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	83 e4       	ldi	r24, 0x43	; 67
    128c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    1290:	22 e0       	ldi	r18, 0x02	; 2
    1292:	43 e0       	ldi	r20, 0x03	; 3
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	81 e4       	ldi	r24, 0x41	; 65
    1298:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    129c:	22 e0       	ldi	r18, 0x02	; 2
    129e:	43 e0       	ldi	r20, 0x03	; 3
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	81 e4       	ldi	r24, 0x41	; 65
    12a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    12a8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    12aa:	10 92 06 01 	sts	0x0106, r1
    12ae:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	90 93 04 01 	sts	0x0104, r25
    12ba:	80 93 03 01 	sts	0x0103, r24
    12be:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    12c0:	22 e0       	ldi	r18, 0x02	; 2
    12c2:	44 e0       	ldi	r20, 0x04	; 4
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	85 e4       	ldi	r24, 0x45	; 69
    12c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    12cc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    12ce:	10 92 06 01 	sts	0x0106, r1
    12d2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	90 93 04 01 	sts	0x0104, r25
    12de:	80 93 03 01 	sts	0x0103, r24
    12e2:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    12e4:	22 e0       	ldi	r18, 0x02	; 2
    12e6:	44 e0       	ldi	r20, 0x04	; 4
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	85 e4       	ldi	r24, 0x45	; 69
    12ec:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    12f0:	22 e0       	ldi	r18, 0x02	; 2
    12f2:	44 e0       	ldi	r20, 0x04	; 4
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	86 e4       	ldi	r24, 0x46	; 70
    12f8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    12fc:	22 e0       	ldi	r18, 0x02	; 2
    12fe:	44 e0       	ldi	r20, 0x04	; 4
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	87 e4       	ldi	r24, 0x47	; 71
    1304:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    1308:	22 e0       	ldi	r18, 0x02	; 2
    130a:	44 e0       	ldi	r20, 0x04	; 4
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	87 e4       	ldi	r24, 0x47	; 71
    1310:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1314:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1316:	10 92 06 01 	sts	0x0106, r1
    131a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    131e:	88 e0       	ldi	r24, 0x08	; 8
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	90 93 04 01 	sts	0x0104, r25
    1326:	80 93 03 01 	sts	0x0103, r24
    132a:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    132c:	22 e0       	ldi	r18, 0x02	; 2
    132e:	43 e0       	ldi	r20, 0x03	; 3
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	82 e4       	ldi	r24, 0x42	; 66
    1334:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    1338:	22 e0       	ldi	r18, 0x02	; 2
    133a:	44 e0       	ldi	r20, 0x04	; 4
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	84 e4       	ldi	r24, 0x44	; 68
    1340:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    1344:	22 e0       	ldi	r18, 0x02	; 2
    1346:	44 e0       	ldi	r20, 0x04	; 4
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	83 e4       	ldi	r24, 0x43	; 67
    134c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1350:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1352:	10 92 06 01 	sts	0x0106, r1
    1356:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	90 93 04 01 	sts	0x0104, r25
    1362:	80 93 03 01 	sts	0x0103, r24
    1366:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    1368:	22 e0       	ldi	r18, 0x02	; 2
    136a:	44 e0       	ldi	r20, 0x04	; 4
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	85 e4       	ldi	r24, 0x45	; 69
    1370:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1374:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1376:	10 92 06 01 	sts	0x0106, r1
    137a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	90 93 04 01 	sts	0x0104, r25
    1386:	80 93 03 01 	sts	0x0103, r24
    138a:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    138c:	22 e0       	ldi	r18, 0x02	; 2
    138e:	44 e0       	ldi	r20, 0x04	; 4
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	87 e4       	ldi	r24, 0x47	; 71
    1394:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    1398:	22 e0       	ldi	r18, 0x02	; 2
    139a:	44 e0       	ldi	r20, 0x04	; 4
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	86 e4       	ldi	r24, 0x46	; 70
    13a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    13a4:	24 e0       	ldi	r18, 0x04	; 4
    13a6:	44 e0       	ldi	r20, 0x04	; 4
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	81 e4       	ldi	r24, 0x41	; 65
    13ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    13b0:	22 e0       	ldi	r18, 0x02	; 2
    13b2:	44 e0       	ldi	r20, 0x04	; 4
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	87 e4       	ldi	r24, 0x47	; 71
    13b8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    13bc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    13be:	10 92 06 01 	sts	0x0106, r1
    13c2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	90 93 04 01 	sts	0x0104, r25
    13ce:	80 93 03 01 	sts	0x0103, r24
    13d2:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    13d4:	22 e0       	ldi	r18, 0x02	; 2
    13d6:	44 e0       	ldi	r20, 0x04	; 4
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	85 e4       	ldi	r24, 0x45	; 69
    13dc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    13e0:	23 e0       	ldi	r18, 0x03	; 3
    13e2:	43 e0       	ldi	r20, 0x03	; 3
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	87 e4       	ldi	r24, 0x47	; 71
    13e8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    13ec:	24 e0       	ldi	r18, 0x04	; 4
    13ee:	43 e0       	ldi	r20, 0x03	; 3
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	81 e4       	ldi	r24, 0x41	; 65
    13f4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    13f8:	22 e0       	ldi	r18, 0x02	; 2
    13fa:	43 e0       	ldi	r20, 0x03	; 3
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	82 e4       	ldi	r24, 0x42	; 66
    1400:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1404:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1406:	10 92 06 01 	sts	0x0106, r1
    140a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	90 93 04 01 	sts	0x0104, r25
    1416:	80 93 03 01 	sts	0x0103, r24
    141a:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    141c:	22 e0       	ldi	r18, 0x02	; 2
    141e:	43 e0       	ldi	r20, 0x03	; 3
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	82 e4       	ldi	r24, 0x42	; 66
    1424:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1428:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    142a:	10 92 06 01 	sts	0x0106, r1
    142e:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	90 93 04 01 	sts	0x0104, r25
    143a:	80 93 03 01 	sts	0x0103, r24
    143e:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    1440:	22 e0       	ldi	r18, 0x02	; 2
    1442:	43 e0       	ldi	r20, 0x03	; 3
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	81 e4       	ldi	r24, 0x41	; 65
    1448:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    144c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    144e:	10 92 06 01 	sts	0x0106, r1
    1452:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	90 93 04 01 	sts	0x0104, r25
    145e:	80 93 03 01 	sts	0x0103, r24
    1462:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    1464:	24 e0       	ldi	r18, 0x04	; 4
    1466:	43 e0       	ldi	r20, 0x03	; 3
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	85 e4       	ldi	r24, 0x45	; 69
    146c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1470:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1472:	10 92 06 01 	sts	0x0106, r1
    1476:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	90 93 04 01 	sts	0x0104, r25
    1482:	80 93 03 01 	sts	0x0103, r24
    1486:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    1488:	22 e0       	ldi	r18, 0x02	; 2
    148a:	43 e0       	ldi	r20, 0x03	; 3
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	87 e4       	ldi	r24, 0x47	; 71
    1490:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1494:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1496:	10 92 06 01 	sts	0x0106, r1
    149a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	90 93 04 01 	sts	0x0104, r25
    14a6:	80 93 03 01 	sts	0x0103, r24
    14aa:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    14ac:	25 e0       	ldi	r18, 0x05	; 5
    14ae:	44 e0       	ldi	r20, 0x04	; 4
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	83 e4       	ldi	r24, 0x43	; 67
    14b4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14b8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14ba:	10 92 06 01 	sts	0x0106, r1
    14be:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	90 93 04 01 	sts	0x0104, r25
    14ca:	80 93 03 01 	sts	0x0103, r24
    14ce:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    14d0:	22 e0       	ldi	r18, 0x02	; 2
    14d2:	43 e0       	ldi	r20, 0x03	; 3
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	82 e4       	ldi	r24, 0x42	; 66
    14d8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    14dc:	22 e0       	ldi	r18, 0x02	; 2
    14de:	44 e0       	ldi	r20, 0x04	; 4
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	84 e4       	ldi	r24, 0x44	; 68
    14e4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    14e8:	22 e0       	ldi	r18, 0x02	; 2
    14ea:	44 e0       	ldi	r20, 0x04	; 4
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	83 e4       	ldi	r24, 0x43	; 67
    14f0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14f4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14f6:	10 92 06 01 	sts	0x0106, r1
    14fa:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	90 93 04 01 	sts	0x0104, r25
    1506:	80 93 03 01 	sts	0x0103, r24
    150a:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    150c:	22 e0       	ldi	r18, 0x02	; 2
    150e:	44 e0       	ldi	r20, 0x04	; 4
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	85 e4       	ldi	r24, 0x45	; 69
    1514:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1518:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    151a:	10 92 06 01 	sts	0x0106, r1
    151e:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	90 93 04 01 	sts	0x0104, r25
    152a:	80 93 03 01 	sts	0x0103, r24
    152e:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    1530:	22 e0       	ldi	r18, 0x02	; 2
    1532:	44 e0       	ldi	r20, 0x04	; 4
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	87 e4       	ldi	r24, 0x47	; 71
    1538:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    153c:	22 e0       	ldi	r18, 0x02	; 2
    153e:	44 e0       	ldi	r20, 0x04	; 4
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	86 e4       	ldi	r24, 0x46	; 70
    1544:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    1548:	24 e0       	ldi	r18, 0x04	; 4
    154a:	44 e0       	ldi	r20, 0x04	; 4
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	81 e4       	ldi	r24, 0x41	; 65
    1550:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    1554:	22 e0       	ldi	r18, 0x02	; 2
    1556:	44 e0       	ldi	r20, 0x04	; 4
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	87 e4       	ldi	r24, 0x47	; 71
    155c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1560:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1562:	10 92 06 01 	sts	0x0106, r1
    1566:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	90 93 04 01 	sts	0x0104, r25
    1572:	80 93 03 01 	sts	0x0103, r24
    1576:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    1578:	22 e0       	ldi	r18, 0x02	; 2
    157a:	44 e0       	ldi	r20, 0x04	; 4
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	85 e4       	ldi	r24, 0x45	; 69
    1580:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    1584:	23 e0       	ldi	r18, 0x03	; 3
    1586:	43 e0       	ldi	r20, 0x03	; 3
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	87 e4       	ldi	r24, 0x47	; 71
    158c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    1590:	24 e0       	ldi	r18, 0x04	; 4
    1592:	43 e0       	ldi	r20, 0x03	; 3
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	81 e4       	ldi	r24, 0x41	; 65
    1598:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    159c:	22 e0       	ldi	r18, 0x02	; 2
    159e:	43 e0       	ldi	r20, 0x03	; 3
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	82 e4       	ldi	r24, 0x42	; 66
    15a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15a8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15aa:	10 92 06 01 	sts	0x0106, r1
    15ae:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 04 01 	sts	0x0104, r25
    15ba:	80 93 03 01 	sts	0x0103, r24
    15be:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    15c0:	22 e0       	ldi	r18, 0x02	; 2
    15c2:	43 e0       	ldi	r20, 0x03	; 3
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	82 e4       	ldi	r24, 0x42	; 66
    15c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15cc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15ce:	10 92 06 01 	sts	0x0106, r1
    15d2:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	90 93 04 01 	sts	0x0104, r25
    15de:	80 93 03 01 	sts	0x0103, r24
    15e2:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    15e4:	22 e0       	ldi	r18, 0x02	; 2
    15e6:	43 e0       	ldi	r20, 0x03	; 3
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	81 e4       	ldi	r24, 0x41	; 65
    15ec:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15f0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15f2:	10 92 06 01 	sts	0x0106, r1
    15f6:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	90 93 04 01 	sts	0x0104, r25
    1602:	80 93 03 01 	sts	0x0103, r24
    1606:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    1608:	24 e0       	ldi	r18, 0x04	; 4
    160a:	43 e0       	ldi	r20, 0x03	; 3
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	85 e4       	ldi	r24, 0x45	; 69
    1610:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1614:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1616:	10 92 06 01 	sts	0x0106, r1
    161a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	90 93 04 01 	sts	0x0104, r25
    1626:	80 93 03 01 	sts	0x0103, r24
    162a:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    162c:	22 e0       	ldi	r18, 0x02	; 2
    162e:	43 e0       	ldi	r20, 0x03	; 3
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	87 e4       	ldi	r24, 0x47	; 71
    1634:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    1638:	25 e0       	ldi	r18, 0x05	; 5
    163a:	44 e0       	ldi	r20, 0x04	; 4
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	83 e4       	ldi	r24, 0x43	; 67
    1640:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1644:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1646:	10 92 06 01 	sts	0x0106, r1
    164a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 04 01 	sts	0x0104, r25
    1656:	80 93 03 01 	sts	0x0103, r24
    165a:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    165c:	28 e0       	ldi	r18, 0x08	; 8
    165e:	42 e0       	ldi	r20, 0x02	; 2
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	87 e4       	ldi	r24, 0x47	; 71
    1664:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    1668:	28 e0       	ldi	r18, 0x08	; 8
    166a:	44 e0       	ldi	r20, 0x04	; 4
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	87 e4       	ldi	r24, 0x47	; 71
    1670:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    1674:	24 e0       	ldi	r18, 0x04	; 4
    1676:	44 e0       	ldi	r20, 0x04	; 4
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	85 e4       	ldi	r24, 0x45	; 69
    167c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    1680:	22 e0       	ldi	r18, 0x02	; 2
    1682:	44 e0       	ldi	r20, 0x04	; 4
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	83 e4       	ldi	r24, 0x43	; 67
    1688:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    168c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    168e:	10 92 06 01 	sts	0x0106, r1
    1692:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	90 93 04 01 	sts	0x0104, r25
    169e:	80 93 03 01 	sts	0x0103, r24
    16a2:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    16a4:	22 e0       	ldi	r18, 0x02	; 2
    16a6:	44 e0       	ldi	r20, 0x04	; 4
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	85 e4       	ldi	r24, 0x45	; 69
    16ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16b0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16b2:	10 92 06 01 	sts	0x0106, r1
    16b6:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	90 93 04 01 	sts	0x0104, r25
    16c2:	80 93 03 01 	sts	0x0103, r24
    16c6:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    16c8:	23 e0       	ldi	r18, 0x03	; 3
    16ca:	44 e0       	ldi	r20, 0x04	; 4
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	85 e4       	ldi	r24, 0x45	; 69
    16d0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16d4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16d6:	10 92 06 01 	sts	0x0106, r1
    16da:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	90 93 04 01 	sts	0x0104, r25
    16e6:	80 93 03 01 	sts	0x0103, r24
    16ea:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	44 e0       	ldi	r20, 0x04	; 4
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	85 e4       	ldi	r24, 0x45	; 69
    16f4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16f8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16fa:	10 92 06 01 	sts	0x0106, r1
    16fe:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1702:	88 e0       	ldi	r24, 0x08	; 8
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	90 93 04 01 	sts	0x0104, r25
    170a:	80 93 03 01 	sts	0x0103, r24
    170e:	08 95       	ret

00001710 <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    1710:	8f 31       	cpi	r24, 0x1F	; 31
    1712:	91 05       	cpc	r25, r1
    1714:	20 f0       	brcs	.+8      	; 0x171e <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	80 93 01 01 	sts	0x0101, r24
    171c:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    171e:	fc 01       	movw	r30, r24
    1720:	e8 55       	subi	r30, 0x58	; 88
    1722:	fe 4f       	sbci	r31, 0xFE	; 254
    1724:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1728:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    172a:	10 92 06 01 	sts	0x0106, r1
    172e:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	90 93 04 01 	sts	0x0104, r25
    173a:	80 93 03 01 	sts	0x0103, r24
    173e:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    1740:	24 e0       	ldi	r18, 0x04	; 4
    1742:	45 e0       	ldi	r20, 0x05	; 5
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	85 e4       	ldi	r24, 0x45	; 69
    1748:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    174c:	27 e0       	ldi	r18, 0x07	; 7
    174e:	44 e0       	ldi	r20, 0x04	; 4
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	85 e4       	ldi	r24, 0x45	; 69
    1754:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    1758:	27 e0       	ldi	r18, 0x07	; 7
    175a:	44 e0       	ldi	r20, 0x04	; 4
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	85 e4       	ldi	r24, 0x45	; 69
    1760:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1764:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1766:	10 92 06 01 	sts	0x0106, r1
    176a:	10 92 05 01 	sts	0x0105, r1
  max_beat = duration;
    176e:	85 e0       	ldi	r24, 0x05	; 5
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	90 93 04 01 	sts	0x0104, r25
    1776:	80 93 03 01 	sts	0x0103, r24
    177a:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    177c:	28 e0       	ldi	r18, 0x08	; 8
    177e:	45 e0       	ldi	r20, 0x05	; 5
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	85 e4       	ldi	r24, 0x45	; 69
    1784:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    1788:	23 e0       	ldi	r18, 0x03	; 3
    178a:	44 e0       	ldi	r20, 0x04	; 4
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	85 e4       	ldi	r24, 0x45	; 69
    1790:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    1794:	23 e0       	ldi	r18, 0x03	; 3
    1796:	44 e0       	ldi	r20, 0x04	; 4
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	85 e4       	ldi	r24, 0x45	; 69
    179c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    17a0:	28 e0       	ldi	r18, 0x08	; 8
    17a2:	45 e0       	ldi	r20, 0x05	; 5
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	87 e4       	ldi	r24, 0x47	; 71
    17a8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    17ac:	24 e0       	ldi	r18, 0x04	; 4
    17ae:	45 e0       	ldi	r20, 0x05	; 5
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	85 e4       	ldi	r24, 0x45	; 69
    17b4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    17b8:	23 e0       	ldi	r18, 0x03	; 3
    17ba:	45 e0       	ldi	r20, 0x05	; 5
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	85 e4       	ldi	r24, 0x45	; 69
    17c0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    17c4:	24 e0       	ldi	r18, 0x04	; 4
    17c6:	45 e0       	ldi	r20, 0x05	; 5
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	87 e4       	ldi	r24, 0x47	; 71
    17cc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    17d0:	28 e0       	ldi	r18, 0x08	; 8
    17d2:	45 e0       	ldi	r20, 0x05	; 5
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	87 e4       	ldi	r24, 0x47	; 71
    17d8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <play_note>

000017dc <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	89 f0       	breq	.+34     	; 0x1802 <play_song+0x26>
    17e0:	60 f0       	brcs	.+24     	; 0x17fa <play_song+0x1e>
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <play_song+0x16>
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	41 f4       	brne	.+16     	; 0x17fa <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    17ea:	86 2f       	mov	r24, r22
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    17f2:	86 2f       	mov	r24, r22
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    17fa:	86 2f       	mov	r24, r22
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0c 94 04 05 	jmp	0xa08	; 0xa08 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    1802:	86 2f       	mov	r24, r22
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <song1>

0000180a <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    180a:	10 92 01 01 	sts	0x0101, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    180e:	8e b5       	in	r24, 0x2e	; 46
    1810:	8c 7f       	andi	r24, 0xFC	; 252
    1812:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    1814:	92 9a       	sbi	0x12, 2	; 18
    1816:	08 95       	ret

00001818 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    1818:	10 92 01 01 	sts	0x0101, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    181c:	8e b5       	in	r24, 0x2e	; 46
    181e:	83 60       	ori	r24, 0x03	; 3
    1820:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    1822:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    1824:	60 91 01 01 	lds	r22, 0x0101
    1828:	80 91 02 01 	lds	r24, 0x0102
    182c:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <play_song>

00001830 <music_init>:
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    1830:	87 b7       	in	r24, 0x37	; 55
    1832:	80 61       	ori	r24, 0x10	; 16
    1834:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
    1836:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    1838:	8e b5       	in	r24, 0x2e	; 46
    183a:	88 60       	ori	r24, 0x08	; 8
    183c:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
    183e:	10 92 7a 00 	sts	0x007A, r1
  OCR1A = 0x0031;        //(use to vary alarm frequency)
    1842:	81 e3       	ldi	r24, 0x31	; 49
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9b bd       	out	0x2b, r25	; 43
    1848:	8a bd       	out	0x2a, r24	; 42
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    184a:	10 92 01 01 	sts	0x0101, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    184e:	8e b5       	in	r24, 0x2e	; 46
    1850:	8c 7f       	andi	r24, 0xFC	; 252
    1852:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    1854:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
    1856:	10 92 06 01 	sts	0x0106, r1
    185a:	10 92 05 01 	sts	0x0105, r1
  max_beat = 0;
    185e:	10 92 04 01 	sts	0x0104, r1
    1862:	10 92 03 01 	sts	0x0103, r1
  notes = 0;
    1866:	10 92 01 01 	sts	0x0101, r1
  song = 0;              //beaver fight song
    186a:	10 92 02 01 	sts	0x0102, r1
    186e:	08 95       	ret

00001870 <__vector_16>:

/*********************************************************************/
/*                             TIMER1_COMPA                          */
/*Oscillates pin7, PORTD for alarm tone output                       */
/*********************************************************************/
ISR(TIMER0_OVF_vect){
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
counter++;
    187e:	80 91 07 01 	lds	r24, 0x0107
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	80 93 07 01 	sts	0x0107, r24
	if(counter % 8 == 0) {
    1888:	87 70       	andi	r24, 0x07	; 7
    188a:	49 f4       	brne	.+18     	; 0x189e <__vector_16+0x2e>
    	//for note duration (64th notes) 
    	beat++;
    188c:	80 91 05 01 	lds	r24, 0x0105
    1890:	90 91 06 01 	lds	r25, 0x0106
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	90 93 06 01 	sts	0x0106, r25
    189a:	80 93 05 01 	sts	0x0105, r24
  	}  
}
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <__vector_12>:




ISR(TIMER1_COMPA_vect) {
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	0b b6       	in	r0, 0x3b	; 59
    18b8:	0f 92       	push	r0
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
  PORTD ^= ALARM_PIN;      //flips the bit, creating a tone
    18d2:	82 b3       	in	r24, 0x12	; 18
    18d4:	80 58       	subi	r24, 0x80	; 128
    18d6:	82 bb       	out	0x12, r24	; 18
  if(beat >= max_beat) {   //if we've played the note long enough
    18d8:	20 91 05 01 	lds	r18, 0x0105
    18dc:	30 91 06 01 	lds	r19, 0x0106
    18e0:	80 91 03 01 	lds	r24, 0x0103
    18e4:	90 91 04 01 	lds	r25, 0x0104
    18e8:	28 17       	cp	r18, r24
    18ea:	39 07       	cpc	r19, r25
    18ec:	58 f0       	brcs	.+22     	; 0x1904 <__vector_12+0x58>
    notes++;               //move on to the next note
    18ee:	80 91 01 01 	lds	r24, 0x0101
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 01 01 	sts	0x0101, r24
    play_song(song, notes);//and play it
    18f8:	60 91 01 01 	lds	r22, 0x0101
    18fc:	80 91 02 01 	lds	r24, 0x0102
    1900:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <play_song>
  }
}
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0b be       	out	0x3b, r0	; 59
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	81 11       	cpse	r24, r1
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <send_lcd+0x8>
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1934:	77 9b       	sbis	0x0e, 7	; 14
    1936:	fe cf       	rjmp	.-4      	; 0x1934 <send_lcd+0xa>
  SPDR = byte;                        //send payload
    1938:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    193a:	77 9b       	sbis	0x0e, 7	; 14
    193c:	fe cf       	rjmp	.-4      	; 0x193a <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    193e:	80 91 62 00 	lds	r24, 0x0062
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	80 93 62 00 	sts	0x0062, r24
    1948:	80 91 62 00 	lds	r24, 0x0062
    194c:	87 7f       	andi	r24, 0xF7	; 247
    194e:	80 93 62 00 	sts	0x0062, r24
    1952:	08 95       	ret

00001954 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
uint8_t refresh_lcd(char lcd_string_array[]) {
    1954:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    1956:	c0 91 00 01 	lds	r28, 0x0100
    195a:	8c 0f       	add	r24, r28
    195c:	91 1d       	adc	r25, r1
    195e:	fc 01       	movw	r30, r24
    1960:	60 81       	ld	r22, Z
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
 i++;   //increment to next character
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	8c 0f       	add	r24, r28
    196c:	80 93 00 01 	sts	0x0100, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    1970:	80 31       	cpi	r24, 0x10	; 16
    1972:	89 f0       	breq	.+34     	; 0x1996 <refresh_lcd+0x42>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1974:	80 32       	cpi	r24, 0x20	; 32
    1976:	11 f0       	breq	.+4      	; 0x197c <refresh_lcd+0x28>

 return i;
}//refresh_lcd
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    197c:	8d e0       	ldi	r24, 0x0D	; 13
    197e:	8a 95       	dec	r24
    1980:	f1 f7       	brne	.-4      	; 0x197e <refresh_lcd+0x2a>
    1982:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1984:	60 e8       	ldi	r22, 0x80	; 128
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    198c:	10 92 00 01 	sts	0x0100, r1
    1990:	80 e0       	ldi	r24, 0x00	; 0

 return i;
}//refresh_lcd
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret
    1996:	fd e0       	ldi	r31, 0x0D	; 13
    1998:	fa 95       	dec	r31
    199a:	f1 f7       	brne	.-4      	; 0x1998 <refresh_lcd+0x44>
    199c:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    199e:	60 ec       	ldi	r22, 0xC0	; 192
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    19a6:	80 91 00 01 	lds	r24, 0x0100
    19aa:	e4 cf       	rjmp	.-56     	; 0x1974 <refresh_lcd+0x20>

000019ac <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	1f 92       	push	r1
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    19c0:	66 0f       	add	r22, r22
    19c2:	66 0f       	add	r22, r22
    19c4:	66 0f       	add	r22, r22
    19c6:	60 5c       	subi	r22, 0xC0	; 192
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	99 83       	std	Y+1, r25	; 0x01
    19cc:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    19d0:	8d e0       	ldi	r24, 0x0D	; 13
    19d2:	8a 95       	dec	r24
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <set_custom_character+0x26>
    19d6:	00 00       	nop
    19d8:	e1 2e       	mov	r14, r17
    19da:	99 81       	ldd	r25, Y+1	; 0x01
    19dc:	f9 2e       	mov	r15, r25
    19de:	87 01       	movw	r16, r14
    19e0:	08 5f       	subi	r16, 0xF8	; 248
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    19e4:	f7 01       	movw	r30, r14
    19e6:	61 91       	ld	r22, Z+
    19e8:	7f 01       	movw	r14, r30
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    19f0:	fd e0       	ldi	r31, 0x0D	; 13
    19f2:	fa 95       	dec	r31
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <set_custom_character+0x46>
    19f6:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    19f8:	e0 16       	cp	r14, r16
    19fa:	f1 06       	cpc	r15, r17
    19fc:	99 f7       	brne	.-26     	; 0x19e4 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	08 95       	ret

00001a0e <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    1a0e:	90 e4       	ldi	r25, 0x40	; 64
    1a10:	89 9f       	mul	r24, r25
    1a12:	60 0d       	add	r22, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	60 5c       	subi	r22, 0xC0	; 192
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001a1e <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    1a1e:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1a20:	88 23       	and	r24, r24
    1a22:	b9 f1       	breq	.+110    	; 0x1a92 <uint2lcd+0x74>
    1a24:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1a26:	84 36       	cpi	r24, 0x64	; 100
    1a28:	98 f4       	brcc	.+38     	; 0x1a50 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1a2a:	8a 30       	cpi	r24, 0x0A	; 10
    1a2c:	d8 f4       	brcc	.+54     	; 0x1a64 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1a2e:	8d ec       	ldi	r24, 0xCD	; 205
    1a30:	c8 9f       	mul	r28, r24
    1a32:	81 2d       	mov	r24, r1
    1a34:	11 24       	eor	r1, r1
    1a36:	86 95       	lsr	r24
    1a38:	86 95       	lsr	r24
    1a3a:	86 95       	lsr	r24
    1a3c:	6c 2f       	mov	r22, r28
    1a3e:	2a e0       	ldi	r18, 0x0A	; 10
    1a40:	82 9f       	mul	r24, r18
    1a42:	60 19       	sub	r22, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	60 5d       	subi	r22, 0xD0	; 208
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1a4a:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1a4c:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1a50:	69 e2       	ldi	r22, 0x29	; 41
    1a52:	86 9f       	mul	r24, r22
    1a54:	61 2d       	mov	r22, r1
    1a56:	11 24       	eor	r1, r1
    1a58:	62 95       	swap	r22
    1a5a:	6f 70       	andi	r22, 0x0F	; 15
    1a5c:	60 5d       	subi	r22, 0xD0	; 208
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1a64:	89 e2       	ldi	r24, 0x29	; 41
    1a66:	c8 9f       	mul	r28, r24
    1a68:	81 2d       	mov	r24, r1
    1a6a:	11 24       	eor	r1, r1
    1a6c:	82 95       	swap	r24
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	9c 2f       	mov	r25, r28
    1a72:	24 e6       	ldi	r18, 0x64	; 100
    1a74:	82 9f       	mul	r24, r18
    1a76:	90 19       	sub	r25, r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	6d ec       	ldi	r22, 0xCD	; 205
    1a7c:	96 9f       	mul	r25, r22
    1a7e:	61 2d       	mov	r22, r1
    1a80:	11 24       	eor	r1, r1
    1a82:	66 95       	lsr	r22
    1a84:	66 95       	lsr	r22
    1a86:	66 95       	lsr	r22
    1a88:	60 5d       	subi	r22, 0xD0	; 208
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1a90:	ce cf       	rjmp	.-100    	; 0x1a2e <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1a92:	60 e3       	ldi	r22, 0x30	; 48
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    1a96:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1a98:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001a9c <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    1a9c:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1a9e:	87 fd       	sbrc	r24, 7
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    1aa2:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    1aa4:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <uint2lcd>
    1aa8:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1aaa:	6d e2       	ldi	r22, 0x2D	; 45
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1ab2:	8d e0       	ldi	r24, 0x0D	; 13
    1ab4:	8a 95       	dec	r24
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <int2lcd+0x18>
    1ab8:	00 00       	nop
    1aba:	8c 2f       	mov	r24, r28
    1abc:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    1abe:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1ac0:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <uint2lcd>

00001ac4 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    1ac4:	6e e0       	ldi	r22, 0x0E	; 14
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001acc <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    1acc:	6c e0       	ldi	r22, 0x0C	; 12
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001ad4 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    1ad4:	6e e1       	ldi	r22, 0x1E	; 30
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001adc <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    1adc:	68 e1       	ldi	r22, 0x18	; 24
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001ae4 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1ae4:	e2 e6       	ldi	r30, 0x62	; 98
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	80 83       	st	Z, r24
    1aee:	80 81       	ld	r24, Z
    1af0:	87 7f       	andi	r24, 0xF7	; 247
    1af2:	80 83       	st	Z, r24
    1af4:	08 95       	ret

00001af6 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1afe:	81 ec       	ldi	r24, 0xC1	; 193
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <clear_display+0xc>
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <clear_display+0x12>
    1b08:	00 00       	nop
    1b0a:	08 95       	ret

00001b0c <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    1b0c:	62 e0       	ldi	r22, 0x02	; 2
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1b14:	86 e7       	ldi	r24, 0x76	; 118
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <cursor_home+0xc>
    1b1c:	00 c0       	rjmp	.+0      	; 0x1b1e <cursor_home+0x12>
    1b1e:	00 00       	nop
    1b20:	08 95       	ret

00001b22 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1b22:	60 ec       	ldi	r22, 0xC0	; 192
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001b2a <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1b2a:	60 e8       	ldi	r22, 0x80	; 128
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001b32 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1b32:	cf 93       	push	r28
    1b34:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    1b36:	60 e2       	ldi	r22, 0x20	; 32
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	8a 95       	dec	r24
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <fill_spaces+0xe>
    1b44:	00 00       	nop
    1b46:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1b48:	b1 f7       	brne	.-20     	; 0x1b36 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1b4a:	cf 91       	pop	r28
    1b4c:	08 95       	ret

00001b4e <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1b4e:	68 2f       	mov	r22, r24
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0c 94 95 0c 	jmp	0x192a	; 0x192a <send_lcd>

00001b56 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	c0 e0       	ldi	r28, 0x00	; 0
    1b64:	f8 01       	movw	r30, r16
    1b66:	e4 0f       	add	r30, r20
    1b68:	f5 1f       	adc	r31, r21
    1b6a:	60 81       	ld	r22, Z
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1b72:	8d e0       	ldi	r24, 0x0D	; 13
    1b74:	8a 95       	dec	r24
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <string2lcd+0x1e>
    1b78:	00 00       	nop
    1b7a:	cf 5f       	subi	r28, 0xFF	; 255
    1b7c:	4c 2f       	mov	r20, r28
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	f8 01       	movw	r30, r16
    1b82:	01 90       	ld	r0, Z+
    1b84:	00 20       	and	r0, r0
    1b86:	e9 f7       	brne	.-6      	; 0x1b82 <string2lcd+0x2c>
    1b88:	9f 01       	movw	r18, r30
    1b8a:	20 1b       	sub	r18, r16
    1b8c:	31 0b       	sbc	r19, r17
    1b8e:	22 50       	subi	r18, 0x02	; 2
    1b90:	31 09       	sbc	r19, r1
    1b92:	24 17       	cp	r18, r20
    1b94:	35 07       	cpc	r19, r21
    1b96:	30 f7       	brcc	.-52     	; 0x1b64 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	08 95       	ret

00001ba0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba0:	8f e9       	ldi	r24, 0x9F	; 159
    1ba2:	9f e0       	ldi	r25, 0x0F	; 15
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <lcd_init+0x4>
    1ba8:	00 c0       	rjmp	.+0      	; 0x1baa <lcd_init+0xa>
    1baa:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1bac:	88 e0       	ldi	r24, 0x08	; 8
    1bae:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    1bb2:	60 e3       	ldi	r22, 0x30	; 48
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1bba:	85 ed       	ldi	r24, 0xD5	; 213
    1bbc:	96 e0       	ldi	r25, 0x06	; 6
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <lcd_init+0x1e>
    1bc2:	00 c0       	rjmp	.+0      	; 0x1bc4 <lcd_init+0x24>
    1bc4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    1bc6:	60 e3       	ldi	r22, 0x30	; 48
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1bce:	85 ed       	ldi	r24, 0xD5	; 213
    1bd0:	96 e0       	ldi	r25, 0x06	; 6
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <lcd_init+0x32>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <lcd_init+0x38>
    1bd8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    1bda:	60 e3       	ldi	r22, 0x30	; 48
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1be2:	85 ed       	ldi	r24, 0xD5	; 213
    1be4:	96 e0       	ldi	r25, 0x06	; 6
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <lcd_init+0x46>
    1bea:	00 c0       	rjmp	.+0      	; 0x1bec <lcd_init+0x4c>
    1bec:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    1bee:	68 e3       	ldi	r22, 0x38	; 56
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1bf6:	81 ee       	ldi	r24, 0xE1	; 225
    1bf8:	94 e0       	ldi	r25, 0x04	; 4
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <lcd_init+0x5a>
    1bfe:	00 c0       	rjmp	.+0      	; 0x1c00 <lcd_init+0x60>
    1c00:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    1c02:	68 e0       	ldi	r22, 0x08	; 8
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1c0a:	81 ee       	ldi	r24, 0xE1	; 225
    1c0c:	94 e0       	ldi	r25, 0x04	; 4
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <lcd_init+0x6e>
    1c12:	00 c0       	rjmp	.+0      	; 0x1c14 <lcd_init+0x74>
    1c14:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1c1e:	81 ee       	ldi	r24, 0xE1	; 225
    1c20:	94 e0       	ldi	r25, 0x04	; 4
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <lcd_init+0x82>
    1c26:	00 c0       	rjmp	.+0      	; 0x1c28 <lcd_init+0x88>
    1c28:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    1c2a:	66 e0       	ldi	r22, 0x06	; 6
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1c32:	81 ee       	ldi	r24, 0xE1	; 225
    1c34:	94 e0       	ldi	r25, 0x04	; 4
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <lcd_init+0x96>
    1c3a:	00 c0       	rjmp	.+0      	; 0x1c3c <lcd_init+0x9c>
    1c3c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    1c3e:	6c e0       	ldi	r22, 0x0C	; 12
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1c46:	81 ee       	ldi	r24, 0xE1	; 225
    1c48:	94 e0       	ldi	r25, 0x04	; 4
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <lcd_init+0xaa>
    1c4e:	00 c0       	rjmp	.+0      	; 0x1c50 <lcd_init+0xb0>
    1c50:	00 00       	nop
    1c52:	08 95       	ret

00001c54 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1c54:	8f 92       	push	r8
    1c56:	9f 92       	push	r9
    1c58:	af 92       	push	r10
    1c5a:	bf 92       	push	r11
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	69 97       	sbiw	r28, 0x19	; 25
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	f4 2e       	mov	r15, r20
    1c7e:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1c80:	00 23       	and	r16, r16
    1c82:	59 f0       	breq	.+22     	; 0x1c9a <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    1c84:	4b 01       	movw	r8, r22
    1c86:	5c 01       	movw	r10, r24
    1c88:	88 24       	eor	r8, r8
    1c8a:	b7 fc       	sbrc	r11, 7
    1c8c:	83 94       	inc	r8
    1c8e:	99 24       	eor	r9, r9
    1c90:	aa 24       	eor	r10, r10
    1c92:	bb 24       	eor	r11, r11
    1c94:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    1c96:	97 fd       	sbrc	r25, 7
    1c98:	8f c0       	rjmp	.+286    	; 0x1db8 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1c9a:	11 23       	and	r17, r17
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <lcd_int32+0x4c>
    1c9e:	84 c0       	rjmp	.+264    	; 0x1da8 <lcd_int32+0x154>
    1ca0:	9e 01       	movw	r18, r28
    1ca2:	2f 5f       	subi	r18, 0xFF	; 255
    1ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca6:	69 01       	movw	r12, r18
    1ca8:	59 01       	movw	r10, r18
    1caa:	88 24       	eor	r8, r8
    1cac:	8a 94       	dec	r8
    1cae:	81 0e       	add	r8, r17
    1cb0:	91 2c       	mov	r9, r1
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	83 1a       	sub	r8, r19
    1cb6:	93 0a       	sbc	r9, r19
    1cb8:	8c 0c       	add	r8, r12
    1cba:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1cbc:	2a e0       	ldi	r18, 0x0A	; 10
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__divmodsi4>
    1cc8:	e6 2f       	mov	r30, r22
    1cca:	2a 8b       	std	Y+18, r18	; 0x12
    1ccc:	3b 8b       	std	Y+19, r19	; 0x13
    1cce:	4c 8b       	std	Y+20, r20	; 0x14
    1cd0:	5d 8b       	std	Y+21, r21	; 0x15
    1cd2:	6a 89       	ldd	r22, Y+18	; 0x12
    1cd4:	7b 89       	ldd	r23, Y+19	; 0x13
    1cd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1cd8:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1cda:	20 e3       	ldi	r18, 0x30	; 48
    1cdc:	2e 0f       	add	r18, r30
    1cde:	f5 01       	movw	r30, r10
    1ce0:	21 93       	st	Z+, r18
    1ce2:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1ce4:	e8 15       	cp	r30, r8
    1ce6:	f9 05       	cpc	r31, r9
    1ce8:	49 f7       	brne	.-46     	; 0x1cbc <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1cea:	bb 24       	eor	r11, r11
    1cec:	b3 94       	inc	r11
    1cee:	b1 0e       	add	r11, r17
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	e1 0f       	add	r30, r17
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	2e e2       	ldi	r18, 0x2E	; 46
    1cf8:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1cfa:	2a e0       	ldi	r18, 0x0A	; 10
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__divmodsi4>
    1d06:	e6 2f       	mov	r30, r22
    1d08:	2a 8b       	std	Y+18, r18	; 0x12
    1d0a:	3b 8b       	std	Y+19, r19	; 0x13
    1d0c:	4c 8b       	std	Y+20, r20	; 0x14
    1d0e:	5d 8b       	std	Y+21, r21	; 0x15
    1d10:	6e 8b       	std	Y+22, r22	; 0x16
    1d12:	7f 8b       	std	Y+23, r23	; 0x17
    1d14:	88 8f       	std	Y+24, r24	; 0x18
    1d16:	99 8f       	std	Y+25, r25	; 0x19
    1d18:	6a 89       	ldd	r22, Y+18	; 0x12
    1d1a:	7b 89       	ldd	r23, Y+19	; 0x13
    1d1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d1e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1d20:	11 e0       	ldi	r17, 0x01	; 1
    1d22:	1b 0d       	add	r17, r11
    1d24:	d6 01       	movw	r26, r12
    1d26:	ab 0d       	add	r26, r11
    1d28:	b1 1d       	adc	r27, r1
    1d2a:	e0 5d       	subi	r30, 0xD0	; 208
    1d2c:	ec 93       	st	X, r30
    1d2e:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1d30:	61 15       	cp	r22, r1
    1d32:	71 05       	cpc	r23, r1
    1d34:	81 05       	cpc	r24, r1
    1d36:	91 05       	cpc	r25, r1
    1d38:	01 f7       	brne	.-64     	; 0x1cfa <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1d3a:	ff 20       	and	r15, r15
    1d3c:	61 f0       	breq	.+24     	; 0x1d56 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1d3e:	e1 10       	cpse	r14, r1
    1d40:	39 c0       	rjmp	.+114    	; 0x1db4 <lcd_int32+0x160>
    1d42:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1d44:	1f 15       	cp	r17, r15
    1d46:	38 f4       	brcc	.+14     	; 0x1d56 <lcd_int32+0x102>
    1d48:	f6 01       	movw	r30, r12
    1d4a:	e1 0f       	add	r30, r17
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	80 83       	st	Z, r24
    1d50:	1f 5f       	subi	r17, 0xFF	; 255
    1d52:	1f 11       	cpse	r17, r15
    1d54:	f9 cf       	rjmp	.-14     	; 0x1d48 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1d56:	00 23       	and	r16, r16
    1d58:	31 f0       	breq	.+12     	; 0x1d66 <lcd_int32+0x112>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	e1 0f       	add	r30, r17
    1d5e:	f1 1d       	adc	r31, r1
    1d60:	8d e2       	ldi	r24, 0x2D	; 45
    1d62:	80 83       	st	Z, r24
    1d64:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1d66:	11 50       	subi	r17, 0x01	; 1
    1d68:	f6 01       	movw	r30, r12
    1d6a:	e1 0f       	add	r30, r17
    1d6c:	f1 1d       	adc	r31, r1
    1d6e:	60 81       	ld	r22, Z
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d76:	3d e0       	ldi	r19, 0x0D	; 13
    1d78:	3a 95       	dec	r19
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <lcd_int32+0x124>
    1d7c:	00 00       	nop
    1d7e:	11 11       	cpse	r17, r1
    1d80:	f2 cf       	rjmp	.-28     	; 0x1d66 <lcd_int32+0x112>

}
    1d82:	69 96       	adiw	r28, 0x19	; 25
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	bf 90       	pop	r11
    1da0:	af 90       	pop	r10
    1da2:	9f 90       	pop	r9
    1da4:	8f 90       	pop	r8
    1da6:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1da8:	b1 2c       	mov	r11, r1
    1daa:	9e 01       	movw	r18, r28
    1dac:	2f 5f       	subi	r18, 0xFF	; 255
    1dae:	3f 4f       	sbci	r19, 0xFF	; 255
    1db0:	69 01       	movw	r12, r18
    1db2:	a3 cf       	rjmp	.-186    	; 0x1cfa <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1db4:	80 e3       	ldi	r24, 0x30	; 48
    1db6:	c6 cf       	rjmp	.-116    	; 0x1d44 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1db8:	90 95       	com	r25
    1dba:	80 95       	com	r24
    1dbc:	70 95       	com	r23
    1dbe:	61 95       	neg	r22
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	69 cf       	rjmp	.-302    	; 0x1c9a <lcd_int32+0x46>

00001dc8 <lcd_int16>:
    1dc8:	5f 92       	push	r5
    1dca:	6f 92       	push	r6
    1dcc:	7f 92       	push	r7
    1dce:	8f 92       	push	r8
    1dd0:	9f 92       	push	r9
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	61 97       	sbiw	r28, 0x11	; 17
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	a6 2e       	mov	r10, r22
    1df8:	54 2e       	mov	r5, r20
    1dfa:	62 2e       	mov	r6, r18
    1dfc:	79 2e       	mov	r7, r25
    1dfe:	77 1c       	adc	r7, r7
    1e00:	77 24       	eor	r7, r7
    1e02:	77 1c       	adc	r7, r7
    1e04:	b7 2c       	mov	r11, r7
    1e06:	c7 2c       	mov	r12, r7
    1e08:	d1 2c       	mov	r13, r1
    1e0a:	ee 27       	eor	r30, r30
    1e0c:	ff 27       	eor	r31, r31
    1e0e:	ec 19       	sub	r30, r12
    1e10:	fd 09       	sbc	r31, r13
    1e12:	8e 27       	eor	r24, r30
    1e14:	9f 27       	eor	r25, r31
    1e16:	fc 01       	movw	r30, r24
    1e18:	ec 0d       	add	r30, r12
    1e1a:	fd 1d       	adc	r31, r13
    1e1c:	44 23       	and	r20, r20
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <lcd_int16+0x5a>
    1e20:	8e c0       	rjmp	.+284    	; 0x1f3e <lcd_int16+0x176>
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	7c 01       	movw	r14, r24
    1e28:	8c 01       	movw	r16, r24
    1e2a:	88 24       	eor	r8, r8
    1e2c:	8a 94       	dec	r8
    1e2e:	84 0e       	add	r8, r20
    1e30:	91 2c       	mov	r9, r1
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	89 1a       	sub	r8, r25
    1e36:	99 0a       	sbc	r9, r25
    1e38:	8e 0c       	add	r8, r14
    1e3a:	9f 1c       	adc	r9, r15
    1e3c:	6a e0       	ldi	r22, 0x0A	; 10
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	cf 01       	movw	r24, r30
    1e42:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
    1e46:	26 2f       	mov	r18, r22
    1e48:	e2 2f       	mov	r30, r18
    1e4a:	f7 2f       	mov	r31, r23
    1e4c:	80 5d       	subi	r24, 0xD0	; 208
    1e4e:	d8 01       	movw	r26, r16
    1e50:	8d 93       	st	X+, r24
    1e52:	8d 01       	movw	r16, r26
    1e54:	a8 15       	cp	r26, r8
    1e56:	b9 05       	cpc	r27, r9
    1e58:	89 f7       	brne	.-30     	; 0x1e3c <lcd_int16+0x74>
    1e5a:	01 e0       	ldi	r16, 0x01	; 1
    1e5c:	05 0d       	add	r16, r5
    1e5e:	d7 01       	movw	r26, r14
    1e60:	a5 0d       	add	r26, r5
    1e62:	b1 1d       	adc	r27, r1
    1e64:	8e e2       	ldi	r24, 0x2E	; 46
    1e66:	8c 93       	st	X, r24
    1e68:	6a e0       	ldi	r22, 0x0A	; 10
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	cf 01       	movw	r24, r30
    1e6e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
    1e72:	26 2f       	mov	r18, r22
    1e74:	e2 2f       	mov	r30, r18
    1e76:	f7 2f       	mov	r31, r23
    1e78:	11 e0       	ldi	r17, 0x01	; 1
    1e7a:	10 0f       	add	r17, r16
    1e7c:	d7 01       	movw	r26, r14
    1e7e:	a0 0f       	add	r26, r16
    1e80:	b1 1d       	adc	r27, r1
    1e82:	80 5d       	subi	r24, 0xD0	; 208
    1e84:	8c 93       	st	X, r24
    1e86:	01 2f       	mov	r16, r17
    1e88:	30 97       	sbiw	r30, 0x00	; 0
    1e8a:	71 f7       	brne	.-36     	; 0x1e68 <lcd_int16+0xa0>
    1e8c:	61 10       	cpse	r6, r1
    1e8e:	15 c0       	rjmp	.+42     	; 0x1eba <lcd_int16+0xf2>
    1e90:	77 20       	and	r7, r7
    1e92:	39 f0       	breq	.+14     	; 0x1ea2 <lcd_int16+0xda>
    1e94:	11 e0       	ldi	r17, 0x01	; 1
    1e96:	10 0f       	add	r17, r16
    1e98:	f7 01       	movw	r30, r14
    1e9a:	e0 0f       	add	r30, r16
    1e9c:	f1 1d       	adc	r31, r1
    1e9e:	8d e2       	ldi	r24, 0x2D	; 45
    1ea0:	80 83       	st	Z, r24
    1ea2:	aa 20       	and	r10, r10
    1ea4:	41 f1       	breq	.+80     	; 0x1ef6 <lcd_int16+0x12e>
    1ea6:	81 2f       	mov	r24, r17
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	2a 2d       	mov	r18, r10
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	82 17       	cp	r24, r18
    1eb0:	93 07       	cpc	r25, r19
    1eb2:	0c f5       	brge	.+66     	; 0x1ef6 <lcd_int16+0x12e>
    1eb4:	b1 2c       	mov	r11, r1
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	0c c0       	rjmp	.+24     	; 0x1ed2 <lcd_int16+0x10a>
    1eba:	aa 20       	and	r10, r10
    1ebc:	a1 f0       	breq	.+40     	; 0x1ee6 <lcd_int16+0x11e>
    1ebe:	81 2f       	mov	r24, r17
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	2a 2d       	mov	r18, r10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	2c 19       	sub	r18, r12
    1ec8:	3d 09       	sbc	r19, r13
    1eca:	82 17       	cp	r24, r18
    1ecc:	93 07       	cpc	r25, r19
    1ece:	5c f4       	brge	.+22     	; 0x1ee6 <lcd_int16+0x11e>
    1ed0:	40 e3       	ldi	r20, 0x30	; 48
    1ed2:	1f 5f       	subi	r17, 0xFF	; 255
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	e8 0f       	add	r30, r24
    1ed8:	f9 1f       	adc	r31, r25
    1eda:	40 83       	st	Z, r20
    1edc:	81 2f       	mov	r24, r17
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	82 17       	cp	r24, r18
    1ee2:	93 07       	cpc	r25, r19
    1ee4:	b4 f3       	brlt	.-20     	; 0x1ed2 <lcd_int16+0x10a>
    1ee6:	bb 20       	and	r11, r11
    1ee8:	31 f0       	breq	.+12     	; 0x1ef6 <lcd_int16+0x12e>
    1eea:	f7 01       	movw	r30, r14
    1eec:	e1 0f       	add	r30, r17
    1eee:	f1 1d       	adc	r31, r1
    1ef0:	8d e2       	ldi	r24, 0x2D	; 45
    1ef2:	80 83       	st	Z, r24
    1ef4:	1f 5f       	subi	r17, 0xFF	; 255
    1ef6:	11 50       	subi	r17, 0x01	; 1
    1ef8:	f7 01       	movw	r30, r14
    1efa:	e1 0f       	add	r30, r17
    1efc:	f1 1d       	adc	r31, r1
    1efe:	60 81       	ld	r22, Z
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	0e 94 95 0c 	call	0x192a	; 0x192a <send_lcd>
    1f06:	9d e0       	ldi	r25, 0x0D	; 13
    1f08:	9a 95       	dec	r25
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <lcd_int16+0x140>
    1f0c:	00 00       	nop
    1f0e:	11 11       	cpse	r17, r1
    1f10:	f2 cf       	rjmp	.-28     	; 0x1ef6 <lcd_int16+0x12e>
    1f12:	61 96       	adiw	r28, 0x11	; 17
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	df 90       	pop	r13
    1f2c:	cf 90       	pop	r12
    1f2e:	bf 90       	pop	r11
    1f30:	af 90       	pop	r10
    1f32:	9f 90       	pop	r9
    1f34:	8f 90       	pop	r8
    1f36:	7f 90       	pop	r7
    1f38:	6f 90       	pop	r6
    1f3a:	5f 90       	pop	r5
    1f3c:	08 95       	ret
    1f3e:	00 e0       	ldi	r16, 0x00	; 0
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	7c 01       	movw	r14, r24
    1f46:	90 cf       	rjmp	.-224    	; 0x1e68 <lcd_int16+0xa0>

00001f48 <main>:


int main(){
TIMSK |= (1<<TOIE0); 
    1f48:	87 b7       	in	r24, 0x37	; 55
    1f4a:	81 60       	ori	r24, 0x01	; 1
    1f4c:	87 bf       	out	0x37, r24	; 55
TCCR0 |= (0<<CS02) | (0<<CS01) | (1<<CS00);  //Normal mode but not 128
    1f4e:	83 b7       	in	r24, 0x33	; 51
    1f50:	81 60       	ori	r24, 0x01	; 1
    1f52:	83 bf       	out	0x33, r24	; 51
//TCCR0 |= (1<<CS00);
ASSR  |= (1 <<AS0);
    1f54:	80 b7       	in	r24, 0x30	; 48
    1f56:	88 60       	ori	r24, 0x08	; 8
    1f58:	80 bf       	out	0x30, r24	; 48

music_init();
    1f5a:	0e 94 18 0c 	call	0x1830	; 0x1830 <music_init>
DDRD = 0x80;
    1f5e:	80 e8       	ldi	r24, 0x80	; 128
    1f60:	81 bb       	out	0x11, r24	; 17
DDRE|=0x08;
    1f62:	13 9a       	sbi	0x02, 3	; 2
TCCR3A |= (1<< COM3A1) |(1<<WGM31);
    1f64:	80 91 8b 00 	lds	r24, 0x008B
    1f68:	82 68       	ori	r24, 0x82	; 130
    1f6a:	80 93 8b 00 	sts	0x008B, r24
TCCR3B |= (1 <<WGM32) | (1 <<CS31);
    1f6e:	80 91 8a 00 	lds	r24, 0x008A
    1f72:	8a 60       	ori	r24, 0x0A	; 10
    1f74:	80 93 8a 00 	sts	0x008A, r24
TCCR3C|=0x00;
    1f78:	80 91 8c 00 	lds	r24, 0x008C
    1f7c:	80 93 8c 00 	sts	0x008C, r24
OCR3A=1000;
    1f80:	88 ee       	ldi	r24, 0xE8	; 232
    1f82:	93 e0       	ldi	r25, 0x03	; 3
    1f84:	90 93 87 00 	sts	0x0087, r25
    1f88:	80 93 86 00 	sts	0x0086, r24

sei();
    1f8c:	78 94       	sei
music_on();
    1f8e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <music_on>





}
    1f92:	ff cf       	rjmp	.-2      	; 0x1f92 <main+0x4a>

00001f94 <__divmodhi4>:
    1f94:	97 fb       	bst	r25, 7
    1f96:	07 2e       	mov	r0, r23
    1f98:	16 f4       	brtc	.+4      	; 0x1f9e <__divmodhi4+0xa>
    1f9a:	00 94       	com	r0
    1f9c:	07 d0       	rcall	.+14     	; 0x1fac <__divmodhi4_neg1>
    1f9e:	77 fd       	sbrc	r23, 7
    1fa0:	09 d0       	rcall	.+18     	; 0x1fb4 <__divmodhi4_neg2>
    1fa2:	0e 94 06 10 	call	0x200c	; 0x200c <__udivmodhi4>
    1fa6:	07 fc       	sbrc	r0, 7
    1fa8:	05 d0       	rcall	.+10     	; 0x1fb4 <__divmodhi4_neg2>
    1faa:	3e f4       	brtc	.+14     	; 0x1fba <__divmodhi4_exit>

00001fac <__divmodhi4_neg1>:
    1fac:	90 95       	com	r25
    1fae:	81 95       	neg	r24
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	08 95       	ret

00001fb4 <__divmodhi4_neg2>:
    1fb4:	70 95       	com	r23
    1fb6:	61 95       	neg	r22
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255

00001fba <__divmodhi4_exit>:
    1fba:	08 95       	ret

00001fbc <__divmodsi4>:
    1fbc:	05 2e       	mov	r0, r21
    1fbe:	97 fb       	bst	r25, 7
    1fc0:	1e f4       	brtc	.+6      	; 0x1fc8 <__divmodsi4+0xc>
    1fc2:	00 94       	com	r0
    1fc4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__negsi2>
    1fc8:	57 fd       	sbrc	r21, 7
    1fca:	07 d0       	rcall	.+14     	; 0x1fda <__divmodsi4_neg2>
    1fcc:	0e 94 1a 10 	call	0x2034	; 0x2034 <__udivmodsi4>
    1fd0:	07 fc       	sbrc	r0, 7
    1fd2:	03 d0       	rcall	.+6      	; 0x1fda <__divmodsi4_neg2>
    1fd4:	4e f4       	brtc	.+18     	; 0x1fe8 <__divmodsi4_exit>
    1fd6:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__negsi2>

00001fda <__divmodsi4_neg2>:
    1fda:	50 95       	com	r21
    1fdc:	40 95       	com	r20
    1fde:	30 95       	com	r19
    1fe0:	21 95       	neg	r18
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fe6:	5f 4f       	sbci	r21, 0xFF	; 255

00001fe8 <__divmodsi4_exit>:
    1fe8:	08 95       	ret

00001fea <__negsi2>:
    1fea:	90 95       	com	r25
    1fec:	80 95       	com	r24
    1fee:	70 95       	com	r23
    1ff0:	61 95       	neg	r22
    1ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	08 95       	ret

00001ffa <__tablejump2__>:
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	00 24       	eor	r0, r0
    2000:	00 1c       	adc	r0, r0
    2002:	0b be       	out	0x3b, r0	; 59
    2004:	07 90       	elpm	r0, Z+
    2006:	f6 91       	elpm	r31, Z
    2008:	e0 2d       	mov	r30, r0
    200a:	09 94       	ijmp

0000200c <__udivmodhi4>:
    200c:	aa 1b       	sub	r26, r26
    200e:	bb 1b       	sub	r27, r27
    2010:	51 e1       	ldi	r21, 0x11	; 17
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <__udivmodhi4_ep>

00002014 <__udivmodhi4_loop>:
    2014:	aa 1f       	adc	r26, r26
    2016:	bb 1f       	adc	r27, r27
    2018:	a6 17       	cp	r26, r22
    201a:	b7 07       	cpc	r27, r23
    201c:	10 f0       	brcs	.+4      	; 0x2022 <__udivmodhi4_ep>
    201e:	a6 1b       	sub	r26, r22
    2020:	b7 0b       	sbc	r27, r23

00002022 <__udivmodhi4_ep>:
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	5a 95       	dec	r21
    2028:	a9 f7       	brne	.-22     	; 0x2014 <__udivmodhi4_loop>
    202a:	80 95       	com	r24
    202c:	90 95       	com	r25
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	08 95       	ret

00002034 <__udivmodsi4>:
    2034:	a1 e2       	ldi	r26, 0x21	; 33
    2036:	1a 2e       	mov	r1, r26
    2038:	aa 1b       	sub	r26, r26
    203a:	bb 1b       	sub	r27, r27
    203c:	fd 01       	movw	r30, r26
    203e:	0d c0       	rjmp	.+26     	; 0x205a <__udivmodsi4_ep>

00002040 <__udivmodsi4_loop>:
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	ee 1f       	adc	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	a2 17       	cp	r26, r18
    204a:	b3 07       	cpc	r27, r19
    204c:	e4 07       	cpc	r30, r20
    204e:	f5 07       	cpc	r31, r21
    2050:	20 f0       	brcs	.+8      	; 0x205a <__udivmodsi4_ep>
    2052:	a2 1b       	sub	r26, r18
    2054:	b3 0b       	sbc	r27, r19
    2056:	e4 0b       	sbc	r30, r20
    2058:	f5 0b       	sbc	r31, r21

0000205a <__udivmodsi4_ep>:
    205a:	66 1f       	adc	r22, r22
    205c:	77 1f       	adc	r23, r23
    205e:	88 1f       	adc	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	1a 94       	dec	r1
    2064:	69 f7       	brne	.-38     	; 0x2040 <__udivmodsi4_loop>
    2066:	60 95       	com	r22
    2068:	70 95       	com	r23
    206a:	80 95       	com	r24
    206c:	90 95       	com	r25
    206e:	9b 01       	movw	r18, r22
    2070:	ac 01       	movw	r20, r24
    2072:	bd 01       	movw	r22, r26
    2074:	cf 01       	movw	r24, r30
    2076:	08 95       	ret

00002078 <_exit>:
    2078:	f8 94       	cli

0000207a <__stop_program>:
    207a:	ff cf       	rjmp	.-2      	; 0x207a <__stop_program>
