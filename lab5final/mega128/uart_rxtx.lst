
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  00800104  00800104  00000da2  2**0
                  ALLOC
  3 .stab         00002c88  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000154f  00000000  00000000  00003a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004f7b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004f8c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_18>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_33>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	2f 05       	cpc	r18, r15
  8e:	06 05       	cpc	r16, r6
  90:	06 05       	cpc	r16, r6
  92:	06 05       	cpc	r16, r6
  94:	06 05       	cpc	r16, r6
  96:	06 05       	cpc	r16, r6
  98:	06 05       	cpc	r16, r6
  9a:	06 05       	cpc	r16, r6
  9c:	2f 05       	cpc	r18, r15
  9e:	06 05       	cpc	r16, r6
  a0:	06 05       	cpc	r16, r6
  a2:	06 05       	cpc	r16, r6
  a4:	06 05       	cpc	r16, r6
  a6:	06 05       	cpc	r16, r6
  a8:	06 05       	cpc	r16, r6
  aa:	06 05       	cpc	r16, r6
  ac:	39 05       	cpc	r19, r9
  ae:	06 05       	cpc	r16, r6
  b0:	06 05       	cpc	r16, r6
  b2:	06 05       	cpc	r16, r6
  b4:	06 05       	cpc	r16, r6
  b6:	06 05       	cpc	r16, r6
  b8:	06 05       	cpc	r16, r6
  ba:	06 05       	cpc	r16, r6
  bc:	06 05       	cpc	r16, r6
  be:	06 05       	cpc	r16, r6
  c0:	06 05       	cpc	r16, r6
  c2:	06 05       	cpc	r16, r6
  c4:	06 05       	cpc	r16, r6
  c6:	06 05       	cpc	r16, r6
  c8:	06 05       	cpc	r16, r6
  ca:	06 05       	cpc	r16, r6
  cc:	39 05       	cpc	r19, r9
  ce:	06 05       	cpc	r16, r6
  d0:	06 05       	cpc	r16, r6
  d2:	06 05       	cpc	r16, r6
  d4:	06 05       	cpc	r16, r6
  d6:	06 05       	cpc	r16, r6
  d8:	06 05       	cpc	r16, r6
  da:	06 05       	cpc	r16, r6
  dc:	06 05       	cpc	r16, r6
  de:	06 05       	cpc	r16, r6
  e0:	06 05       	cpc	r16, r6
  e2:	06 05       	cpc	r16, r6
  e4:	06 05       	cpc	r16, r6
  e6:	06 05       	cpc	r16, r6
  e8:	06 05       	cpc	r16, r6
  ea:	06 05       	cpc	r16, r6
  ec:	50 05       	cpc	r21, r0
  ee:	06 05       	cpc	r16, r6
  f0:	06 05       	cpc	r16, r6
  f2:	06 05       	cpc	r16, r6
  f4:	06 05       	cpc	r16, r6
  f6:	06 05       	cpc	r16, r6
  f8:	06 05       	cpc	r16, r6
  fa:	06 05       	cpc	r16, r6
  fc:	54 05       	cpc	r21, r4
  fe:	06 05       	cpc	r16, r6
 100:	06 05       	cpc	r16, r6
 102:	06 05       	cpc	r16, r6
 104:	06 05       	cpc	r16, r6
 106:	06 05       	cpc	r16, r6
 108:	06 05       	cpc	r16, r6
 10a:	06 05       	cpc	r16, r6
 10c:	06 05       	cpc	r16, r6
 10e:	06 05       	cpc	r16, r6
 110:	06 05       	cpc	r16, r6
 112:	06 05       	cpc	r16, r6
 114:	06 05       	cpc	r16, r6
 116:	06 05       	cpc	r16, r6
 118:	06 05       	cpc	r16, r6
 11a:	06 05       	cpc	r16, r6
 11c:	62 05       	cpc	r22, r2
 11e:	06 05       	cpc	r16, r6
 120:	06 05       	cpc	r16, r6
 122:	06 05       	cpc	r16, r6
 124:	06 05       	cpc	r16, r6
 126:	06 05       	cpc	r16, r6
 128:	06 05       	cpc	r16, r6
 12a:	06 05       	cpc	r16, r6
 12c:	20 05       	cpc	r18, r0

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	ea e0       	ldi	r30, 0x0A	; 10
 142:	fd e0       	ldi	r31, 0x0D	; 13
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a4 30       	cpi	r26, 0x04	; 4
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	22 e0       	ldi	r18, 0x02	; 2
 156:	a4 e0       	ldi	r26, 0x04	; 4
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a0 30       	cpi	r26, 0x00	; 0
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 ac 05 	call	0xb58	; 0xb58 <main>
 168:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <spi_init>:
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;


void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 170:	87 b3       	in	r24, 0x17	; 23
 172:	87 60       	ori	r24, 0x07	; 7
 174:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 176:	8d b1       	in	r24, 0x0d	; 13
 178:	80 65       	ori	r24, 0x50	; 80
 17a:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 17c:	70 9a       	sbi	0x0e, 0	; 14
 17e:	08 95       	ret

00000180 <get_48>:
}//spi_init    

/*************************Test function**********************/
double get_48(){

clear_display();
 180:	0e 94 c3 02 	call	0x586	; 0x586 <clear_display>
	//strcpy(f,lcd_str_h);
	//strcpy(f,'.');
	//strcpy(f,lcd_str_l);
	//string2lcd(" wld al3m");
	//string2lcd(" almhay6y");
	string2lcd("a");	
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>
	string2lcd(lcd_str_array);
 18c:	84 e1       	ldi	r24, 0x14	; 20
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>
	line2_col1();  
 194:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <line2_col1>
	//_delay_us(50);
	string2lcd("h");
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>
	string2lcd(lcd_str_h);
 1a0:	8d e1       	ldi	r24, 0x1D	; 29
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>
	char2lcd('.');          
 1a8:	8e e2       	ldi	r24, 0x2E	; 46
 1aa:	0e 94 ef 02 	call	0x5de	; 0x5de <char2lcd>
  	string2lcd(lcd_str_l);
 1ae:	8b e0       	ldi	r24, 0x0B	; 11
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>
	_delay_ms(50); 
	string2lcd(lcd_str_h);  //write upper half
  	char2lcd('.');          //write decimal point
  	 //string2lcd(lcd_str_l);  //write lower half
	*/  
        rcv_rdy=0;
 1b6:	10 92 08 01 	sts	0x0108, r1
        cursor_home();
 1ba:	0e 94 ce 02 	call	0x59c	; 0x59c <cursor_home>



}
 1be:	08 95       	ret

000001c0 <get_128>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	40 e7       	ldi	r20, 0x70	; 112
 1c4:	52 e0       	ldi	r21, 0x02	; 2
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	40 40       	sbci	r20, 0x00	; 0
 1ca:	50 40       	sbci	r21, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <get_128+0x6>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <get_128+0x10>
 1d0:	00 00       	nop
/*******************************/
double get_128(){

_delay_ms(50); //tenth second wait
  clear_display();                  //wipe the display
 1d2:	0e 94 c3 02 	call	0x586	; 0x586 <clear_display>
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 4);//read temperature data from LM73 (2 bytes) 
 1d6:	44 e0       	ldi	r20, 0x04	; 4
 1d8:	69 ef       	ldi	r22, 0xF9	; 249
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	80 e9       	ldi	r24, 0x90	; 144
 1de:	0e 94 92 05 	call	0xb24	; 0xb24 <twi_start_rd>
 1e2:	8f e3       	ldi	r24, 0x3F	; 63
 1e4:	9f e1       	ldi	r25, 0x1F	; 31
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <get_128+0x26>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <get_128+0x2c>
 1ec:	00 00       	nop
  _delay_ms(2);    //wait for it to finish
  lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
 1ee:	e9 ef       	ldi	r30, 0xF9	; 249
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	80 81       	ld	r24, Z
 1f4:	90 e0       	ldi	r25, 0x00	; 0
  lm73_temp = lm73_temp << 8; //shift it into upper byte 
 1f6:	98 2f       	mov	r25, r24
 1f8:	88 27       	eor	r24, r24
  lm73_temp |= lm73_rd_buf[1];  //"OR" in the low temp byte to lm73_temp 
 1fa:	21 81       	ldd	r18, Z+1	; 0x01
 1fc:	82 2b       	or	r24, r18
 1fe:	90 93 0a 01 	sts	0x010A, r25
 202:	80 93 09 01 	sts	0x0109, r24
  //lm73_temp =
  //itoa(lm73_temp, lcd_string_array, 10); //convert to string in array with itoa() from avr-libc                           
  //string2lcd(lcd_string_array); //send the string to LCD (lcd_functions)
  fp_adc_result = div(lm73_temp, 128);              //do division by 205 (204.8 to be exact)
 206:	60 e8       	ldi	r22, 0x80	; 128
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__divmodhi4>
 20e:	9b 01       	movw	r18, r22
 210:	60 93 23 01 	sts	0x0123, r22
 214:	70 93 24 01 	sts	0x0124, r23
 218:	80 93 25 01 	sts	0x0125, r24
 21c:	90 93 26 01 	sts	0x0126, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 220:	4a e0       	ldi	r20, 0x0A	; 10
 222:	6d e1       	ldi	r22, 0x1D	; 29
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	c9 01       	movw	r24, r18
 228:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__itoa_ncheck>
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 128); //get the decimal fraction into non-fractional form 
 22c:	80 91 25 01 	lds	r24, 0x0125
 230:	90 91 26 01 	lds	r25, 0x0126
 234:	60 e8       	ldi	r22, 0x80	; 128
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	24 e6       	ldi	r18, 0x64	; 100
 23a:	ac 01       	movw	r20, r24
 23c:	24 9f       	mul	r18, r20
 23e:	c0 01       	movw	r24, r0
 240:	25 9f       	mul	r18, r21
 242:	90 0d       	add	r25, r0
 244:	11 24       	eor	r1, r1
 246:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__divmodhi4>
 24a:	9b 01       	movw	r18, r22
 24c:	60 93 19 01 	sts	0x0119, r22
 250:	70 93 1a 01 	sts	0x011A, r23
 254:	80 93 1b 01 	sts	0x011B, r24
 258:	90 93 1c 01 	sts	0x011C, r25
 25c:	4a e0       	ldi	r20, 0x0A	; 10
 25e:	6b e0       	ldi	r22, 0x0B	; 11
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	c9 01       	movw	r24, r18
 264:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__itoa_ncheck>
  itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string



}
 268:	08 95       	ret

0000026a <__vector_18>:

//**************  end tx portion ***************
  }//while
}//main

ISR(USART0_RX_vect){
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
 280:	8c b1       	in	r24, 0x0c	; 12
 282:	80 93 22 01 	sts	0x0122, r24
  lcd_str_array[i++]=rx_char;  //store in array 
 286:	e0 91 05 01 	lds	r30, 0x0105
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	9e 0f       	add	r25, r30
 28e:	90 93 05 01 	sts	0x0105, r25
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ec 5e       	subi	r30, 0xEC	; 236
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
 29a:	81 11       	cpse	r24, r1
 29c:	09 c0       	rjmp	.+18     	; 0x2b0 <__vector_18+0x46>
    rcv_rdy=1; 
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 08 01 	sts	0x0108, r24
    lcd_str_array[--i]  = (' ');     //clear the count field
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
 2a8:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
 2aa:	82 83       	std	Z+2, r24	; 0x02
    i=0;  
 2ac:	10 92 05 01 	sts	0x0105, r1
  }

}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2c6:	5d 9b       	sbis	0x0b, 5	; 11
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <uart_putc>
    UDR0 = data;    // Send data byte
 2ca:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2cc:	5d 9b       	sbis	0x0b, 5	; 11
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <uart_putc+0x6>
}
 2d0:	08 95       	ret

000002d2 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 2d2:	90 91 9b 00 	lds	r25, 0x009B
 2d6:	95 ff       	sbrs	r25, 5
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <uart1_putc>
    UDR1 = data;    // Send data byte
 2da:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 2de:	80 91 9b 00 	lds	r24, 0x009B
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <uart1_putc+0xc>
}
 2e6:	08 95       	ret

000002e8 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 2e8:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 2ea:	90 81       	ld	r25, Z
 2ec:	99 23       	and	r25, r25
 2ee:	49 f0       	breq	.+18     	; 0x302 <uart_puts+0x1a>
 2f0:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2f2:	5d 9b       	sbis	0x0b, 5	; 11
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 2f6:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 2f8:	5d 9b       	sbis	0x0b, 5	; 11
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 2fc:	91 91       	ld	r25, Z+
 2fe:	91 11       	cpse	r25, r1
 300:	f8 cf       	rjmp	.-16     	; 0x2f2 <uart_puts+0xa>
 302:	08 95       	ret

00000304 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 304:	fc 01       	movw	r30, r24
 306:	20 81       	ld	r18, Z
 308:	22 23       	and	r18, r18
 30a:	71 f0       	breq	.+28     	; 0x328 <uart1_puts+0x24>
 30c:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 30e:	90 91 9b 00 	lds	r25, 0x009B
 312:	95 ff       	sbrs	r25, 5
 314:	fc cf       	rjmp	.-8      	; 0x30e <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 316:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 31a:	90 91 9b 00 	lds	r25, 0x009B
 31e:	95 ff       	sbrs	r25, 5
 320:	fc cf       	rjmp	.-8      	; 0x31a <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 322:	21 91       	ld	r18, Z+
 324:	21 11       	cpse	r18, r1
 326:	f3 cf       	rjmp	.-26     	; 0x30e <uart1_puts+0xa>
 328:	08 95       	ret

0000032a <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 32a:	9c 01       	movw	r18, r24
 32c:	fc 01       	movw	r30, r24
 32e:	44 91       	lpm	r20, Z
 330:	44 23       	and	r20, r20
 332:	69 f0       	breq	.+26     	; 0x34e <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	f9 01       	movw	r30, r18
 338:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 33a:	5d 9b       	sbis	0x0b, 5	; 11
 33c:	fe cf       	rjmp	.-4      	; 0x33a <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 33e:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 340:	5d 9b       	sbis	0x0b, 5	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 344:	9c 01       	movw	r18, r24
 346:	fc 01       	movw	r30, r24
 348:	44 91       	lpm	r20, Z
 34a:	41 11       	cpse	r20, r1
 34c:	f3 cf       	rjmp	.-26     	; 0x334 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 34e:	08 95       	ret

00000350 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 350:	8a b1       	in	r24, 0x0a	; 10
 352:	88 69       	ori	r24, 0x98	; 152
 354:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 356:	e5 e9       	ldi	r30, 0x95	; 149
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	86 60       	ori	r24, 0x06	; 6
 35e:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 360:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 364:	87 e6       	ldi	r24, 0x67	; 103
 366:	89 b9       	out	0x09, r24	; 9
 368:	08 95       	ret

0000036a <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 36a:	ea e9       	ldi	r30, 0x9A	; 154
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	88 61       	ori	r24, 0x18	; 24
 372:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 374:	ed e9       	ldi	r30, 0x9D	; 157
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	86 60       	ori	r24, 0x06	; 6
 37c:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 37e:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 382:	87 e6       	ldi	r24, 0x67	; 103
 384:	80 93 99 00 	sts	0x0099, r24
 388:	08 95       	ret

0000038a <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	9e e3       	ldi	r25, 0x3E	; 62
 38e:	02 c0       	rjmp	.+4      	; 0x394 <uart_getc+0xa>
 390:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 392:	21 f0       	breq	.+8      	; 0x39c <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 394:	5f 9b       	sbis	0x0b, 7	; 11
 396:	fc cf       	rjmp	.-8      	; 0x390 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 398:	8c b1       	in	r24, 0x0c	; 12
 39a:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 39c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 39e:	08 95       	ret

000003a0 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	9e e3       	ldi	r25, 0x3E	; 62
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <uart1_getc+0xa>
 3a6:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 3aa:	20 91 9b 00 	lds	r18, 0x009B
 3ae:	27 ff       	sbrs	r18, 7
 3b0:	fa cf       	rjmp	.-12     	; 0x3a6 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 3b2:	80 91 9c 00 	lds	r24, 0x009C
 3b6:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 3b8:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 3ba:	08 95       	ret

000003bc <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	81 11       	cpse	r24, r1
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <send_lcd+0x8>
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3c6:	77 9b       	sbis	0x0e, 7	; 14
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <send_lcd+0xa>
  SPDR = byte;                        //send payload
 3ca:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3cc:	77 9b       	sbis	0x0e, 7	; 14
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3d0:	80 91 62 00 	lds	r24, 0x0062
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	80 93 62 00 	sts	0x0062, r24
 3da:	80 91 62 00 	lds	r24, 0x0062
 3de:	87 7f       	andi	r24, 0xF7	; 247
 3e0:	80 93 62 00 	sts	0x0062, r24
 3e4:	08 95       	ret

000003e6 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 3e6:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 3e8:	c0 91 06 01 	lds	r28, 0x0106
 3ec:	8c 0f       	add	r24, r28
 3ee:	91 1d       	adc	r25, r1
 3f0:	fc 01       	movw	r30, r24
 3f2:	60 81       	ld	r22, Z
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 i++;   //increment to next character
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	8c 0f       	add	r24, r28
 3fe:	80 93 06 01 	sts	0x0106, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 402:	80 31       	cpi	r24, 0x10	; 16
 404:	81 f0       	breq	.+32     	; 0x426 <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 406:	80 32       	cpi	r24, 0x20	; 32
 408:	11 f0       	breq	.+4      	; 0x40e <refresh_lcd+0x28>
}//refresh_lcd
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40e:	85 ed       	ldi	r24, 0xD5	; 213
 410:	8a 95       	dec	r24
 412:	f1 f7       	brne	.-4      	; 0x410 <refresh_lcd+0x2a>
 414:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 416:	60 e8       	ldi	r22, 0x80	; 128
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 41e:	10 92 06 01 	sts	0x0106, r1
}//refresh_lcd
 422:	cf 91       	pop	r28
 424:	08 95       	ret
 426:	f5 ed       	ldi	r31, 0xD5	; 213
 428:	fa 95       	dec	r31
 42a:	f1 f7       	brne	.-4      	; 0x428 <refresh_lcd+0x42>
 42c:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 42e:	60 ec       	ldi	r22, 0xC0	; 192
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 436:	80 91 06 01 	lds	r24, 0x0106
 43a:	e5 cf       	rjmp	.-54     	; 0x406 <refresh_lcd+0x20>

0000043c <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	1f 92       	push	r1
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 450:	66 0f       	add	r22, r22
 452:	66 0f       	add	r22, r22
 454:	66 0f       	add	r22, r22
 456:	60 5c       	subi	r22, 0xC0	; 192
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	99 83       	std	Y+1, r25	; 0x01
 45c:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 460:	85 ed       	ldi	r24, 0xD5	; 213
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <set_custom_character+0x26>
 466:	00 00       	nop
 468:	e1 2e       	mov	r14, r17
 46a:	99 81       	ldd	r25, Y+1	; 0x01
 46c:	f9 2e       	mov	r15, r25
 46e:	87 01       	movw	r16, r14
 470:	08 5f       	subi	r16, 0xF8	; 248
 472:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 474:	f7 01       	movw	r30, r14
 476:	61 91       	ld	r22, Z+
 478:	7f 01       	movw	r14, r30
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 480:	f5 ed       	ldi	r31, 0xD5	; 213
 482:	fa 95       	dec	r31
 484:	f1 f7       	brne	.-4      	; 0x482 <set_custom_character+0x46>
 486:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 488:	e0 16       	cp	r14, r16
 48a:	f1 06       	cpc	r15, r17
 48c:	99 f7       	brne	.-26     	; 0x474 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 48e:	0f 90       	pop	r0
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	08 95       	ret

0000049e <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 49e:	90 e4       	ldi	r25, 0x40	; 64
 4a0:	89 9f       	mul	r24, r25
 4a2:	60 0d       	add	r22, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	60 5c       	subi	r22, 0xC0	; 192
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

000004ae <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 4ae:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 4b0:	88 23       	and	r24, r24
 4b2:	b9 f1       	breq	.+110    	; 0x522 <uint2lcd+0x74>
 4b4:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 4b6:	84 36       	cpi	r24, 0x64	; 100
 4b8:	98 f4       	brcc	.+38     	; 0x4e0 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 4ba:	8a 30       	cpi	r24, 0x0A	; 10
 4bc:	d8 f4       	brcc	.+54     	; 0x4f4 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 4be:	8d ec       	ldi	r24, 0xCD	; 205
 4c0:	c8 9f       	mul	r28, r24
 4c2:	81 2d       	mov	r24, r1
 4c4:	11 24       	eor	r1, r1
 4c6:	86 95       	lsr	r24
 4c8:	86 95       	lsr	r24
 4ca:	86 95       	lsr	r24
 4cc:	6c 2f       	mov	r22, r28
 4ce:	2a e0       	ldi	r18, 0x0A	; 10
 4d0:	82 9f       	mul	r24, r18
 4d2:	60 19       	sub	r22, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	60 5d       	subi	r22, 0xD0	; 208
 4d8:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 4da:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 4dc:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 4e0:	69 e2       	ldi	r22, 0x29	; 41
 4e2:	86 9f       	mul	r24, r22
 4e4:	61 2d       	mov	r22, r1
 4e6:	11 24       	eor	r1, r1
 4e8:	62 95       	swap	r22
 4ea:	6f 70       	andi	r22, 0x0F	; 15
 4ec:	60 5d       	subi	r22, 0xD0	; 208
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 4f4:	89 e2       	ldi	r24, 0x29	; 41
 4f6:	c8 9f       	mul	r28, r24
 4f8:	81 2d       	mov	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	82 95       	swap	r24
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	9c 2f       	mov	r25, r28
 502:	24 e6       	ldi	r18, 0x64	; 100
 504:	82 9f       	mul	r24, r18
 506:	90 19       	sub	r25, r0
 508:	11 24       	eor	r1, r1
 50a:	6d ec       	ldi	r22, 0xCD	; 205
 50c:	96 9f       	mul	r25, r22
 50e:	61 2d       	mov	r22, r1
 510:	11 24       	eor	r1, r1
 512:	66 95       	lsr	r22
 514:	66 95       	lsr	r22
 516:	66 95       	lsr	r22
 518:	60 5d       	subi	r22, 0xD0	; 208
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 520:	ce cf       	rjmp	.-100    	; 0x4be <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 522:	60 e3       	ldi	r22, 0x30	; 48
 524:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 526:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 528:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

0000052c <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 52c:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 52e:	87 fd       	sbrc	r24, 7
 530:	03 c0       	rjmp	.+6      	; 0x538 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 532:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 534:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <uint2lcd>
 538:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 53a:	6d e2       	ldi	r22, 0x2D	; 45
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 542:	85 ed       	ldi	r24, 0xD5	; 213
 544:	8a 95       	dec	r24
 546:	f1 f7       	brne	.-4      	; 0x544 <int2lcd+0x18>
 548:	00 00       	nop
 54a:	8c 2f       	mov	r24, r28
 54c:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 54e:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 550:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <uint2lcd>

00000554 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 554:	6e e0       	ldi	r22, 0x0E	; 14
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

0000055c <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 55c:	6c e0       	ldi	r22, 0x0C	; 12
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

00000564 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 564:	6e e1       	ldi	r22, 0x1E	; 30
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

0000056c <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 56c:	68 e1       	ldi	r22, 0x18	; 24
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

00000574 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 574:	e2 e6       	ldi	r30, 0x62	; 98
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	88 60       	ori	r24, 0x08	; 8
 57c:	80 83       	st	Z, r24
 57e:	80 81       	ld	r24, Z
 580:	87 7f       	andi	r24, 0xF7	; 247
 582:	80 83       	st	Z, r24
 584:	08 95       	ret

00000586 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 58e:	8f e1       	ldi	r24, 0x1F	; 31
 590:	9c e1       	ldi	r25, 0x1C	; 28
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <clear_display+0xc>
 596:	00 c0       	rjmp	.+0      	; 0x598 <clear_display+0x12>
 598:	00 00       	nop
 59a:	08 95       	ret

0000059c <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 5a4:	8f e6       	ldi	r24, 0x6F	; 111
 5a6:	97 e1       	ldi	r25, 0x17	; 23
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <cursor_home+0xc>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <cursor_home+0x12>
 5ae:	00 00       	nop
 5b0:	08 95       	ret

000005b2 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 5b2:	60 ec       	ldi	r22, 0xC0	; 192
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

000005ba <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 5ba:	60 e8       	ldi	r22, 0x80	; 128
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

000005c2 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 5c2:	cf 93       	push	r28
 5c4:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 5c6:	60 e2       	ldi	r22, 0x20	; 32
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 5ce:	85 ed       	ldi	r24, 0xD5	; 213
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <fill_spaces+0xe>
 5d4:	00 00       	nop
 5d6:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 5d8:	b1 f7       	brne	.-20     	; 0x5c6 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 5de:	68 2f       	mov	r22, r24
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <send_lcd>

000005e6 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	c0 e0       	ldi	r28, 0x00	; 0
 5f4:	f8 01       	movw	r30, r16
 5f6:	e4 0f       	add	r30, r20
 5f8:	f5 1f       	adc	r31, r21
 5fa:	60 81       	ld	r22, Z
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 602:	87 ec       	ldi	r24, 0xC7	; 199
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <string2lcd+0x20>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <string2lcd+0x26>
 60c:	00 00       	nop
 60e:	cf 5f       	subi	r28, 0xFF	; 255
 610:	4c 2f       	mov	r20, r28
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	f8 01       	movw	r30, r16
 616:	01 90       	ld	r0, Z+
 618:	00 20       	and	r0, r0
 61a:	e9 f7       	brne	.-6      	; 0x616 <string2lcd+0x30>
 61c:	9f 01       	movw	r18, r30
 61e:	20 1b       	sub	r18, r16
 620:	31 0b       	sbc	r19, r17
 622:	22 50       	subi	r18, 0x02	; 2
 624:	31 09       	sbc	r19, r1
 626:	24 17       	cp	r18, r20
 628:	35 07       	cpc	r19, r21
 62a:	20 f7       	brcc	.-56     	; 0x5f4 <string2lcd+0xe>
  _delay_us(50);  //execution takes 37us per character
  }                  
} 
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	99 ef       	ldi	r25, 0xF9	; 249
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <lcd_init+0x4>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <lcd_init+0xa>
 63e:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 640:	88 e0       	ldi	r24, 0x08	; 8
 642:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 646:	60 e3       	ldi	r22, 0x30	; 48
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 64e:	8f e5       	ldi	r24, 0x5F	; 95
 650:	9d e6       	ldi	r25, 0x6D	; 109
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <lcd_init+0x1e>
 656:	00 c0       	rjmp	.+0      	; 0x658 <lcd_init+0x24>
 658:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 65a:	60 e3       	ldi	r22, 0x30	; 48
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 662:	8f e5       	ldi	r24, 0x5F	; 95
 664:	9d e6       	ldi	r25, 0x6D	; 109
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <lcd_init+0x32>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <lcd_init+0x38>
 66c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 66e:	60 e3       	ldi	r22, 0x30	; 48
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 676:	8f e5       	ldi	r24, 0x5F	; 95
 678:	9d e6       	ldi	r25, 0x6D	; 109
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <lcd_init+0x46>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <lcd_init+0x4c>
 680:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 682:	68 e3       	ldi	r22, 0x38	; 56
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 68a:	8f e1       	ldi	r24, 0x1F	; 31
 68c:	9e e4       	ldi	r25, 0x4E	; 78
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <lcd_init+0x5a>
 692:	00 c0       	rjmp	.+0      	; 0x694 <lcd_init+0x60>
 694:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 696:	68 e0       	ldi	r22, 0x08	; 8
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 69e:	8f e1       	ldi	r24, 0x1F	; 31
 6a0:	9e e4       	ldi	r25, 0x4E	; 78
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <lcd_init+0x6e>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <lcd_init+0x74>
 6a8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 6b2:	8f e1       	ldi	r24, 0x1F	; 31
 6b4:	9e e4       	ldi	r25, 0x4E	; 78
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <lcd_init+0x82>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <lcd_init+0x88>
 6bc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 6be:	66 e0       	ldi	r22, 0x06	; 6
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 6c6:	8f e1       	ldi	r24, 0x1F	; 31
 6c8:	9e e4       	ldi	r25, 0x4E	; 78
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <lcd_init+0x96>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <lcd_init+0x9c>
 6d0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 6d2:	6c e0       	ldi	r22, 0x0C	; 12
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 6da:	8f e1       	ldi	r24, 0x1F	; 31
 6dc:	9e e4       	ldi	r25, 0x4E	; 78
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <lcd_init+0xaa>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <lcd_init+0xb0>
 6e4:	00 00       	nop
 6e6:	08 95       	ret

000006e8 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 6e8:	8f 92       	push	r8
 6ea:	9f 92       	push	r9
 6ec:	af 92       	push	r10
 6ee:	bf 92       	push	r11
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	69 97       	sbiw	r28, 0x19	; 25
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	f4 2e       	mov	r15, r20
 712:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 714:	00 23       	and	r16, r16
 716:	59 f0       	breq	.+22     	; 0x72e <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 718:	4b 01       	movw	r8, r22
 71a:	5c 01       	movw	r10, r24
 71c:	88 24       	eor	r8, r8
 71e:	b7 fc       	sbrc	r11, 7
 720:	83 94       	inc	r8
 722:	99 24       	eor	r9, r9
 724:	aa 24       	eor	r10, r10
 726:	bb 24       	eor	r11, r11
 728:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 72a:	97 fd       	sbrc	r25, 7
 72c:	8f c0       	rjmp	.+286    	; 0x84c <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 72e:	11 23       	and	r17, r17
 730:	09 f4       	brne	.+2      	; 0x734 <lcd_int32+0x4c>
 732:	84 c0       	rjmp	.+264    	; 0x83c <lcd_int32+0x154>
 734:	9e 01       	movw	r18, r28
 736:	2f 5f       	subi	r18, 0xFF	; 255
 738:	3f 4f       	sbci	r19, 0xFF	; 255
 73a:	69 01       	movw	r12, r18
 73c:	59 01       	movw	r10, r18
 73e:	88 24       	eor	r8, r8
 740:	8a 94       	dec	r8
 742:	81 0e       	add	r8, r17
 744:	91 2c       	mov	r9, r1
 746:	3f ef       	ldi	r19, 0xFF	; 255
 748:	83 1a       	sub	r8, r19
 74a:	93 0a       	sbc	r9, r19
 74c:	8c 0c       	add	r8, r12
 74e:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 750:	2a e0       	ldi	r18, 0x0A	; 10
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__divmodsi4>
 75c:	e6 2f       	mov	r30, r22
 75e:	2a 8b       	std	Y+18, r18	; 0x12
 760:	3b 8b       	std	Y+19, r19	; 0x13
 762:	4c 8b       	std	Y+20, r20	; 0x14
 764:	5d 8b       	std	Y+21, r21	; 0x15
 766:	6a 89       	ldd	r22, Y+18	; 0x12
 768:	7b 89       	ldd	r23, Y+19	; 0x13
 76a:	8c 89       	ldd	r24, Y+20	; 0x14
 76c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 76e:	20 e3       	ldi	r18, 0x30	; 48
 770:	2e 0f       	add	r18, r30
 772:	f5 01       	movw	r30, r10
 774:	21 93       	st	Z+, r18
 776:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 778:	e8 15       	cp	r30, r8
 77a:	f9 05       	cpc	r31, r9
 77c:	49 f7       	brne	.-46     	; 0x750 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 77e:	bb 24       	eor	r11, r11
 780:	b3 94       	inc	r11
 782:	b1 0e       	add	r11, r17
 784:	f6 01       	movw	r30, r12
 786:	e1 0f       	add	r30, r17
 788:	f1 1d       	adc	r31, r1
 78a:	2e e2       	ldi	r18, 0x2E	; 46
 78c:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__divmodsi4>
 79a:	e6 2f       	mov	r30, r22
 79c:	2a 8b       	std	Y+18, r18	; 0x12
 79e:	3b 8b       	std	Y+19, r19	; 0x13
 7a0:	4c 8b       	std	Y+20, r20	; 0x14
 7a2:	5d 8b       	std	Y+21, r21	; 0x15
 7a4:	6e 8b       	std	Y+22, r22	; 0x16
 7a6:	7f 8b       	std	Y+23, r23	; 0x17
 7a8:	88 8f       	std	Y+24, r24	; 0x18
 7aa:	99 8f       	std	Y+25, r25	; 0x19
 7ac:	6a 89       	ldd	r22, Y+18	; 0x12
 7ae:	7b 89       	ldd	r23, Y+19	; 0x13
 7b0:	8c 89       	ldd	r24, Y+20	; 0x14
 7b2:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 7b4:	11 e0       	ldi	r17, 0x01	; 1
 7b6:	1b 0d       	add	r17, r11
 7b8:	d6 01       	movw	r26, r12
 7ba:	ab 0d       	add	r26, r11
 7bc:	b1 1d       	adc	r27, r1
 7be:	e0 5d       	subi	r30, 0xD0	; 208
 7c0:	ec 93       	st	X, r30
 7c2:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 7c4:	61 15       	cp	r22, r1
 7c6:	71 05       	cpc	r23, r1
 7c8:	81 05       	cpc	r24, r1
 7ca:	91 05       	cpc	r25, r1
 7cc:	01 f7       	brne	.-64     	; 0x78e <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 7ce:	ff 20       	and	r15, r15
 7d0:	61 f0       	breq	.+24     	; 0x7ea <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 7d2:	e1 10       	cpse	r14, r1
 7d4:	39 c0       	rjmp	.+114    	; 0x848 <lcd_int32+0x160>
 7d6:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 7d8:	1f 15       	cp	r17, r15
 7da:	38 f4       	brcc	.+14     	; 0x7ea <lcd_int32+0x102>
 7dc:	f6 01       	movw	r30, r12
 7de:	e1 0f       	add	r30, r17
 7e0:	f1 1d       	adc	r31, r1
 7e2:	80 83       	st	Z, r24
 7e4:	1f 5f       	subi	r17, 0xFF	; 255
 7e6:	1f 11       	cpse	r17, r15
 7e8:	f9 cf       	rjmp	.-14     	; 0x7dc <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 7ea:	00 23       	and	r16, r16
 7ec:	31 f0       	breq	.+12     	; 0x7fa <lcd_int32+0x112>
 7ee:	f6 01       	movw	r30, r12
 7f0:	e1 0f       	add	r30, r17
 7f2:	f1 1d       	adc	r31, r1
 7f4:	8d e2       	ldi	r24, 0x2D	; 45
 7f6:	80 83       	st	Z, r24
 7f8:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 7fa:	11 50       	subi	r17, 0x01	; 1
 7fc:	f6 01       	movw	r30, r12
 7fe:	e1 0f       	add	r30, r17
 800:	f1 1d       	adc	r31, r1
 802:	60 81       	ld	r22, Z
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 80a:	35 ed       	ldi	r19, 0xD5	; 213
 80c:	3a 95       	dec	r19
 80e:	f1 f7       	brne	.-4      	; 0x80c <lcd_int32+0x124>
 810:	00 00       	nop
 812:	11 11       	cpse	r17, r1
 814:	f2 cf       	rjmp	.-28     	; 0x7fa <lcd_int32+0x112>

}
 816:	69 96       	adiw	r28, 0x19	; 25
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	bf 90       	pop	r11
 834:	af 90       	pop	r10
 836:	9f 90       	pop	r9
 838:	8f 90       	pop	r8
 83a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 83c:	b1 2c       	mov	r11, r1
 83e:	9e 01       	movw	r18, r28
 840:	2f 5f       	subi	r18, 0xFF	; 255
 842:	3f 4f       	sbci	r19, 0xFF	; 255
 844:	69 01       	movw	r12, r18
 846:	a3 cf       	rjmp	.-186    	; 0x78e <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 848:	80 e3       	ldi	r24, 0x30	; 48
 84a:	c6 cf       	rjmp	.-116    	; 0x7d8 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 84c:	90 95       	com	r25
 84e:	80 95       	com	r24
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	69 cf       	rjmp	.-302    	; 0x72e <lcd_int32+0x46>

0000085c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 85c:	5f 92       	push	r5
 85e:	6f 92       	push	r6
 860:	7f 92       	push	r7
 862:	8f 92       	push	r8
 864:	9f 92       	push	r9
 866:	af 92       	push	r10
 868:	bf 92       	push	r11
 86a:	cf 92       	push	r12
 86c:	df 92       	push	r13
 86e:	ef 92       	push	r14
 870:	ff 92       	push	r15
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	61 97       	sbiw	r28, 0x11	; 17
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	a6 2e       	mov	r10, r22
 88c:	54 2e       	mov	r5, r20
 88e:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 890:	79 2e       	mov	r7, r25
 892:	77 1c       	adc	r7, r7
 894:	77 24       	eor	r7, r7
 896:	77 1c       	adc	r7, r7
 898:	b7 2c       	mov	r11, r7
 89a:	c7 2c       	mov	r12, r7
 89c:	d1 2c       	mov	r13, r1
 89e:	ee 27       	eor	r30, r30
 8a0:	ff 27       	eor	r31, r31
 8a2:	ec 19       	sub	r30, r12
 8a4:	fd 09       	sbc	r31, r13
 8a6:	8e 27       	eor	r24, r30
 8a8:	9f 27       	eor	r25, r31
 8aa:	fc 01       	movw	r30, r24
 8ac:	ec 0d       	add	r30, r12
 8ae:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
 8b0:	44 23       	and	r20, r20
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <lcd_int16+0x5a>
 8b4:	8e c0       	rjmp	.+284    	; 0x9d2 <lcd_int16+0x176>
 8b6:	ce 01       	movw	r24, r28
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	7c 01       	movw	r14, r24
 8bc:	8c 01       	movw	r16, r24
 8be:	88 24       	eor	r8, r8
 8c0:	8a 94       	dec	r8
 8c2:	84 0e       	add	r8, r20
 8c4:	91 2c       	mov	r9, r1
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	89 1a       	sub	r8, r25
 8ca:	99 0a       	sbc	r9, r25
 8cc:	8e 0c       	add	r8, r14
 8ce:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 8d0:	6a e0       	ldi	r22, 0x0A	; 10
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	cf 01       	movw	r24, r30
 8d6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__divmodhi4>
 8da:	26 2f       	mov	r18, r22
 8dc:	e2 2f       	mov	r30, r18
 8de:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
 8e0:	80 5d       	subi	r24, 0xD0	; 208
 8e2:	d8 01       	movw	r26, r16
 8e4:	8d 93       	st	X+, r24
 8e6:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 8e8:	a8 15       	cp	r26, r8
 8ea:	b9 05       	cpc	r27, r9
 8ec:	89 f7       	brne	.-30     	; 0x8d0 <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 8ee:	01 e0       	ldi	r16, 0x01	; 1
 8f0:	05 0d       	add	r16, r5
 8f2:	d7 01       	movw	r26, r14
 8f4:	a5 0d       	add	r26, r5
 8f6:	b1 1d       	adc	r27, r1
 8f8:	8e e2       	ldi	r24, 0x2E	; 46
 8fa:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 8fc:	6a e0       	ldi	r22, 0x0A	; 10
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	cf 01       	movw	r24, r30
 902:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__divmodhi4>
 906:	26 2f       	mov	r18, r22
 908:	e2 2f       	mov	r30, r18
 90a:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
 90c:	11 e0       	ldi	r17, 0x01	; 1
 90e:	10 0f       	add	r17, r16
 910:	d7 01       	movw	r26, r14
 912:	a0 0f       	add	r26, r16
 914:	b1 1d       	adc	r27, r1
 916:	80 5d       	subi	r24, 0xD0	; 208
 918:	8c 93       	st	X, r24
 91a:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
 91c:	30 97       	sbiw	r30, 0x00	; 0
 91e:	71 f7       	brne	.-36     	; 0x8fc <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 920:	61 10       	cpse	r6, r1
 922:	15 c0       	rjmp	.+42     	; 0x94e <lcd_int16+0xf2>
 924:	77 20       	and	r7, r7
 926:	39 f0       	breq	.+14     	; 0x936 <lcd_int16+0xda>
        {
                sline[i++] = '-';
 928:	11 e0       	ldi	r17, 0x01	; 1
 92a:	10 0f       	add	r17, r16
 92c:	f7 01       	movw	r30, r14
 92e:	e0 0f       	add	r30, r16
 930:	f1 1d       	adc	r31, r1
 932:	8d e2       	ldi	r24, 0x2D	; 45
 934:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 936:	aa 20       	and	r10, r10
 938:	41 f1       	breq	.+80     	; 0x98a <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 93a:	81 2f       	mov	r24, r17
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	2a 2d       	mov	r18, r10
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	82 17       	cp	r24, r18
 944:	93 07       	cpc	r25, r19
 946:	0c f5       	brge	.+66     	; 0x98a <lcd_int16+0x12e>
 948:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 94a:	40 e2       	ldi	r20, 0x20	; 32
 94c:	0c c0       	rjmp	.+24     	; 0x966 <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 94e:	aa 20       	and	r10, r10
 950:	a1 f0       	breq	.+40     	; 0x97a <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 952:	81 2f       	mov	r24, r17
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	2a 2d       	mov	r18, r10
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	2c 19       	sub	r18, r12
 95c:	3d 09       	sbc	r19, r13
 95e:	82 17       	cp	r24, r18
 960:	93 07       	cpc	r25, r19
 962:	5c f4       	brge	.+22     	; 0x97a <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 964:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 966:	1f 5f       	subi	r17, 0xFF	; 255
 968:	f7 01       	movw	r30, r14
 96a:	e8 0f       	add	r30, r24
 96c:	f9 1f       	adc	r31, r25
 96e:	40 83       	st	Z, r20
 970:	81 2f       	mov	r24, r17
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	82 17       	cp	r24, r18
 976:	93 07       	cpc	r25, r19
 978:	b4 f3       	brlt	.-20     	; 0x966 <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 97a:	bb 20       	and	r11, r11
 97c:	31 f0       	breq	.+12     	; 0x98a <lcd_int16+0x12e>
 97e:	f7 01       	movw	r30, r14
 980:	e1 0f       	add	r30, r17
 982:	f1 1d       	adc	r31, r1
 984:	8d e2       	ldi	r24, 0x2D	; 45
 986:	80 83       	st	Z, r24
 988:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 98a:	11 50       	subi	r17, 0x01	; 1
 98c:	f7 01       	movw	r30, r14
 98e:	e1 0f       	add	r30, r17
 990:	f1 1d       	adc	r31, r1
 992:	60 81       	ld	r22, Z
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 de 01 	call	0x3bc	; 0x3bc <send_lcd>
 99a:	95 ed       	ldi	r25, 0xD5	; 213
 99c:	9a 95       	dec	r25
 99e:	f1 f7       	brne	.-4      	; 0x99c <lcd_int16+0x140>
 9a0:	00 00       	nop
 9a2:	11 11       	cpse	r17, r1
 9a4:	f2 cf       	rjmp	.-28     	; 0x98a <lcd_int16+0x12e>
}
 9a6:	61 96       	adiw	r28, 0x11	; 17
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	f8 94       	cli
 9ac:	de bf       	out	0x3e, r29	; 62
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	cd bf       	out	0x3d, r28	; 61
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	1f 91       	pop	r17
 9b8:	0f 91       	pop	r16
 9ba:	ff 90       	pop	r15
 9bc:	ef 90       	pop	r14
 9be:	df 90       	pop	r13
 9c0:	cf 90       	pop	r12
 9c2:	bf 90       	pop	r11
 9c4:	af 90       	pop	r10
 9c6:	9f 90       	pop	r9
 9c8:	8f 90       	pop	r8
 9ca:	7f 90       	pop	r7
 9cc:	6f 90       	pop	r6
 9ce:	5f 90       	pop	r5
 9d0:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 9d2:	00 e0       	ldi	r16, 0x00	; 0
 9d4:	ce 01       	movw	r24, r28
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	7c 01       	movw	r14, r24
 9da:	90 cf       	rjmp	.-224    	; 0x8fc <lcd_int16+0xa0>

000009dc <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	0b b6       	in	r0, 0x3b	; 59
 9e8:	0f 92       	push	r0
 9ea:	2f 93       	push	r18
 9ec:	3f 93       	push	r19
 9ee:	8f 93       	push	r24
 9f0:	9f 93       	push	r25
 9f2:	af 93       	push	r26
 9f4:	bf 93       	push	r27
 9f6:	ef 93       	push	r30
 9f8:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 9fa:	e0 91 71 00 	lds	r30, 0x0071
 9fe:	8e 2f       	mov	r24, r30
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	fc 01       	movw	r30, r24
 a04:	38 97       	sbiw	r30, 0x08	; 8
 a06:	e1 35       	cpi	r30, 0x51	; 81
 a08:	f1 05       	cpc	r31, r1
 a0a:	b0 f0       	brcs	.+44     	; 0xa38 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 a0c:	80 91 71 00 	lds	r24, 0x0071
 a10:	80 93 fb 01 	sts	0x01FB, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 a14:	84 e0       	ldi	r24, 0x04	; 4
 a16:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 a1a:	ff 91       	pop	r31
 a1c:	ef 91       	pop	r30
 a1e:	bf 91       	pop	r27
 a20:	af 91       	pop	r26
 a22:	9f 91       	pop	r25
 a24:	8f 91       	pop	r24
 a26:	3f 91       	pop	r19
 a28:	2f 91       	pop	r18
 a2a:	0f 90       	pop	r0
 a2c:	0b be       	out	0x3b, r0	; 59
 a2e:	0f 90       	pop	r0
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	0f 90       	pop	r0
 a34:	1f 90       	pop	r1
 a36:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 a38:	ea 5b       	subi	r30, 0xBA	; 186
 a3a:	ff 4f       	sbci	r31, 0xFF	; 255
 a3c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 a40:	80 91 07 01 	lds	r24, 0x0107
 a44:	e0 91 fc 01 	lds	r30, 0x01FC
 a48:	f0 91 fd 01 	lds	r31, 0x01FD
 a4c:	e8 0f       	add	r30, r24
 a4e:	f1 1d       	adc	r31, r1
 a50:	80 91 73 00 	lds	r24, 0x0073
 a54:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 a56:	84 e9       	ldi	r24, 0x94	; 148
 a58:	80 93 74 00 	sts	0x0074, r24
      break;      
 a5c:	de cf       	rjmp	.-68     	; 0xa1a <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 a5e:	80 91 fe 01 	lds	r24, 0x01FE
 a62:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 a66:	10 92 07 01 	sts	0x0107, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 a6a:	85 e8       	ldi	r24, 0x85	; 133
 a6c:	80 93 74 00 	sts	0x0074, r24
      break;
 a70:	d4 cf       	rjmp	.-88     	; 0xa1a <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 a72:	80 91 07 01 	lds	r24, 0x0107
 a76:	90 91 ff 01 	lds	r25, 0x01FF
 a7a:	89 17       	cp	r24, r25
 a7c:	60 f7       	brcc	.-40     	; 0xa56 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 a7e:	e0 91 fc 01 	lds	r30, 0x01FC
 a82:	f0 91 fd 01 	lds	r31, 0x01FD
 a86:	91 e0       	ldi	r25, 0x01	; 1
 a88:	98 0f       	add	r25, r24
 a8a:	90 93 07 01 	sts	0x0107, r25
 a8e:	e8 0f       	add	r30, r24
 a90:	f1 1d       	adc	r31, r1
 a92:	80 81       	ld	r24, Z
 a94:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
 a98:	85 e8       	ldi	r24, 0x85	; 133
 a9a:	80 93 74 00 	sts	0x0074, r24
 a9e:	bd cf       	rjmp	.-134    	; 0xa1a <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 aa0:	85 ea       	ldi	r24, 0xA5	; 165
 aa2:	80 93 74 00 	sts	0x0074, r24
      break;
 aa6:	b9 cf       	rjmp	.-142    	; 0xa1a <__vector_33+0x3e>
 aa8:	20 91 07 01 	lds	r18, 0x0107
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 aac:	80 91 ff 01 	lds	r24, 0x01FF
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	01 97       	sbiw	r24, 0x01	; 1
 ab6:	28 17       	cp	r18, r24
 ab8:	39 07       	cpc	r19, r25
 aba:	dc f4       	brge	.+54     	; 0xaf2 <__vector_33+0x116>
 abc:	85 ec       	ldi	r24, 0xC5	; 197
 abe:	80 93 74 00 	sts	0x0074, r24
 ac2:	ab cf       	rjmp	.-170    	; 0xa1a <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 ac4:	e0 91 fc 01 	lds	r30, 0x01FC
 ac8:	f0 91 fd 01 	lds	r31, 0x01FD
 acc:	80 91 07 01 	lds	r24, 0x0107
 ad0:	21 e0       	ldi	r18, 0x01	; 1
 ad2:	28 0f       	add	r18, r24
 ad4:	20 93 07 01 	sts	0x0107, r18
 ad8:	e8 0f       	add	r30, r24
 ada:	f1 1d       	adc	r31, r1
 adc:	80 91 73 00 	lds	r24, 0x0073
 ae0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 ae2:	80 91 ff 01 	lds	r24, 0x01FF
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	01 97       	sbiw	r24, 0x01	; 1
 aec:	28 17       	cp	r18, r24
 aee:	39 07       	cpc	r19, r25
 af0:	2c f3       	brlt	.-54     	; 0xabc <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 af2:	85 e8       	ldi	r24, 0x85	; 133
 af4:	80 93 74 00 	sts	0x0074, r24
 af8:	90 cf       	rjmp	.-224    	; 0xa1a <__vector_33+0x3e>

00000afa <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 afa:	80 91 74 00 	lds	r24, 0x0074
}
 afe:	81 70       	andi	r24, 0x01	; 1
 b00:	08 95       	ret

00000b02 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 b02:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 b06:	90 fd       	sbrc	r25, 0
 b08:	fc cf       	rjmp	.-8      	; 0xb02 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 b0a:	8e 7f       	andi	r24, 0xFE	; 254
 b0c:	80 93 fe 01 	sts	0x01FE, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 b10:	70 93 fd 01 	sts	0x01FD, r23
 b14:	60 93 fc 01 	sts	0x01FC, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 b18:	40 93 ff 01 	sts	0x01FF, r20
  TWCR = TWCR_START;                    //initiate START
 b1c:	85 ea       	ldi	r24, 0xA5	; 165
 b1e:	80 93 74 00 	sts	0x0074, r24
 b22:	08 95       	ret

00000b24 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 b24:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 b28:	90 fd       	sbrc	r25, 0
 b2a:	fc cf       	rjmp	.-8      	; 0xb24 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 b2c:	81 60       	ori	r24, 0x01	; 1
 b2e:	80 93 fe 01 	sts	0x01FE, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 b32:	70 93 fd 01 	sts	0x01FD, r23
 b36:	60 93 fc 01 	sts	0x01FC, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 b3a:	40 93 ff 01 	sts	0x01FF, r20
  TWCR = TWCR_START;                   //initiate START
 b3e:	85 ea       	ldi	r24, 0xA5	; 165
 b40:	80 93 74 00 	sts	0x0074, r24
 b44:	08 95       	ret

00000b46 <init_twi>:
 b46:	8f ef       	ldi	r24, 0xFF	; 255
 b48:	80 93 73 00 	sts	0x0073, r24
 b4c:	10 92 71 00 	sts	0x0071, r1
 b50:	8c e0       	ldi	r24, 0x0C	; 12
 b52:	80 93 70 00 	sts	0x0070, r24
 b56:	08 95       	ret

00000b58 <main>:


}
int main(){
 // int16_t lm73_temp; 
  DDRF |= 0x08; //lcd strobe bit
 b58:	80 91 61 00 	lds	r24, 0x0061
 b5c:	88 60       	ori	r24, 0x08	; 8
 b5e:	80 93 61 00 	sts	0x0061, r24
  uart_init();  
 b62:	0e 94 a8 01 	call	0x350	; 0x350 <uart_init>
extern uint8_t lm73_rd_buf[2];
int16_t lm73_temp;


void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 b66:	87 b3       	in	r24, 0x17	; 23
 b68:	87 60       	ori	r24, 0x07	; 7
 b6a:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 b6c:	8d b1       	in	r24, 0x0d	; 13
 b6e:	80 65       	ori	r24, 0x50	; 80
 b70:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 b72:	70 9a       	sbi	0x0e, 0	; 14
int main(){
 // int16_t lm73_temp; 
  DDRF |= 0x08; //lcd strobe bit
  uart_init();  
  spi_init();
  lcd_init();
 b74:	0e 94 1a 03 	call	0x634	; 0x634 <lcd_init>
  clear_display();
 b78:	0e 94 c3 02 	call	0x586	; 0x586 <clear_display>
  cursor_home();
 b7c:	0e 94 ce 02 	call	0x59c	; 0x59c <cursor_home>
  init_twi();
 b80:	0e 94 a3 05 	call	0xb46	; 0xb46 <init_twi>

  sei();
 b84:	78 94       	sei
 
lm73_wr_buf[0] = 0x00; //load lm73_wr_buf[0] with temperature pointer address
 b86:	10 92 f7 01 	sts	0x01F7, r1
twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2);//start the TWI write process
 b8a:	42 e0       	ldi	r20, 0x02	; 2
 b8c:	67 ef       	ldi	r22, 0xF7	; 247
 b8e:	71 e0       	ldi	r23, 0x01	; 1
 b90:	80 e9       	ldi	r24, 0x90	; 144
 b92:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b96:	8f e3       	ldi	r24, 0x3F	; 63
 b98:	9f e1       	ldi	r25, 0x1F	; 31
 b9a:	01 97       	sbiw	r24, 0x01	; 1
 b9c:	f1 f7       	brne	.-4      	; 0xb9a <main+0x42>
 b9e:	00 c0       	rjmp	.+0      	; 0xba0 <main+0x48>
 ba0:	00 00       	nop
_delay_ms(2);    //wait for the xfer to finish
clear_display(); //clean up the display
 ba2:	0e 94 c3 02 	call	0x586	; 0x586 <clear_display>

 while(1){

	get_128();
 ba6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <get_128>

//**************  start rcv portion ***************
      if(rcv_rdy==1){
 baa:	80 91 08 01 	lds	r24, 0x0108
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	d1 f7       	brne	.-12     	; 0xba6 <main+0x4e>
	get_48();
 bb2:	0e 94 c0 00 	call	0x180	; 0x180 <get_48>
 bb6:	f7 cf       	rjmp	.-18     	; 0xba6 <main+0x4e>

00000bb8 <__divmodhi4>:
 bb8:	97 fb       	bst	r25, 7
 bba:	07 2e       	mov	r0, r23
 bbc:	16 f4       	brtc	.+4      	; 0xbc2 <__divmodhi4+0xa>
 bbe:	00 94       	com	r0
 bc0:	07 d0       	rcall	.+14     	; 0xbd0 <__divmodhi4_neg1>
 bc2:	77 fd       	sbrc	r23, 7
 bc4:	09 d0       	rcall	.+18     	; 0xbd8 <__divmodhi4_neg2>
 bc6:	0e 94 18 06 	call	0xc30	; 0xc30 <__udivmodhi4>
 bca:	07 fc       	sbrc	r0, 7
 bcc:	05 d0       	rcall	.+10     	; 0xbd8 <__divmodhi4_neg2>
 bce:	3e f4       	brtc	.+14     	; 0xbde <__divmodhi4_exit>

00000bd0 <__divmodhi4_neg1>:
 bd0:	90 95       	com	r25
 bd2:	81 95       	neg	r24
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	08 95       	ret

00000bd8 <__divmodhi4_neg2>:
 bd8:	70 95       	com	r23
 bda:	61 95       	neg	r22
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255

00000bde <__divmodhi4_exit>:
 bde:	08 95       	ret

00000be0 <__divmodsi4>:
 be0:	05 2e       	mov	r0, r21
 be2:	97 fb       	bst	r25, 7
 be4:	1e f4       	brtc	.+6      	; 0xbec <__divmodsi4+0xc>
 be6:	00 94       	com	r0
 be8:	0e 94 07 06 	call	0xc0e	; 0xc0e <__negsi2>
 bec:	57 fd       	sbrc	r21, 7
 bee:	07 d0       	rcall	.+14     	; 0xbfe <__divmodsi4_neg2>
 bf0:	0e 94 2c 06 	call	0xc58	; 0xc58 <__udivmodsi4>
 bf4:	07 fc       	sbrc	r0, 7
 bf6:	03 d0       	rcall	.+6      	; 0xbfe <__divmodsi4_neg2>
 bf8:	4e f4       	brtc	.+18     	; 0xc0c <__divmodsi4_exit>
 bfa:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__negsi2>

00000bfe <__divmodsi4_neg2>:
 bfe:	50 95       	com	r21
 c00:	40 95       	com	r20
 c02:	30 95       	com	r19
 c04:	21 95       	neg	r18
 c06:	3f 4f       	sbci	r19, 0xFF	; 255
 c08:	4f 4f       	sbci	r20, 0xFF	; 255
 c0a:	5f 4f       	sbci	r21, 0xFF	; 255

00000c0c <__divmodsi4_exit>:
 c0c:	08 95       	ret

00000c0e <__negsi2>:
 c0e:	90 95       	com	r25
 c10:	80 95       	com	r24
 c12:	70 95       	com	r23
 c14:	61 95       	neg	r22
 c16:	7f 4f       	sbci	r23, 0xFF	; 255
 c18:	8f 4f       	sbci	r24, 0xFF	; 255
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	08 95       	ret

00000c1e <__tablejump2__>:
 c1e:	ee 0f       	add	r30, r30
 c20:	ff 1f       	adc	r31, r31
 c22:	00 24       	eor	r0, r0
 c24:	00 1c       	adc	r0, r0
 c26:	0b be       	out	0x3b, r0	; 59
 c28:	07 90       	elpm	r0, Z+
 c2a:	f6 91       	elpm	r31, Z
 c2c:	e0 2d       	mov	r30, r0
 c2e:	09 94       	ijmp

00000c30 <__udivmodhi4>:
 c30:	aa 1b       	sub	r26, r26
 c32:	bb 1b       	sub	r27, r27
 c34:	51 e1       	ldi	r21, 0x11	; 17
 c36:	07 c0       	rjmp	.+14     	; 0xc46 <__udivmodhi4_ep>

00000c38 <__udivmodhi4_loop>:
 c38:	aa 1f       	adc	r26, r26
 c3a:	bb 1f       	adc	r27, r27
 c3c:	a6 17       	cp	r26, r22
 c3e:	b7 07       	cpc	r27, r23
 c40:	10 f0       	brcs	.+4      	; 0xc46 <__udivmodhi4_ep>
 c42:	a6 1b       	sub	r26, r22
 c44:	b7 0b       	sbc	r27, r23

00000c46 <__udivmodhi4_ep>:
 c46:	88 1f       	adc	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	5a 95       	dec	r21
 c4c:	a9 f7       	brne	.-22     	; 0xc38 <__udivmodhi4_loop>
 c4e:	80 95       	com	r24
 c50:	90 95       	com	r25
 c52:	bc 01       	movw	r22, r24
 c54:	cd 01       	movw	r24, r26
 c56:	08 95       	ret

00000c58 <__udivmodsi4>:
 c58:	a1 e2       	ldi	r26, 0x21	; 33
 c5a:	1a 2e       	mov	r1, r26
 c5c:	aa 1b       	sub	r26, r26
 c5e:	bb 1b       	sub	r27, r27
 c60:	fd 01       	movw	r30, r26
 c62:	0d c0       	rjmp	.+26     	; 0xc7e <__udivmodsi4_ep>

00000c64 <__udivmodsi4_loop>:
 c64:	aa 1f       	adc	r26, r26
 c66:	bb 1f       	adc	r27, r27
 c68:	ee 1f       	adc	r30, r30
 c6a:	ff 1f       	adc	r31, r31
 c6c:	a2 17       	cp	r26, r18
 c6e:	b3 07       	cpc	r27, r19
 c70:	e4 07       	cpc	r30, r20
 c72:	f5 07       	cpc	r31, r21
 c74:	20 f0       	brcs	.+8      	; 0xc7e <__udivmodsi4_ep>
 c76:	a2 1b       	sub	r26, r18
 c78:	b3 0b       	sbc	r27, r19
 c7a:	e4 0b       	sbc	r30, r20
 c7c:	f5 0b       	sbc	r31, r21

00000c7e <__udivmodsi4_ep>:
 c7e:	66 1f       	adc	r22, r22
 c80:	77 1f       	adc	r23, r23
 c82:	88 1f       	adc	r24, r24
 c84:	99 1f       	adc	r25, r25
 c86:	1a 94       	dec	r1
 c88:	69 f7       	brne	.-38     	; 0xc64 <__udivmodsi4_loop>
 c8a:	60 95       	com	r22
 c8c:	70 95       	com	r23
 c8e:	80 95       	com	r24
 c90:	90 95       	com	r25
 c92:	9b 01       	movw	r18, r22
 c94:	ac 01       	movw	r20, r24
 c96:	bd 01       	movw	r22, r26
 c98:	cf 01       	movw	r24, r30
 c9a:	08 95       	ret

00000c9c <__itoa_ncheck>:
 c9c:	bb 27       	eor	r27, r27
 c9e:	4a 30       	cpi	r20, 0x0A	; 10
 ca0:	31 f4       	brne	.+12     	; 0xcae <__itoa_ncheck+0x12>
 ca2:	99 23       	and	r25, r25
 ca4:	22 f4       	brpl	.+8      	; 0xcae <__itoa_ncheck+0x12>
 ca6:	bd e2       	ldi	r27, 0x2D	; 45
 ca8:	90 95       	com	r25
 caa:	81 95       	neg	r24
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__utoa_common>

00000cb2 <__utoa_ncheck>:
 cb2:	bb 27       	eor	r27, r27

00000cb4 <__utoa_common>:
 cb4:	fb 01       	movw	r30, r22
 cb6:	55 27       	eor	r21, r21
 cb8:	aa 27       	eor	r26, r26
 cba:	88 0f       	add	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	aa 1f       	adc	r26, r26
 cc0:	a4 17       	cp	r26, r20
 cc2:	10 f0       	brcs	.+4      	; 0xcc8 <__utoa_common+0x14>
 cc4:	a4 1b       	sub	r26, r20
 cc6:	83 95       	inc	r24
 cc8:	50 51       	subi	r21, 0x10	; 16
 cca:	b9 f7       	brne	.-18     	; 0xcba <__utoa_common+0x6>
 ccc:	a0 5d       	subi	r26, 0xD0	; 208
 cce:	aa 33       	cpi	r26, 0x3A	; 58
 cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__utoa_common+0x20>
 cd2:	a9 5d       	subi	r26, 0xD9	; 217
 cd4:	a1 93       	st	Z+, r26
 cd6:	00 97       	sbiw	r24, 0x00	; 0
 cd8:	79 f7       	brne	.-34     	; 0xcb8 <__utoa_common+0x4>
 cda:	b1 11       	cpse	r27, r1
 cdc:	b1 93       	st	Z+, r27
 cde:	11 92       	st	Z+, r1
 ce0:	cb 01       	movw	r24, r22
 ce2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <strrev>

00000ce6 <strrev>:
 ce6:	dc 01       	movw	r26, r24
 ce8:	fc 01       	movw	r30, r24
 cea:	67 2f       	mov	r22, r23
 cec:	71 91       	ld	r23, Z+
 cee:	77 23       	and	r23, r23
 cf0:	e1 f7       	brne	.-8      	; 0xcea <strrev+0x4>
 cf2:	32 97       	sbiw	r30, 0x02	; 2
 cf4:	04 c0       	rjmp	.+8      	; 0xcfe <strrev+0x18>
 cf6:	7c 91       	ld	r23, X
 cf8:	6d 93       	st	X+, r22
 cfa:	70 83       	st	Z, r23
 cfc:	62 91       	ld	r22, -Z
 cfe:	ae 17       	cp	r26, r30
 d00:	bf 07       	cpc	r27, r31
 d02:	c8 f3       	brcs	.-14     	; 0xcf6 <strrev+0x10>
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
